
MIX_PAIN_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e118  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a0  0800e300  0800e300  0001e300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3a0  0800f3a0  00020480  2**0
                  CONTENTS
  4 .ARM          00000000  0800f3a0  0800f3a0  00020480  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f3a0  0800f3a0  00020480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3a0  0800f3a0  0001f3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3a4  0800f3a4  0001f3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000480  20000000  0800f3a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000113c  20000480  0800f828  00020480  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800f828  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000204a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ef6  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e5c  00000000  00000000  000383e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  0003c240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001154  00000000  00000000  0003d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4ba  00000000  00000000  0003e9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c967  00000000  00000000  0005ce96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a36ed  00000000  00000000  000797fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074d4  00000000  00000000  0011ceec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001243c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000480 	.word	0x20000480
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e2e8 	.word	0x0800e2e8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000484 	.word	0x20000484
 8000224:	0800e2e8 	.word	0x0800e2e8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	; 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_f2uiz>:
 8000fc4:	0042      	lsls	r2, r0, #1
 8000fc6:	d20e      	bcs.n	8000fe6 <__aeabi_f2uiz+0x22>
 8000fc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fcc:	d30b      	bcc.n	8000fe6 <__aeabi_f2uiz+0x22>
 8000fce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fd6:	d409      	bmi.n	8000fec <__aeabi_f2uiz+0x28>
 8000fd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr
 8000fec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff0:	d101      	bne.n	8000ff6 <__aeabi_f2uiz+0x32>
 8000ff2:	0242      	lsls	r2, r0, #9
 8000ff4:	d102      	bne.n	8000ffc <__aeabi_f2uiz+0x38>
 8000ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffa:	4770      	bx	lr
 8000ffc:	f04f 0000 	mov.w	r0, #0
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_d2lz>:
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	4605      	mov	r5, r0
 8001008:	460c      	mov	r4, r1
 800100a:	2200      	movs	r2, #0
 800100c:	2300      	movs	r3, #0
 800100e:	4628      	mov	r0, r5
 8001010:	4621      	mov	r1, r4
 8001012:	f7ff fdf3 	bl	8000bfc <__aeabi_dcmplt>
 8001016:	b928      	cbnz	r0, 8001024 <__aeabi_d2lz+0x20>
 8001018:	4628      	mov	r0, r5
 800101a:	4621      	mov	r1, r4
 800101c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001020:	f000 b80a 	b.w	8001038 <__aeabi_d2ulz>
 8001024:	4628      	mov	r0, r5
 8001026:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800102a:	f000 f805 	bl	8001038 <__aeabi_d2ulz>
 800102e:	4240      	negs	r0, r0
 8001030:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001034:	bd38      	pop	{r3, r4, r5, pc}
 8001036:	bf00      	nop

08001038 <__aeabi_d2ulz>:
 8001038:	b5d0      	push	{r4, r6, r7, lr}
 800103a:	2200      	movs	r2, #0
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <__aeabi_d2ulz+0x34>)
 800103e:	4606      	mov	r6, r0
 8001040:	460f      	mov	r7, r1
 8001042:	f7ff fb69 	bl	8000718 <__aeabi_dmul>
 8001046:	f7ff fe3f 	bl	8000cc8 <__aeabi_d2uiz>
 800104a:	4604      	mov	r4, r0
 800104c:	f7ff faea 	bl	8000624 <__aeabi_ui2d>
 8001050:	2200      	movs	r2, #0
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <__aeabi_d2ulz+0x38>)
 8001054:	f7ff fb60 	bl	8000718 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4630      	mov	r0, r6
 800105e:	4639      	mov	r1, r7
 8001060:	f7ff f9a2 	bl	80003a8 <__aeabi_dsub>
 8001064:	f7ff fe30 	bl	8000cc8 <__aeabi_d2uiz>
 8001068:	4621      	mov	r1, r4
 800106a:	bdd0      	pop	{r4, r6, r7, pc}
 800106c:	3df00000 	.word	0x3df00000
 8001070:	41f00000 	.word	0x41f00000

08001074 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <_DoInit+0x94>)
 800107c:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2203      	movs	r2, #3
 8001082:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2203      	movs	r2, #3
 8001088:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	4a1f      	ldr	r2, [pc, #124]	; (800110c <_DoInit+0x98>)
 800108e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <_DoInit+0x9c>)
 8001094:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	4a16      	ldr	r2, [pc, #88]	; (800110c <_DoInit+0x98>)
 80010b4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <_DoInit+0xa0>)
 80010ba:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2210      	movs	r2, #16
 80010c0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2200      	movs	r2, #0
 80010c6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	675a      	str	r2, [r3, #116]	; 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	e00c      	b.n	80010f4 <_DoInit+0x80>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f1c3 030f 	rsb	r3, r3, #15
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <_DoInit+0xa4>)
 80010e2:	5cd1      	ldrb	r1, [r2, r3]
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	460a      	mov	r2, r1
 80010ec:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3301      	adds	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	d9ef      	bls.n	80010da <_DoInit+0x66>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000049c 	.word	0x2000049c
 800110c:	0800e300 	.word	0x0800e300
 8001110:	20000544 	.word	0x20000544
 8001114:	20000944 	.word	0x20000944
 8001118:	0800ef08 	.word	0x0800ef08

0800111c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	429a      	cmp	r2, r3
 800113e:	d905      	bls.n	800114c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	3b01      	subs	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
 800114a:	e007      	b.n	800115c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69b9      	ldr	r1, [r7, #24]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	1acb      	subs	r3, r1, r3
 8001156:	4413      	add	r3, r2
 8001158:	3b01      	subs	r3, #1
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001166:	4293      	cmp	r3, r2
 8001168:	bf28      	it	cs
 800116a:	4613      	movcs	r3, r2
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800116e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4293      	cmp	r3, r2
 8001174:	bf28      	it	cs
 8001176:	4613      	movcs	r3, r2
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	4413      	add	r3, r2
 8001182:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8001184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	6978      	ldr	r0, [r7, #20]
 800118a:	f009 f976 	bl	800a47a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800118e:	6a3a      	ldr	r2, [r7, #32]
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	4413      	add	r3, r2
 8001194:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	4413      	add	r3, r2
 800119c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	4413      	add	r3, r2
 80011ac:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d101      	bne.n	80011bc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1b4      	bne.n	8001132 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80011c8:	6a3b      	ldr	r3, [r7, #32]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b088      	sub	sp, #32
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d90f      	bls.n	8001216 <_WriteNoCheck+0x44>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	4413      	add	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	6938      	ldr	r0, [r7, #16]
 8001206:	f009 f938 	bl	800a47a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	441a      	add	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001214:	e01d      	b.n	8001252 <_WriteNoCheck+0x80>
    NumBytesAtOnce = Rem;
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	4413      	add	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	6938      	ldr	r0, [r7, #16]
 800122a:	f009 f926 	bl	800a47a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4413      	add	r3, r2
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4619      	mov	r1, r3
 8001246:	6938      	ldr	r0, [r7, #16]
 8001248:	f009 f917 	bl	800a47a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	60da      	str	r2, [r3, #12]
}
 8001252:	bf00      	nop
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800125a:	b480      	push	{r7}
 800125c:	b087      	sub	sp, #28
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	429a      	cmp	r2, r3
 8001274:	d808      	bhi.n	8001288 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad2      	subs	r2, r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4413      	add	r3, r2
 8001282:	3b01      	subs	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e004      	b.n	8001292 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	3b01      	subs	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001292:	697b      	ldr	r3, [r7, #20]
}
 8001294:	4618      	mov	r0, r3
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
	...

080012a0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4a1f      	ldr	r2, [pc, #124]	; (800133c <SEGGER_RTT_WriteNoLock+0x9c>)
 80012be:	4413      	add	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d029      	beq.n	800131e <SEGGER_RTT_WriteNoLock+0x7e>
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d82e      	bhi.n	800132c <SEGGER_RTT_WriteNoLock+0x8c>
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <SEGGER_RTT_WriteNoLock+0x38>
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d013      	beq.n	80012fe <SEGGER_RTT_WriteNoLock+0x5e>
 80012d6:	e029      	b.n	800132c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80012d8:	6978      	ldr	r0, [r7, #20]
 80012da:	f7ff ffbe 	bl	800125a <_GetAvailWriteSpace>
 80012de:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d202      	bcs.n	80012ee <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80012ec:	e021      	b.n	8001332 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	69b9      	ldr	r1, [r7, #24]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff6b 	bl	80011d2 <_WriteNoCheck>
    break;
 80012fc:	e019      	b.n	8001332 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ffab 	bl	800125a <_GetAvailWriteSpace>
 8001304:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4293      	cmp	r3, r2
 800130c:	bf28      	it	cs
 800130e:	4613      	movcs	r3, r2
 8001310:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	69b9      	ldr	r1, [r7, #24]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff5b 	bl	80011d2 <_WriteNoCheck>
    break;
 800131c:	e009      	b.n	8001332 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	69b9      	ldr	r1, [r7, #24]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff fefa 	bl	800111c <_WriteBlocking>
 8001328:	61f8      	str	r0, [r7, #28]
    break;
 800132a:	e002      	b.n	8001332 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    break;
 8001330:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8001332:	69fb      	ldr	r3, [r7, #28]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000049c 	.word	0x2000049c

08001340 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <SEGGER_RTT_Write+0x48>)
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <SEGGER_RTT_Write+0x1e>
 800135a:	f7ff fe8b 	bl	8001074 <_DoInit>
  SEGGER_RTT_LOCK();
 800135e:	f3ef 8311 	mrs	r3, BASEPRI
 8001362:	f04f 0120 	mov.w	r1, #32
 8001366:	f381 8811 	msr	BASEPRI, r1
 800136a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	68b9      	ldr	r1, [r7, #8]
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f7ff ff95 	bl	80012a0 <SEGGER_RTT_WriteNoLock>
 8001376:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800137e:	697b      	ldr	r3, [r7, #20]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000049c 	.word	0x2000049c

0800138c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff ffce 	bl	8001340 <SEGGER_RTT_Write>
  return len;
 80013a4:	683b      	ldr	r3, [r7, #0]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PE9   ------> S_TIM1_CH1
*/
void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c4:	4b97      	ldr	r3, [pc, #604]	; (8001624 <MX_GPIO_Init+0x274>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a96      	ldr	r2, [pc, #600]	; (8001624 <MX_GPIO_Init+0x274>)
 80013ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b94      	ldr	r3, [pc, #592]	; (8001624 <MX_GPIO_Init+0x274>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013dc:	4b91      	ldr	r3, [pc, #580]	; (8001624 <MX_GPIO_Init+0x274>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a90      	ldr	r2, [pc, #576]	; (8001624 <MX_GPIO_Init+0x274>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b8e      	ldr	r3, [pc, #568]	; (8001624 <MX_GPIO_Init+0x274>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <MX_GPIO_Init+0x274>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a8a      	ldr	r2, [pc, #552]	; (8001624 <MX_GPIO_Init+0x274>)
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <MX_GPIO_Init+0x274>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b85      	ldr	r3, [pc, #532]	; (8001624 <MX_GPIO_Init+0x274>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a84      	ldr	r2, [pc, #528]	; (8001624 <MX_GPIO_Init+0x274>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b82      	ldr	r3, [pc, #520]	; (8001624 <MX_GPIO_Init+0x274>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001424:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <MX_GPIO_Init+0x274>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a7e      	ldr	r2, [pc, #504]	; (8001624 <MX_GPIO_Init+0x274>)
 800142a:	f043 0320 	orr.w	r3, r3, #32
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b7c      	ldr	r3, [pc, #496]	; (8001624 <MX_GPIO_Init+0x274>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0320 	and.w	r3, r3, #32
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PUL11_Pin|EN11_Pin|DIR11_Pin|PUL10_Pin
 800143c:	2200      	movs	r2, #0
 800143e:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8001442:	4879      	ldr	r0, [pc, #484]	; (8001628 <MX_GPIO_Init+0x278>)
 8001444:	f004 fc4b 	bl	8005cde <HAL_GPIO_WritePin>
                          |EN10_Pin|DIR6_Pin|PUL5_Pin|EN5_Pin
                          |DIR5_Pin|PUL4_Pin|EN4_Pin|DIR4_Pin
                          |PUL3_Pin|EN12_Pin|DIR12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR10_Pin|PUL9_Pin|EN9_Pin|DIR9_Pin
 8001448:	2200      	movs	r2, #0
 800144a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800144e:	4877      	ldr	r0, [pc, #476]	; (800162c <MX_GPIO_Init+0x27c>)
 8001450:	f004 fc45 	bl	8005cde <HAL_GPIO_WritePin>
                          |PUL7_Pin|EN7_Pin|EN2_Pin|DIR2_Pin
                          |PUL1_Pin|EN1_Pin|PUL_ALL_16_Pin|DIR_ALL_16_Pin
                          |PUL17_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LAZE_Pin|PUL8_Pin|EN8_Pin|DIR8_Pin
 8001454:	2200      	movs	r2, #0
 8001456:	f248 11f0 	movw	r1, #33264	; 0x81f0
 800145a:	4875      	ldr	r0, [pc, #468]	; (8001630 <MX_GPIO_Init+0x280>)
 800145c:	f004 fc3f 	bl	8005cde <HAL_GPIO_WritePin>
                          |DIR1_Pin|EN_ALL_16_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR7_Pin|PUL6_Pin|EN6_Pin|ST2_Pin
 8001460:	2200      	movs	r2, #0
 8001462:	f24e 31ff 	movw	r1, #58367	; 0xe3ff
 8001466:	4873      	ldr	r0, [pc, #460]	; (8001634 <MX_GPIO_Init+0x284>)
 8001468:	f004 fc39 	bl	8005cde <HAL_GPIO_WritePin>
                          |ST1_Pin|BUZZ_Pin|PUL14_Pin|EN14_Pin
                          |DIR14_Pin|PUL13_Pin|EN13_Pin|DIR13_Pin
                          |PUL12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN3_Pin|DIR3_Pin|PUL2_Pin|EN17_Pin
 800146c:	2200      	movs	r2, #0
 800146e:	f24e 01ff 	movw	r1, #57599	; 0xe0ff
 8001472:	4871      	ldr	r0, [pc, #452]	; (8001638 <MX_GPIO_Init+0x288>)
 8001474:	f004 fc33 	bl	8005cde <HAL_GPIO_WritePin>
                          |DIR17_Pin|PUL16_Pin|EN16_Pin|DIR16_Pin
                          |PUL15_Pin|EN15_Pin|DIR15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PUL11_Pin|EN11_Pin|DIR11_Pin|PUL10_Pin
 8001478:	237f      	movs	r3, #127	; 0x7f
 800147a:	617b      	str	r3, [r7, #20]
                          |EN10_Pin|EN12_Pin|DIR12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001480:	2301      	movs	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4866      	ldr	r0, [pc, #408]	; (8001628 <MX_GPIO_Init+0x278>)
 8001490:	f004 fa7a 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4861      	ldr	r0, [pc, #388]	; (800162c <MX_GPIO_Init+0x27c>)
 80014a6:	f004 fa6f 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DIR10_Pin|PUL9_Pin|EN9_Pin|DIR9_Pin
 80014aa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80014ae:	617b      	str	r3, [r7, #20]
                          |PUL7_Pin|EN7_Pin|EN2_Pin|DIR2_Pin
                          |PUL1_Pin|EN1_Pin|PUL_ALL_16_Pin|DIR_ALL_16_Pin
                          |PUL17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	485a      	ldr	r0, [pc, #360]	; (800162c <MX_GPIO_Init+0x27c>)
 80014c4:	f004 fa60 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT1_Pin|INPUT2_Pin|INPUT3_Pin|INPUT4_Pin;
 80014c8:	230f      	movs	r3, #15
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014cc:	4b5b      	ldr	r3, [pc, #364]	; (800163c <MX_GPIO_Init+0x28c>)
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4855      	ldr	r0, [pc, #340]	; (8001630 <MX_GPIO_Init+0x280>)
 80014dc:	f004 fa54 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LAZE_Pin|PUL8_Pin|EN8_Pin|DIR8_Pin
 80014e0:	f248 13f0 	movw	r3, #33264	; 0x81f0
 80014e4:	617b      	str	r3, [r7, #20]
                          |DIR1_Pin|EN_ALL_16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2302      	movs	r3, #2
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	484d      	ldr	r0, [pc, #308]	; (8001630 <MX_GPIO_Init+0x280>)
 80014fa:	f004 fa45 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DIR7_Pin|PUL6_Pin|EN6_Pin|ST2_Pin
 80014fe:	f24e 33ff 	movw	r3, #58367	; 0xe3ff
 8001502:	617b      	str	r3, [r7, #20]
                          |ST1_Pin|BUZZ_Pin|PUL14_Pin|EN14_Pin
                          |DIR14_Pin|PUL13_Pin|EN13_Pin|DIR13_Pin
                          |PUL12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4847      	ldr	r0, [pc, #284]	; (8001634 <MX_GPIO_Init+0x284>)
 8001518:	f004 fa36 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR6_Pin|PUL5_Pin|EN5_Pin|DIR5_Pin
 800151c:	f64f 5380 	movw	r3, #64896	; 0xfd80
 8001520:	617b      	str	r3, [r7, #20]
                          |PUL4_Pin|EN4_Pin|DIR4_Pin|PUL3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2302      	movs	r3, #2
 800152c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	483c      	ldr	r0, [pc, #240]	; (8001628 <MX_GPIO_Init+0x278>)
 8001536:	f004 fa27 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800153a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2302      	movs	r3, #2
 8001546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4836      	ldr	r0, [pc, #216]	; (8001628 <MX_GPIO_Init+0x278>)
 8001550:	f004 fa1a 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4832      	ldr	r0, [pc, #200]	; (8001634 <MX_GPIO_Init+0x284>)
 800156a:	f004 fa0d 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800156e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001574:	2303      	movs	r3, #3
 8001576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	482e      	ldr	r0, [pc, #184]	; (8001638 <MX_GPIO_Init+0x288>)
 8001580:	f004 fa02 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = EN3_Pin|DIR3_Pin|PUL2_Pin|EN17_Pin
 8001584:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001588:	617b      	str	r3, [r7, #20]
                          |DIR17_Pin|PUL16_Pin|EN16_Pin|DIR16_Pin
                          |PUL15_Pin|EN15_Pin|DIR15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2302      	movs	r3, #2
 8001594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4826      	ldr	r0, [pc, #152]	; (8001638 <MX_GPIO_Init+0x288>)
 800159e:	f004 f9f3 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a8:	2303      	movs	r3, #3
 80015aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	481f      	ldr	r0, [pc, #124]	; (8001630 <MX_GPIO_Init+0x280>)
 80015b4:	f004 f9e8 	bl	8005988 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM1_ENABLE();
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <MX_GPIO_Init+0x290>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	4a1a      	ldr	r2, [pc, #104]	; (8001640 <MX_GPIO_Init+0x290>)
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	210f      	movs	r1, #15
 80015e0:	2006      	movs	r0, #6
 80015e2:	f004 f858 	bl	8005696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015e6:	2006      	movs	r0, #6
 80015e8:	f004 f871 	bl	80056ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 15, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	210f      	movs	r1, #15
 80015f0:	2007      	movs	r0, #7
 80015f2:	f004 f850 	bl	8005696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015f6:	2007      	movs	r0, #7
 80015f8:	f004 f869 	bl	80056ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	210f      	movs	r1, #15
 8001600:	2008      	movs	r0, #8
 8001602:	f004 f848 	bl	8005696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001606:	2008      	movs	r0, #8
 8001608:	f004 f861 	bl	80056ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	210f      	movs	r1, #15
 8001610:	2009      	movs	r0, #9
 8001612:	f004 f840 	bl	8005696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001616:	2009      	movs	r0, #9
 8001618:	f004 f859 	bl	80056ce <HAL_NVIC_EnableIRQ>

}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	; 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	40011800 	.word	0x40011800
 800162c:	40011000 	.word	0x40011000
 8001630:	40010800 	.word	0x40010800
 8001634:	40010c00 	.word	0x40010c00
 8001638:	40011400 	.word	0x40011400
 800163c:	10310000 	.word	0x10310000
 8001640:	40010000 	.word	0x40010000

08001644 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C2_Init+0x50>)
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <MX_I2C2_Init+0x54>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_I2C2_Init+0x50>)
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_I2C2_Init+0x58>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2C2_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_I2C2_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_I2C2_Init+0x50>)
 8001662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001666:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_I2C2_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_I2C2_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_I2C2_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_I2C2_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_I2C2_Init+0x50>)
 8001682:	f004 fb75 	bl	8005d70 <HAL_I2C_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 f952 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000954 	.word	0x20000954
 8001698:	40005800 	.word	0x40005800
 800169c:	000186a0 	.word	0x000186a0

080016a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a16      	ldr	r2, [pc, #88]	; (8001714 <HAL_I2C_MspInit+0x74>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d124      	bne.n	800170a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_I2C_MspInit+0x78>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <HAL_I2C_MspInit+0x78>)
 80016c6:	f043 0308 	orr.w	r3, r3, #8
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_I2C_MspInit+0x78>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016de:	2312      	movs	r3, #18
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <HAL_I2C_MspInit+0x7c>)
 80016ee:	f004 f94b 	bl	8005988 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_I2C_MspInit+0x78>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_I2C_MspInit+0x78>)
 80016f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_I2C_MspInit+0x78>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800170a:	bf00      	nop
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40005800 	.word	0x40005800
 8001718:	40021000 	.word	0x40021000
 800171c:	40010c00 	.word	0x40010c00

08001720 <HAL_UART_RxCpltCallback>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    //app PC //
    if(huart->Instance==huart1.Instance)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_UART_RxCpltCallback+0x2c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d102      	bne.n	800173a <HAL_UART_RxCpltCallback+0x1a>
    {
    	uartAppHandle(&myApp);
 8001734:	4806      	ldr	r0, [pc, #24]	; (8001750 <HAL_UART_RxCpltCallback+0x30>)
 8001736:	f000 fe59 	bl	80023ec <uartAppHandle>
    }
    HAL_UART_Receive_IT(&huart1, &myApp.charRec,1); //app PC
 800173a:	2201      	movs	r2, #1
 800173c:	4904      	ldr	r1, [pc, #16]	; (8001750 <HAL_UART_RxCpltCallback+0x30>)
 800173e:	4803      	ldr	r0, [pc, #12]	; (800174c <HAL_UART_RxCpltCallback+0x2c>)
 8001740:	f006 ff55 	bl	80085ee <HAL_UART_Receive_IT>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000b28 	.word	0x20000b28
 8001750:	20000010 	.word	0x20000010

08001754 <RemapPin_Init>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void RemapPin_Init(void) {
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0

	// remap PA15 to free is GPIO //
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <RemapPin_Init+0x5c>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <RemapPin_Init+0x5c>)
 8001760:	f043 0305 	orr.w	r3, r3, #5
 8001764:	6193      	str	r3, [r2, #24]
	AFIO->MAPR   |= AFIO_MAPR_SWJ_CFG_1;    // To Free PA15
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <RemapPin_Init+0x60>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <RemapPin_Init+0x60>)
 800176c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001770:	6053      	str	r3, [r2, #4]

	// disable jtag //
	__HAL_RCC_AFIO_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <RemapPin_Init+0x5c>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <RemapPin_Init+0x5c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <RemapPin_Init+0x5c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <RemapPin_Init+0x60>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <RemapPin_Init+0x60>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6053      	str	r3, [r2, #4]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017bc:	f003 fe0e 	bl	80053dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c0:	f000 f850 	bl	8001864 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RemapPin_Init();
 80017c4:	f7ff ffc6 	bl	8001754 <RemapPin_Init>
  //SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0 , SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c8:	f7ff fdf2 	bl	80013b0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80017cc:	f7ff ff3a 	bl	8001644 <MX_I2C2_Init>
  MX_TIM4_Init();
 80017d0:	f000 faec 	bl	8001dac <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80017d4:	f000 fcac 	bl	8002130 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80017d8:	f000 fa4e 	bl	8001c78 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017dc:	f000 fa9a 	bl	8001d14 <MX_TIM3_Init>
  MX_TIM5_Init();
 80017e0:	f000 fb32 	bl	8001e48 <MX_TIM5_Init>
  MX_TIM6_Init();
 80017e4:	f000 fb7e 	bl	8001ee4 <MX_TIM6_Init>
  MX_RTC_Init();
 80017e8:	f000 f8aa 	bl	8001940 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80017ec:	f000 fc76 	bl	80020dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &myApp.charRec, 1);          //app PC
 80017f0:	2201      	movs	r2, #1
 80017f2:	4915      	ldr	r1, [pc, #84]	; (8001848 <main+0x90>)
 80017f4:	4815      	ldr	r0, [pc, #84]	; (800184c <main+0x94>)
 80017f6:	f006 fefa 	bl	80085ee <HAL_UART_Receive_IT>
  DISABLE_TIMER_ALARM;
 80017fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001804:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001808:	4013      	ands	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	printf("-----------------------------------------------------\r\n");
 800180c:	4810      	ldr	r0, [pc, #64]	; (8001850 <main+0x98>)
 800180e:	f008 fc2f 	bl	800a070 <puts>
	printf("1.Start Application 07/05/2024 by xuantn93@gmail.com \r\n");
 8001812:	4810      	ldr	r0, [pc, #64]	; (8001854 <main+0x9c>)
 8001814:	f008 fc2c 	bl	800a070 <puts>
	printf("2.CPU_FREQ = %d Hz \r\n",  HAL_RCC_GetSysClockFreq());
 8001818:	f005 fe7c 	bl	8007514 <HAL_RCC_GetSysClockFreq>
 800181c:	4603      	mov	r3, r0
 800181e:	4619      	mov	r1, r3
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <main+0xa0>)
 8001822:	f008 fbb7 	bl	8009f94 <iprintf>
	printf("3.Update Release 20/03/2025 \r\n");
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <main+0xa4>)
 8001828:	f008 fc22 	bl	800a070 <puts>

	HAL_GPIO_WritePin(DIR17_GPIO_Port, DIR17_Pin, 1);
 800182c:	2201      	movs	r2, #1
 800182e:	2102      	movs	r1, #2
 8001830:	480b      	ldr	r0, [pc, #44]	; (8001860 <main+0xa8>)
 8001832:	f004 fa54 	bl	8005cde <HAL_GPIO_WritePin>
	speaker_efect();
 8001836:	f002 fded 	bl	8004414 <speaker_efect>
	pump_init();
 800183a:	f002 fbf5 	bl	8004028 <pump_init>
	loadConfigInEeprom();
 800183e:	f003 f9a7 	bl	8004b90 <loadConfigInEeprom>

	while (1)
	{
      handleAppRequets();
 8001842:	f000 fe1b 	bl	800247c <handleAppRequets>
 8001846:	e7fc      	b.n	8001842 <main+0x8a>
 8001848:	20000010 	.word	0x20000010
 800184c:	20000b28 	.word	0x20000b28
 8001850:	0800e30c 	.word	0x0800e30c
 8001854:	0800e344 	.word	0x0800e344
 8001858:	0800e37c 	.word	0x0800e37c
 800185c:	0800e394 	.word	0x0800e394
 8001860:	40011400 	.word	0x40011400

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b096      	sub	sp, #88	; 0x58
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800186e:	2228      	movs	r2, #40	; 0x28
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f008 fd62 	bl	800a33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001898:	2305      	movs	r3, #5
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800189c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018a6:	2301      	movs	r3, #1
 80018a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018aa:	2301      	movs	r3, #1
 80018ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ae:	2302      	movs	r3, #2
 80018b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 faba 	bl	8006e3c <HAL_RCC_OscConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80018ce:	f000 f831 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d2:	230f      	movs	r3, #15
 80018d4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d6:	2302      	movs	r3, #2
 80018d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	2102      	movs	r1, #2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f005 fd26 	bl	8007340 <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018fa:	f000 f81b 	bl	8001934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018fe:	2301      	movs	r3, #1
 8001900:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001906:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4618      	mov	r0, r3
 800190c:	f005 fea6 	bl	800765c <HAL_RCCEx_PeriphCLKConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001916:	f000 f80d 	bl	8001934 <Error_Handler>
  }
}
 800191a:	bf00      	nop
 800191c:	3758      	adds	r7, #88	; 0x58
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
      }
   if (htim->Instance==TIM6)
      {
      //do something else here
      }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193c:	e7fe      	b.n	800193c <Error_Handler+0x8>
	...

08001940 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <MX_RTC_Init+0x30>)
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <MX_RTC_Init+0x34>)
 8001948:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_RTC_Init+0x30>)
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <MX_RTC_Init+0x30>)
 8001954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001958:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_RTC_Init+0x30>)
 800195c:	f006 f80c 	bl	8007978 <HAL_RTC_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8001966:	f7ff ffe5 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200009a8 	.word	0x200009a8
 8001974:	40002800 	.word	0x40002800

08001978 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <HAL_RTC_MspInit+0x3c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d110      	bne.n	80019ac <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800198a:	f005 fa4b 	bl	8006e24 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RTC_MspInit+0x40>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_RTC_MspInit+0x40>)
 8001994:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_RTC_MspInit+0x40>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RTC_MspInit+0x44>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40002800 	.word	0x40002800
 80019b8:	40021000 	.word	0x40021000
 80019bc:	4242043c 	.word	0x4242043c

080019c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_MspInit+0x40>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <HAL_MspInit+0x40>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6193      	str	r3, [r2, #24]
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_MspInit+0x40>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_MspInit+0x40>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_MspInit+0x40>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_MspInit+0x40>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4a:	f003 fd0d 	bl	8005468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT1_Pin);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f004 f972 	bl	8005d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT2_Pin);
 8001a64:	2002      	movs	r0, #2
 8001a66:	f004 f96b 	bl	8005d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT3_Pin);
 8001a72:	2004      	movs	r0, #4
 8001a74:	f004 f964 	bl	8005d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INPUT4_Pin);
 8001a80:	2008      	movs	r0, #8
 8001a82:	f004 f95d 	bl	8005d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //timer2Handle();
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <TIM2_IRQHandler+0x10>)
 8001a92:	f006 f957 	bl	8007d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200009c0 	.word	0x200009c0

08001aa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  // timer bom mau //
  pump_pwm_handle();
 8001aa4:	f002 fe62 	bl	800476c <pump_pwm_handle>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM3_IRQHandler+0x14>)
 8001aaa:	f006 f94b 	bl	8007d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000a08 	.word	0x20000a08

08001ab8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	// timer khuay mau //



  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM4_IRQHandler+0x10>)
 8001abe:	f006 f941 	bl	8007d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000a50 	.word	0x20000a50

08001acc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <USART1_IRQHandler+0x10>)
 8001ad2:	f006 fdb1 	bl	8008638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000b28 	.word	0x20000b28

08001ae0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <USART3_IRQHandler+0x10>)
 8001ae6:	f006 fda7 	bl	8008638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000b70 	.word	0x20000b70

08001af4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
   dongNapHandle();
 8001af8:	f003 fb14 	bl	8005124 <dongNapHandle>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM5_IRQHandler+0x14>)
 8001afe:	f006 f921 	bl	8007d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000a98 	.word	0x20000a98

08001b0c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	pump_tron_handle();
 8001b10:	f002 fe4c 	bl	80047ac <pump_tron_handle>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <TIM6_IRQHandler+0x14>)
 8001b16:	f006 f915 	bl	8007d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000ae0 	.word	0x20000ae0

08001b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return 1;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <_kill>:

int _kill(int pid, int sig)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b3c:	f008 fc62 	bl	800a404 <__errno>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2216      	movs	r2, #22
 8001b44:	601a      	str	r2, [r3, #0]
  return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_exit>:

void _exit (int status)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffe7 	bl	8001b32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b64:	e7fe      	b.n	8001b64 <_exit+0x12>

08001b66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e00a      	b.n	8001b8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b78:	f3af 8000 	nop.w
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	60ba      	str	r2, [r7, #8]
 8001b84:	b2ca      	uxtb	r2, r1
 8001b86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	dbf0      	blt.n	8001b78 <_read+0x12>
  }

  return len;
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <_isatty>:

int _isatty(int file)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <_sbrk+0x5c>)
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <_sbrk+0x60>)
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <_sbrk+0x64>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <_sbrk+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d207      	bcs.n	8001c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c30:	f008 fbe8 	bl	800a404 <__errno>
 8001c34:	4603      	mov	r3, r0
 8001c36:	220c      	movs	r2, #12
 8001c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	e009      	b.n	8001c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <_sbrk+0x64>)
 8001c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20010000 	.word	0x20010000
 8001c60:	00000400 	.word	0x00000400
 8001c64:	200009bc 	.word	0x200009bc
 8001c68:	200015c0 	.word	0x200015c0

08001c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0308 	add.w	r3, r7, #8
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001c9e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cac:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cc0:	f005 ff63 	bl	8007b8a <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001cca:	f7ff fe33 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480d      	ldr	r0, [pc, #52]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cdc:	f006 f93a 	bl	8007f54 <HAL_TIM_ConfigClockSource>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ce6:	f7ff fe25 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <MX_TIM2_Init+0x98>)
 8001cf8:	f006 fb28 	bl	800834c <HAL_TIMEx_MasterConfigSynchronization>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d02:	f7ff fe17 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200009c0 	.word	0x200009c0

08001d14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  // config timer ~ 10us. -> oldvalue = 49-50us
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_TIM3_Init+0x90>)
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <MX_TIM3_Init+0x94>)
 8001d34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <MX_TIM3_Init+0x90>)
 8001d38:	2247      	movs	r2, #71	; 0x47
 8001d3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_TIM3_Init+0x90>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_TIM3_Init+0x90>)
 8001d44:	2209      	movs	r2, #9
 8001d46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_TIM3_Init+0x90>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_TIM3_Init+0x90>)
 8001d50:	2280      	movs	r2, #128	; 0x80
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d54:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_TIM3_Init+0x90>)
 8001d56:	f005 ff18 	bl	8007b8a <HAL_TIM_Base_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001d60:	f7ff fde8 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MX_TIM3_Init+0x90>)
 8001d72:	f006 f8ef 	bl	8007f54 <HAL_TIM_ConfigClockSource>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001d7c:	f7ff fdda 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d80:	2300      	movs	r3, #0
 8001d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d88:	463b      	mov	r3, r7
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_TIM3_Init+0x90>)
 8001d8e:	f006 fadd 	bl	800834c <HAL_TIMEx_MasterConfigSynchronization>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001d98:	f7ff fdcc 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000a08 	.word	0x20000a08
 8001da8:	40000400 	.word	0x40000400

08001dac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <MX_TIM4_Init+0x98>)
 8001dcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 72*100-1;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001ddc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001de0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dee:	4814      	ldr	r0, [pc, #80]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001df0:	f005 fecb 	bl	8007b8a <HAL_TIM_Base_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001dfa:	f7ff fd9b 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e04:	f107 0308 	add.w	r3, r7, #8
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001e0c:	f006 f8a2 	bl	8007f54 <HAL_TIM_ConfigClockSource>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001e16:	f7ff fd8d 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e22:	463b      	mov	r3, r7
 8001e24:	4619      	mov	r1, r3
 8001e26:	4806      	ldr	r0, [pc, #24]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001e28:	f006 fa90 	bl	800834c <HAL_TIMEx_MasterConfigSynchronization>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001e32:	f7ff fd7f 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000a50 	.word	0x20000a50
 8001e44:	40000800 	.word	0x40000800

08001e48 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */
  // period = 3300 us - > 6 vòng / phút
  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4e:	f107 0308 	add.w	r3, r7, #8
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <MX_TIM5_Init+0x94>)
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <MX_TIM5_Init+0x98>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <MX_TIM5_Init+0x94>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <MX_TIM5_Init+0x94>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 72*400-1;
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <MX_TIM5_Init+0x94>)
 8001e78:	f247 027f 	movw	r2, #28799	; 0x707f
 8001e7c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <MX_TIM5_Init+0x94>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <MX_TIM5_Init+0x94>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e8a:	4814      	ldr	r0, [pc, #80]	; (8001edc <MX_TIM5_Init+0x94>)
 8001e8c:	f005 fe7d 	bl	8007b8a <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001e96:	f7ff fd4d 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480d      	ldr	r0, [pc, #52]	; (8001edc <MX_TIM5_Init+0x94>)
 8001ea8:	f006 f854 	bl	8007f54 <HAL_TIM_ConfigClockSource>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001eb2:	f7ff fd3f 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4806      	ldr	r0, [pc, #24]	; (8001edc <MX_TIM5_Init+0x94>)
 8001ec4:	f006 fa42 	bl	800834c <HAL_TIMEx_MasterConfigSynchronization>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001ece:	f7ff fd31 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000a98 	.word	0x20000a98
 8001ee0:	40000c00 	.word	0x40000c00

08001ee4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eea:	463b      	mov	r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001ef4:	4a15      	ldr	r2, [pc, #84]	; (8001f4c <MX_TIM6_Init+0x68>)
 8001ef6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001efa:	2247      	movs	r2, #71	; 0x47
 8001efc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001f06:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001f14:	f005 fe39 	bl	8007b8a <HAL_TIM_Base_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f1e:	f7ff fd09 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001f30:	f006 fa0c 	bl	800834c <HAL_TIMEx_MasterConfigSynchronization>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f3a:	f7ff fcfb 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000ae0 	.word	0x20000ae0
 8001f4c:	40001000 	.word	0x40001000

08001f50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	; 0x38
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6e:	d114      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f70:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	61d3      	str	r3, [r2, #28]
 8001f7c:	4b50      	ldr	r3, [pc, #320]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	6a3b      	ldr	r3, [r7, #32]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	201c      	movs	r0, #28
 8001f8e:	f003 fb82 	bl	8005696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f92:	201c      	movs	r0, #28
 8001f94:	f003 fb9b 	bl	80056ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f98:	e08d      	b.n	80020b6 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM3)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a49      	ldr	r2, [pc, #292]	; (80020c4 <HAL_TIM_Base_MspInit+0x174>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d114      	bne.n	8001fce <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa4:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	4a45      	ldr	r2, [pc, #276]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	61d3      	str	r3, [r2, #28]
 8001fb0:	4b43      	ldr	r3, [pc, #268]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	201d      	movs	r0, #29
 8001fc2:	f003 fb68 	bl	8005696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fc6:	201d      	movs	r0, #29
 8001fc8:	f003 fb81 	bl	80056ce <HAL_NVIC_EnableIRQ>
}
 8001fcc:	e073      	b.n	80020b6 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM4)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a3d      	ldr	r2, [pc, #244]	; (80020c8 <HAL_TIM_Base_MspInit+0x178>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d13b      	bne.n	8002050 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fd8:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	4a38      	ldr	r2, [pc, #224]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	61d3      	str	r3, [r2, #28]
 8001fe4:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff0:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a32      	ldr	r2, [pc, #200]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001ff6:	f043 0320 	orr.w	r3, r3, #32
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2302      	movs	r3, #2
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201a:	4619      	mov	r1, r3
 800201c:	482b      	ldr	r0, [pc, #172]	; (80020cc <HAL_TIM_Base_MspInit+0x17c>)
 800201e:	f003 fcb3 	bl	8005988 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8002022:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_TIM_Base_MspInit+0x180>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800202e:	637b      	str	r3, [r7, #52]	; 0x34
 8002030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002032:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
 8002038:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <HAL_TIM_Base_MspInit+0x180>)
 800203a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203c:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	201e      	movs	r0, #30
 8002044:	f003 fb27 	bl	8005696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002048:	201e      	movs	r0, #30
 800204a:	f003 fb40 	bl	80056ce <HAL_NVIC_EnableIRQ>
}
 800204e:	e032      	b.n	80020b6 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM5)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <HAL_TIM_Base_MspInit+0x184>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d114      	bne.n	8002084 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	2032      	movs	r0, #50	; 0x32
 8002078:	f003 fb0d 	bl	8005696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800207c:	2032      	movs	r0, #50	; 0x32
 800207e:	f003 fb26 	bl	80056ce <HAL_NVIC_EnableIRQ>
}
 8002082:	e018      	b.n	80020b6 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM6)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_TIM_Base_MspInit+0x188>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d113      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 8002094:	f043 0310 	orr.w	r3, r3, #16
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_TIM_Base_MspInit+0x170>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2036      	movs	r0, #54	; 0x36
 80020ac:	f003 faf3 	bl	8005696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80020b0:	2036      	movs	r0, #54	; 0x36
 80020b2:	f003 fb0c 	bl	80056ce <HAL_NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3738      	adds	r7, #56	; 0x38
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40011400 	.word	0x40011400
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40000c00 	.word	0x40000c00
 80020d8:	40001000 	.word	0x40001000

080020dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_USART1_UART_Init+0x4c>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <MX_USART1_UART_Init+0x50>)
 80020e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_USART1_UART_Init+0x4c>)
 80020e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_USART1_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_USART1_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_USART1_UART_Init+0x4c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_USART1_UART_Init+0x4c>)
 8002102:	220c      	movs	r2, #12
 8002104:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_USART1_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_USART1_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_USART1_UART_Init+0x4c>)
 8002114:	f006 f998 	bl	8008448 <HAL_UART_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800211e:	f7ff fc09 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000b28 	.word	0x20000b28
 800212c:	40013800 	.word	0x40013800

08002130 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <MX_USART3_UART_Init+0x4c>)
 8002136:	4a12      	ldr	r2, [pc, #72]	; (8002180 <MX_USART3_UART_Init+0x50>)
 8002138:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <MX_USART3_UART_Init+0x4c>)
 800213c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002140:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_USART3_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MX_USART3_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <MX_USART3_UART_Init+0x4c>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <MX_USART3_UART_Init+0x4c>)
 8002156:	220c      	movs	r2, #12
 8002158:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <MX_USART3_UART_Init+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <MX_USART3_UART_Init+0x4c>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <MX_USART3_UART_Init+0x4c>)
 8002168:	f006 f96e 	bl	8008448 <HAL_UART_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002172:	f7ff fbdf 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000b70 	.word	0x20000b70
 8002180:	40004800 	.word	0x40004800

08002184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a49      	ldr	r2, [pc, #292]	; (80022c4 <HAL_UART_MspInit+0x140>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d13a      	bne.n	800221a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021a4:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <HAL_UART_MspInit+0x144>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a47      	ldr	r2, [pc, #284]	; (80022c8 <HAL_UART_MspInit+0x144>)
 80021aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <HAL_UART_MspInit+0x144>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_UART_MspInit+0x144>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a41      	ldr	r2, [pc, #260]	; (80022c8 <HAL_UART_MspInit+0x144>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_UART_MspInit+0x144>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	4619      	mov	r1, r3
 80021e8:	4838      	ldr	r0, [pc, #224]	; (80022cc <HAL_UART_MspInit+0x148>)
 80021ea:	f003 fbcd 	bl	8005988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	4832      	ldr	r0, [pc, #200]	; (80022cc <HAL_UART_MspInit+0x148>)
 8002204:	f003 fbc0 	bl	8005988 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2025      	movs	r0, #37	; 0x25
 800220e:	f003 fa42 	bl	8005696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002212:	2025      	movs	r0, #37	; 0x25
 8002214:	f003 fa5b 	bl	80056ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002218:	e050      	b.n	80022bc <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <HAL_UART_MspInit+0x14c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d14b      	bne.n	80022bc <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_UART_MspInit+0x144>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	4a27      	ldr	r2, [pc, #156]	; (80022c8 <HAL_UART_MspInit+0x144>)
 800222a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222e:	61d3      	str	r3, [r2, #28]
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_UART_MspInit+0x144>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_UART_MspInit+0x144>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <HAL_UART_MspInit+0x144>)
 8002242:	f043 0320 	orr.w	r3, r3, #32
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <HAL_UART_MspInit+0x144>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	4619      	mov	r1, r3
 8002268:	481a      	ldr	r0, [pc, #104]	; (80022d4 <HAL_UART_MspInit+0x150>)
 800226a:	f003 fb8d 	bl	8005988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800226e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	4619      	mov	r1, r3
 8002282:	4814      	ldr	r0, [pc, #80]	; (80022d4 <HAL_UART_MspInit+0x150>)
 8002284:	f003 fb80 	bl	8005988 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_UART_MspInit+0x154>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a6:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_UART_MspInit+0x154>)
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2027      	movs	r0, #39	; 0x27
 80022b2:	f003 f9f0 	bl	8005696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022b6:	2027      	movs	r0, #39	; 0x27
 80022b8:	f003 fa09 	bl	80056ce <HAL_NVIC_EnableIRQ>
}
 80022bc:	bf00      	nop
 80022be:	3730      	adds	r7, #48	; 0x30
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010800 	.word	0x40010800
 80022d0:	40004800 	.word	0x40004800
 80022d4:	40011400 	.word	0x40011400
 80022d8:	40010000 	.word	0x40010000

080022dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022dc:	f7ff fcc6 	bl	8001c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e0:	480b      	ldr	r0, [pc, #44]	; (8002310 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022e2:	490c      	ldr	r1, [pc, #48]	; (8002314 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022e4:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e8:	e002      	b.n	80022f0 <LoopCopyDataInit>

080022ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ee:	3304      	adds	r3, #4

080022f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f4:	d3f9      	bcc.n	80022ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f6:	4a09      	ldr	r2, [pc, #36]	; (800231c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022f8:	4c09      	ldr	r4, [pc, #36]	; (8002320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022fc:	e001      	b.n	8002302 <LoopFillZerobss>

080022fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002300:	3204      	adds	r2, #4

08002302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002304:	d3fb      	bcc.n	80022fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002306:	f008 f883 	bl	800a410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800230a:	f7ff fa55 	bl	80017b8 <main>
  bx lr
 800230e:	4770      	bx	lr
  ldr r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002314:	20000480 	.word	0x20000480
  ldr r2, =_sidata
 8002318:	0800f3a8 	.word	0x0800f3a8
  ldr r2, =_sbss
 800231c:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 8002320:	200015bc 	.word	0x200015bc

08002324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC1_2_IRQHandler>

08002326 <HAL_GPIO_EXTI_Callback>:

/*
 * process Interrupt GPIO sensor input
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)  // INPUT1  -> do not connect
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d102      	bne.n	800233c <HAL_GPIO_EXTI_Callback+0x16>
	{
		update_sensor1();
 8002336:	f001 fa9b 	bl	8003870 <update_sensor1>
		update_sensor4();
	}
	else
		;

}
 800233a:	e010      	b.n	800235e <HAL_GPIO_EXTI_Callback+0x38>
	else if (GPIO_Pin == GPIO_PIN_1)  // INPUT 2 // -> OPTIC
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d102      	bne.n	8002348 <HAL_GPIO_EXTI_Callback+0x22>
		update_sensor2();
 8002342:	f001 fab3 	bl	80038ac <update_sensor2>
}
 8002346:	e00a      	b.n	800235e <HAL_GPIO_EXTI_Callback+0x38>
	else if (GPIO_Pin == GPIO_PIN_2)  // INPUT 3 // OPEN DOOR
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	2b04      	cmp	r3, #4
 800234c:	d102      	bne.n	8002354 <HAL_GPIO_EXTI_Callback+0x2e>
		update_sensor3();
 800234e:	f001 fad3 	bl	80038f8 <update_sensor3>
}
 8002352:	e004      	b.n	800235e <HAL_GPIO_EXTI_Callback+0x38>
	else if (GPIO_Pin == GPIO_PIN_3)  // INPUT4 -- CLOSE DOOR
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	2b08      	cmp	r3, #8
 8002358:	d101      	bne.n	800235e <HAL_GPIO_EXTI_Callback+0x38>
		update_sensor4();
 800235a:	f001 faf3 	bl	8003944 <update_sensor4>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <SendToApp>:



// @+data+#\n\r
void SendToApp(uint8_t selectCom,const char *fmt, ...)
{
 8002368:	b40e      	push	{r1, r2, r3}
 800236a:	b580      	push	{r7, lr}
 800236c:	b087      	sub	sp, #28
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
	static char buffer1[256];
	unsigned int len=0;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
	va_list args;
	va_start(args, fmt);
 8002378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237c:	613b      	str	r3, [r7, #16]
	vsnprintf(buffer1, sizeof(buffer1), fmt, args);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002386:	4816      	ldr	r0, [pc, #88]	; (80023e0 <SendToApp+0x78>)
 8002388:	f007 ff34 	bl	800a1f4 <vsniprintf>
	va_end(args);
	len=strlen(buffer1);
 800238c:	4814      	ldr	r0, [pc, #80]	; (80023e0 <SendToApp+0x78>)
 800238e:	f7fd ff4b 	bl	8000228 <strlen>
 8002392:	6178      	str	r0, [r7, #20]

	char header[1];
	//header + data: @data
	header[0]=APP_FRAME_START;
 8002394:	2340      	movs	r3, #64	; 0x40
 8002396:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&UART_RS232,header,1,100);
 8002398:	f107 010c 	add.w	r1, r7, #12
 800239c:	2364      	movs	r3, #100	; 0x64
 800239e:	2201      	movs	r2, #1
 80023a0:	4810      	ldr	r0, [pc, #64]	; (80023e4 <SendToApp+0x7c>)
 80023a2:	f006 f8a1 	bl	80084e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&UART_RS232,buffer1,len,100);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	2364      	movs	r3, #100	; 0x64
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <SendToApp+0x78>)
 80023ae:	480d      	ldr	r0, [pc, #52]	; (80023e4 <SendToApp+0x7c>)
 80023b0:	f006 f89a 	bl	80084e8 <HAL_UART_Transmit>

    // footer: #\n\r
	header[0]=APP_FRAME_STOP;
 80023b4:	2323      	movs	r3, #35	; 0x23
 80023b6:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&UART_RS232,header,1,100);
 80023b8:	f107 010c 	add.w	r1, r7, #12
 80023bc:	2364      	movs	r3, #100	; 0x64
 80023be:	2201      	movs	r2, #1
 80023c0:	4808      	ldr	r0, [pc, #32]	; (80023e4 <SendToApp+0x7c>)
 80023c2:	f006 f891 	bl	80084e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&UART_RS232,"\r\n",2,100);
 80023c6:	2364      	movs	r3, #100	; 0x64
 80023c8:	2202      	movs	r2, #2
 80023ca:	4907      	ldr	r1, [pc, #28]	; (80023e8 <SendToApp+0x80>)
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <SendToApp+0x7c>)
 80023ce:	f006 f88b 	bl	80084e8 <HAL_UART_Transmit>
}
 80023d2:	bf00      	nop
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023dc:	b003      	add	sp, #12
 80023de:	4770      	bx	lr
 80023e0:	20000c00 	.word	0x20000c00
 80023e4:	20000b70 	.word	0x20000b70
 80023e8:	0800e3b4 	.word	0x0800e3b4

080023ec <uartAppHandle>:

void uartAppHandle(App *myUart)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	//LOG("rx=%c",myUart->charRec );

	if(myUart->charRec==APP_FRAME_STOP)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b23      	cmp	r3, #35	; 0x23
 80023fa:	d105      	bne.n	8002408 <uartAppHandle+0x1c>
	{
		myUart->enReadFrame=false;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	709a      	strb	r2, [r3, #2]
		myUart->dataDoneFrame=true;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	705a      	strb	r2, [r3, #1]
	}
	if(myUart->enReadFrame)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	789b      	ldrb	r3, [r3, #2]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00d      	beq.n	800242c <uartAppHandle+0x40>
	{
		myUart->arrData[myUart->countCharRec]=myUart->charRec;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	889b      	ldrh	r3, [r3, #4]
 8002414:	4619      	mov	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	440b      	add	r3, r1
 800241e:	719a      	strb	r2, [r3, #6]
		myUart->countCharRec++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	889b      	ldrh	r3, [r3, #4]
 8002424:	3301      	adds	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	809a      	strh	r2, [r3, #4]
	}

	if(myUart->charRec==APP_FRAME_START)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d102      	bne.n	800243a <uartAppHandle+0x4e>
		myUart->enReadFrame=true;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	709a      	strb	r2, [r3, #2]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <uartAppClear>:

void uartAppClear(App *myUart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	myUart->charRec=0;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
	myUart->dataDoneFrame=false;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	705a      	strb	r2, [r3, #1]
	myUart->enReadFrame=false;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	709a      	strb	r2, [r3, #2]
	memset(myUart->arrData,0,sizeof(myUart->arrData));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3306      	adds	r3, #6
 8002462:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f007 ff67 	bl	800a33c <memset>
	myUart->countCharRec=0;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	809a      	strh	r2, [r3, #4]
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <handleAppRequets>:
bool bomMauStart	 = false;
uint16_t countFinish = 0;
bool huyLenh 		 = false;
//-----------------------------------------------------------
void handleAppRequets()
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	// test xung //
	//test_motor();

	// test_microstep();
	// first time check LAZE and BOX sensor //
	UpdateStatus();
 8002480:	f001 fd5a 	bl	8003f38 <UpdateStatus>
	if (read_sensor3 == 0)
 8002484:	2102      	movs	r1, #2
 8002486:	4819      	ldr	r0, [pc, #100]	; (80024ec <handleAppRequets+0x70>)
 8002488:	f003 fc12 	bl	8005cb0 <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d105      	bne.n	800249e <handleAppRequets+0x22>
		HAL_GPIO_WritePin(LAZE_GPIO_Port, LAZE_Pin, 1);
 8002492:	2201      	movs	r2, #1
 8002494:	2110      	movs	r1, #16
 8002496:	4815      	ldr	r0, [pc, #84]	; (80024ec <handleAppRequets+0x70>)
 8002498:	f003 fc21 	bl	8005cde <HAL_GPIO_WritePin>
 800249c:	e004      	b.n	80024a8 <handleAppRequets+0x2c>
	else
		HAL_GPIO_WritePin(LAZE_GPIO_Port, LAZE_Pin, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2110      	movs	r1, #16
 80024a2:	4812      	ldr	r0, [pc, #72]	; (80024ec <handleAppRequets+0x70>)
 80024a4:	f003 fc1b 	bl	8005cde <HAL_GPIO_WritePin>

	//test_all();
	while(1)
	{
		sensorTask();
 80024a8:	f000 fc64 	bl	8002d74 <sensorTask>
		ledTask();
 80024ac:	f000 fce6 	bl	8002e7c <ledTask>
		uartTask();
 80024b0:	f000 fd04 	bl	8002ebc <uartTask>
		doorTask(NULL);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 fef1 	bl	800329c <doorTask>
		controlMotorTask();
 80024ba:	f000 f927 	bl	800270c <controlMotorTask>
		AlarmTask();
 80024be:	f002 f981 	bl	80047c4 <AlarmTask>
		checkSensor();
 80024c2:	f001 fd33 	bl	8003f2c <checkSensor>

		if(getAlarm_RuaDauPhun())   // sua loi dang bom thi rua dau phun //
 80024c6:	f002 fea7 	bl	8005218 <getAlarm_RuaDauPhun>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0eb      	beq.n	80024a8 <handleAppRequets+0x2c>
		{
			setAlarm_RuaDauPhun(0);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f002 fead 	bl	8005230 <setAlarm_RuaDauPhun>
			if(s_pump_machine == PUMP_MACHINE_IDLE)  // neu pump busy, do not action//
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <handleAppRequets+0x74>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <handleAppRequets+0x68>
				ruaDauPhun();
 80024de:	f000 fa05 	bl	80028ec <ruaDauPhun>
 80024e2:	e7e1      	b.n	80024a8 <handleAppRequets+0x2c>
			else
			{
				printf(" Pump BUSY --> ko rua dau phun \n\r");
 80024e4:	4803      	ldr	r0, [pc, #12]	; (80024f4 <handleAppRequets+0x78>)
 80024e6:	f007 fd55 	bl	8009f94 <iprintf>
		sensorTask();
 80024ea:	e7dd      	b.n	80024a8 <handleAppRequets+0x2c>
 80024ec:	40010800 	.word	0x40010800
 80024f0:	20000bf7 	.word	0x20000bf7
 80024f4:	0800e3b8 	.word	0x0800e3b8

080024f8 <allPumpIsSleep>:
		bomMau[i].sleep=RUN;
	}
}

void allPumpIsSleep()
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
	for(int i=0;i<16;i++)
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	e016      	b.n	8002532 <allPumpIsSleep+0x3a>
	{
		bomMau[i].sleep=SLEEP;
 8002504:	4938      	ldr	r1, [pc, #224]	; (80025e8 <allPumpIsSleep+0xf0>)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	440b      	add	r3, r1
 8002512:	3301      	adds	r3, #1
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
		bomMau[i].Counter_Ton = 0;
 8002518:	4933      	ldr	r1, [pc, #204]	; (80025e8 <allPumpIsSleep+0xf0>)
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	440b      	add	r3, r1
 8002526:	3330      	adds	r3, #48	; 0x30
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
	for(int i=0;i<16;i++)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3301      	adds	r3, #1
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	dde5      	ble.n	8002504 <allPumpIsSleep+0xc>
	}
	HAL_GPIO_WritePin(EN1_GPIO_Port, 	EN1_Pin, 1);
 8002538:	2201      	movs	r2, #1
 800253a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800253e:	482b      	ldr	r0, [pc, #172]	; (80025ec <allPumpIsSleep+0xf4>)
 8002540:	f003 fbcd 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, 	EN2_Pin, 1);
 8002544:	2201      	movs	r2, #1
 8002546:	2140      	movs	r1, #64	; 0x40
 8002548:	4828      	ldr	r0, [pc, #160]	; (80025ec <allPumpIsSleep+0xf4>)
 800254a:	f003 fbc8 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, 	EN3_Pin, 1);
 800254e:	2201      	movs	r2, #1
 8002550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002554:	4826      	ldr	r0, [pc, #152]	; (80025f0 <allPumpIsSleep+0xf8>)
 8002556:	f003 fbc2 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port, 	EN4_Pin, 1);
 800255a:	2201      	movs	r2, #1
 800255c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002560:	4824      	ldr	r0, [pc, #144]	; (80025f4 <allPumpIsSleep+0xfc>)
 8002562:	f003 fbbc 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN5_GPIO_Port, 	EN5_Pin, 1);
 8002566:	2201      	movs	r2, #1
 8002568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800256c:	4821      	ldr	r0, [pc, #132]	; (80025f4 <allPumpIsSleep+0xfc>)
 800256e:	f003 fbb6 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN6_GPIO_Port, 	EN6_Pin, 1);
 8002572:	2201      	movs	r2, #1
 8002574:	2104      	movs	r1, #4
 8002576:	4820      	ldr	r0, [pc, #128]	; (80025f8 <allPumpIsSleep+0x100>)
 8002578:	f003 fbb1 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN7_GPIO_Port, 	EN7_Pin, 1);
 800257c:	2201      	movs	r2, #1
 800257e:	2120      	movs	r1, #32
 8002580:	481a      	ldr	r0, [pc, #104]	; (80025ec <allPumpIsSleep+0xf4>)
 8002582:	f003 fbac 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN8_GPIO_Port, 	EN8_Pin, 1);
 8002586:	2201      	movs	r2, #1
 8002588:	2140      	movs	r1, #64	; 0x40
 800258a:	481c      	ldr	r0, [pc, #112]	; (80025fc <allPumpIsSleep+0x104>)
 800258c:	f003 fba7 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN9_GPIO_Port, 	EN9_Pin, 1);
 8002590:	2201      	movs	r2, #1
 8002592:	2104      	movs	r1, #4
 8002594:	4815      	ldr	r0, [pc, #84]	; (80025ec <allPumpIsSleep+0xf4>)
 8002596:	f003 fba2 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN10_GPIO_Port, 	EN10_Pin, 1);
 800259a:	2201      	movs	r2, #1
 800259c:	2140      	movs	r1, #64	; 0x40
 800259e:	4815      	ldr	r0, [pc, #84]	; (80025f4 <allPumpIsSleep+0xfc>)
 80025a0:	f003 fb9d 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN11_GPIO_Port, 	EN11_Pin, 1);
 80025a4:	2201      	movs	r2, #1
 80025a6:	2108      	movs	r1, #8
 80025a8:	4812      	ldr	r0, [pc, #72]	; (80025f4 <allPumpIsSleep+0xfc>)
 80025aa:	f003 fb98 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN12_GPIO_Port, 	EN12_Pin, 1);
 80025ae:	2201      	movs	r2, #1
 80025b0:	2101      	movs	r1, #1
 80025b2:	4810      	ldr	r0, [pc, #64]	; (80025f4 <allPumpIsSleep+0xfc>)
 80025b4:	f003 fb93 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN13_GPIO_Port, 	EN13_Pin, 1);
 80025b8:	2201      	movs	r2, #1
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	480e      	ldr	r0, [pc, #56]	; (80025f8 <allPumpIsSleep+0x100>)
 80025be:	f003 fb8e 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN14_GPIO_Port, 	EN14_Pin, 1);
 80025c2:	2201      	movs	r2, #1
 80025c4:	2110      	movs	r1, #16
 80025c6:	480c      	ldr	r0, [pc, #48]	; (80025f8 <allPumpIsSleep+0x100>)
 80025c8:	f003 fb89 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN15_GPIO_Port, 	EN15_Pin, 1);
 80025cc:	2201      	movs	r2, #1
 80025ce:	2140      	movs	r1, #64	; 0x40
 80025d0:	4807      	ldr	r0, [pc, #28]	; (80025f0 <allPumpIsSleep+0xf8>)
 80025d2:	f003 fb84 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN16_GPIO_Port, 	EN16_Pin, 1);
 80025d6:	2201      	movs	r2, #1
 80025d8:	2108      	movs	r1, #8
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <allPumpIsSleep+0xf8>)
 80025dc:	f003 fb7f 	bl	8005cde <HAL_GPIO_WritePin>
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000d04 	.word	0x20000d04
 80025ec:	40011000 	.word	0x40011000
 80025f0:	40011400 	.word	0x40011400
 80025f4:	40011800 	.word	0x40011800
 80025f8:	40010c00 	.word	0x40010c00
 80025fc:	40010800 	.word	0x40010800

08002600 <OpenDoor>:
}


/* Open Door Setting  */
static void OpenDoor(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	printf(" OpenDoor command \r\n");
 8002604:	4814      	ldr	r0, [pc, #80]	; (8002658 <OpenDoor+0x58>)
 8002606:	f007 fd33 	bl	800a070 <puts>
	if (Sensor_Door_Open_State == STATE_SENSOR_ON)
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <OpenDoor+0x5c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <OpenDoor+0x1a>
		printf(" cua dang mo -> ko mo duoc \r\n");
 8002612:	4813      	ldr	r0, [pc, #76]	; (8002660 <OpenDoor+0x60>)
 8002614:	f007 fd2c 	bl	800a070 <puts>
		HAL_TIM_Base_Start_IT(&htim5);
		ENABLE_TIMER_DOOR;

		printf(" Bat timer Open Door \r\n");
	}
}
 8002618:	e01b      	b.n	8002652 <OpenDoor+0x52>
		s_doorAction = DOOR_OPENING;
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <OpenDoor+0x64>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(EN17_GPIO_Port, EN17_Pin, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2101      	movs	r1, #1
 8002624:	4810      	ldr	r0, [pc, #64]	; (8002668 <OpenDoor+0x68>)
 8002626:	f003 fb5a 	bl	8005cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR17_GPIO_Port, DIR17_Pin, DOOR_OPEN_DIR);
 800262a:	2201      	movs	r2, #1
 800262c:	2102      	movs	r1, #2
 800262e:	480e      	ldr	r0, [pc, #56]	; (8002668 <OpenDoor+0x68>)
 8002630:	f003 fb55 	bl	8005cde <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002634:	2001      	movs	r0, #1
 8002636:	f002 ff33 	bl	80054a0 <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim5);
 800263a:	480c      	ldr	r0, [pc, #48]	; (800266c <OpenDoor+0x6c>)
 800263c:	f005 faf4 	bl	8007c28 <HAL_TIM_Base_Start_IT>
		ENABLE_TIMER_DOOR;
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <OpenDoor+0x70>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <OpenDoor+0x70>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6013      	str	r3, [r2, #0]
		printf(" Bat timer Open Door \r\n");
 800264c:	4809      	ldr	r0, [pc, #36]	; (8002674 <OpenDoor+0x74>)
 800264e:	f007 fd0f 	bl	800a070 <puts>
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	0800e3dc 	.word	0x0800e3dc
 800265c:	20000004 	.word	0x20000004
 8002660:	0800e3f0 	.word	0x0800e3f0
 8002664:	20000bfc 	.word	0x20000bfc
 8002668:	40011400 	.word	0x40011400
 800266c:	20000a98 	.word	0x20000a98
 8002670:	40000c00 	.word	0x40000c00
 8002674:	0800e410 	.word	0x0800e410

08002678 <CloseDoor>:

/* Close door BarMental  Dong cua test ok
 * Close After delay time */
static void CloseDoor(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	HAL_Delay(s_doorDelay);   // delay close //
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <CloseDoor+0x18>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f002 ff0c 	bl	80054a0 <HAL_Delay>
	CloseDoor_Now();
 8002688:	f000 f804 	bl	8002694 <CloseDoor_Now>

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000bfe 	.word	0x20000bfe

08002694 <CloseDoor_Now>:

/* Close Door right away -> not include delaytime  */
static void CloseDoor_Now(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	printf(" Close Door command \r\n");
 8002698:	4814      	ldr	r0, [pc, #80]	; (80026ec <CloseDoor_Now+0x58>)
 800269a:	f007 fce9 	bl	800a070 <puts>
	if (Sensor_Door_Close_State == STATE_SENSOR_ON)
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <CloseDoor_Now+0x5c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <CloseDoor_Now+0x1a>
		printf(" cua dang dong -> ko mo duoc \r\n");
 80026a6:	4813      	ldr	r0, [pc, #76]	; (80026f4 <CloseDoor_Now+0x60>)
 80026a8:	f007 fce2 	bl	800a070 <puts>
		HAL_TIM_Base_Start_IT(&htim5);
		ENABLE_TIMER_DOOR;

		printf(" Bat timer cua \r\n");
	}
}
 80026ac:	e01b      	b.n	80026e6 <CloseDoor_Now+0x52>
		s_doorAction = DOOR_CLOSING;
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <CloseDoor_Now+0x64>)
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(EN17_GPIO_Port, EN17_Pin, 0);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2101      	movs	r1, #1
 80026b8:	4810      	ldr	r0, [pc, #64]	; (80026fc <CloseDoor_Now+0x68>)
 80026ba:	f003 fb10 	bl	8005cde <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR17_GPIO_Port, DIR17_Pin, DOOR_CLOSE_DIR);
 80026be:	2200      	movs	r2, #0
 80026c0:	2102      	movs	r1, #2
 80026c2:	480e      	ldr	r0, [pc, #56]	; (80026fc <CloseDoor_Now+0x68>)
 80026c4:	f003 fb0b 	bl	8005cde <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80026c8:	2005      	movs	r0, #5
 80026ca:	f002 fee9 	bl	80054a0 <HAL_Delay>
		HAL_TIM_Base_Start_IT(&htim5);
 80026ce:	480c      	ldr	r0, [pc, #48]	; (8002700 <CloseDoor_Now+0x6c>)
 80026d0:	f005 faaa 	bl	8007c28 <HAL_TIM_Base_Start_IT>
		ENABLE_TIMER_DOOR;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <CloseDoor_Now+0x70>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <CloseDoor_Now+0x70>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6013      	str	r3, [r2, #0]
		printf(" Bat timer cua \r\n");
 80026e0:	4809      	ldr	r0, [pc, #36]	; (8002708 <CloseDoor_Now+0x74>)
 80026e2:	f007 fcc5 	bl	800a070 <puts>
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	0800e428 	.word	0x0800e428
 80026f0:	20000008 	.word	0x20000008
 80026f4:	0800e440 	.word	0x0800e440
 80026f8:	20000bfc 	.word	0x20000bfc
 80026fc:	40011400 	.word	0x40011400
 8002700:	20000a98 	.word	0x20000a98
 8002704:	40000c00 	.word	0x40000c00
 8002708:	0800e460 	.word	0x0800e460

0800270c <controlMotorTask>:

static void controlMotorTask()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
	switch (s_pump_machine)
 8002712:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <controlMotorTask+0x1b0>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	3b01      	subs	r3, #1
 8002718:	2b04      	cmp	r3, #4
 800271a:	f200 80c1 	bhi.w	80028a0 <controlMotorTask+0x194>
 800271e:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <controlMotorTask+0x18>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	08002739 	.word	0x08002739
 8002728:	08002759 	.word	0x08002759
 800272c:	080027dd 	.word	0x080027dd
 8002730:	080027f5 	.word	0x080027f5
 8002734:	0800285d 	.word	0x0800285d
	{
	case PUMP_MACHINE_OPEN_DOOR:
		if (Sensor_Door_Close_State == STATE_SENSOR_ON && Sensor_Door_Open_State == STATE_SENSOR_OFF)
 8002738:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <controlMotorTask+0x1b4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 80b1 	bne.w	80028a4 <controlMotorTask+0x198>
 8002742:	4b60      	ldr	r3, [pc, #384]	; (80028c4 <controlMotorTask+0x1b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	f040 80ac 	bne.w	80028a4 <controlMotorTask+0x198>
		{
			OpenDoor();
 800274c:	f7ff ff58 	bl	8002600 <OpenDoor>
			s_pump_machine = PUMP_MACHINE_SET_EN;
 8002750:	4b5a      	ldr	r3, [pc, #360]	; (80028bc <controlMotorTask+0x1b0>)
 8002752:	2202      	movs	r2, #2
 8002754:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002756:	e0a5      	b.n	80028a4 <controlMotorTask+0x198>

	case PUMP_MACHINE_SET_EN:
		if (Sensor_Door_Open_State == STATE_SENSOR_ON && Sensor_Door_Close_State == STATE_SENSOR_OFF)
 8002758:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <controlMotorTask+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 80a3 	bne.w	80028a8 <controlMotorTask+0x19c>
 8002762:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <controlMotorTask+0x1b4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	f040 809e 	bne.w	80028a8 <controlMotorTask+0x19c>
		{
			for (uint8_t index = 0; index < 16; index++)
 800276c:	2300      	movs	r3, #0
 800276e:	71fb      	strb	r3, [r7, #7]
 8002770:	e02a      	b.n	80027c8 <controlMotorTask+0xbc>
			{
				if (bomMau[index].sleep == RUN)
 8002772:	79fa      	ldrb	r2, [r7, #7]
 8002774:	4954      	ldr	r1, [pc, #336]	; (80028c8 <controlMotorTask+0x1bc>)
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	440b      	add	r3, r1
 8002780:	3301      	adds	r3, #1
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01b      	beq.n	80027c2 <controlMotorTask+0xb6>
				{
					printf(" bat cac chaan EN cua: %d \n\r",index );
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	4619      	mov	r1, r3
 800278e:	484f      	ldr	r0, [pc, #316]	; (80028cc <controlMotorTask+0x1c0>)
 8002790:	f007 fc00 	bl	8009f94 <iprintf>
					HAL_GPIO_WritePin(bomMau[index].EN_Port, bomMau[index].EN_Pin, 0);
 8002794:	79fa      	ldrb	r2, [r7, #7]
 8002796:	494c      	ldr	r1, [pc, #304]	; (80028c8 <controlMotorTask+0x1bc>)
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	440b      	add	r3, r1
 80027a2:	3348      	adds	r3, #72	; 0x48
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	79fa      	ldrb	r2, [r7, #7]
 80027a8:	4947      	ldr	r1, [pc, #284]	; (80028c8 <controlMotorTask+0x1bc>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	440b      	add	r3, r1
 80027b4:	334c      	adds	r3, #76	; 0x4c
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2200      	movs	r2, #0
 80027bc:	4619      	mov	r1, r3
 80027be:	f003 fa8e 	bl	8005cde <HAL_GPIO_WritePin>
			for (uint8_t index = 0; index < 16; index++)
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	3301      	adds	r3, #1
 80027c6:	71fb      	strb	r3, [r7, #7]
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	2b0f      	cmp	r3, #15
 80027cc:	d9d1      	bls.n	8002772 <controlMotorTask+0x66>
				}
			}
			HAL_Delay(5); /* delay for opto driver ready */
 80027ce:	2005      	movs	r0, #5
 80027d0:	f002 fe66 	bl	80054a0 <HAL_Delay>
			s_pump_machine = PUMP_MACHINE_BEGIN;
 80027d4:	4b39      	ldr	r3, [pc, #228]	; (80028bc <controlMotorTask+0x1b0>)
 80027d6:	2203      	movs	r2, #3
 80027d8:	701a      	strb	r2, [r3, #0]

		}
		break;
 80027da:	e065      	b.n	80028a8 <controlMotorTask+0x19c>

	case PUMP_MACHINE_BEGIN:

		On_Timer_Pha();
 80027dc:	f001 f8e0 	bl	80039a0 <On_Timer_Pha>
		printf("gui dang pha mau ??? \n\r");
 80027e0:	483b      	ldr	r0, [pc, #236]	; (80028d0 <controlMotorTask+0x1c4>)
 80027e2:	f007 fbd7 	bl	8009f94 <iprintf>
		sendFrame(notify_message_action);
 80027e6:	483b      	ldr	r0, [pc, #236]	; (80028d4 <controlMotorTask+0x1c8>)
 80027e8:	f001 fe3a 	bl	8004460 <sendFrame>
		s_pump_machine = PUMP_MACHINE_FINISH;
 80027ec:	4b33      	ldr	r3, [pc, #204]	; (80028bc <controlMotorTask+0x1b0>)
 80027ee:	2204      	movs	r2, #4
 80027f0:	701a      	strb	r2, [r3, #0]
		break;
 80027f2:	e05e      	b.n	80028b2 <controlMotorTask+0x1a6>

	case PUMP_MACHINE_FINISH:
		uint8_t  sleep_cnt = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	71bb      	strb	r3, [r7, #6]
		for (uint8_t index = 0; index < 16; index++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	717b      	strb	r3, [r7, #5]
 80027fc:	e014      	b.n	8002828 <controlMotorTask+0x11c>
		{
			if (bomMau[index].sleep == SLEEP)
 80027fe:	797a      	ldrb	r2, [r7, #5]
 8002800:	4931      	ldr	r1, [pc, #196]	; (80028c8 <controlMotorTask+0x1bc>)
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	440b      	add	r3, r1
 800280c:	3301      	adds	r3, #1
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <controlMotorTask+0x116>
			{
				sleep_cnt++;
 800281c:	79bb      	ldrb	r3, [r7, #6]
 800281e:	3301      	adds	r3, #1
 8002820:	71bb      	strb	r3, [r7, #6]
		for (uint8_t index = 0; index < 16; index++)
 8002822:	797b      	ldrb	r3, [r7, #5]
 8002824:	3301      	adds	r3, #1
 8002826:	717b      	strb	r3, [r7, #5]
 8002828:	797b      	ldrb	r3, [r7, #5]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	d9e7      	bls.n	80027fe <controlMotorTask+0xf2>
			}
		}
		if(sleep_cnt == 16)
 800282e:	79bb      	ldrb	r3, [r7, #6]
 8002830:	2b10      	cmp	r3, #16
 8002832:	d13b      	bne.n	80028ac <controlMotorTask+0x1a0>
		{
			printf("sleep all is OK-> disable timer \n\r");
 8002834:	4828      	ldr	r0, [pc, #160]	; (80028d8 <controlMotorTask+0x1cc>)
 8002836:	f007 fbad 	bl	8009f94 <iprintf>
			HAL_TIM_Base_Stop_IT(&htim3);
 800283a:	4828      	ldr	r0, [pc, #160]	; (80028dc <controlMotorTask+0x1d0>)
 800283c:	f005 fa54 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
			DISABLE_TIMER_PHA_MAU;
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <controlMotorTask+0x1d4>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4926      	ldr	r1, [pc, #152]	; (80028e0 <controlMotorTask+0x1d4>)
 8002846:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800284a:	4013      	ands	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
			sendFrame(notify_message_finish);
 800284e:	4825      	ldr	r0, [pc, #148]	; (80028e4 <controlMotorTask+0x1d8>)
 8002850:	f001 fe06 	bl	8004460 <sendFrame>
			s_pump_machine = PUMP_MACHINE_CLOSE_DOOR;
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <controlMotorTask+0x1b0>)
 8002856:	2205      	movs	r2, #5
 8002858:	701a      	strb	r2, [r3, #0]
		}
			break;
 800285a:	e027      	b.n	80028ac <controlMotorTask+0x1a0>

	case PUMP_MACHINE_CLOSE_DOOR:
		if (Sensor_Door_Open_State == STATE_SENSOR_ON)
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <controlMotorTask+0x1b8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d125      	bne.n	80028b0 <controlMotorTask+0x1a4>
		{
			HAL_TIM_Base_Stop_IT(&htim3);
 8002864:	481d      	ldr	r0, [pc, #116]	; (80028dc <controlMotorTask+0x1d0>)
 8002866:	f005 fa3f 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
			DISABLE_TIMER_PHA_MAU;
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <controlMotorTask+0x1d4>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	491c      	ldr	r1, [pc, #112]	; (80028e0 <controlMotorTask+0x1d4>)
 8002870:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002874:	4013      	ands	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
			HAL_GPIO_WritePin(EN9_GPIO_Port, EN9_Pin, 1);  // fix pump dont sleep after pump .... //
 8002878:	2201      	movs	r2, #1
 800287a:	2104      	movs	r1, #4
 800287c:	481a      	ldr	r0, [pc, #104]	; (80028e8 <controlMotorTask+0x1dc>)
 800287e:	f003 fa2e 	bl	8005cde <HAL_GPIO_WritePin>
			HAL_Delay(3000);
 8002882:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002886:	f002 fe0b 	bl	80054a0 <HAL_Delay>
			CloseDoor();
 800288a:	f7ff fef5 	bl	8002678 <CloseDoor>
			s_pump_machine = PUMP_MACHINE_IDLE;
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <controlMotorTask+0x1b0>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
			speaker_efect();
 8002894:	f001 fdbe 	bl	8004414 <speaker_efect>

			setAlarm_Khuay(ON);
 8002898:	2001      	movs	r0, #1
 800289a:	f002 fcd9 	bl	8005250 <setAlarm_Khuay>
		}
			break;
 800289e:	e007      	b.n	80028b0 <controlMotorTask+0x1a4>
	default:
		break;
 80028a0:	bf00      	nop
 80028a2:	e006      	b.n	80028b2 <controlMotorTask+0x1a6>
		break;
 80028a4:	bf00      	nop
 80028a6:	e004      	b.n	80028b2 <controlMotorTask+0x1a6>
		break;
 80028a8:	bf00      	nop
 80028aa:	e002      	b.n	80028b2 <controlMotorTask+0x1a6>
			break;
 80028ac:	bf00      	nop
 80028ae:	e000      	b.n	80028b2 <controlMotorTask+0x1a6>
			break;
 80028b0:	bf00      	nop
	}
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000bf7 	.word	0x20000bf7
 80028c0:	20000008 	.word	0x20000008
 80028c4:	20000004 	.word	0x20000004
 80028c8:	20000d04 	.word	0x20000d04
 80028cc:	0800e474 	.word	0x0800e474
 80028d0:	0800e494 	.word	0x0800e494
 80028d4:	20000bb8 	.word	0x20000bb8
 80028d8:	0800e4ac 	.word	0x0800e4ac
 80028dc:	20000a08 	.word	0x20000a08
 80028e0:	40000400 	.word	0x40000400
 80028e4:	20000bd8 	.word	0x20000bd8
 80028e8:	40011000 	.word	0x40011000

080028ec <ruaDauPhun>:

/*rau dau phun auto 1000 xung */
 void ruaDauPhun(void)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
	 uint8_t id;
	 uint16_t _default_fulse;

	 _default_fulse =  khuayMau.luongMauPhunRa.value * 100;
 80028f2:	4b4d      	ldr	r3, [pc, #308]	; (8002a28 <ruaDauPhun+0x13c>)
 80028f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028f8:	461a      	mov	r2, r3
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	461a      	mov	r2, r3
 8002900:	0091      	lsls	r1, r2, #2
 8002902:	461a      	mov	r2, r3
 8002904:	460b      	mov	r3, r1
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	80bb      	strh	r3, [r7, #4]

	if (Sensor_Laze_State == STATE_SENSOR_OFF) // thung sơn chua co //
 800290c:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <ruaDauPhun+0x140>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d116      	bne.n	8002942 <ruaDauPhun+0x56>
	{
		sendFrame("choThungSonVao");
 8002914:	4846      	ldr	r0, [pc, #280]	; (8002a30 <ruaDauPhun+0x144>)
 8002916:	f001 fda3 	bl	8004460 <sendFrame>
		printf("choThungSonVao\n\r");
 800291a:	4846      	ldr	r0, [pc, #280]	; (8002a34 <ruaDauPhun+0x148>)
 800291c:	f007 fb3a 	bl	8009f94 <iprintf>
		DISABLE_TIMER_PHA_MAU;
 8002920:	4b45      	ldr	r3, [pc, #276]	; (8002a38 <ruaDauPhun+0x14c>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4944      	ldr	r1, [pc, #272]	; (8002a38 <ruaDauPhun+0x14c>)
 8002926:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800292a:	4013      	ands	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
		printf("Disable timer 3 \n\r");
 800292e:	4843      	ldr	r0, [pc, #268]	; (8002a3c <ruaDauPhun+0x150>)
 8002930:	f007 fb30 	bl	8009f94 <iprintf>

		while (Sensor_Laze_State == STATE_SENSOR_OFF)
 8002934:	e001      	b.n	800293a <ruaDauPhun+0x4e>
		{
			speaker_efect();
 8002936:	f001 fd6d 	bl	8004414 <speaker_efect>
		while (Sensor_Laze_State == STATE_SENSOR_OFF)
 800293a:	4b3c      	ldr	r3, [pc, #240]	; (8002a2c <ruaDauPhun+0x140>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d0f9      	beq.n	8002936 <ruaDauPhun+0x4a>
		}
	}
    /* cho thung son vao OK*/
	HAL_Delay(2000); // delay 3s //
 8002942:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002946:	f002 fdab 	bl	80054a0 <HAL_Delay>

	for ( id = 0; id < 16; id++) {
 800294a:	2300      	movs	r3, #0
 800294c:	71fb      	strb	r3, [r7, #7]
 800294e:	e060      	b.n	8002a12 <ruaDauPhun+0x126>
		bomMau[id].mililit = khuayMau.luongMauPhunRa.value;
 8002950:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <ruaDauPhun+0x13c>)
 8002952:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002956:	79fc      	ldrb	r4, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe fadb 	bl	8000f14 <__aeabi_ui2f>
 800295e:	4602      	mov	r2, r0
 8002960:	4937      	ldr	r1, [pc, #220]	; (8002a40 <ruaDauPhun+0x154>)
 8002962:	4623      	mov	r3, r4
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4423      	add	r3, r4
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	440b      	add	r3, r1
 800296c:	3314      	adds	r3, #20
 800296e:	601a      	str	r2, [r3, #0]
		bomMau[id].pulse1ml = _default_fulse;
 8002970:	79fa      	ldrb	r2, [r7, #7]
 8002972:	88b9      	ldrh	r1, [r7, #4]
 8002974:	4832      	ldr	r0, [pc, #200]	; (8002a40 <ruaDauPhun+0x154>)
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4403      	add	r3, r0
 8002980:	331c      	adds	r3, #28
 8002982:	6019      	str	r1, [r3, #0]
		bomMau[id].countHighSpeed = bomMau[id].pulse1ml * bomMau[id].mililit;
 8002984:	79fa      	ldrb	r2, [r7, #7]
 8002986:	492e      	ldr	r1, [pc, #184]	; (8002a40 <ruaDauPhun+0x154>)
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	440b      	add	r3, r1
 8002992:	331c      	adds	r3, #28
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fabc 	bl	8000f14 <__aeabi_ui2f>
 800299c:	79fa      	ldrb	r2, [r7, #7]
 800299e:	4928      	ldr	r1, [pc, #160]	; (8002a40 <ruaDauPhun+0x154>)
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	440b      	add	r3, r1
 80029aa:	3314      	adds	r3, #20
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4619      	mov	r1, r3
 80029b0:	f7fd fc42 	bl	8000238 <__aeabi_fmul>
 80029b4:	4603      	mov	r3, r0
 80029b6:	79fc      	ldrb	r4, [r7, #7]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fb03 	bl	8000fc4 <__aeabi_f2uiz>
 80029be:	4602      	mov	r2, r0
 80029c0:	491f      	ldr	r1, [pc, #124]	; (8002a40 <ruaDauPhun+0x154>)
 80029c2:	4623      	mov	r3, r4
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4423      	add	r3, r4
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	440b      	add	r3, r1
 80029cc:	330c      	adds	r3, #12
 80029ce:	601a      	str	r2, [r3, #0]
		bomMau[id].countLowSpeed = 0;
 80029d0:	79fa      	ldrb	r2, [r7, #7]
 80029d2:	491b      	ldr	r1, [pc, #108]	; (8002a40 <ruaDauPhun+0x154>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	440b      	add	r3, r1
 80029de:	3310      	adds	r3, #16
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
		calc_colorPulseOutput(&bomMau[id]);
 80029e4:	79fa      	ldrb	r2, [r7, #7]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <ruaDauPhun+0x154>)
 80029f0:	4413      	add	r3, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 fe32 	bl	800465c <calc_colorPulseOutput>
		bomMau[id].sleep=RUN;
 80029f8:	79fa      	ldrb	r2, [r7, #7]
 80029fa:	4911      	ldr	r1, [pc, #68]	; (8002a40 <ruaDauPhun+0x154>)
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	440b      	add	r3, r1
 8002a06:	3301      	adds	r3, #1
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
	for ( id = 0; id < 16; id++) {
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	71fb      	strb	r3, [r7, #7]
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	2b0f      	cmp	r3, #15
 8002a16:	d99b      	bls.n	8002950 <ruaDauPhun+0x64>
	}
	s_pump_machine = PUMP_MACHINE_OPEN_DOOR;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <ruaDauPhun+0x158>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd90      	pop	{r4, r7, pc}
 8002a26:	bf00      	nop
 8002a28:	2000023c 	.word	0x2000023c
 8002a2c:	2000000c 	.word	0x2000000c
 8002a30:	0800e4d0 	.word	0x0800e4d0
 8002a34:	0800e4e0 	.word	0x0800e4e0
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	0800e4f4 	.word	0x0800e4f4
 8002a40:	20000d04 	.word	0x20000d04
 8002a44:	20000bf7 	.word	0x20000bf7

08002a48 <ruaDauPhun_Mililit>:
/*
 * rau dau phun theo miilit
 * @Test M1[12408]-M2[4612]-M3[4820]-M4[9800]-M5[10620]-M6[5208]-M7[4808]-M8[5320]-M9[10112]-M10[4904]-M11[5052]-M12[5092]-M13[4956]-M14[4672]-M15[5160]-M16[9800]#
 * */
void ruaDauPhun_Mililit(void) // rua theo mililit //
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b0da      	sub	sp, #360	; 0x168
 8002a4c:	af00      	add	r7, sp, #0
	uint8_t MAX_MOTOR = 16;
 8002a4e:	2310      	movs	r3, #16
 8002a50:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
	uint32_t fulse;

	/* check cam bien quang thug son */
	if (Sensor_Laze_State == STATE_SENSOR_OFF) // thung sơn chua co //
 8002a54:	4ba4      	ldr	r3, [pc, #656]	; (8002ce8 <ruaDauPhun_Mililit+0x2a0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d116      	bne.n	8002a8a <ruaDauPhun_Mililit+0x42>
		{
			sendFrame("choThungSonVao");
 8002a5c:	48a3      	ldr	r0, [pc, #652]	; (8002cec <ruaDauPhun_Mililit+0x2a4>)
 8002a5e:	f001 fcff 	bl	8004460 <sendFrame>
			printf("choThungSonVao\n\r");
 8002a62:	48a3      	ldr	r0, [pc, #652]	; (8002cf0 <ruaDauPhun_Mililit+0x2a8>)
 8002a64:	f007 fa96 	bl	8009f94 <iprintf>
			DISABLE_TIMER_PHA_MAU;
 8002a68:	4ba2      	ldr	r3, [pc, #648]	; (8002cf4 <ruaDauPhun_Mililit+0x2ac>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	49a1      	ldr	r1, [pc, #644]	; (8002cf4 <ruaDauPhun_Mililit+0x2ac>)
 8002a6e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002a72:	4013      	ands	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
			printf("Disable timer 3 \n\r");
 8002a76:	48a0      	ldr	r0, [pc, #640]	; (8002cf8 <ruaDauPhun_Mililit+0x2b0>)
 8002a78:	f007 fa8c 	bl	8009f94 <iprintf>

			while (Sensor_Laze_State == STATE_SENSOR_OFF)
 8002a7c:	e001      	b.n	8002a82 <ruaDauPhun_Mililit+0x3a>
			{
				speaker_efect();
 8002a7e:	f001 fcc9 	bl	8004414 <speaker_efect>
			while (Sensor_Laze_State == STATE_SENSOR_OFF)
 8002a82:	4b99      	ldr	r3, [pc, #612]	; (8002ce8 <ruaDauPhun_Mililit+0x2a0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d0f9      	beq.n	8002a7e <ruaDauPhun_Mililit+0x36>
			}
		}

	/* cho thung son vao OK*/
	HAL_Delay(2000); // delay 2s //
 8002a8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a8e:	f002 fd07 	bl	80054a0 <HAL_Delay>
	OpenDoor();
 8002a92:	f7ff fdb5 	bl	8002600 <OpenDoor>
	printf("Khac phuc loi-->> RuaDauPhun-Mililit\n\r");
 8002a96:	4899      	ldr	r0, [pc, #612]	; (8002cfc <ruaDauPhun_Mililit+0x2b4>)
 8002a98:	f007 fa7c 	bl	8009f94 <iprintf>
	/*    phan tich du lieu   */
	/*
	 @Test M1[12408]-M2[4612]-M3[4820]-M4[9800]-M5[10620]-M6[5208]-M7[4808]-M8[5320]-M9[10112]-M10[4904]-M11[5052]-M12[5092]-M13[4956]-M14[4672]-M15[5160]-M16[9800]#
	 */
	char txt[17][20];
	for (int i = 0; i < 16; i++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002aa2:	e011      	b.n	8002ac8 <ruaDauPhun_Mililit+0x80>
		memset(txt[i], 0, 20);
 8002aa4:	1d39      	adds	r1, r7, #4
 8002aa6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	2214      	movs	r2, #20
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f007 fc3f 	bl	800a33c <memset>
	for (int i = 0; i < 16; i++)
 8002abe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002ac8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	dde9      	ble.n	8002aa4 <ruaDauPhun_Mililit+0x5c>

	printf("data: %s \n\r", myApp.arrData);
 8002ad0:	498b      	ldr	r1, [pc, #556]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002ad2:	488c      	ldr	r0, [pc, #560]	; (8002d04 <ruaDauPhun_Mililit+0x2bc>)
 8002ad4:	f007 fa5e 	bl	8009f94 <iprintf>

	trim(myApp.arrData, txt[0],  "M1",  "-");
 8002ad8:	1d39      	adds	r1, r7, #4
 8002ada:	4b8b      	ldr	r3, [pc, #556]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002adc:	4a8b      	ldr	r2, [pc, #556]	; (8002d0c <ruaDauPhun_Mililit+0x2c4>)
 8002ade:	4888      	ldr	r0, [pc, #544]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002ae0:	f002 fc1e 	bl	8005320 <trim>
	trim(myApp.arrData, txt[1],  "M2",  "-");
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	f103 0114 	add.w	r1, r3, #20
 8002aea:	4b87      	ldr	r3, [pc, #540]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002aec:	4a88      	ldr	r2, [pc, #544]	; (8002d10 <ruaDauPhun_Mililit+0x2c8>)
 8002aee:	4884      	ldr	r0, [pc, #528]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002af0:	f002 fc16 	bl	8005320 <trim>
	trim(myApp.arrData, txt[2],  "M3",  "-");
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002afa:	4b83      	ldr	r3, [pc, #524]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002afc:	4a85      	ldr	r2, [pc, #532]	; (8002d14 <ruaDauPhun_Mililit+0x2cc>)
 8002afe:	4880      	ldr	r0, [pc, #512]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002b00:	f002 fc0e 	bl	8005320 <trim>
	trim(myApp.arrData, txt[3],  "M4",  "-");
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002b0a:	4b7f      	ldr	r3, [pc, #508]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002b0c:	4a82      	ldr	r2, [pc, #520]	; (8002d18 <ruaDauPhun_Mililit+0x2d0>)
 8002b0e:	487c      	ldr	r0, [pc, #496]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002b10:	f002 fc06 	bl	8005320 <trim>
	trim(myApp.arrData, txt[4],  "M5",  "-");
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002b1a:	4b7b      	ldr	r3, [pc, #492]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002b1c:	4a7f      	ldr	r2, [pc, #508]	; (8002d1c <ruaDauPhun_Mililit+0x2d4>)
 8002b1e:	4878      	ldr	r0, [pc, #480]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002b20:	f002 fbfe 	bl	8005320 <trim>
	trim(myApp.arrData, txt[5],  "M6",  "-");
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8002b2a:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002b2c:	4a7c      	ldr	r2, [pc, #496]	; (8002d20 <ruaDauPhun_Mililit+0x2d8>)
 8002b2e:	4874      	ldr	r0, [pc, #464]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002b30:	f002 fbf6 	bl	8005320 <trim>
	trim(myApp.arrData, txt[6],  "M7",  "-");
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8002b3a:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002b3c:	4a79      	ldr	r2, [pc, #484]	; (8002d24 <ruaDauPhun_Mililit+0x2dc>)
 8002b3e:	4870      	ldr	r0, [pc, #448]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002b40:	f002 fbee 	bl	8005320 <trim>
	trim(myApp.arrData, txt[7],  "M8",  "-");
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8002b4a:	4b6f      	ldr	r3, [pc, #444]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002b4c:	4a76      	ldr	r2, [pc, #472]	; (8002d28 <ruaDauPhun_Mililit+0x2e0>)
 8002b4e:	486c      	ldr	r0, [pc, #432]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002b50:	f002 fbe6 	bl	8005320 <trim>
	trim(myApp.arrData, txt[8],  "M9",  "-");
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8002b5a:	4b6b      	ldr	r3, [pc, #428]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002b5c:	4a73      	ldr	r2, [pc, #460]	; (8002d2c <ruaDauPhun_Mililit+0x2e4>)
 8002b5e:	4868      	ldr	r0, [pc, #416]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002b60:	f002 fbde 	bl	8005320 <trim>
	trim(myApp.arrData, txt[9],  "M10", "-");
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
 8002b6a:	4b67      	ldr	r3, [pc, #412]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002b6c:	4a70      	ldr	r2, [pc, #448]	; (8002d30 <ruaDauPhun_Mililit+0x2e8>)
 8002b6e:	4864      	ldr	r0, [pc, #400]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002b70:	f002 fbd6 	bl	8005320 <trim>
	trim(myApp.arrData, txt[10], "M11", "-");
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002b7c:	4a6d      	ldr	r2, [pc, #436]	; (8002d34 <ruaDauPhun_Mililit+0x2ec>)
 8002b7e:	4860      	ldr	r0, [pc, #384]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002b80:	f002 fbce 	bl	8005320 <trim>
	trim(myApp.arrData, txt[11], "M12", "-");
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002b8c:	4a6a      	ldr	r2, [pc, #424]	; (8002d38 <ruaDauPhun_Mililit+0x2f0>)
 8002b8e:	485c      	ldr	r0, [pc, #368]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002b90:	f002 fbc6 	bl	8005320 <trim>
	trim(myApp.arrData, txt[12], "M13", "-");
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002b9c:	4a67      	ldr	r2, [pc, #412]	; (8002d3c <ruaDauPhun_Mililit+0x2f4>)
 8002b9e:	4858      	ldr	r0, [pc, #352]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002ba0:	f002 fbbe 	bl	8005320 <trim>
	trim(myApp.arrData, txt[13], "M14", "-");
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	f503 7182 	add.w	r1, r3, #260	; 0x104
 8002baa:	4b57      	ldr	r3, [pc, #348]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002bac:	4a64      	ldr	r2, [pc, #400]	; (8002d40 <ruaDauPhun_Mililit+0x2f8>)
 8002bae:	4854      	ldr	r0, [pc, #336]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002bb0:	f002 fbb6 	bl	8005320 <trim>
	trim(myApp.arrData, txt[14], "M15", "-");
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8002bba:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002bbc:	4a61      	ldr	r2, [pc, #388]	; (8002d44 <ruaDauPhun_Mililit+0x2fc>)
 8002bbe:	4850      	ldr	r0, [pc, #320]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002bc0:	f002 fbae 	bl	8005320 <trim>
	trim(myApp.arrData, txt[15], "M16", "-");
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	f503 7196 	add.w	r1, r3, #300	; 0x12c
 8002bca:	4b4f      	ldr	r3, [pc, #316]	; (8002d08 <ruaDauPhun_Mililit+0x2c0>)
 8002bcc:	4a5e      	ldr	r2, [pc, #376]	; (8002d48 <ruaDauPhun_Mililit+0x300>)
 8002bce:	484c      	ldr	r0, [pc, #304]	; (8002d00 <ruaDauPhun_Mililit+0x2b8>)
 8002bd0:	f002 fba6 	bl	8005320 <trim>

	for (int i = 0; i < 16; i++) {
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002bda:	e06f      	b.n	8002cbc <ruaDauPhun_Mililit+0x274>
		fulse = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		printf(" MOTOR[%d] = %s \r\n", i, (const char*) txt[i]);
 8002be2:	1d39      	adds	r1, r7, #4
 8002be4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8002bf8:	4854      	ldr	r0, [pc, #336]	; (8002d4c <ruaDauPhun_Mililit+0x304>)
 8002bfa:	f007 f9cb 	bl	8009f94 <iprintf>
		sscanf(txt[i], "[%d]", &fulse);
 8002bfe:	1d39      	adds	r1, r7, #4
 8002c00:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002c12:	494f      	ldr	r1, [pc, #316]	; (8002d50 <ruaDauPhun_Mililit+0x308>)
 8002c14:	4618      	mov	r0, r3
 8002c16:	f007 fa53 	bl	800a0c0 <siscanf>
		printf("num value pulse = %d \n\r", fulse);
 8002c1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c1e:	4619      	mov	r1, r3
 8002c20:	484c      	ldr	r0, [pc, #304]	; (8002d54 <ruaDauPhun_Mililit+0x30c>)
 8002c22:	f007 f9b7 	bl	8009f94 <iprintf>
		bomMau[i].mililit = 1;
 8002c26:	494c      	ldr	r1, [pc, #304]	; (8002d58 <ruaDauPhun_Mililit+0x310>)
 8002c28:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	440b      	add	r3, r1
 8002c36:	3314      	adds	r3, #20
 8002c38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c3c:	601a      	str	r2, [r3, #0]
		bomMau[i].countHighSpeed = fulse;
 8002c3e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8002c42:	4845      	ldr	r0, [pc, #276]	; (8002d58 <ruaDauPhun_Mililit+0x310>)
 8002c44:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	4403      	add	r3, r0
 8002c52:	330c      	adds	r3, #12
 8002c54:	6019      	str	r1, [r3, #0]
		bomMau[i].countLowSpeed = 0;
 8002c56:	4940      	ldr	r1, [pc, #256]	; (8002d58 <ruaDauPhun_Mililit+0x310>)
 8002c58:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	440b      	add	r3, r1
 8002c66:	3310      	adds	r3, #16
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
		bomMau[i].pulseSetHighSpeed = fulse*2;
 8002c6c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c70:	0059      	lsls	r1, r3, #1
 8002c72:	4839      	ldr	r0, [pc, #228]	; (8002d58 <ruaDauPhun_Mililit+0x310>)
 8002c74:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	4403      	add	r3, r0
 8002c82:	3304      	adds	r3, #4
 8002c84:	6019      	str	r1, [r3, #0]
		bomMau[i].pulseSetLowSpeed = 0;
 8002c86:	4934      	ldr	r1, [pc, #208]	; (8002d58 <ruaDauPhun_Mililit+0x310>)
 8002c88:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	440b      	add	r3, r1
 8002c96:	3308      	adds	r3, #8
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
		bomMau[i].sleep = RUN;
 8002c9c:	492e      	ldr	r1, [pc, #184]	; (8002d58 <ruaDauPhun_Mililit+0x310>)
 8002c9e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	440b      	add	r3, r1
 8002cac:	3301      	adds	r3, #1
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 8002cb2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002cbc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	dd8b      	ble.n	8002bdc <ruaDauPhun_Mililit+0x194>
	}
	s_pump_machine = PUMP_MACHINE_OPEN_DOOR;
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <ruaDauPhun_Mililit+0x314>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
	sprintf(notify_message_action, "%s", "dangRuaDauPhun" );
 8002cca:	4a25      	ldr	r2, [pc, #148]	; (8002d60 <ruaDauPhun_Mililit+0x318>)
 8002ccc:	4925      	ldr	r1, [pc, #148]	; (8002d64 <ruaDauPhun_Mililit+0x31c>)
 8002cce:	4826      	ldr	r0, [pc, #152]	; (8002d68 <ruaDauPhun_Mililit+0x320>)
 8002cd0:	f007 f9d6 	bl	800a080 <siprintf>
	sprintf(notify_message_finish, "%s", "RuaDauPhunXong" );
 8002cd4:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <ruaDauPhun_Mililit+0x324>)
 8002cd6:	4923      	ldr	r1, [pc, #140]	; (8002d64 <ruaDauPhun_Mililit+0x31c>)
 8002cd8:	4825      	ldr	r0, [pc, #148]	; (8002d70 <ruaDauPhun_Mililit+0x328>)
 8002cda:	f007 f9d1 	bl	800a080 <siprintf>

	/*
	 @Test M1[12408]-M2[4612]-M3[4820]-M4[9800]-M5[10620]-M6[5208]-M7[4808]-M8[5320]-M9[10112]-M10[4904]-M11[5052]-M12[5092]-M13[4956]-M14[4672]-M15[5160]-M16[9800]#
	 */
}
 8002cde:	bf00      	nop
 8002ce0:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	2000000c 	.word	0x2000000c
 8002cec:	0800e4d0 	.word	0x0800e4d0
 8002cf0:	0800e4e0 	.word	0x0800e4e0
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	0800e4f4 	.word	0x0800e4f4
 8002cfc:	0800e508 	.word	0x0800e508
 8002d00:	20000016 	.word	0x20000016
 8002d04:	0800e530 	.word	0x0800e530
 8002d08:	0800e53c 	.word	0x0800e53c
 8002d0c:	0800e540 	.word	0x0800e540
 8002d10:	0800e544 	.word	0x0800e544
 8002d14:	0800e548 	.word	0x0800e548
 8002d18:	0800e54c 	.word	0x0800e54c
 8002d1c:	0800e550 	.word	0x0800e550
 8002d20:	0800e554 	.word	0x0800e554
 8002d24:	0800e558 	.word	0x0800e558
 8002d28:	0800e55c 	.word	0x0800e55c
 8002d2c:	0800e560 	.word	0x0800e560
 8002d30:	0800e564 	.word	0x0800e564
 8002d34:	0800e568 	.word	0x0800e568
 8002d38:	0800e56c 	.word	0x0800e56c
 8002d3c:	0800e570 	.word	0x0800e570
 8002d40:	0800e574 	.word	0x0800e574
 8002d44:	0800e578 	.word	0x0800e578
 8002d48:	0800e57c 	.word	0x0800e57c
 8002d4c:	0800e580 	.word	0x0800e580
 8002d50:	0800e594 	.word	0x0800e594
 8002d54:	0800e59c 	.word	0x0800e59c
 8002d58:	20000d04 	.word	0x20000d04
 8002d5c:	20000bf7 	.word	0x20000bf7
 8002d60:	0800e5b4 	.word	0x0800e5b4
 8002d64:	0800e5c4 	.word	0x0800e5c4
 8002d68:	20000bb8 	.word	0x20000bb8
 8002d6c:	0800e5c8 	.word	0x0800e5c8
 8002d70:	20000bd8 	.word	0x20000bd8

08002d74 <sensorTask>:

/*
 * sensor task
 * */
static void sensorTask(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	if (update_Sensor[0] == 1)
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <sensorTask+0xc4>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <sensorTask+0x14>
	{
		update_Sensor[0] = 0;
 8002d82:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <sensorTask+0xc4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
		//todo:
	}

	if (update_Sensor[1] == 1)
 8002d88:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <sensorTask+0xc4>)
 8002d8a:	785b      	ldrb	r3, [r3, #1]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d11d      	bne.n	8002dce <sensorTask+0x5a>
	{
		update_Sensor[1] = 0;
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <sensorTask+0xc4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	705a      	strb	r2, [r3, #1]

		if (Sensor_Laze_State == STATE_SENSOR_ON)  // // sensor 2
 8002d98:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <sensorTask+0xc8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <sensorTask+0x44>
		{
			printf("Sensor_Laze_State == STATE_SENSOR_ON \n\r");
 8002da0:	4827      	ldr	r0, [pc, #156]	; (8002e40 <sensorTask+0xcc>)
 8002da2:	f007 f8f7 	bl	8009f94 <iprintf>
			sendFrame("sensor3 on\n\r");
 8002da6:	4827      	ldr	r0, [pc, #156]	; (8002e44 <sensorTask+0xd0>)
 8002da8:	f001 fb5a 	bl	8004460 <sendFrame>
			HAL_GPIO_WritePin(LAZE_GPIO_Port, LAZE_Pin, 1);
 8002dac:	2201      	movs	r2, #1
 8002dae:	2110      	movs	r1, #16
 8002db0:	4825      	ldr	r0, [pc, #148]	; (8002e48 <sensorTask+0xd4>)
 8002db2:	f002 ff94 	bl	8005cde <HAL_GPIO_WritePin>
 8002db6:	e00a      	b.n	8002dce <sensorTask+0x5a>
		}
		else
		{
			printf("Sensor_Laze_State == STATE_SENSOR_OFF \n\r");
 8002db8:	4824      	ldr	r0, [pc, #144]	; (8002e4c <sensorTask+0xd8>)
 8002dba:	f007 f8eb 	bl	8009f94 <iprintf>
			sendFrame("sensor3 off\n\r");
 8002dbe:	4824      	ldr	r0, [pc, #144]	; (8002e50 <sensorTask+0xdc>)
 8002dc0:	f001 fb4e 	bl	8004460 <sendFrame>
			HAL_GPIO_WritePin(LAZE_GPIO_Port, LAZE_Pin, 0);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	481f      	ldr	r0, [pc, #124]	; (8002e48 <sensorTask+0xd4>)
 8002dca:	f002 ff88 	bl	8005cde <HAL_GPIO_WritePin>
		}
	}

	if (update_Sensor[2] == 1)  // sensor 3
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <sensorTask+0xc4>)
 8002dd0:	789b      	ldrb	r3, [r3, #2]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d113      	bne.n	8002e00 <sensorTask+0x8c>
	{
		update_Sensor[2] = 0;
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <sensorTask+0xc4>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	709a      	strb	r2, [r3, #2]

		if (Sensor_Door_Open_State == STATE_SENSOR_ON)
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <sensorTask+0xe0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <sensorTask+0x80>
		{
			printf("Sensor_Door_Open_State == STATE_SENSOR_ON \n\r");
 8002de6:	481c      	ldr	r0, [pc, #112]	; (8002e58 <sensorTask+0xe4>)
 8002de8:	f007 f8d4 	bl	8009f94 <iprintf>
			sendFrame("sensor2 on\n\r");
 8002dec:	481b      	ldr	r0, [pc, #108]	; (8002e5c <sensorTask+0xe8>)
 8002dee:	f001 fb37 	bl	8004460 <sendFrame>
 8002df2:	e005      	b.n	8002e00 <sensorTask+0x8c>

		}
		else
		{
			printf("Sensor_Door_Open_State == STATE_SENSOR_OFF \n\r");
 8002df4:	481a      	ldr	r0, [pc, #104]	; (8002e60 <sensorTask+0xec>)
 8002df6:	f007 f8cd 	bl	8009f94 <iprintf>
			sendFrame("sensor2 off\n\r");
 8002dfa:	481a      	ldr	r0, [pc, #104]	; (8002e64 <sensorTask+0xf0>)
 8002dfc:	f001 fb30 	bl	8004460 <sendFrame>

		}
	}

	if (update_Sensor[3] == 1)  // sensor 4
 8002e00:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <sensorTask+0xc4>)
 8002e02:	78db      	ldrb	r3, [r3, #3]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d113      	bne.n	8002e32 <sensorTask+0xbe>
	{
		update_Sensor[3] = 0;
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <sensorTask+0xc4>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	70da      	strb	r2, [r3, #3]
		if (Sensor_Door_Close_State == STATE_SENSOR_ON)
 8002e10:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <sensorTask+0xf4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <sensorTask+0xb2>
		{
			printf("Sensor_Door_Close_State == STATE_SENSOR_ON \n\r");
 8002e18:	4814      	ldr	r0, [pc, #80]	; (8002e6c <sensorTask+0xf8>)
 8002e1a:	f007 f8bb 	bl	8009f94 <iprintf>
			sendFrame("sensor1 on\n\r");
 8002e1e:	4814      	ldr	r0, [pc, #80]	; (8002e70 <sensorTask+0xfc>)
 8002e20:	f001 fb1e 	bl	8004460 <sendFrame>
		{
			printf("Sensor_Door_Close_State == STATE_SENSOR_OFF \n\r");
			sendFrame("sensor1 off\n\r");
		}
	}
}
 8002e24:	e005      	b.n	8002e32 <sensorTask+0xbe>
			printf("Sensor_Door_Close_State == STATE_SENSOR_OFF \n\r");
 8002e26:	4813      	ldr	r0, [pc, #76]	; (8002e74 <sensorTask+0x100>)
 8002e28:	f007 f8b4 	bl	8009f94 <iprintf>
			sendFrame("sensor1 off\n\r");
 8002e2c:	4812      	ldr	r0, [pc, #72]	; (8002e78 <sensorTask+0x104>)
 8002e2e:	f001 fb17 	bl	8004460 <sendFrame>
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000bf8 	.word	0x20000bf8
 8002e3c:	2000000c 	.word	0x2000000c
 8002e40:	0800e5d8 	.word	0x0800e5d8
 8002e44:	0800e600 	.word	0x0800e600
 8002e48:	40010800 	.word	0x40010800
 8002e4c:	0800e610 	.word	0x0800e610
 8002e50:	0800e63c 	.word	0x0800e63c
 8002e54:	20000004 	.word	0x20000004
 8002e58:	0800e64c 	.word	0x0800e64c
 8002e5c:	0800e67c 	.word	0x0800e67c
 8002e60:	0800e68c 	.word	0x0800e68c
 8002e64:	0800e6bc 	.word	0x0800e6bc
 8002e68:	20000008 	.word	0x20000008
 8002e6c:	0800e6cc 	.word	0x0800e6cc
 8002e70:	0800e6fc 	.word	0x0800e6fc
 8002e74:	0800e70c 	.word	0x0800e70c
 8002e78:	0800e73c 	.word	0x0800e73c

08002e7c <ledTask>:

static void ledTask(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
	static uint32_t led_tick = 0;
	if (HAL_GetTick() - led_tick > 1000)
 8002e80:	f002 fb04 	bl	800548c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <ledTask+0x38>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e90:	d90e      	bls.n	8002eb0 <ledTask+0x34>
	{
		led_tick = HAL_GetTick();
 8002e92:	f002 fafb 	bl	800548c <HAL_GetTick>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4a06      	ldr	r2, [pc, #24]	; (8002eb4 <ledTask+0x38>)
 8002e9a:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(ST1_GPIO_Port, ST1_Pin);
 8002e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <ledTask+0x3c>)
 8002ea2:	f002 ff34 	bl	8005d0e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(ST2_GPIO_Port, ST2_Pin);
 8002ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eaa:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <ledTask+0x3c>)
 8002eac:	f002 ff2f 	bl	8005d0e <HAL_GPIO_TogglePin>
	}
}
 8002eb0:	bf00      	nop
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000d00 	.word	0x20000d00
 8002eb8:	40010c00 	.word	0x40010c00

08002ebc <uartTask>:

static void uartTask(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af02      	add	r7, sp, #8
	if(myApp.dataDoneFrame)
 8002ec2:	4bad      	ldr	r3, [pc, #692]	; (8003178 <uartTask+0x2bc>)
 8002ec4:	785b      	ldrb	r3, [r3, #1]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 81d4 	beq.w	8003274 <uartTask+0x3b8>
	{
		HAL_TIM_Base_Stop_IT(&htim2);
 8002ecc:	48ab      	ldr	r0, [pc, #684]	; (800317c <uartTask+0x2c0>)
 8002ece:	f004 ff0b 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim3);
 8002ed2:	48ab      	ldr	r0, [pc, #684]	; (8003180 <uartTask+0x2c4>)
 8002ed4:	f004 ff08 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 8002ed8:	48aa      	ldr	r0, [pc, #680]	; (8003184 <uartTask+0x2c8>)
 8002eda:	f004 ff05 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
		speaker_efect();
 8002ede:	f001 fa99 	bl	8004414 <speaker_efect>

		printf("rev>> %s \n\r",myApp.arrData );
 8002ee2:	49a9      	ldr	r1, [pc, #676]	; (8003188 <uartTask+0x2cc>)
 8002ee4:	48a9      	ldr	r0, [pc, #676]	; (800318c <uartTask+0x2d0>)
 8002ee6:	f007 f855 	bl	8009f94 <iprintf>
		// process command //

		if(strstr(myApp.arrData, "timeNow")) // connect and update time
 8002eea:	49a9      	ldr	r1, [pc, #676]	; (8003190 <uartTask+0x2d4>)
 8002eec:	48a6      	ldr	r0, [pc, #664]	; (8003188 <uartTask+0x2cc>)
 8002eee:	f007 fa3a 	bl	800a366 <strstr>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d043      	beq.n	8002f80 <uartTask+0xc4>
		{
			char txtTime[20] = "";
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
			trim(myApp.arrData, txtTime, "[", "]");
 8002f0a:	f107 010c 	add.w	r1, r7, #12
 8002f0e:	4ba1      	ldr	r3, [pc, #644]	; (8003194 <uartTask+0x2d8>)
 8002f10:	4aa1      	ldr	r2, [pc, #644]	; (8003198 <uartTask+0x2dc>)
 8002f12:	489d      	ldr	r0, [pc, #628]	; (8003188 <uartTask+0x2cc>)
 8002f14:	f002 fa04 	bl	8005320 <trim>
			sscanf(txtTime, "%d:%d:%d", &timeNow.gio, &timeNow.phut, &timeNow.giay);
 8002f18:	f107 000c 	add.w	r0, r7, #12
 8002f1c:	4b9f      	ldr	r3, [pc, #636]	; (800319c <uartTask+0x2e0>)
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	4b9f      	ldr	r3, [pc, #636]	; (80031a0 <uartTask+0x2e4>)
 8002f22:	4aa0      	ldr	r2, [pc, #640]	; (80031a4 <uartTask+0x2e8>)
 8002f24:	49a0      	ldr	r1, [pc, #640]	; (80031a8 <uartTask+0x2ec>)
 8002f26:	f007 f8cb 	bl	800a0c0 <siscanf>

			timeNow.time_in_sec = timeNow.gio * 3600 + timeNow.phut * 60 + timeNow.giay;
 8002f2a:	4b9e      	ldr	r3, [pc, #632]	; (80031a4 <uartTask+0x2e8>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002f34:	fb03 f202 	mul.w	r2, r3, r2
 8002f38:	4b9a      	ldr	r3, [pc, #616]	; (80031a4 <uartTask+0x2e8>)
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	460b      	mov	r3, r1
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a5b      	subs	r3, r3, r1
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	4a96      	ldr	r2, [pc, #600]	; (80031a4 <uartTask+0x2e8>)
 8002f4a:	7892      	ldrb	r2, [r2, #2]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b94      	ldr	r3, [pc, #592]	; (80031a4 <uartTask+0x2e8>)
 8002f52:	60da      	str	r2, [r3, #12]
			printf("\r\n Sync-> time now: %d:%d:%d --> time_in_sec = %d \n\r",timeNow.gio,timeNow.phut,timeNow.giay, timeNow.time_in_sec);
 8002f54:	4b93      	ldr	r3, [pc, #588]	; (80031a4 <uartTask+0x2e8>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4b92      	ldr	r3, [pc, #584]	; (80031a4 <uartTask+0x2e8>)
 8002f5c:	785b      	ldrb	r3, [r3, #1]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b90      	ldr	r3, [pc, #576]	; (80031a4 <uartTask+0x2e8>)
 8002f62:	789b      	ldrb	r3, [r3, #2]
 8002f64:	4618      	mov	r0, r3
 8002f66:	4b8f      	ldr	r3, [pc, #572]	; (80031a4 <uartTask+0x2e8>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	488f      	ldr	r0, [pc, #572]	; (80031ac <uartTask+0x2f0>)
 8002f70:	f007 f810 	bl	8009f94 <iprintf>

			UpdateStatus();
 8002f74:	f000 ffe0 	bl	8003f38 <UpdateStatus>
			sendFrame("boardConfirm");
 8002f78:	488d      	ldr	r0, [pc, #564]	; (80031b0 <uartTask+0x2f4>)
 8002f7a:	f001 fa71 	bl	8004460 <sendFrame>
 8002f7e:	e176      	b.n	800326e <uartTask+0x3b2>
		}
		else if (strstr(myApp.arrData, ">OpenDoor"))   // open door  //
 8002f80:	498c      	ldr	r1, [pc, #560]	; (80031b4 <uartTask+0x2f8>)
 8002f82:	4881      	ldr	r0, [pc, #516]	; (8003188 <uartTask+0x2cc>)
 8002f84:	f007 f9ef 	bl	800a366 <strstr>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <uartTask+0xd8>
		{
			OpenDoor();
 8002f8e:	f7ff fb37 	bl	8002600 <OpenDoor>
 8002f92:	e16c      	b.n	800326e <uartTask+0x3b2>
		}
		else if (strstr(myApp.arrData, ">CloseDoor"))  // close door //
 8002f94:	4988      	ldr	r1, [pc, #544]	; (80031b8 <uartTask+0x2fc>)
 8002f96:	487c      	ldr	r0, [pc, #496]	; (8003188 <uartTask+0x2cc>)
 8002f98:	f007 f9e5 	bl	800a366 <strstr>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <uartTask+0xec>
		{
			CloseDoor_Now();
 8002fa2:	f7ff fb77 	bl	8002694 <CloseDoor_Now>
 8002fa6:	e162      	b.n	800326e <uartTask+0x3b2>
		}
		else if(strstr(myApp.arrData,"dataColorPump")) // pump color //
 8002fa8:	4984      	ldr	r1, [pc, #528]	; (80031bc <uartTask+0x300>)
 8002faa:	4877      	ldr	r0, [pc, #476]	; (8003188 <uartTask+0x2cc>)
 8002fac:	f007 f9db 	bl	800a366 <strstr>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01f      	beq.n	8002ff6 <uartTask+0x13a>
		{
			sendFrame("boardConfirm");
 8002fb6:	487e      	ldr	r0, [pc, #504]	; (80031b0 <uartTask+0x2f4>)
 8002fb8:	f001 fa52 	bl	8004460 <sendFrame>

			motorSetting(myApp.arrData);
 8002fbc:	4872      	ldr	r0, [pc, #456]	; (8003188 <uartTask+0x2cc>)
 8002fbe:	f000 f9a3 	bl	8003308 <motorSetting>

			DISABLE_TIMER_TRON;
 8002fc2:	4b7f      	ldr	r3, [pc, #508]	; (80031c0 <uartTask+0x304>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	497e      	ldr	r1, [pc, #504]	; (80031c0 <uartTask+0x304>)
 8002fc8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002fcc:	4013      	ands	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
 8002fd0:	487c      	ldr	r0, [pc, #496]	; (80031c4 <uartTask+0x308>)
 8002fd2:	f004 fe89 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 1);
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fdc:	487a      	ldr	r0, [pc, #488]	; (80031c8 <uartTask+0x30c>)
 8002fde:	f002 fe7e 	bl	8005cde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fe8:	4878      	ldr	r0, [pc, #480]	; (80031cc <uartTask+0x310>)
 8002fea:	f002 fe78 	bl	8005cde <HAL_GPIO_WritePin>
			//disable alarm //
			setAlarm_Khuay(OFF);
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f002 f92e 	bl	8005250 <setAlarm_Khuay>
 8002ff4:	e13b      	b.n	800326e <uartTask+0x3b2>
			//AlarmOff();
		}

		/* dung pha mau */
		else if(strstr(myApp.arrData,"<stopPhaMau>"))
 8002ff6:	4976      	ldr	r1, [pc, #472]	; (80031d0 <uartTask+0x314>)
 8002ff8:	4863      	ldr	r0, [pc, #396]	; (8003188 <uartTask+0x2cc>)
 8002ffa:	f007 f9b4 	bl	800a366 <strstr>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <uartTask+0x15a>
		{
			printf("stopPhaMau--> Huy_Lenh\n\r");
 8003004:	4873      	ldr	r0, [pc, #460]	; (80031d4 <uartTask+0x318>)
 8003006:	f006 ffc5 	bl	8009f94 <iprintf>
			s_action_pump = PUMP_MACHINE_CLOSE_DOOR;
 800300a:	4b73      	ldr	r3, [pc, #460]	; (80031d8 <uartTask+0x31c>)
 800300c:	2205      	movs	r2, #5
 800300e:	701a      	strb	r2, [r3, #0]
			stopPump();
 8003010:	f000 fcd8 	bl	80039c4 <stopPump>
 8003014:	e12b      	b.n	800326e <uartTask+0x3b2>
		}

		else if(strstr(myApp.arrData,"RuaDauPhun"))
 8003016:	4971      	ldr	r1, [pc, #452]	; (80031dc <uartTask+0x320>)
 8003018:	485b      	ldr	r0, [pc, #364]	; (8003188 <uartTask+0x2cc>)
 800301a:	f007 f9a4 	bl	800a366 <strstr>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <uartTask+0x174>
		{
			printf(" command rua dau phun \n\r");
 8003024:	486e      	ldr	r0, [pc, #440]	; (80031e0 <uartTask+0x324>)
 8003026:	f006 ffb5 	bl	8009f94 <iprintf>
			//ruaDauPhun();
			ruaDauPhun_Mililit();
 800302a:	f7ff fd0d 	bl	8002a48 <ruaDauPhun_Mililit>
 800302e:	e11e      	b.n	800326e <uartTask+0x3b2>
		}

		else if (strstr(myApp.arrData, "luongMauPhunRa"))  /// luong mau phu ra khi ve sinh //
 8003030:	496c      	ldr	r1, [pc, #432]	; (80031e4 <uartTask+0x328>)
 8003032:	4855      	ldr	r0, [pc, #340]	; (8003188 <uartTask+0x2cc>)
 8003034:	f007 f997 	bl	800a366 <strstr>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d020      	beq.n	8003080 <uartTask+0x1c4>
		{
			printf("luongMauPhunRa\n\r");
 800303e:	486a      	ldr	r0, [pc, #424]	; (80031e8 <uartTask+0x32c>)
 8003040:	f006 ffa8 	bl	8009f94 <iprintf>
			int value;
			sscanf(myApp.arrData, "luongMauPhunRa[%d]", &value);
 8003044:	f107 0308 	add.w	r3, r7, #8
 8003048:	461a      	mov	r2, r3
 800304a:	4968      	ldr	r1, [pc, #416]	; (80031ec <uartTask+0x330>)
 800304c:	484e      	ldr	r0, [pc, #312]	; (8003188 <uartTask+0x2cc>)
 800304e:	f007 f837 	bl	800a0c0 <siscanf>
			khuayMau.luongMauPhunRa.value = value;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	b29a      	uxth	r2, r3
 8003056:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <uartTask+0x334>)
 8003058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			eep_write_word(khuayMau.luongMauPhunRa.address, khuayMau.luongMauPhunRa.value);
 800305c:	4b64      	ldr	r3, [pc, #400]	; (80031f0 <uartTask+0x334>)
 800305e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003062:	4a63      	ldr	r2, [pc, #396]	; (80031f0 <uartTask+0x334>)
 8003064:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f002 f900 	bl	8005270 <eep_write_word>
			printf("\nkhuayMau.luongMauPhunRa.value=%d \r\n", khuayMau.luongMauPhunRa.value);
 8003070:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <uartTask+0x334>)
 8003072:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003076:	4619      	mov	r1, r3
 8003078:	485e      	ldr	r0, [pc, #376]	; (80031f4 <uartTask+0x338>)
 800307a:	f006 ff8b 	bl	8009f94 <iprintf>
 800307e:	e0f6      	b.n	800326e <uartTask+0x3b2>
		}

		/*  cai dat thoi chu ki xung bom son */
		else if (strstr(myApp.arrData, "Ton_Bommau"))  ////// OK ////
 8003080:	495d      	ldr	r1, [pc, #372]	; (80031f8 <uartTask+0x33c>)
 8003082:	4841      	ldr	r0, [pc, #260]	; (8003188 <uartTask+0x2cc>)
 8003084:	f007 f96f 	bl	800a366 <strstr>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d018      	beq.n	80030c0 <uartTask+0x204>
		{
			int Ton;
			sscanf(myApp.arrData, "Ton_Bommau[%d]", &Ton);
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	461a      	mov	r2, r3
 8003092:	495a      	ldr	r1, [pc, #360]	; (80031fc <uartTask+0x340>)
 8003094:	483c      	ldr	r0, [pc, #240]	; (8003188 <uartTask+0x2cc>)
 8003096:	f007 f813 	bl	800a0c0 <siscanf>
			printf("Setting Ton_Bommau: %d \r\n", Ton);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4619      	mov	r1, r3
 800309e:	4858      	ldr	r0, [pc, #352]	; (8003200 <uartTask+0x344>)
 80030a0:	f006 ff78 	bl	8009f94 <iprintf>
			eep_write_word(doRongXungBomMau_addr, Ton);
 80030a4:	4b57      	ldr	r3, [pc, #348]	; (8003204 <uartTask+0x348>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	b292      	uxth	r2, r2
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 f8de 	bl	8005270 <eep_write_word>
			TimerBomMau_SetFulseUs((uint16_t)Ton);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	f002 f83f 	bl	800513c <TimerBomMau_SetFulseUs>
 80030be:	e0d6      	b.n	800326e <uartTask+0x3b2>
		}
		/*  cai dat thoi chu kin xung tron son */
		else if (strstr(myApp.arrData, "Ton_TronSon"))
 80030c0:	4951      	ldr	r1, [pc, #324]	; (8003208 <uartTask+0x34c>)
 80030c2:	4831      	ldr	r0, [pc, #196]	; (8003188 <uartTask+0x2cc>)
 80030c4:	f007 f94f 	bl	800a366 <strstr>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d027      	beq.n	800311e <uartTask+0x262>
		{
			HAL_TIM_Base_Stop_IT(&htim4);
 80030ce:	482d      	ldr	r0, [pc, #180]	; (8003184 <uartTask+0x2c8>)
 80030d0:	f004 fe0a 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
			int Ton;
			sscanf(myApp.arrData, "Ton_TronSon[%d]", &Ton);
 80030d4:	463b      	mov	r3, r7
 80030d6:	461a      	mov	r2, r3
 80030d8:	494c      	ldr	r1, [pc, #304]	; (800320c <uartTask+0x350>)
 80030da:	482b      	ldr	r0, [pc, #172]	; (8003188 <uartTask+0x2cc>)
 80030dc:	f006 fff0 	bl	800a0c0 <siscanf>
			printf("Setting Ton_TronSon: %d \n\r", Ton);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4619      	mov	r1, r3
 80030e4:	484a      	ldr	r0, [pc, #296]	; (8003210 <uartTask+0x354>)
 80030e6:	f006 ff55 	bl	8009f94 <iprintf>
			khuayMau.doRongXung.value = Ton;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4b40      	ldr	r3, [pc, #256]	; (80031f0 <uartTask+0x334>)
 80030f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			eep_write_word(khuayMau.doRongXung.address, khuayMau.doRongXung.value);
 80030f4:	4b3e      	ldr	r3, [pc, #248]	; (80031f0 <uartTask+0x334>)
 80030f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80030fa:	4a3d      	ldr	r2, [pc, #244]	; (80031f0 <uartTask+0x334>)
 80030fc:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f002 f8b4 	bl	8005270 <eep_write_word>
			printf("Khuay mau Ton=%d\n\r", Ton);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	4841      	ldr	r0, [pc, #260]	; (8003214 <uartTask+0x358>)
 800310e:	f006 ff41 	bl	8009f94 <iprintf>
			TimerKhuayMau_SetFulseUs((uint16_t) Ton);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	4618      	mov	r0, r3
 8003118:	f002 f844 	bl	80051a4 <TimerKhuayMau_SetFulseUs>
 800311c:	e0a7      	b.n	800326e <uartTask+0x3b2>
		}

		else if(strstr(myApp.arrData,"Alarm"))
 800311e:	493e      	ldr	r1, [pc, #248]	; (8003218 <uartTask+0x35c>)
 8003120:	4819      	ldr	r0, [pc, #100]	; (8003188 <uartTask+0x2cc>)
 8003122:	f007 f920 	bl	800a366 <strstr>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <uartTask+0x276>
		{
			AlarmSetting();
 800312c:	f000 fcae 	bl	8003a8c <AlarmSetting>
 8003130:	e09d      	b.n	800326e <uartTask+0x3b2>
		}

		else if (strstr(myApp.arrData, "KhuayMau"))
 8003132:	493a      	ldr	r1, [pc, #232]	; (800321c <uartTask+0x360>)
 8003134:	4814      	ldr	r0, [pc, #80]	; (8003188 <uartTask+0x2cc>)
 8003136:	f007 f916 	bl	800a366 <strstr>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d071      	beq.n	8003224 <uartTask+0x368>
		{
			printf("Khac phuc loi-->>KhuayMau\n\r");
 8003140:	4837      	ldr	r0, [pc, #220]	; (8003220 <uartTask+0x364>)
 8003142:	f006 ff27 	bl	8009f94 <iprintf>
			//điều khiển khuấy màu trực tiếp
			setAlarm_Khuay(OFF);
 8003146:	2000      	movs	r0, #0
 8003148:	f002 f882 	bl	8005250 <setAlarm_Khuay>
			HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 0);
 800314c:	2200      	movs	r2, #0
 800314e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003152:	481d      	ldr	r0, [pc, #116]	; (80031c8 <uartTask+0x30c>)
 8003154:	f002 fdc3 	bl	8005cde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 8003158:	2200      	movs	r2, #0
 800315a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800315e:	481b      	ldr	r0, [pc, #108]	; (80031cc <uartTask+0x310>)
 8003160:	f002 fdbd 	bl	8005cde <HAL_GPIO_WritePin>
			ENABLE_TIMER_TRON;
 8003164:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <uartTask+0x304>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <uartTask+0x304>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4814      	ldr	r0, [pc, #80]	; (80031c4 <uartTask+0x308>)
 8003172:	f004 fd59 	bl	8007c28 <HAL_TIM_Base_Start_IT>
 8003176:	e07a      	b.n	800326e <uartTask+0x3b2>
 8003178:	20000010 	.word	0x20000010
 800317c:	200009c0 	.word	0x200009c0
 8003180:	20000a08 	.word	0x20000a08
 8003184:	20000a50 	.word	0x20000a50
 8003188:	20000016 	.word	0x20000016
 800318c:	0800e74c 	.word	0x0800e74c
 8003190:	0800e758 	.word	0x0800e758
 8003194:	0800e760 	.word	0x0800e760
 8003198:	0800e764 	.word	0x0800e764
 800319c:	2000121a 	.word	0x2000121a
 80031a0:	20001219 	.word	0x20001219
 80031a4:	20001218 	.word	0x20001218
 80031a8:	0800e768 	.word	0x0800e768
 80031ac:	0800e774 	.word	0x0800e774
 80031b0:	0800e7ac 	.word	0x0800e7ac
 80031b4:	0800e7bc 	.word	0x0800e7bc
 80031b8:	0800e7c8 	.word	0x0800e7c8
 80031bc:	0800e7d4 	.word	0x0800e7d4
 80031c0:	40001000 	.word	0x40001000
 80031c4:	20000ae0 	.word	0x20000ae0
 80031c8:	40010800 	.word	0x40010800
 80031cc:	40011000 	.word	0x40011000
 80031d0:	0800e7e4 	.word	0x0800e7e4
 80031d4:	0800e7f4 	.word	0x0800e7f4
 80031d8:	20000bf6 	.word	0x20000bf6
 80031dc:	0800e810 	.word	0x0800e810
 80031e0:	0800e81c 	.word	0x0800e81c
 80031e4:	0800e838 	.word	0x0800e838
 80031e8:	0800e848 	.word	0x0800e848
 80031ec:	0800e85c 	.word	0x0800e85c
 80031f0:	2000023c 	.word	0x2000023c
 80031f4:	0800e870 	.word	0x0800e870
 80031f8:	0800e898 	.word	0x0800e898
 80031fc:	0800e8a4 	.word	0x0800e8a4
 8003200:	0800e8b4 	.word	0x0800e8b4
 8003204:	200002ac 	.word	0x200002ac
 8003208:	0800e8d0 	.word	0x0800e8d0
 800320c:	0800e8dc 	.word	0x0800e8dc
 8003210:	0800e8ec 	.word	0x0800e8ec
 8003214:	0800e908 	.word	0x0800e908
 8003218:	0800e91c 	.word	0x0800e91c
 800321c:	0800e924 	.word	0x0800e924
 8003220:	0800e930 	.word	0x0800e930
		}
		else if (strstr(myApp.arrData, "DungKhuay"))
 8003224:	4915      	ldr	r1, [pc, #84]	; (800327c <uartTask+0x3c0>)
 8003226:	4816      	ldr	r0, [pc, #88]	; (8003280 <uartTask+0x3c4>)
 8003228:	f007 f89d 	bl	800a366 <strstr>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01d      	beq.n	800326e <uartTask+0x3b2>
		{
			printf("Khac phuc loi-->> DungKhuay\n\r");
 8003232:	4814      	ldr	r0, [pc, #80]	; (8003284 <uartTask+0x3c8>)
 8003234:	f006 feae 	bl	8009f94 <iprintf>
			setAlarm_Khuay(ON);
 8003238:	2001      	movs	r0, #1
 800323a:	f002 f809 	bl	8005250 <setAlarm_Khuay>
			DISABLE_TIMER_TRON;
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <uartTask+0x3cc>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4911      	ldr	r1, [pc, #68]	; (8003288 <uartTask+0x3cc>)
 8003244:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003248:	4013      	ands	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	480f      	ldr	r0, [pc, #60]	; (800328c <uartTask+0x3d0>)
 800324e:	f004 fd4b 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
			HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 1);
 8003252:	2201      	movs	r2, #1
 8003254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003258:	480d      	ldr	r0, [pc, #52]	; (8003290 <uartTask+0x3d4>)
 800325a:	f002 fd40 	bl	8005cde <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003264:	480b      	ldr	r0, [pc, #44]	; (8003294 <uartTask+0x3d8>)
 8003266:	f002 fd3a 	bl	8005cde <HAL_GPIO_WritePin>
			//disable alarm //
			AlarmOff();
 800326a:	f001 fb15 	bl	8004898 <AlarmOff>
		}
		else;

		uartAppClear(&myApp);
 800326e:	480a      	ldr	r0, [pc, #40]	; (8003298 <uartTask+0x3dc>)
 8003270:	f7ff f8e8 	bl	8002444 <uartAppClear>
//		HAL_TIM_Base_Start_IT(&htim2);

//		HAL_TIM_Base_Start_IT(&htim4);
	}
}
 8003274:	bf00      	nop
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	0800e94c 	.word	0x0800e94c
 8003280:	20000016 	.word	0x20000016
 8003284:	0800e958 	.word	0x0800e958
 8003288:	40001000 	.word	0x40001000
 800328c:	20000ae0 	.word	0x20000ae0
 8003290:	40010800 	.word	0x40010800
 8003294:	40011000 	.word	0x40011000
 8003298:	20000010 	.word	0x20000010

0800329c <doorTask>:

static void doorTask(uint8_t doorState)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
	if(s_doorAction == DOOR_OPENING)
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <doorTask+0x58>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <doorTask+0x26>
	{
		if(Sensor_Door_Open_State == STATE_SENSOR_ON)
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <doorTask+0x5c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d104      	bne.n	80032c2 <doorTask+0x26>
		{
			HAL_TIM_Base_Stop_IT(&htim5);
 80032b8:	4810      	ldr	r0, [pc, #64]	; (80032fc <doorTask+0x60>)
 80032ba:	f004 fd15 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
			doorState = DOOR_OPEN_OK;
 80032be:	2303      	movs	r3, #3
 80032c0:	71fb      	strb	r3, [r7, #7]
		}
	}

	if(s_doorAction == DOOR_CLOSING)
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <doorTask+0x58>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d10e      	bne.n	80032ea <doorTask+0x4e>
	{
		if(Sensor_Door_Close_State == STATE_SENSOR_ON)
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <doorTask+0x64>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <doorTask+0x4e>
		{
			HAL_Delay(s_doorDelay);
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <doorTask+0x68>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 f8e0 	bl	80054a0 <HAL_Delay>
			HAL_TIM_Base_Stop_IT(&htim5);
 80032e0:	4806      	ldr	r0, [pc, #24]	; (80032fc <doorTask+0x60>)
 80032e2:	f004 fd01 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
			doorState = DOOR_CLOSE_OK;
 80032e6:	2304      	movs	r3, #4
 80032e8:	71fb      	strb	r3, [r7, #7]
		}
	}
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000bfc 	.word	0x20000bfc
 80032f8:	20000004 	.word	0x20000004
 80032fc:	20000a98 	.word	0x20000a98
 8003300:	20000008 	.word	0x20000008
 8003304:	20000bfe 	.word	0x20000bfe

08003308 <motorSetting>:
 -3  xung 1ml
 -4  xung 0.1ml
 -5  xung 0.01ml
 * */
static void motorSetting(char *str)
{
 8003308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330a:	b0b5      	sub	sp, #212	; 0xd4
 800330c:	af04      	add	r7, sp, #16
 800330e:	6078      	str	r0, [r7, #4]

	printf(" goto motor setting: %s \n\r", str);
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	48be      	ldr	r0, [pc, #760]	; (800360c <motorSetting+0x304>)
 8003314:	f006 fe3e 	bl	8009f94 <iprintf>

	uint8_t MAX_PUMP = 7;
 8003318:	2307      	movs	r3, #7
 800331a:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
	char txt[7][20];

	uint8_t i;

    /* check sensor thung son and notify */
    if(Sensor_Laze_State != STATE_SENSOR_ON)
 800331e:	4bbc      	ldr	r3, [pc, #752]	; (8003610 <motorSetting+0x308>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <motorSetting+0x34>
    {
    	speaker_efect();
 8003326:	f001 f875 	bl	8004414 <speaker_efect>
    	speaker_efect();
 800332a:	f001 f873 	bl	8004414 <speaker_efect>
    	sendFrame("choThungSonVao");
 800332e:	48b9      	ldr	r0, [pc, #740]	; (8003614 <motorSetting+0x30c>)
 8003330:	f001 f896 	bl	8004460 <sendFrame>
    	printf("choThungSonVao\n\r");
 8003334:	48b8      	ldr	r0, [pc, #736]	; (8003618 <motorSetting+0x310>)
 8003336:	f006 fe2d 	bl	8009f94 <iprintf>
 800333a:	e276      	b.n	800382a <motorSetting+0x522>
    	return;
    }

	/* reset setting of motor */
	for (motorIndex = 0; motorIndex < 16; motorIndex++)
 800333c:	2300      	movs	r3, #0
 800333e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8003342:	e055      	b.n	80033f0 <motorSetting+0xe8>
	{
		bomMau[i].mililit = 0;
 8003344:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 8003348:	49b4      	ldr	r1, [pc, #720]	; (800361c <motorSetting+0x314>)
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	440b      	add	r3, r1
 8003354:	3314      	adds	r3, #20
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
		bomMau[i].countHighSpeed = 0;
 800335c:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 8003360:	49ae      	ldr	r1, [pc, #696]	; (800361c <motorSetting+0x314>)
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	440b      	add	r3, r1
 800336c:	330c      	adds	r3, #12
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
		bomMau[i].countLowSpeed = 0;
 8003372:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 8003376:	49a9      	ldr	r1, [pc, #676]	; (800361c <motorSetting+0x314>)
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	440b      	add	r3, r1
 8003382:	3310      	adds	r3, #16
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
		bomMau[i].Counter_Ton = 0;
 8003388:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 800338c:	49a3      	ldr	r1, [pc, #652]	; (800361c <motorSetting+0x314>)
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	440b      	add	r3, r1
 8003398:	3330      	adds	r3, #48	; 0x30
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
		bomMau[i].sleep = SLEEP;
 800339e:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 80033a2:	499e      	ldr	r1, [pc, #632]	; (800361c <motorSetting+0x314>)
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	440b      	add	r3, r1
 80033ae:	3301      	adds	r3, #1
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(bomMau[i].EN_Port, bomMau[i].EN_Pin, 1);
 80033b4:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 80033b8:	4998      	ldr	r1, [pc, #608]	; (800361c <motorSetting+0x314>)
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	440b      	add	r3, r1
 80033c4:	3348      	adds	r3, #72	; 0x48
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 80033cc:	4993      	ldr	r1, [pc, #588]	; (800361c <motorSetting+0x314>)
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	440b      	add	r3, r1
 80033d8:	334c      	adds	r3, #76	; 0x4c
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2201      	movs	r2, #1
 80033e0:	4619      	mov	r1, r3
 80033e2:	f002 fc7c 	bl	8005cde <HAL_GPIO_WritePin>
	for (motorIndex = 0; motorIndex < 16; motorIndex++)
 80033e6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80033ea:	3301      	adds	r3, #1
 80033ec:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80033f0:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80033f4:	2b0f      	cmp	r3, #15
 80033f6:	d9a5      	bls.n	8003344 <motorSetting+0x3c>
	}

	/* memset memory control */
	for (i = 0; i < MAX_PUMP; i++)
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 80033fe:	e012      	b.n	8003426 <motorSetting+0x11e>
		memset(txt[i], 0, 20);
 8003400:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 8003404:	f107 010c 	add.w	r1, r7, #12
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	2214      	movs	r2, #20
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f006 ff90 	bl	800a33c <memset>
	for (i = 0; i < MAX_PUMP; i++)
 800341c:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8003420:	3301      	adds	r3, #1
 8003422:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8003426:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 800342a:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 800342e:	429a      	cmp	r2, r3
 8003430:	d3e6      	bcc.n	8003400 <motorSetting+0xf8>

	/* parse data control message */
	char* time0 = str + 17;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3311      	adds	r3, #17
 8003436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	char* time1 = FIND_AND_NUL(time0+3, time1, ']');   /*  printf("time 1 = %s \n\r", time0);    */    sprintf(txt[0], "%s",(const char*) time0);
 800343a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800343e:	3303      	adds	r3, #3
 8003440:	215d      	movs	r1, #93	; 0x5d
 8003442:	4618      	mov	r0, r3
 8003444:	f006 ff82 	bl	800a34c <strchr>
 8003448:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 800344c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003458:	3301      	adds	r3, #1
 800345a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800345e:	f107 030c 	add.w	r3, r7, #12
 8003462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003466:	496e      	ldr	r1, [pc, #440]	; (8003620 <motorSetting+0x318>)
 8003468:	4618      	mov	r0, r3
 800346a:	f006 fe09 	bl	800a080 <siprintf>
	char* time2 = FIND_AND_NUL(time1+3, time2, ']');   /*  printf("time 2 = %s \n\r", time1+4);  */    sprintf(txt[1], "%s",(const char*) time1+4);
 800346e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003472:	3303      	adds	r3, #3
 8003474:	215d      	movs	r1, #93	; 0x5d
 8003476:	4618      	mov	r0, r3
 8003478:	f006 ff68 	bl	800a34c <strchr>
 800347c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8003480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800348c:	3301      	adds	r3, #1
 800348e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003492:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003496:	1d1a      	adds	r2, r3, #4
 8003498:	f107 030c 	add.w	r3, r7, #12
 800349c:	3314      	adds	r3, #20
 800349e:	4960      	ldr	r1, [pc, #384]	; (8003620 <motorSetting+0x318>)
 80034a0:	4618      	mov	r0, r3
 80034a2:	f006 fded 	bl	800a080 <siprintf>
	char* time3 = FIND_AND_NUL(time2+3, time3, ']');   /*  printf("time 3 = %s \n\r", time2+4);  */    sprintf(txt[2], "%s",(const char*) time2+4);
 80034a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034aa:	3303      	adds	r3, #3
 80034ac:	215d      	movs	r1, #93	; 0x5d
 80034ae:	4618      	mov	r0, r3
 80034b0:	f006 ff4c 	bl	800a34c <strchr>
 80034b4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80034b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034c4:	3301      	adds	r3, #1
 80034c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034ce:	1d1a      	adds	r2, r3, #4
 80034d0:	f107 030c 	add.w	r3, r7, #12
 80034d4:	3328      	adds	r3, #40	; 0x28
 80034d6:	4952      	ldr	r1, [pc, #328]	; (8003620 <motorSetting+0x318>)
 80034d8:	4618      	mov	r0, r3
 80034da:	f006 fdd1 	bl	800a080 <siprintf>
	char* time4 = FIND_AND_NUL(time3+3, time4, ']');   /*  printf("time 3 = %s \n\r", time3+4);  */    sprintf(txt[3], "%s",(const char*) time3+4);
 80034de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034e2:	3303      	adds	r3, #3
 80034e4:	215d      	movs	r1, #93	; 0x5d
 80034e6:	4618      	mov	r0, r3
 80034e8:	f006 ff30 	bl	800a34c <strchr>
 80034ec:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80034f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034fc:	3301      	adds	r3, #1
 80034fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003506:	1d1a      	adds	r2, r3, #4
 8003508:	f107 030c 	add.w	r3, r7, #12
 800350c:	333c      	adds	r3, #60	; 0x3c
 800350e:	4944      	ldr	r1, [pc, #272]	; (8003620 <motorSetting+0x318>)
 8003510:	4618      	mov	r0, r3
 8003512:	f006 fdb5 	bl	800a080 <siprintf>
	char* time5 = FIND_AND_NUL(time4+3, time5, ']');   /*  printf("time 3 = %s \n\r", time4+4);  */    sprintf(txt[4], "%s",(const char*) time4+4);
 8003516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800351a:	3303      	adds	r3, #3
 800351c:	215d      	movs	r1, #93	; 0x5d
 800351e:	4618      	mov	r0, r3
 8003520:	f006 ff14 	bl	800a34c <strchr>
 8003524:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8003528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003534:	3301      	adds	r3, #1
 8003536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800353a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	f107 030c 	add.w	r3, r7, #12
 8003544:	3350      	adds	r3, #80	; 0x50
 8003546:	4936      	ldr	r1, [pc, #216]	; (8003620 <motorSetting+0x318>)
 8003548:	4618      	mov	r0, r3
 800354a:	f006 fd99 	bl	800a080 <siprintf>
	char* time6 = FIND_AND_NUL(time5+3, time6, ']');   /*  printf("time 3 = %s \n\r", time5+4);  */    sprintf(txt[5], "%s",(const char*) time5+4);
 800354e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003552:	3303      	adds	r3, #3
 8003554:	215d      	movs	r1, #93	; 0x5d
 8003556:	4618      	mov	r0, r3
 8003558:	f006 fef8 	bl	800a34c <strchr>
 800355c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8003560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800356c:	3301      	adds	r3, #1
 800356e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003576:	1d1a      	adds	r2, r3, #4
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	3364      	adds	r3, #100	; 0x64
 800357e:	4928      	ldr	r1, [pc, #160]	; (8003620 <motorSetting+0x318>)
 8003580:	4618      	mov	r0, r3
 8003582:	f006 fd7d 	bl	800a080 <siprintf>
	char* time7 = FIND_AND_NUL(time6+3, time7, ']');   /*  printf("time 3 = %s \n\r", time6+4);  */    sprintf(txt[6], "%s",(const char*) time6+4);
 8003586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800358a:	3303      	adds	r3, #3
 800358c:	215d      	movs	r1, #93	; 0x5d
 800358e:	4618      	mov	r0, r3
 8003590:	f006 fedc 	bl	800a34c <strchr>
 8003594:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8003598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035a4:	3301      	adds	r3, #1
 80035a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	f107 030c 	add.w	r3, r7, #12
 80035b4:	3378      	adds	r3, #120	; 0x78
 80035b6:	491a      	ldr	r1, [pc, #104]	; (8003620 <motorSetting+0x318>)
 80035b8:	4618      	mov	r0, r3
 80035ba:	f006 fd61 	bl	800a080 <siprintf>

	for (i = 0; i < MAX_PUMP; i++)
 80035be:	2300      	movs	r3, #0
 80035c0:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 80035c4:	e014      	b.n	80035f0 <motorSetting+0x2e8>
	{
		printf("txt[%d] = %s \n\r", i, (const char*) txt[i]);
 80035c6:	f897 00be 	ldrb.w	r0, [r7, #190]	; 0xbe
 80035ca:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 80035ce:	f107 010c 	add.w	r1, r7, #12
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	461a      	mov	r2, r3
 80035de:	4601      	mov	r1, r0
 80035e0:	4810      	ldr	r0, [pc, #64]	; (8003624 <motorSetting+0x31c>)
 80035e2:	f006 fcd7 	bl	8009f94 <iprintf>
	for (i = 0; i < MAX_PUMP; i++)
 80035e6:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80035ea:	3301      	adds	r3, #1
 80035ec:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 80035f0:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 80035f4:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d3e4      	bcc.n	80035c6 <motorSetting+0x2be>
	}
	printf("  \n\r");
 80035fc:	480a      	ldr	r0, [pc, #40]	; (8003628 <motorSetting+0x320>)
 80035fe:	f006 fcc9 	bl	8009f94 <iprintf>
	/* scanf value char to int */
    for (i = 0; i < MAX_PUMP; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8003608:	e108      	b.n	800381c <motorSetting+0x514>
 800360a:	bf00      	nop
 800360c:	0800e978 	.word	0x0800e978
 8003610:	2000000c 	.word	0x2000000c
 8003614:	0800e4d0 	.word	0x0800e4d0
 8003618:	0800e4e0 	.word	0x0800e4e0
 800361c:	20000d04 	.word	0x20000d04
 8003620:	0800e5c4 	.word	0x0800e5c4
 8003624:	0800e994 	.word	0x0800e994
 8003628:	0800e9a4 	.word	0x0800e9a4
	{
	    sscanf(txt[i], "%f,%d,%d,%d,%d", &num1, &num2, &num3, &num4, &num5);
 800362c:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 8003630:	f107 010c 	add.w	r1, r7, #12
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	18c8      	adds	r0, r1, r3
 800363e:	4b7c      	ldr	r3, [pc, #496]	; (8003830 <motorSetting+0x528>)
 8003640:	9302      	str	r3, [sp, #8]
 8003642:	4b7c      	ldr	r3, [pc, #496]	; (8003834 <motorSetting+0x52c>)
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	4b7c      	ldr	r3, [pc, #496]	; (8003838 <motorSetting+0x530>)
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	4b7c      	ldr	r3, [pc, #496]	; (800383c <motorSetting+0x534>)
 800364c:	4a7c      	ldr	r2, [pc, #496]	; (8003840 <motorSetting+0x538>)
 800364e:	497d      	ldr	r1, [pc, #500]	; (8003844 <motorSetting+0x53c>)
 8003650:	f006 fd36 	bl	800a0c0 <siscanf>
	    if (num2 > 0 && num2 < 20)
 8003654:	4b79      	ldr	r3, [pc, #484]	; (800383c <motorSetting+0x534>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80da 	beq.w	8003812 <motorSetting+0x50a>
 800365e:	4b77      	ldr	r3, [pc, #476]	; (800383c <motorSetting+0x534>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	2b13      	cmp	r3, #19
 8003664:	f200 80d5 	bhi.w	8003812 <motorSetting+0x50a>
	    {
	    	printf("\r\n Ong mau: %d ", num2);
 8003668:	4b74      	ldr	r3, [pc, #464]	; (800383c <motorSetting+0x534>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	4619      	mov	r1, r3
 800366e:	4876      	ldr	r0, [pc, #472]	; (8003848 <motorSetting+0x540>)
 8003670:	f006 fc90 	bl	8009f94 <iprintf>
	    	uint8_t id = num2 - 1;
 8003674:	4b71      	ldr	r3, [pc, #452]	; (800383c <motorSetting+0x534>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	    	bomMau[id].mililit		=	0;
 8003680:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8003684:	4971      	ldr	r1, [pc, #452]	; (800384c <motorSetting+0x544>)
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	440b      	add	r3, r1
 8003690:	3314      	adds	r3, #20
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
	    	bomMau[id].pulse1ml		=	0;
 8003698:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 800369c:	496b      	ldr	r1, [pc, #428]	; (800384c <motorSetting+0x544>)
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	440b      	add	r3, r1
 80036a8:	331c      	adds	r3, #28
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
	    	bomMau[id].pulse01ml	=	0;
 80036ae:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80036b2:	4966      	ldr	r1, [pc, #408]	; (800384c <motorSetting+0x544>)
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	440b      	add	r3, r1
 80036be:	3320      	adds	r3, #32
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
	    	bomMau[id].pulse001ml	=	0;
 80036c4:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80036c8:	4960      	ldr	r1, [pc, #384]	; (800384c <motorSetting+0x544>)
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	440b      	add	r3, r1
 80036d4:	3324      	adds	r3, #36	; 0x24
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]

	    	bomMau[id].mililit		=	num1;
 80036da:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80036de:	4b58      	ldr	r3, [pc, #352]	; (8003840 <motorSetting+0x538>)
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	485a      	ldr	r0, [pc, #360]	; (800384c <motorSetting+0x544>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	4403      	add	r3, r0
 80036ee:	3314      	adds	r3, #20
 80036f0:	6019      	str	r1, [r3, #0]
	    	bomMau[id].pulse1ml		=	num3;
 80036f2:	4b51      	ldr	r3, [pc, #324]	; (8003838 <motorSetting+0x530>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80036fa:	4618      	mov	r0, r3
 80036fc:	4953      	ldr	r1, [pc, #332]	; (800384c <motorSetting+0x544>)
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	440b      	add	r3, r1
 8003708:	331c      	adds	r3, #28
 800370a:	6018      	str	r0, [r3, #0]
	    	bomMau[id].pulse01ml	=	num4;
 800370c:	4b49      	ldr	r3, [pc, #292]	; (8003834 <motorSetting+0x52c>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8003714:	4618      	mov	r0, r3
 8003716:	494d      	ldr	r1, [pc, #308]	; (800384c <motorSetting+0x544>)
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	440b      	add	r3, r1
 8003722:	3320      	adds	r3, #32
 8003724:	6018      	str	r0, [r3, #0]
	    	bomMau[id].pulse001ml	=	num5;
 8003726:	4b42      	ldr	r3, [pc, #264]	; (8003830 <motorSetting+0x528>)
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 800372e:	4618      	mov	r0, r3
 8003730:	4946      	ldr	r1, [pc, #280]	; (800384c <motorSetting+0x544>)
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	440b      	add	r3, r1
 800373c:	3324      	adds	r3, #36	; 0x24
 800373e:	6018      	str	r0, [r3, #0]

			bomMau[id].sleep=RUN;
 8003740:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8003744:	4941      	ldr	r1, [pc, #260]	; (800384c <motorSetting+0x544>)
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	440b      	add	r3, r1
 8003750:	3301      	adds	r3, #1
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
            // enable EN pin //

			s_action_pump = PUMP_ACTION_PUMP;
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <motorSetting+0x548>)
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
			s_pump_machine = PUMP_MACHINE_OPEN_DOOR;
 800375c:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <motorSetting+0x54c>)
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]

			sprintf(notify_message_action, "%s", "dangPhaMau" );
 8003762:	4a3d      	ldr	r2, [pc, #244]	; (8003858 <motorSetting+0x550>)
 8003764:	493d      	ldr	r1, [pc, #244]	; (800385c <motorSetting+0x554>)
 8003766:	483e      	ldr	r0, [pc, #248]	; (8003860 <motorSetting+0x558>)
 8003768:	f006 fc8a 	bl	800a080 <siprintf>
			sprintf(notify_message_finish, "%s", "phaMauXong" );
 800376c:	4a3d      	ldr	r2, [pc, #244]	; (8003864 <motorSetting+0x55c>)
 800376e:	493b      	ldr	r1, [pc, #236]	; (800385c <motorSetting+0x554>)
 8003770:	483d      	ldr	r0, [pc, #244]	; (8003868 <motorSetting+0x560>)
 8003772:	f006 fc85 	bl	800a080 <siprintf>

			calc_colorPulseOutput(&bomMau[id]);
 8003776:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4a32      	ldr	r2, [pc, #200]	; (800384c <motorSetting+0x544>)
 8003784:	4413      	add	r3, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f000 ff68 	bl	800465c <calc_colorPulseOutput>
			//bomMauStart=true;
	    	printf("app_Handler: ml=%f,pulse1ml=%d,pulse01ml=%d,pulse001ml=%d \r\n", bomMau[id].mililit, bomMau[id].pulse1ml, bomMau[id].pulse01ml, bomMau[id].pulse001ml);
 800378c:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8003790:	492e      	ldr	r1, [pc, #184]	; (800384c <motorSetting+0x544>)
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	440b      	add	r3, r1
 800379c:	3314      	adds	r3, #20
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fc ff61 	bl	8000668 <__aeabi_f2d>
 80037a6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80037aa:	4c28      	ldr	r4, [pc, #160]	; (800384c <motorSetting+0x544>)
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	4423      	add	r3, r4
 80037b6:	331c      	adds	r3, #28
 80037b8:	681c      	ldr	r4, [r3, #0]
 80037ba:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80037be:	4d23      	ldr	r5, [pc, #140]	; (800384c <motorSetting+0x544>)
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	442b      	add	r3, r5
 80037ca:	3320      	adds	r3, #32
 80037cc:	681d      	ldr	r5, [r3, #0]
 80037ce:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80037d2:	4e1e      	ldr	r6, [pc, #120]	; (800384c <motorSetting+0x544>)
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	4433      	add	r3, r6
 80037de:	3324      	adds	r3, #36	; 0x24
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	9302      	str	r3, [sp, #8]
 80037e4:	9501      	str	r5, [sp, #4]
 80037e6:	9400      	str	r4, [sp, #0]
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	481f      	ldr	r0, [pc, #124]	; (800386c <motorSetting+0x564>)
 80037ee:	f006 fbd1 	bl	8009f94 <iprintf>

			num1=0; num2=0; num3=0; num4=0; num5=0;
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <motorSetting+0x538>)
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <motorSetting+0x534>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	801a      	strh	r2, [r3, #0]
 8003800:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <motorSetting+0x530>)
 8003802:	2200      	movs	r2, #0
 8003804:	801a      	strh	r2, [r3, #0]
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <motorSetting+0x52c>)
 8003808:	2200      	movs	r2, #0
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <motorSetting+0x528>)
 800380e:	2200      	movs	r2, #0
 8003810:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < MAX_PUMP; i++)
 8003812:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8003816:	3301      	adds	r3, #1
 8003818:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 800381c:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 8003820:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8003824:	429a      	cmp	r2, r3
 8003826:	f4ff af01 	bcc.w	800362c <motorSetting+0x324>
	    }
	}
}
 800382a:	37c4      	adds	r7, #196	; 0xc4
 800382c:	46bd      	mov	sp, r7
 800382e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003830:	20001216 	.word	0x20001216
 8003834:	20001214 	.word	0x20001214
 8003838:	20001212 	.word	0x20001212
 800383c:	20001210 	.word	0x20001210
 8003840:	2000120c 	.word	0x2000120c
 8003844:	0800e9ac 	.word	0x0800e9ac
 8003848:	0800e9bc 	.word	0x0800e9bc
 800384c:	20000d04 	.word	0x20000d04
 8003850:	20000bf6 	.word	0x20000bf6
 8003854:	20000bf7 	.word	0x20000bf7
 8003858:	0800e9cc 	.word	0x0800e9cc
 800385c:	0800e5c4 	.word	0x0800e5c4
 8003860:	20000bb8 	.word	0x20000bb8
 8003864:	0800e9d8 	.word	0x0800e9d8
 8003868:	20000bd8 	.word	0x20000bd8
 800386c:	0800e9e4 	.word	0x0800e9e4

08003870 <update_sensor1>:
/**************************************************************************
 * Sensor donot connect
 **************************************************************************/
static void update_sensor1(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
	update_Sensor[0] = 1;
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <update_sensor1+0x2c>)
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(INPUT1_GPIO_Port, INPUT1_Pin) == GPIO_PIN_SET)
 800387a:	2101      	movs	r1, #1
 800387c:	4808      	ldr	r0, [pc, #32]	; (80038a0 <update_sensor1+0x30>)
 800387e:	f002 fa17 	bl	8005cb0 <HAL_GPIO_ReadPin>
 8003882:	4603      	mov	r3, r0
 8003884:	2b01      	cmp	r3, #1
 8003886:	d103      	bne.n	8003890 <update_sensor1+0x20>
	{
		printf(">>>>>>>>>>>>>IN 1 ONN \n\r");
 8003888:	4806      	ldr	r0, [pc, #24]	; (80038a4 <update_sensor1+0x34>)
 800388a:	f006 fb83 	bl	8009f94 <iprintf>
	}
	else
	{
		printf(">>>>>>>>>>>>>IN 1 OFF \n\r");
	}
}
 800388e:	e002      	b.n	8003896 <update_sensor1+0x26>
		printf(">>>>>>>>>>>>>IN 1 OFF \n\r");
 8003890:	4805      	ldr	r0, [pc, #20]	; (80038a8 <update_sensor1+0x38>)
 8003892:	f006 fb7f 	bl	8009f94 <iprintf>
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000bf8 	.word	0x20000bf8
 80038a0:	40010800 	.word	0x40010800
 80038a4:	0800ea24 	.word	0x0800ea24
 80038a8:	0800ea40 	.word	0x0800ea40

080038ac <update_sensor2>:
/**************************************************************************
 * Sensor Optic laser
 **************************************************************************/
static void update_sensor2(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
	update_Sensor[1] = 1;
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <update_sensor2+0x38>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	705a      	strb	r2, [r3, #1]
	if (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin) == GPIO_PIN_SET)
 80038b6:	2102      	movs	r1, #2
 80038b8:	480b      	ldr	r0, [pc, #44]	; (80038e8 <update_sensor2+0x3c>)
 80038ba:	f002 f9f9 	bl	8005cb0 <HAL_GPIO_ReadPin>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d106      	bne.n	80038d2 <update_sensor2+0x26>
	{
		printf(">>>>>>>>>>>>>IN 2 ONN \n\r");
 80038c4:	4809      	ldr	r0, [pc, #36]	; (80038ec <update_sensor2+0x40>)
 80038c6:	f006 fb65 	bl	8009f94 <iprintf>
		Sensor_Laze_State = STATE_SENSOR_OFF;
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <update_sensor2+0x44>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
	else
	{
		printf(">>>>>>>>>>>>>IN 2 OFF \n\r");
		Sensor_Laze_State = STATE_SENSOR_ON;
	}
}
 80038d0:	e005      	b.n	80038de <update_sensor2+0x32>
		printf(">>>>>>>>>>>>>IN 2 OFF \n\r");
 80038d2:	4808      	ldr	r0, [pc, #32]	; (80038f4 <update_sensor2+0x48>)
 80038d4:	f006 fb5e 	bl	8009f94 <iprintf>
		Sensor_Laze_State = STATE_SENSOR_ON;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <update_sensor2+0x44>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000bf8 	.word	0x20000bf8
 80038e8:	40010800 	.word	0x40010800
 80038ec:	0800ea5c 	.word	0x0800ea5c
 80038f0:	2000000c 	.word	0x2000000c
 80038f4:	0800ea78 	.word	0x0800ea78

080038f8 <update_sensor3>:
/**************************************************************************
 * Sensor Open Door
 **************************************************************************/
static void update_sensor3(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
	update_Sensor[2] = 1;
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <update_sensor3+0x38>)
 80038fe:	2201      	movs	r2, #1
 8003900:	709a      	strb	r2, [r3, #2]
	if (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin) == GPIO_PIN_SET)
 8003902:	2104      	movs	r1, #4
 8003904:	480b      	ldr	r0, [pc, #44]	; (8003934 <update_sensor3+0x3c>)
 8003906:	f002 f9d3 	bl	8005cb0 <HAL_GPIO_ReadPin>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d106      	bne.n	800391e <update_sensor3+0x26>
	{
		printf(">>>>>>>>>>>>>IN 3 ONN \n\r");
 8003910:	4809      	ldr	r0, [pc, #36]	; (8003938 <update_sensor3+0x40>)
 8003912:	f006 fb3f 	bl	8009f94 <iprintf>
		Sensor_Door_Open_State = STATE_SENSOR_OFF;
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <update_sensor3+0x44>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]
	else
	{
		printf(">>>>>>>>>>>>>IN 3 OFF \n\r");
		Sensor_Door_Open_State = STATE_SENSOR_ON;
	}
}
 800391c:	e005      	b.n	800392a <update_sensor3+0x32>
		printf(">>>>>>>>>>>>>IN 3 OFF \n\r");
 800391e:	4808      	ldr	r0, [pc, #32]	; (8003940 <update_sensor3+0x48>)
 8003920:	f006 fb38 	bl	8009f94 <iprintf>
		Sensor_Door_Open_State = STATE_SENSOR_ON;
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <update_sensor3+0x44>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000bf8 	.word	0x20000bf8
 8003934:	40010800 	.word	0x40010800
 8003938:	0800ea94 	.word	0x0800ea94
 800393c:	20000004 	.word	0x20000004
 8003940:	0800eab0 	.word	0x0800eab0

08003944 <update_sensor4>:
/**************************************************************************
 * Sensor Close Door
 **************************************************************************/
static void update_sensor4(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
	update_Sensor[3] = 1;
 8003948:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <update_sensor4+0x44>)
 800394a:	2201      	movs	r2, #1
 800394c:	70da      	strb	r2, [r3, #3]
	if (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin) == GPIO_PIN_SET)
 800394e:	2108      	movs	r1, #8
 8003950:	480e      	ldr	r0, [pc, #56]	; (800398c <update_sensor4+0x48>)
 8003952:	f002 f9ad 	bl	8005cb0 <HAL_GPIO_ReadPin>
 8003956:	4603      	mov	r3, r0
 8003958:	2b01      	cmp	r3, #1
 800395a:	d106      	bne.n	800396a <update_sensor4+0x26>
	{
		printf(">>>>>>>>>>>>>IN 4 ONN \n\r");
 800395c:	480c      	ldr	r0, [pc, #48]	; (8003990 <update_sensor4+0x4c>)
 800395e:	f006 fb19 	bl	8009f94 <iprintf>
		Sensor_Door_Close_State = STATE_SENSOR_OFF;
 8003962:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <update_sensor4+0x50>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
	{
		printf(">>>>>>>>>>>>>IN 4 OFF \n\r");
		Sensor_Door_Close_State = STATE_SENSOR_ON;
		DISABLE_TIMER_DOOR;
	}
}
 8003968:	e00c      	b.n	8003984 <update_sensor4+0x40>
		printf(">>>>>>>>>>>>>IN 4 OFF \n\r");
 800396a:	480b      	ldr	r0, [pc, #44]	; (8003998 <update_sensor4+0x54>)
 800396c:	f006 fb12 	bl	8009f94 <iprintf>
		Sensor_Door_Close_State = STATE_SENSOR_ON;
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <update_sensor4+0x50>)
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
		DISABLE_TIMER_DOOR;
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <update_sensor4+0x58>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4908      	ldr	r1, [pc, #32]	; (800399c <update_sensor4+0x58>)
 800397c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003980:	4013      	ands	r3, r2
 8003982:	600b      	str	r3, [r1, #0]
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000bf8 	.word	0x20000bf8
 800398c:	40010800 	.word	0x40010800
 8003990:	0800eacc 	.word	0x0800eacc
 8003994:	20000008 	.word	0x20000008
 8003998:	0800eae8 	.word	0x0800eae8
 800399c:	40000c00 	.word	0x40000c00

080039a0 <On_Timer_Pha>:


void On_Timer_Pha(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 80039a4:	4805      	ldr	r0, [pc, #20]	; (80039bc <On_Timer_Pha+0x1c>)
 80039a6:	f004 f93f 	bl	8007c28 <HAL_TIM_Base_Start_IT>
	TIM3->CR1 |= TIM_CR1_CEN;
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <On_Timer_Pha+0x20>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <On_Timer_Pha+0x20>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6013      	str	r3, [r2, #0]
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000a08 	.word	0x20000a08
 80039c0:	40000400 	.word	0x40000400

080039c4 <stopPump>:

static void stopPump(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
	printf("stopPhaMau--> Huy_Lenh\n\r");
 80039ca:	482c      	ldr	r0, [pc, #176]	; (8003a7c <stopPump+0xb8>)
 80039cc:	f006 fae2 	bl	8009f94 <iprintf>
	for (int i = 0; i < 16; i++)
 80039d0:	2300      	movs	r3, #0
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	e042      	b.n	8003a5c <stopPump+0x98>
	{
		bomMau[i].mililit = 0;
 80039d6:	492a      	ldr	r1, [pc, #168]	; (8003a80 <stopPump+0xbc>)
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	440b      	add	r3, r1
 80039e4:	3314      	adds	r3, #20
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
		bomMau[i].countHighSpeed = 0;
 80039ec:	4924      	ldr	r1, [pc, #144]	; (8003a80 <stopPump+0xbc>)
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	440b      	add	r3, r1
 80039fa:	330c      	adds	r3, #12
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
		bomMau[i].countLowSpeed = 0;
 8003a00:	491f      	ldr	r1, [pc, #124]	; (8003a80 <stopPump+0xbc>)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3310      	adds	r3, #16
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
		calc_colorPulseOutput(&bomMau[i]);
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <stopPump+0xbc>)
 8003a20:	4413      	add	r3, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fe1a 	bl	800465c <calc_colorPulseOutput>
		out(bomMau[i].GPIOx, bomMau[i].GPIO_Pin, 0);
 8003a28:	4915      	ldr	r1, [pc, #84]	; (8003a80 <stopPump+0xbc>)
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	440b      	add	r3, r1
 8003a36:	3338      	adds	r3, #56	; 0x38
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	4911      	ldr	r1, [pc, #68]	; (8003a80 <stopPump+0xbc>)
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	440b      	add	r3, r1
 8003a48:	333c      	adds	r3, #60	; 0x3c
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2200      	movs	r2, #0
 8003a50:	4619      	mov	r1, r3
 8003a52:	f002 f944 	bl	8005cde <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b0f      	cmp	r3, #15
 8003a60:	ddb9      	ble.n	80039d6 <stopPump+0x12>
	}
	allPumpIsSleep();
 8003a62:	f7fe fd49 	bl	80024f8 <allPumpIsSleep>
	sendFrame("boardConfirm");
 8003a66:	4807      	ldr	r0, [pc, #28]	; (8003a84 <stopPump+0xc0>)
 8003a68:	f000 fcfa 	bl	8004460 <sendFrame>
	printf("stop timer 3\n\r");
 8003a6c:	4806      	ldr	r0, [pc, #24]	; (8003a88 <stopPump+0xc4>)
 8003a6e:	f006 fa91 	bl	8009f94 <iprintf>

}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	0800e7f4 	.word	0x0800e7f4
 8003a80:	20000d04 	.word	0x20000d04
 8003a84:	0800e7ac 	.word	0x0800e7ac
 8003a88:	0800eb04 	.word	0x0800eb04

08003a8c <AlarmSetting>:
	//disable alarm //
	AlarmOff();
}

static void AlarmSetting(void)
{
 8003a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8e:	b0bf      	sub	sp, #252	; 0xfc
 8003a90:	af02      	add	r7, sp, #8
	char alarmTxt[10][20];
	for (int i = 0; i < 10; i++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a98:	e048      	b.n	8003b2c <AlarmSetting+0xa0>
	{
		memset(alarmTxt[i], 0, 20);
 8003a9a:	f107 0118 	add.w	r1, r7, #24
 8003a9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	2214      	movs	r2, #20
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f006 fc43 	bl	800a33c <memset>
		timeAlarm[i].gio = 0;
 8003ab6:	4985      	ldr	r1, [pc, #532]	; (8003ccc <AlarmSetting+0x240>)
 8003ab8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
		timeAlarm[i].phut = 0;
 8003aca:	4980      	ldr	r1, [pc, #512]	; (8003ccc <AlarmSetting+0x240>)
 8003acc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	3301      	adds	r3, #1
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
		timeAlarm[i].time = 0;
 8003ae0:	497a      	ldr	r1, [pc, #488]	; (8003ccc <AlarmSetting+0x240>)
 8003ae2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3304      	adds	r3, #4
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
		timeAlarm[i].en = 0;
 8003af6:	4975      	ldr	r1, [pc, #468]	; (8003ccc <AlarmSetting+0x240>)
 8003af8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3303      	adds	r3, #3
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
		timeAlarm[i].countTime = 0;
 8003b0c:	496f      	ldr	r1, [pc, #444]	; (8003ccc <AlarmSetting+0x240>)
 8003b0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8003b22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b26:	3301      	adds	r3, #1
 8003b28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	ddb2      	ble.n	8003a9a <AlarmSetting+0xe>
	}
	trim(myApp.arrData, alarmTxt[0], "A1", "-");
 8003b34:	f107 0118 	add.w	r1, r7, #24
 8003b38:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <AlarmSetting+0x244>)
 8003b3a:	4a66      	ldr	r2, [pc, #408]	; (8003cd4 <AlarmSetting+0x248>)
 8003b3c:	4866      	ldr	r0, [pc, #408]	; (8003cd8 <AlarmSetting+0x24c>)
 8003b3e:	f001 fbef 	bl	8005320 <trim>
	trim(myApp.arrData, alarmTxt[1], "A2", "-");
 8003b42:	f107 0318 	add.w	r3, r7, #24
 8003b46:	f103 0114 	add.w	r1, r3, #20
 8003b4a:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <AlarmSetting+0x244>)
 8003b4c:	4a63      	ldr	r2, [pc, #396]	; (8003cdc <AlarmSetting+0x250>)
 8003b4e:	4862      	ldr	r0, [pc, #392]	; (8003cd8 <AlarmSetting+0x24c>)
 8003b50:	f001 fbe6 	bl	8005320 <trim>
	trim(myApp.arrData, alarmTxt[2], "A3", "-");
 8003b54:	f107 0318 	add.w	r3, r7, #24
 8003b58:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8003b5c:	4b5c      	ldr	r3, [pc, #368]	; (8003cd0 <AlarmSetting+0x244>)
 8003b5e:	4a60      	ldr	r2, [pc, #384]	; (8003ce0 <AlarmSetting+0x254>)
 8003b60:	485d      	ldr	r0, [pc, #372]	; (8003cd8 <AlarmSetting+0x24c>)
 8003b62:	f001 fbdd 	bl	8005320 <trim>
	trim(myApp.arrData, alarmTxt[3], "A4", "-");
 8003b66:	f107 0318 	add.w	r3, r7, #24
 8003b6a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003b6e:	4b58      	ldr	r3, [pc, #352]	; (8003cd0 <AlarmSetting+0x244>)
 8003b70:	4a5c      	ldr	r2, [pc, #368]	; (8003ce4 <AlarmSetting+0x258>)
 8003b72:	4859      	ldr	r0, [pc, #356]	; (8003cd8 <AlarmSetting+0x24c>)
 8003b74:	f001 fbd4 	bl	8005320 <trim>
	trim(myApp.arrData, alarmTxt[4], "A5", "-");
 8003b78:	f107 0318 	add.w	r3, r7, #24
 8003b7c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8003b80:	4b53      	ldr	r3, [pc, #332]	; (8003cd0 <AlarmSetting+0x244>)
 8003b82:	4a59      	ldr	r2, [pc, #356]	; (8003ce8 <AlarmSetting+0x25c>)
 8003b84:	4854      	ldr	r0, [pc, #336]	; (8003cd8 <AlarmSetting+0x24c>)
 8003b86:	f001 fbcb 	bl	8005320 <trim>
	trim(myApp.arrData, alarmTxt[5], "A6", "-");
 8003b8a:	f107 0318 	add.w	r3, r7, #24
 8003b8e:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8003b92:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <AlarmSetting+0x244>)
 8003b94:	4a55      	ldr	r2, [pc, #340]	; (8003cec <AlarmSetting+0x260>)
 8003b96:	4850      	ldr	r0, [pc, #320]	; (8003cd8 <AlarmSetting+0x24c>)
 8003b98:	f001 fbc2 	bl	8005320 <trim>
	trim(myApp.arrData, alarmTxt[6], "A7", "-");
 8003b9c:	f107 0318 	add.w	r3, r7, #24
 8003ba0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8003ba4:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <AlarmSetting+0x244>)
 8003ba6:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <AlarmSetting+0x264>)
 8003ba8:	484b      	ldr	r0, [pc, #300]	; (8003cd8 <AlarmSetting+0x24c>)
 8003baa:	f001 fbb9 	bl	8005320 <trim>
	trim(myApp.arrData, alarmTxt[7], "A8", "-");
 8003bae:	f107 0318 	add.w	r3, r7, #24
 8003bb2:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8003bb6:	4b46      	ldr	r3, [pc, #280]	; (8003cd0 <AlarmSetting+0x244>)
 8003bb8:	4a4e      	ldr	r2, [pc, #312]	; (8003cf4 <AlarmSetting+0x268>)
 8003bba:	4847      	ldr	r0, [pc, #284]	; (8003cd8 <AlarmSetting+0x24c>)
 8003bbc:	f001 fbb0 	bl	8005320 <trim>
	trim(myApp.arrData, alarmTxt[8], "A9", "-");
 8003bc0:	f107 0318 	add.w	r3, r7, #24
 8003bc4:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8003bc8:	4b41      	ldr	r3, [pc, #260]	; (8003cd0 <AlarmSetting+0x244>)
 8003bca:	4a4b      	ldr	r2, [pc, #300]	; (8003cf8 <AlarmSetting+0x26c>)
 8003bcc:	4842      	ldr	r0, [pc, #264]	; (8003cd8 <AlarmSetting+0x24c>)
 8003bce:	f001 fba7 	bl	8005320 <trim>
	trim(myApp.arrData, alarmTxt[9], "A10", "-");
 8003bd2:	f107 0318 	add.w	r3, r7, #24
 8003bd6:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <AlarmSetting+0x244>)
 8003bdc:	4a47      	ldr	r2, [pc, #284]	; (8003cfc <AlarmSetting+0x270>)
 8003bde:	483e      	ldr	r0, [pc, #248]	; (8003cd8 <AlarmSetting+0x24c>)
 8003be0:	f001 fb9e 	bl	8005320 <trim>

	for (int i = 0; i < 10; i++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bea:	e013      	b.n	8003c14 <AlarmSetting+0x188>
	{
		printf(alarmTxt[i]);
 8003bec:	f107 0118 	add.w	r1, r7, #24
 8003bf0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f006 f9c8 	bl	8009f94 <iprintf>
		printf("\r\n");
 8003c04:	483e      	ldr	r0, [pc, #248]	; (8003d00 <AlarmSetting+0x274>)
 8003c06:	f006 fa33 	bl	800a070 <puts>
	for (int i = 0; i < 10; i++)
 8003c0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c18:	2b09      	cmp	r3, #9
 8003c1a:	dde7      	ble.n	8003bec <AlarmSetting+0x160>
	}

	//hẹn giờ khuấy màu
	for (int i = 0; i < 10; i++)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c22:	e04b      	b.n	8003cbc <AlarmSetting+0x230>
	{
		timeAlarm[i].addr.gio = 100 + 8 * i;
 8003c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3364      	adds	r3, #100	; 0x64
 8003c30:	b298      	uxth	r0, r3
 8003c32:	4926      	ldr	r1, [pc, #152]	; (8003ccc <AlarmSetting+0x240>)
 8003c34:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3310      	adds	r3, #16
 8003c44:	4602      	mov	r2, r0
 8003c46:	801a      	strh	r2, [r3, #0]
		timeAlarm[i].addr.phut = 100 + 8 * i + 2;
 8003c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3366      	adds	r3, #102	; 0x66
 8003c54:	b298      	uxth	r0, r3
 8003c56:	491d      	ldr	r1, [pc, #116]	; (8003ccc <AlarmSetting+0x240>)
 8003c58:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	3312      	adds	r3, #18
 8003c68:	4602      	mov	r2, r0
 8003c6a:	801a      	strh	r2, [r3, #0]
		timeAlarm[i].addr.time = 100 + 8 * i + 4;
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c70:	330d      	adds	r3, #13
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	b298      	uxth	r0, r3
 8003c78:	4914      	ldr	r1, [pc, #80]	; (8003ccc <AlarmSetting+0x240>)
 8003c7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	3316      	adds	r3, #22
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	801a      	strh	r2, [r3, #0]
		timeAlarm[i].addr.en = 100 + 8 * i + 6;
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	336a      	adds	r3, #106	; 0x6a
 8003c9a:	b298      	uxth	r0, r3
 8003c9c:	490b      	ldr	r1, [pc, #44]	; (8003ccc <AlarmSetting+0x240>)
 8003c9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	3318      	adds	r3, #24
 8003cae:	4602      	mov	r2, r0
 8003cb0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc0:	2b09      	cmp	r3, #9
 8003cc2:	ddaf      	ble.n	8003c24 <AlarmSetting+0x198>
	}
	for (int i = 0; i < 10; i++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cca:	e11e      	b.n	8003f0a <AlarmSetting+0x47e>
 8003ccc:	20001234 	.word	0x20001234
 8003cd0:	0800e53c 	.word	0x0800e53c
 8003cd4:	0800eb14 	.word	0x0800eb14
 8003cd8:	20000016 	.word	0x20000016
 8003cdc:	0800eb18 	.word	0x0800eb18
 8003ce0:	0800eb1c 	.word	0x0800eb1c
 8003ce4:	0800eb20 	.word	0x0800eb20
 8003ce8:	0800eb24 	.word	0x0800eb24
 8003cec:	0800eb28 	.word	0x0800eb28
 8003cf0:	0800eb2c 	.word	0x0800eb2c
 8003cf4:	0800eb30 	.word	0x0800eb30
 8003cf8:	0800eb34 	.word	0x0800eb34
 8003cfc:	0800eb38 	.word	0x0800eb38
 8003d00:	0800eb3c 	.word	0x0800eb3c
	{
		char temp[20] = "";
 8003d04:	2300      	movs	r3, #0
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	f107 0308 	add.w	r3, r7, #8
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
		unsigned int tempTime = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	603b      	str	r3, [r7, #0]
		sscanf(alarmTxt[i], "[%d,%d,%d,%d]", &timeAlarm[i].gio, &timeAlarm[i].phut, &tempTime, &timeAlarm[i].en);
 8003d1a:	f107 0118 	add.w	r1, r7, #24
 8003d1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	18c8      	adds	r0, r1, r3
 8003d2c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4a79      	ldr	r2, [pc, #484]	; (8003f20 <AlarmSetting+0x494>)
 8003d3a:	1899      	adds	r1, r3, r2
 8003d3c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4a75      	ldr	r2, [pc, #468]	; (8003f20 <AlarmSetting+0x494>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	1c5c      	adds	r4, r3, #1
 8003d4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4a71      	ldr	r2, [pc, #452]	; (8003f20 <AlarmSetting+0x494>)
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3303      	adds	r3, #3
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	463b      	mov	r3, r7
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	4623      	mov	r3, r4
 8003d68:	460a      	mov	r2, r1
 8003d6a:	496e      	ldr	r1, [pc, #440]	; (8003f24 <AlarmSetting+0x498>)
 8003d6c:	f006 f9a8 	bl	800a0c0 <siscanf>
		timeAlarm[i].time = tempTime;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	b2d8      	uxtb	r0, r3
 8003d74:	496a      	ldr	r1, [pc, #424]	; (8003f20 <AlarmSetting+0x494>)
 8003d76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	3304      	adds	r3, #4
 8003d86:	4602      	mov	r2, r0
 8003d88:	701a      	strb	r2, [r3, #0]

		timeAlarm[i].time_in_sec = timeAlarm[i].gio * 3600 + timeAlarm[i].phut * 60;
 8003d8a:	4965      	ldr	r1, [pc, #404]	; (8003f20 <AlarmSetting+0x494>)
 8003d8c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003da2:	fb03 f102 	mul.w	r1, r3, r2
 8003da6:	485e      	ldr	r0, [pc, #376]	; (8003f20 <AlarmSetting+0x494>)
 8003da8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4403      	add	r3, r0
 8003db6:	3301      	adds	r3, #1
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	4955      	ldr	r1, [pc, #340]	; (8003f20 <AlarmSetting+0x494>)
 8003dca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	330c      	adds	r3, #12
 8003dda:	6018      	str	r0, [r3, #0]

		eep_write_word(timeAlarm[i].addr.gio, timeAlarm[i].gio);
 8003ddc:	4950      	ldr	r1, [pc, #320]	; (8003f20 <AlarmSetting+0x494>)
 8003dde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	3310      	adds	r3, #16
 8003dee:	8818      	ldrh	r0, [r3, #0]
 8003df0:	494b      	ldr	r1, [pc, #300]	; (8003f20 <AlarmSetting+0x494>)
 8003df2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	4619      	mov	r1, r3
 8003e06:	f001 fa33 	bl	8005270 <eep_write_word>
		eep_write_word(timeAlarm[i].addr.phut, timeAlarm[i].phut);
 8003e0a:	4945      	ldr	r1, [pc, #276]	; (8003f20 <AlarmSetting+0x494>)
 8003e0c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	3312      	adds	r3, #18
 8003e1c:	8818      	ldrh	r0, [r3, #0]
 8003e1e:	4940      	ldr	r1, [pc, #256]	; (8003f20 <AlarmSetting+0x494>)
 8003e20:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3301      	adds	r3, #1
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	f001 fa1b 	bl	8005270 <eep_write_word>
		eep_write_word(timeAlarm[i].addr.time, timeAlarm[i].time);
 8003e3a:	4939      	ldr	r1, [pc, #228]	; (8003f20 <AlarmSetting+0x494>)
 8003e3c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	3316      	adds	r3, #22
 8003e4c:	8818      	ldrh	r0, [r3, #0]
 8003e4e:	4934      	ldr	r1, [pc, #208]	; (8003f20 <AlarmSetting+0x494>)
 8003e50:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3304      	adds	r3, #4
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	4619      	mov	r1, r3
 8003e66:	f001 fa03 	bl	8005270 <eep_write_word>
		eep_write_word(timeAlarm[i].addr.en, timeAlarm[i].en);
 8003e6a:	492d      	ldr	r1, [pc, #180]	; (8003f20 <AlarmSetting+0x494>)
 8003e6c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	8818      	ldrh	r0, [r3, #0]
 8003e7e:	4928      	ldr	r1, [pc, #160]	; (8003f20 <AlarmSetting+0x494>)
 8003e80:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3303      	adds	r3, #3
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	4619      	mov	r1, r3
 8003e96:	f001 f9eb 	bl	8005270 <eep_write_word>

		printf("gio:%d phut:%d interval: %d state:%-> alarmStatus= %d \r\n", timeAlarm[i].gio, timeAlarm[i].phut, tempTime, timeAlarm[i].en,
 8003e9a:	4921      	ldr	r1, [pc, #132]	; (8003f20 <AlarmSetting+0x494>)
 8003e9c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	461d      	mov	r5, r3
 8003eae:	491c      	ldr	r1, [pc, #112]	; (8003f20 <AlarmSetting+0x494>)
 8003eb0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	461e      	mov	r6, r3
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	4816      	ldr	r0, [pc, #88]	; (8003f20 <AlarmSetting+0x494>)
 8003ec8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4403      	add	r3, r0
 8003ed6:	3303      	adds	r3, #3
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	461c      	mov	r4, r3
 8003edc:	4810      	ldr	r0, [pc, #64]	; (8003f20 <AlarmSetting+0x494>)
 8003ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4403      	add	r3, r0
 8003eec:	330c      	adds	r3, #12
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	9400      	str	r4, [sp, #0]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4632      	mov	r2, r6
 8003ef8:	4629      	mov	r1, r5
 8003efa:	480b      	ldr	r0, [pc, #44]	; (8003f28 <AlarmSetting+0x49c>)
 8003efc:	f006 f84a 	bl	8009f94 <iprintf>
	for (int i = 0; i < 10; i++)
 8003f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f04:	3301      	adds	r3, #1
 8003f06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0e:	2b09      	cmp	r3, #9
 8003f10:	f77f aef8 	ble.w	8003d04 <AlarmSetting+0x278>
				timeAlarm[i].time_in_sec);
	}
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	37f4      	adds	r7, #244	; 0xf4
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20001234 	.word	0x20001234
 8003f24:	0800eb40 	.word	0x0800eb40
 8003f28:	0800eb50 	.word	0x0800eb50

08003f2c <checkSensor>:



static void checkSensor(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
//				HAL_GPIO_WritePin(LAZE_GPIO_Port, LAZE_Pin, 1);
//				printf("sensor 3 on\n\r");
//				sendFrame("sensor3 on\n\r");
//			}
//		}
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <UpdateStatus>:
 *  SENSOR2-  THUNG SON   -- sensor on 3  -> INPUT2
	SENSOR3-  MO CUA      -- sensor on 2  -> INPUT3
	SENSOR4 - DONG CUA    -- sensor on 1  -> INPUT4
 * */
static void UpdateStatus(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0

	// update sensor optic //
	if (HAL_GPIO_ReadPin(INPUT2_GPIO_Port, INPUT2_Pin))
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	482a      	ldr	r0, [pc, #168]	; (8003fe8 <UpdateStatus+0xb0>)
 8003f40:	f001 feb6 	bl	8005cb0 <HAL_GPIO_ReadPin>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <UpdateStatus+0x26>
	{
		printf("update status INPUT2_GPIO_Port = 1 \n\r");
 8003f4a:	4828      	ldr	r0, [pc, #160]	; (8003fec <UpdateStatus+0xb4>)
 8003f4c:	f006 f822 	bl	8009f94 <iprintf>
		Sensor_Laze_State = STATE_SENSOR_OFF;
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <UpdateStatus+0xb8>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
		sendFrame("sensor3 off");
 8003f56:	4827      	ldr	r0, [pc, #156]	; (8003ff4 <UpdateStatus+0xbc>)
 8003f58:	f000 fa82 	bl	8004460 <sendFrame>
 8003f5c:	e008      	b.n	8003f70 <UpdateStatus+0x38>
	}
	else
	{
		printf("update status INPUT2_GPIO_Port = 0 \n\r");
 8003f5e:	4826      	ldr	r0, [pc, #152]	; (8003ff8 <UpdateStatus+0xc0>)
 8003f60:	f006 f818 	bl	8009f94 <iprintf>
		Sensor_Laze_State = STATE_SENSOR_ON;
 8003f64:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <UpdateStatus+0xb8>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
		sendFrame("sensor3 on");
 8003f6a:	4824      	ldr	r0, [pc, #144]	; (8003ffc <UpdateStatus+0xc4>)
 8003f6c:	f000 fa78 	bl	8004460 <sendFrame>
	}
	HAL_Delay(1);
 8003f70:	2001      	movs	r0, #1
 8003f72:	f001 fa95 	bl	80054a0 <HAL_Delay>

	// update sensor close door //
	if (HAL_GPIO_ReadPin(INPUT3_GPIO_Port, INPUT3_Pin))
 8003f76:	2104      	movs	r1, #4
 8003f78:	481b      	ldr	r0, [pc, #108]	; (8003fe8 <UpdateStatus+0xb0>)
 8003f7a:	f001 fe99 	bl	8005cb0 <HAL_GPIO_ReadPin>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <UpdateStatus+0x60>
	{
		printf("update status INPUT3_GPIO_Port = 1 \n\r");
 8003f84:	481e      	ldr	r0, [pc, #120]	; (8004000 <UpdateStatus+0xc8>)
 8003f86:	f006 f805 	bl	8009f94 <iprintf>
		Sensor_Door_Open_State = STATE_SENSOR_OFF;
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <UpdateStatus+0xcc>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
		sendFrame("sensor2 off");
 8003f90:	481d      	ldr	r0, [pc, #116]	; (8004008 <UpdateStatus+0xd0>)
 8003f92:	f000 fa65 	bl	8004460 <sendFrame>
 8003f96:	e008      	b.n	8003faa <UpdateStatus+0x72>
	}
	else
	{
		printf("update status INPUT3_GPIO_Port = 0 \n\r");
 8003f98:	481c      	ldr	r0, [pc, #112]	; (800400c <UpdateStatus+0xd4>)
 8003f9a:	f005 fffb 	bl	8009f94 <iprintf>
		Sensor_Door_Open_State = STATE_SENSOR_ON;
 8003f9e:	4b19      	ldr	r3, [pc, #100]	; (8004004 <UpdateStatus+0xcc>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
		sendFrame("sensor2 on");
 8003fa4:	481a      	ldr	r0, [pc, #104]	; (8004010 <UpdateStatus+0xd8>)
 8003fa6:	f000 fa5b 	bl	8004460 <sendFrame>
	}

	HAL_Delay(1);
 8003faa:	2001      	movs	r0, #1
 8003fac:	f001 fa78 	bl	80054a0 <HAL_Delay>
	// update sensor open door //
	if (HAL_GPIO_ReadPin(INPUT4_GPIO_Port, INPUT4_Pin))
 8003fb0:	2108      	movs	r1, #8
 8003fb2:	480d      	ldr	r0, [pc, #52]	; (8003fe8 <UpdateStatus+0xb0>)
 8003fb4:	f001 fe7c 	bl	8005cb0 <HAL_GPIO_ReadPin>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <UpdateStatus+0x9a>
	{
		printf("update status INPUT4_GPIO_Port = 1 \n\r");
 8003fbe:	4815      	ldr	r0, [pc, #84]	; (8004014 <UpdateStatus+0xdc>)
 8003fc0:	f005 ffe8 	bl	8009f94 <iprintf>
		Sensor_Door_Close_State = STATE_SENSOR_OFF;
 8003fc4:	4b14      	ldr	r3, [pc, #80]	; (8004018 <UpdateStatus+0xe0>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
		sendFrame("sensor1 off");
 8003fca:	4814      	ldr	r0, [pc, #80]	; (800401c <UpdateStatus+0xe4>)
 8003fcc:	f000 fa48 	bl	8004460 <sendFrame>
	{
		printf("update status INPUT4_GPIO_Port = 0 \n\r");
		Sensor_Door_Close_State = STATE_SENSOR_ON;
		sendFrame("sensor1 on");
	}
}
 8003fd0:	e008      	b.n	8003fe4 <UpdateStatus+0xac>
		printf("update status INPUT4_GPIO_Port = 0 \n\r");
 8003fd2:	4813      	ldr	r0, [pc, #76]	; (8004020 <UpdateStatus+0xe8>)
 8003fd4:	f005 ffde 	bl	8009f94 <iprintf>
		Sensor_Door_Close_State = STATE_SENSOR_ON;
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <UpdateStatus+0xe0>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
		sendFrame("sensor1 on");
 8003fde:	4811      	ldr	r0, [pc, #68]	; (8004024 <UpdateStatus+0xec>)
 8003fe0:	f000 fa3e 	bl	8004460 <sendFrame>
}
 8003fe4:	bf00      	nop
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40010800 	.word	0x40010800
 8003fec:	0800eb8c 	.word	0x0800eb8c
 8003ff0:	2000000c 	.word	0x2000000c
 8003ff4:	0800ebb4 	.word	0x0800ebb4
 8003ff8:	0800ebc0 	.word	0x0800ebc0
 8003ffc:	0800ebe8 	.word	0x0800ebe8
 8004000:	0800ebf4 	.word	0x0800ebf4
 8004004:	20000004 	.word	0x20000004
 8004008:	0800ec1c 	.word	0x0800ec1c
 800400c:	0800ec28 	.word	0x0800ec28
 8004010:	0800ec50 	.word	0x0800ec50
 8004014:	0800ec5c 	.word	0x0800ec5c
 8004018:	20000008 	.word	0x20000008
 800401c:	0800ec84 	.word	0x0800ec84
 8004020:	0800ec90 	.word	0x0800ec90
 8004024:	0800ecb8 	.word	0x0800ecb8

08004028 <pump_init>:
	SET(EN17_GPIO_Port, EN17_Pin);

}

void pump_init()
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
	bomMau[0].GPIOx     = PUL1_GPIO_Port;
 800402e:	4bb8      	ldr	r3, [pc, #736]	; (8004310 <pump_init+0x2e8>)
 8004030:	4ab8      	ldr	r2, [pc, #736]	; (8004314 <pump_init+0x2ec>)
 8004032:	639a      	str	r2, [r3, #56]	; 0x38
	bomMau[0].GPIO_Pin  = PUL1_Pin;
 8004034:	4bb6      	ldr	r3, [pc, #728]	; (8004310 <pump_init+0x2e8>)
 8004036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800403a:	879a      	strh	r2, [r3, #60]	; 0x3c

	bomMau[0].DIR_Port  = GPIOC;
 800403c:	4bb4      	ldr	r3, [pc, #720]	; (8004310 <pump_init+0x2e8>)
 800403e:	4ab5      	ldr	r2, [pc, #724]	; (8004314 <pump_init+0x2ec>)
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
	bomMau[0].DIR_Pin   = GPIO_PIN_2;
 8004042:	4bb3      	ldr	r3, [pc, #716]	; (8004310 <pump_init+0x2e8>)
 8004044:	2204      	movs	r2, #4
 8004046:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	bomMau[0].EN_Port   = EN1_GPIO_Port;
 800404a:	4bb1      	ldr	r3, [pc, #708]	; (8004310 <pump_init+0x2e8>)
 800404c:	4ab1      	ldr	r2, [pc, #708]	; (8004314 <pump_init+0x2ec>)
 800404e:	649a      	str	r2, [r3, #72]	; 0x48
	bomMau[0].EN_Pin    = EN1_Pin;
 8004050:	4baf      	ldr	r3, [pc, #700]	; (8004310 <pump_init+0x2e8>)
 8004052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004056:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    /***************************************************************/

	bomMau[1].GPIOx     = PWM1_GPIO_Port;
 800405a:	4bad      	ldr	r3, [pc, #692]	; (8004310 <pump_init+0x2e8>)
 800405c:	4aae      	ldr	r2, [pc, #696]	; (8004318 <pump_init+0x2f0>)
 800405e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	bomMau[1].GPIO_Pin  = PWM1_Pin;
 8004062:	4bab      	ldr	r3, [pc, #684]	; (8004310 <pump_init+0x2e8>)
 8004064:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004068:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

	bomMau[1].DIR_Port  = DIR2_GPIO_Port;
 800406c:	4ba8      	ldr	r3, [pc, #672]	; (8004310 <pump_init+0x2e8>)
 800406e:	4aa9      	ldr	r2, [pc, #676]	; (8004314 <pump_init+0x2ec>)
 8004070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	bomMau[1].DIR_Pin   = DIR2_Pin;
 8004074:	4ba6      	ldr	r3, [pc, #664]	; (8004310 <pump_init+0x2e8>)
 8004076:	2280      	movs	r2, #128	; 0x80
 8004078:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	bomMau[1].EN_Port   = EN2_GPIO_Port;
 800407c:	4ba4      	ldr	r3, [pc, #656]	; (8004310 <pump_init+0x2e8>)
 800407e:	4aa5      	ldr	r2, [pc, #660]	; (8004314 <pump_init+0x2ec>)
 8004080:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	bomMau[1].EN_Pin    = EN2_Pin;
 8004084:	4ba2      	ldr	r3, [pc, #648]	; (8004310 <pump_init+0x2e8>)
 8004086:	2240      	movs	r2, #64	; 0x40
 8004088:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	/**************************************************************/

	bomMau[2].GPIOx 	= PWM2_GPIO_Port;
 800408c:	4ba0      	ldr	r3, [pc, #640]	; (8004310 <pump_init+0x2e8>)
 800408e:	4aa3      	ldr	r2, [pc, #652]	; (800431c <pump_init+0x2f4>)
 8004090:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	bomMau[2].GPIO_Pin 	= PWM2_Pin;
 8004094:	4b9e      	ldr	r3, [pc, #632]	; (8004310 <pump_init+0x2e8>)
 8004096:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800409a:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc

	bomMau[2].DIR_Port 	= DIR3_GPIO_Port;
 800409e:	4b9c      	ldr	r3, [pc, #624]	; (8004310 <pump_init+0x2e8>)
 80040a0:	4a9d      	ldr	r2, [pc, #628]	; (8004318 <pump_init+0x2f0>)
 80040a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	bomMau[2].DIR_Pin 	= DIR3_Pin;
 80040a6:	4b9a      	ldr	r3, [pc, #616]	; (8004310 <pump_init+0x2e8>)
 80040a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040ac:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4

	bomMau[2].EN_Port 	= EN3_GPIO_Port;
 80040b0:	4b97      	ldr	r3, [pc, #604]	; (8004310 <pump_init+0x2e8>)
 80040b2:	4a99      	ldr	r2, [pc, #612]	; (8004318 <pump_init+0x2f0>)
 80040b4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	bomMau[2].EN_Pin 	= EN3_Pin;
 80040b8:	4b95      	ldr	r3, [pc, #596]	; (8004310 <pump_init+0x2e8>)
 80040ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040be:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec

	/**************************************************************/
	bomMau[3].GPIOx     = PWM3_GPIO_Port;
 80040c2:	4b93      	ldr	r3, [pc, #588]	; (8004310 <pump_init+0x2e8>)
 80040c4:	4a95      	ldr	r2, [pc, #596]	; (800431c <pump_init+0x2f4>)
 80040c6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	bomMau[3].GPIO_Pin  = PWM3_Pin;
 80040ca:	4b91      	ldr	r3, [pc, #580]	; (8004310 <pump_init+0x2e8>)
 80040cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040d0:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c

	bomMau[3].DIR_Port 	= DIR4_GPIO_Port;
 80040d4:	4b8e      	ldr	r3, [pc, #568]	; (8004310 <pump_init+0x2e8>)
 80040d6:	4a91      	ldr	r2, [pc, #580]	; (800431c <pump_init+0x2f4>)
 80040d8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	bomMau[3].DIR_Pin  	= DIR4_Pin;
 80040dc:	4b8c      	ldr	r3, [pc, #560]	; (8004310 <pump_init+0x2e8>)
 80040de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040e2:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134

	bomMau[3].EN_Port  	= EN4_GPIO_Port;
 80040e6:	4b8a      	ldr	r3, [pc, #552]	; (8004310 <pump_init+0x2e8>)
 80040e8:	4a8c      	ldr	r2, [pc, #560]	; (800431c <pump_init+0x2f4>)
 80040ea:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	bomMau[3].EN_Pin   	= EN4_Pin;
 80040ee:	4b88      	ldr	r3, [pc, #544]	; (8004310 <pump_init+0x2e8>)
 80040f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040f4:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

    /**************************************************************/
	bomMau[4].GPIOx     = PWM4_GPIO_Port;
 80040f8:	4b85      	ldr	r3, [pc, #532]	; (8004310 <pump_init+0x2e8>)
 80040fa:	4a88      	ldr	r2, [pc, #544]	; (800431c <pump_init+0x2f4>)
 80040fc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	bomMau[4].GPIO_Pin  = PWM4_Pin;
 8004100:	4b83      	ldr	r3, [pc, #524]	; (8004310 <pump_init+0x2e8>)
 8004102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004106:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c

	bomMau[4].DIR_Port 	= DIR5_GPIO_Port;
 800410a:	4b81      	ldr	r3, [pc, #516]	; (8004310 <pump_init+0x2e8>)
 800410c:	4a83      	ldr	r2, [pc, #524]	; (800431c <pump_init+0x2f4>)
 800410e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	bomMau[4].DIR_Pin  	= DIR5_Pin;
 8004112:	4b7f      	ldr	r3, [pc, #508]	; (8004310 <pump_init+0x2e8>)
 8004114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004118:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184

	bomMau[4].EN_Port  	= EN5_GPIO_Port;
 800411c:	4b7c      	ldr	r3, [pc, #496]	; (8004310 <pump_init+0x2e8>)
 800411e:	4a7f      	ldr	r2, [pc, #508]	; (800431c <pump_init+0x2f4>)
 8004120:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	bomMau[4].EN_Pin   	= EN5_Pin;
 8004124:	4b7a      	ldr	r3, [pc, #488]	; (8004310 <pump_init+0x2e8>)
 8004126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800412a:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c

	/**************************************************************/
	bomMau[5].GPIOx     = PWM5_GPIO_Port;
 800412e:	4b78      	ldr	r3, [pc, #480]	; (8004310 <pump_init+0x2e8>)
 8004130:	4a7b      	ldr	r2, [pc, #492]	; (8004320 <pump_init+0x2f8>)
 8004132:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	bomMau[5].GPIO_Pin  = PWM5_Pin;
 8004136:	4b76      	ldr	r3, [pc, #472]	; (8004310 <pump_init+0x2e8>)
 8004138:	2202      	movs	r2, #2
 800413a:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc

	bomMau[5].DIR_Port  = DIR6_GPIO_Port;
 800413e:	4b74      	ldr	r3, [pc, #464]	; (8004310 <pump_init+0x2e8>)
 8004140:	4a76      	ldr	r2, [pc, #472]	; (800431c <pump_init+0x2f4>)
 8004142:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	bomMau[5].DIR_Pin   = DIR6_Pin;
 8004146:	4b72      	ldr	r3, [pc, #456]	; (8004310 <pump_init+0x2e8>)
 8004148:	2280      	movs	r2, #128	; 0x80
 800414a:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4

    // edit pin5 to pin 6 -> fix error motor6 is hold GND -> motor so hot

	bomMau[5].EN_Port   = EN6_GPIO_Port;
 800414e:	4b70      	ldr	r3, [pc, #448]	; (8004310 <pump_init+0x2e8>)
 8004150:	4a73      	ldr	r2, [pc, #460]	; (8004320 <pump_init+0x2f8>)
 8004152:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	bomMau[5].EN_Pin    = EN6_Pin;
 8004156:	4b6e      	ldr	r3, [pc, #440]	; (8004310 <pump_init+0x2e8>)
 8004158:	2204      	movs	r2, #4
 800415a:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc

	/**************************************************************/
	bomMau[6].GPIOx     = PWM6_GPIO_Port;
 800415e:	4b6c      	ldr	r3, [pc, #432]	; (8004310 <pump_init+0x2e8>)
 8004160:	4a6c      	ldr	r2, [pc, #432]	; (8004314 <pump_init+0x2ec>)
 8004162:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	bomMau[6].GPIO_Pin  = PWM6_Pin;
 8004166:	4b6a      	ldr	r3, [pc, #424]	; (8004310 <pump_init+0x2e8>)
 8004168:	2210      	movs	r2, #16
 800416a:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c

	bomMau[6].DIR_Port  = DIR7_GPIO_Port;
 800416e:	4b68      	ldr	r3, [pc, #416]	; (8004310 <pump_init+0x2e8>)
 8004170:	4a6b      	ldr	r2, [pc, #428]	; (8004320 <pump_init+0x2f8>)
 8004172:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	bomMau[6].DIR_Pin   = DIR7_Pin;
 8004176:	4b66      	ldr	r3, [pc, #408]	; (8004310 <pump_init+0x2e8>)
 8004178:	2201      	movs	r2, #1
 800417a:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224

	bomMau[6].EN_Port   = EN7_GPIO_Port;
 800417e:	4b64      	ldr	r3, [pc, #400]	; (8004310 <pump_init+0x2e8>)
 8004180:	4a64      	ldr	r2, [pc, #400]	; (8004314 <pump_init+0x2ec>)
 8004182:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	bomMau[6].EN_Pin    = EN7_Pin;
 8004186:	4b62      	ldr	r3, [pc, #392]	; (8004310 <pump_init+0x2e8>)
 8004188:	2220      	movs	r2, #32
 800418a:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
	/**************************************************************/

	bomMau[7].GPIOx     = PWM7_GPIO_Port;
 800418e:	4b60      	ldr	r3, [pc, #384]	; (8004310 <pump_init+0x2e8>)
 8004190:	4a64      	ldr	r2, [pc, #400]	; (8004324 <pump_init+0x2fc>)
 8004192:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	bomMau[7].GPIO_Pin  = PWM7_Pin;
 8004196:	4b5e      	ldr	r3, [pc, #376]	; (8004310 <pump_init+0x2e8>)
 8004198:	2220      	movs	r2, #32
 800419a:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c

	bomMau[7].DIR_Port  = DIR8_GPIO_Port;
 800419e:	4b5c      	ldr	r3, [pc, #368]	; (8004310 <pump_init+0x2e8>)
 80041a0:	4a60      	ldr	r2, [pc, #384]	; (8004324 <pump_init+0x2fc>)
 80041a2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	bomMau[7].DIR_Pin   = DIR8_Pin;
 80041a6:	4b5a      	ldr	r3, [pc, #360]	; (8004310 <pump_init+0x2e8>)
 80041a8:	2280      	movs	r2, #128	; 0x80
 80041aa:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274

	bomMau[7].EN_Port   = EN8_GPIO_Port;
 80041ae:	4b58      	ldr	r3, [pc, #352]	; (8004310 <pump_init+0x2e8>)
 80041b0:	4a5c      	ldr	r2, [pc, #368]	; (8004324 <pump_init+0x2fc>)
 80041b2:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	bomMau[7].EN_Pin    = EN8_Pin;
 80041b6:	4b56      	ldr	r3, [pc, #344]	; (8004310 <pump_init+0x2e8>)
 80041b8:	2240      	movs	r2, #64	; 0x40
 80041ba:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
	/**************************************************************/
	bomMau[8].GPIOx     = PWM8_GPIO_Port;
 80041be:	4b54      	ldr	r3, [pc, #336]	; (8004310 <pump_init+0x2e8>)
 80041c0:	4a54      	ldr	r2, [pc, #336]	; (8004314 <pump_init+0x2ec>)
 80041c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	bomMau[8].GPIO_Pin  = PWM8_Pin;
 80041c6:	4b52      	ldr	r3, [pc, #328]	; (8004310 <pump_init+0x2e8>)
 80041c8:	2202      	movs	r2, #2
 80041ca:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc

	bomMau[8].DIR_Port  = DIR9_GPIO_Port;
 80041ce:	4b50      	ldr	r3, [pc, #320]	; (8004310 <pump_init+0x2e8>)
 80041d0:	4a50      	ldr	r2, [pc, #320]	; (8004314 <pump_init+0x2ec>)
 80041d2:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	bomMau[8].DIR_Pin   = DIR9_Pin;
 80041d6:	4b4e      	ldr	r3, [pc, #312]	; (8004310 <pump_init+0x2e8>)
 80041d8:	2208      	movs	r2, #8
 80041da:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4

	bomMau[8].EN_Port   = EN9_GPIO_Port;
 80041de:	4b4c      	ldr	r3, [pc, #304]	; (8004310 <pump_init+0x2e8>)
 80041e0:	4a4c      	ldr	r2, [pc, #304]	; (8004314 <pump_init+0x2ec>)
 80041e2:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
	bomMau[8].EN_Pin    = EN9_Pin;
 80041e6:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <pump_init+0x2e8>)
 80041e8:	2204      	movs	r2, #4
 80041ea:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc

	/**************************************************************/

	bomMau[9].GPIOx 	= PWM9_GPIO_Port;
 80041ee:	4b48      	ldr	r3, [pc, #288]	; (8004310 <pump_init+0x2e8>)
 80041f0:	4a4a      	ldr	r2, [pc, #296]	; (800431c <pump_init+0x2f4>)
 80041f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	bomMau[9].GPIO_Pin 	= PWM9_Pin;
 80041f6:	4b46      	ldr	r3, [pc, #280]	; (8004310 <pump_init+0x2e8>)
 80041f8:	2220      	movs	r2, #32
 80041fa:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c

	bomMau[9].DIR_Port  = DIR10_GPIO_Port;
 80041fe:	4b44      	ldr	r3, [pc, #272]	; (8004310 <pump_init+0x2e8>)
 8004200:	4a44      	ldr	r2, [pc, #272]	; (8004314 <pump_init+0x2ec>)
 8004202:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	bomMau[9].DIR_Pin   = DIR10_Pin;
 8004206:	4b42      	ldr	r3, [pc, #264]	; (8004310 <pump_init+0x2e8>)
 8004208:	2201      	movs	r2, #1
 800420a:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314

	bomMau[9].EN_Port   = EN10_GPIO_Port;
 800420e:	4b40      	ldr	r3, [pc, #256]	; (8004310 <pump_init+0x2e8>)
 8004210:	4a42      	ldr	r2, [pc, #264]	; (800431c <pump_init+0x2f4>)
 8004212:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	bomMau[9].EN_Pin    = EN10_Pin;
 8004216:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <pump_init+0x2e8>)
 8004218:	2240      	movs	r2, #64	; 0x40
 800421a:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c

	/**************************************************************/
	bomMau[10].GPIOx 	 = PWM10_GPIO_Port;
 800421e:	4b3c      	ldr	r3, [pc, #240]	; (8004310 <pump_init+0x2e8>)
 8004220:	4a3e      	ldr	r2, [pc, #248]	; (800431c <pump_init+0x2f4>)
 8004222:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	bomMau[10].GPIO_Pin  = PWM10_Pin;
 8004226:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <pump_init+0x2e8>)
 8004228:	2204      	movs	r2, #4
 800422a:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c

	bomMau[10].DIR_Port  = DIR11_GPIO_Port;
 800422e:	4b38      	ldr	r3, [pc, #224]	; (8004310 <pump_init+0x2e8>)
 8004230:	4a3a      	ldr	r2, [pc, #232]	; (800431c <pump_init+0x2f4>)
 8004232:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	bomMau[10].DIR_Pin   = DIR11_Pin;
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <pump_init+0x2e8>)
 8004238:	2210      	movs	r2, #16
 800423a:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364

	bomMau[10].EN_Port   = EN11_GPIO_Port;
 800423e:	4b34      	ldr	r3, [pc, #208]	; (8004310 <pump_init+0x2e8>)
 8004240:	4a36      	ldr	r2, [pc, #216]	; (800431c <pump_init+0x2f4>)
 8004242:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
	bomMau[10].EN_Pin    = EN11_Pin;
 8004246:	4b32      	ldr	r3, [pc, #200]	; (8004310 <pump_init+0x2e8>)
 8004248:	2208      	movs	r2, #8
 800424a:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c

	/*************************************************************/

	bomMau[11].GPIOx 	 = PWM11_GPIO_Port;
 800424e:	4b30      	ldr	r3, [pc, #192]	; (8004310 <pump_init+0x2e8>)
 8004250:	4a33      	ldr	r2, [pc, #204]	; (8004320 <pump_init+0x2f8>)
 8004252:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	bomMau[11].GPIO_Pin  = PWM11_Pin;
 8004256:	4b2e      	ldr	r3, [pc, #184]	; (8004310 <pump_init+0x2e8>)
 8004258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800425c:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac

	bomMau[11].DIR_Port  = DIR12_GPIO_Port;
 8004260:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <pump_init+0x2e8>)
 8004262:	4a2e      	ldr	r2, [pc, #184]	; (800431c <pump_init+0x2f4>)
 8004264:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	bomMau[11].DIR_Pin   = DIR12_Pin;
 8004268:	4b29      	ldr	r3, [pc, #164]	; (8004310 <pump_init+0x2e8>)
 800426a:	2202      	movs	r2, #2
 800426c:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4

	bomMau[11].EN_Port   = EN12_GPIO_Port;
 8004270:	4b27      	ldr	r3, [pc, #156]	; (8004310 <pump_init+0x2e8>)
 8004272:	4a2a      	ldr	r2, [pc, #168]	; (800431c <pump_init+0x2f4>)
 8004274:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
	bomMau[11].EN_Pin    = EN12_Pin;
 8004278:	4b25      	ldr	r3, [pc, #148]	; (8004310 <pump_init+0x2e8>)
 800427a:	2201      	movs	r2, #1
 800427c:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
	/**********************************************************/

	bomMau[12].GPIOx 	 = PWM12_GPIO_Port;
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <pump_init+0x2e8>)
 8004282:	4a27      	ldr	r2, [pc, #156]	; (8004320 <pump_init+0x2f8>)
 8004284:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
	bomMau[12].GPIO_Pin  = PWM12_Pin;
 8004288:	4b21      	ldr	r3, [pc, #132]	; (8004310 <pump_init+0x2e8>)
 800428a:	2240      	movs	r2, #64	; 0x40
 800428c:	f8a3 23fc 	strh.w	r2, [r3, #1020]	; 0x3fc

	bomMau[12].DIR_Port  = DIR13_GPIO_Port;
 8004290:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <pump_init+0x2e8>)
 8004292:	4a23      	ldr	r2, [pc, #140]	; (8004320 <pump_init+0x2f8>)
 8004294:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	bomMau[12].DIR_Pin   = DIR13_Pin;
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <pump_init+0x2e8>)
 800429a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800429e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

	bomMau[12].EN_Port   = EN13_GPIO_Port;
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <pump_init+0x2e8>)
 80042a4:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <pump_init+0x2f8>)
 80042a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	bomMau[12].EN_Pin    = EN13_Pin;
 80042aa:	4b19      	ldr	r3, [pc, #100]	; (8004310 <pump_init+0x2e8>)
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c

	/**********************************************************/
	bomMau[13].GPIOx 	 = PWM13_GPIO_Port;
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <pump_init+0x2e8>)
 80042b4:	4a1a      	ldr	r2, [pc, #104]	; (8004320 <pump_init+0x2f8>)
 80042b6:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
	bomMau[13].GPIO_Pin  = PWM13_Pin;
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <pump_init+0x2e8>)
 80042bc:	2208      	movs	r2, #8
 80042be:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c

	bomMau[13].DIR_Port  = DIR14_GPIO_Port;
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <pump_init+0x2e8>)
 80042c4:	4a16      	ldr	r2, [pc, #88]	; (8004320 <pump_init+0x2f8>)
 80042c6:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
	bomMau[13].DIR_Pin   = DIR14_Pin;
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <pump_init+0x2e8>)
 80042cc:	2220      	movs	r2, #32
 80042ce:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454

	bomMau[13].EN_Port   = EN14_GPIO_Port;
 80042d2:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <pump_init+0x2e8>)
 80042d4:	4a12      	ldr	r2, [pc, #72]	; (8004320 <pump_init+0x2f8>)
 80042d6:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
	bomMau[13].EN_Pin    = EN14_Pin;
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <pump_init+0x2e8>)
 80042dc:	2210      	movs	r2, #16
 80042de:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c

	/**********************************************************/
	bomMau[14].GPIOx 	 = PWM14_GPIO_Port;
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <pump_init+0x2e8>)
 80042e4:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <pump_init+0x2f0>)
 80042e6:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
	bomMau[14].GPIO_Pin  = PWM14_Pin;
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <pump_init+0x2e8>)
 80042ec:	2220      	movs	r2, #32
 80042ee:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c

	bomMau[14].DIR_Port  = DIR15_GPIO_Port;
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <pump_init+0x2e8>)
 80042f4:	4a08      	ldr	r2, [pc, #32]	; (8004318 <pump_init+0x2f0>)
 80042f6:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
	bomMau[14].DIR_Pin   = DIR15_Pin;
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <pump_init+0x2e8>)
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4

	bomMau[14].EN_Port   = EN15_GPIO_Port;
 8004302:	4b03      	ldr	r3, [pc, #12]	; (8004310 <pump_init+0x2e8>)
 8004304:	4a04      	ldr	r2, [pc, #16]	; (8004318 <pump_init+0x2f0>)
 8004306:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
	bomMau[14].EN_Pin    = EN15_Pin;
 800430a:	4b01      	ldr	r3, [pc, #4]	; (8004310 <pump_init+0x2e8>)
 800430c:	2240      	movs	r2, #64	; 0x40
 800430e:	e00b      	b.n	8004328 <pump_init+0x300>
 8004310:	20000d04 	.word	0x20000d04
 8004314:	40011000 	.word	0x40011000
 8004318:	40011400 	.word	0x40011400
 800431c:	40011800 	.word	0x40011800
 8004320:	40010c00 	.word	0x40010c00
 8004324:	40010800 	.word	0x40010800
 8004328:	f8a3 24ac 	strh.w	r2, [r3, #1196]	; 0x4ac

	/**********************************************************/
	bomMau[15].GPIOx 	 = PWM15_GPIO_Port;
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <pump_init+0x3dc>)
 800432e:	4a36      	ldr	r2, [pc, #216]	; (8004408 <pump_init+0x3e0>)
 8004330:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
	bomMau[15].GPIO_Pin  = PWM15_Pin;
 8004334:	4b33      	ldr	r3, [pc, #204]	; (8004404 <pump_init+0x3dc>)
 8004336:	2204      	movs	r2, #4
 8004338:	f8a3 24ec 	strh.w	r2, [r3, #1260]	; 0x4ec

	bomMau[15].DIR_Port  = DIR16_GPIO_Port;
 800433c:	4b31      	ldr	r3, [pc, #196]	; (8004404 <pump_init+0x3dc>)
 800433e:	4a32      	ldr	r2, [pc, #200]	; (8004408 <pump_init+0x3e0>)
 8004340:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
	bomMau[15].DIR_Pin   = DIR16_Pin;
 8004344:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <pump_init+0x3dc>)
 8004346:	2210      	movs	r2, #16
 8004348:	f8a3 24f4 	strh.w	r2, [r3, #1268]	; 0x4f4

	bomMau[15].EN_Port   = EN16_GPIO_Port;
 800434c:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <pump_init+0x3dc>)
 800434e:	4a2e      	ldr	r2, [pc, #184]	; (8004408 <pump_init+0x3e0>)
 8004350:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
	bomMau[15].EN_Pin    = EN16_Pin;
 8004354:	4b2b      	ldr	r3, [pc, #172]	; (8004404 <pump_init+0x3dc>)
 8004356:	2208      	movs	r2, #8
 8004358:	f8a3 24fc 	strh.w	r2, [r3, #1276]	; 0x4fc


	////////////////////////////////////////////////////////////
	for(uint8_t i = 0; i < 16; i++)
 800435c:	2300      	movs	r3, #0
 800435e:	71fb      	strb	r3, [r7, #7]
 8004360:	e030      	b.n	80043c4 <pump_init+0x39c>
	{
		// clear pin EN tp hold motor //
		SET(bomMau[i].EN_Port, bomMau[i].EN_Pin);
 8004362:	79fa      	ldrb	r2, [r7, #7]
 8004364:	4927      	ldr	r1, [pc, #156]	; (8004404 <pump_init+0x3dc>)
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	440b      	add	r3, r1
 8004370:	3348      	adds	r3, #72	; 0x48
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	79fa      	ldrb	r2, [r7, #7]
 8004376:	4923      	ldr	r1, [pc, #140]	; (8004404 <pump_init+0x3dc>)
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	440b      	add	r3, r1
 8004382:	334c      	adds	r3, #76	; 0x4c
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	2201      	movs	r2, #1
 800438a:	4619      	mov	r1, r3
 800438c:	f001 fca7 	bl	8005cde <HAL_GPIO_WritePin>
		SET(bomMau[i].DIR_Port, bomMau[i].DIR_Pin);
 8004390:	79fa      	ldrb	r2, [r7, #7]
 8004392:	491c      	ldr	r1, [pc, #112]	; (8004404 <pump_init+0x3dc>)
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	440b      	add	r3, r1
 800439e:	3340      	adds	r3, #64	; 0x40
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	79fa      	ldrb	r2, [r7, #7]
 80043a4:	4917      	ldr	r1, [pc, #92]	; (8004404 <pump_init+0x3dc>)
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	440b      	add	r3, r1
 80043b0:	3344      	adds	r3, #68	; 0x44
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2201      	movs	r2, #1
 80043b8:	4619      	mov	r1, r3
 80043ba:	f001 fc90 	bl	8005cde <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 16; i++)
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	3301      	adds	r3, #1
 80043c2:	71fb      	strb	r3, [r7, #7]
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	2b0f      	cmp	r3, #15
 80043c8:	d9cb      	bls.n	8004362 <pump_init+0x33a>

	}
	CLEAR(bomMau[0].DIR_Port, bomMau[0].DIR_Pin);
 80043ca:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <pump_init+0x3dc>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	4a0d      	ldr	r2, [pc, #52]	; (8004404 <pump_init+0x3dc>)
 80043d0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80043d4:	b291      	uxth	r1, r2
 80043d6:	2200      	movs	r2, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 fc80 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN9_GPIO_Port, EN9_Pin, 1);
 80043de:	2201      	movs	r2, #1
 80043e0:	2104      	movs	r1, #4
 80043e2:	480a      	ldr	r0, [pc, #40]	; (800440c <pump_init+0x3e4>)
 80043e4:	f001 fc7b 	bl	8005cde <HAL_GPIO_WritePin>
	setAlarm_RuaDauPhun(0);
 80043e8:	2000      	movs	r0, #0
 80043ea:	f000 ff21 	bl	8005230 <setAlarm_RuaDauPhun>

	// clear pin khuay //
	SET(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin);
 80043ee:	2201      	movs	r2, #1
 80043f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043f4:	4806      	ldr	r0, [pc, #24]	; (8004410 <pump_init+0x3e8>)
 80043f6:	f001 fc72 	bl	8005cde <HAL_GPIO_WritePin>

}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000d04 	.word	0x20000d04
 8004408:	40011400 	.word	0x40011400
 800440c:	40011000 	.word	0x40011000
 8004410:	40010800 	.word	0x40010800

08004414 <speaker_efect>:

/**
 * test ok
 */
void speaker_efect()
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	e014      	b.n	800444a <speaker_efect+0x36>
	{
		HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, 1);
 8004420:	2201      	movs	r2, #1
 8004422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004426:	480d      	ldr	r0, [pc, #52]	; (800445c <speaker_efect+0x48>)
 8004428:	f001 fc59 	bl	8005cde <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800442c:	2064      	movs	r0, #100	; 0x64
 800442e:	f001 f837 	bl	80054a0 <HAL_Delay>
		HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, 0);
 8004432:	2200      	movs	r2, #0
 8004434:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004438:	4808      	ldr	r0, [pc, #32]	; (800445c <speaker_efect+0x48>)
 800443a:	f001 fc50 	bl	8005cde <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800443e:	2064      	movs	r0, #100	; 0x64
 8004440:	f001 f82e 	bl	80054a0 <HAL_Delay>
	for (int i = 0; i < 2; i++)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3301      	adds	r3, #1
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b01      	cmp	r3, #1
 800444e:	dde7      	ble.n	8004420 <speaker_efect+0xc>
	}
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40010c00 	.word	0x40010c00

08004460 <sendFrame>:

/**
 * send frame with format to App for notify information
 */
void sendFrame(const char *fmt, ...)
{
 8004460:	b40f      	push	{r0, r1, r2, r3}
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
  static char buffer1[256];
  unsigned int len=0;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, fmt);
 800446c:	f107 031c 	add.w	r3, r7, #28
 8004470:	60bb      	str	r3, [r7, #8]
  vsnprintf(buffer1, sizeof(buffer1), fmt, args);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800447a:	4814      	ldr	r0, [pc, #80]	; (80044cc <sendFrame+0x6c>)
 800447c:	f005 feba 	bl	800a1f4 <vsniprintf>
  va_end(args);
  len=strlen(buffer1);
 8004480:	4812      	ldr	r0, [pc, #72]	; (80044cc <sendFrame+0x6c>)
 8004482:	f7fb fed1 	bl	8000228 <strlen>
 8004486:	60f8      	str	r0, [r7, #12]

  char start[1]={'@'};
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	713b      	strb	r3, [r7, #4]
  HAL_UART_Transmit(&UART_MAIN,  start,1,100);
 800448c:	1d39      	adds	r1, r7, #4
 800448e:	2364      	movs	r3, #100	; 0x64
 8004490:	2201      	movs	r2, #1
 8004492:	480f      	ldr	r0, [pc, #60]	; (80044d0 <sendFrame+0x70>)
 8004494:	f004 f828 	bl	80084e8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&UART_MAIN,  buffer1,len,100);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	b29a      	uxth	r2, r3
 800449c:	2364      	movs	r3, #100	; 0x64
 800449e:	490b      	ldr	r1, [pc, #44]	; (80044cc <sendFrame+0x6c>)
 80044a0:	480b      	ldr	r0, [pc, #44]	; (80044d0 <sendFrame+0x70>)
 80044a2:	f004 f821 	bl	80084e8 <HAL_UART_Transmit>
  char stop[1]={'#'};
 80044a6:	2323      	movs	r3, #35	; 0x23
 80044a8:	703b      	strb	r3, [r7, #0]
  HAL_UART_Transmit(&UART_MAIN,  stop,1,100);
 80044aa:	4639      	mov	r1, r7
 80044ac:	2364      	movs	r3, #100	; 0x64
 80044ae:	2201      	movs	r2, #1
 80044b0:	4807      	ldr	r0, [pc, #28]	; (80044d0 <sendFrame+0x70>)
 80044b2:	f004 f819 	bl	80084e8 <HAL_UART_Transmit>

  ///
  printf("send_frame -> %s \r\n", fmt);
 80044b6:	69b9      	ldr	r1, [r7, #24]
 80044b8:	4806      	ldr	r0, [pc, #24]	; (80044d4 <sendFrame+0x74>)
 80044ba:	f005 fd6b 	bl	8009f94 <iprintf>
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044c8:	b004      	add	sp, #16
 80044ca:	4770      	bx	lr
 80044cc:	2000134c 	.word	0x2000134c
 80044d0:	20000b28 	.word	0x20000b28
 80044d4:	0800ecc4 	.word	0x0800ecc4

080044d8 <check_dir_sleep_Colorpump>:
	}
	*/
}

void check_dir_sleep_Colorpump()
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	71fb      	strb	r3, [r7, #7]

    for(i = 0; i <16; i++)
 80044e2:	2300      	movs	r3, #0
 80044e4:	71fb      	strb	r3, [r7, #7]
 80044e6:	e03c      	b.n	8004562 <check_dir_sleep_Colorpump+0x8a>
    {
    	// check DIR //
		if (bomMau[i].dir == THUAN)
 80044e8:	79fa      	ldrb	r2, [r7, #7]
 80044ea:	4922      	ldr	r1, [pc, #136]	; (8004574 <check_dir_sleep_Colorpump+0x9c>)
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	440b      	add	r3, r1
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d017      	beq.n	800452e <check_dir_sleep_Colorpump+0x56>
			SET(bomMau[i].DIR_Port, bomMau[i].DIR_Pin);
 80044fe:	79fa      	ldrb	r2, [r7, #7]
 8004500:	491c      	ldr	r1, [pc, #112]	; (8004574 <check_dir_sleep_Colorpump+0x9c>)
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	440b      	add	r3, r1
 800450c:	3340      	adds	r3, #64	; 0x40
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	79fa      	ldrb	r2, [r7, #7]
 8004512:	4918      	ldr	r1, [pc, #96]	; (8004574 <check_dir_sleep_Colorpump+0x9c>)
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	440b      	add	r3, r1
 800451e:	3344      	adds	r3, #68	; 0x44
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	2201      	movs	r2, #1
 8004526:	4619      	mov	r1, r3
 8004528:	f001 fbd9 	bl	8005cde <HAL_GPIO_WritePin>
 800452c:	e016      	b.n	800455c <check_dir_sleep_Colorpump+0x84>
		else
			CLEAR(bomMau[i].DIR_Port, bomMau[i].DIR_Pin);
 800452e:	79fa      	ldrb	r2, [r7, #7]
 8004530:	4910      	ldr	r1, [pc, #64]	; (8004574 <check_dir_sleep_Colorpump+0x9c>)
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	440b      	add	r3, r1
 800453c:	3340      	adds	r3, #64	; 0x40
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	79fa      	ldrb	r2, [r7, #7]
 8004542:	490c      	ldr	r1, [pc, #48]	; (8004574 <check_dir_sleep_Colorpump+0x9c>)
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	440b      	add	r3, r1
 800454e:	3344      	adds	r3, #68	; 0x44
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	2200      	movs	r2, #0
 8004556:	4619      	mov	r1, r3
 8004558:	f001 fbc1 	bl	8005cde <HAL_GPIO_WritePin>
    for(i = 0; i <16; i++)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	3301      	adds	r3, #1
 8004560:	71fb      	strb	r3, [r7, #7]
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	2b0f      	cmp	r3, #15
 8004566:	d9bf      	bls.n	80044e8 <check_dir_sleep_Colorpump+0x10>
    }
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000d04 	.word	0x20000d04

08004578 <outputPwmColorPump>:
/*
 *  dieu khien xung bom mau */

void outputPwmColorPump(pump *pumpTemp, uint8_t index)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
	uint16_t slow = 5;
 8004584:	2305      	movs	r3, #5
 8004586:	81fb      	strh	r3, [r7, #14]

	if (pumpTemp->sleep != SLEEP)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05f      	beq.n	8004650 <outputPwmColorPump+0xd8>
	{
		pumpTemp->Counter_Ton++;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
		if (pumpTemp->Counter_Ton > pumpTemp->Ton)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d954      	bls.n	8004650 <outputPwmColorPump+0xd8>
		{
			pumpTemp->Counter_Ton = 0;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30

			if (pumpTemp->countHighSpeed < pumpTemp->pulseSetHighSpeed)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d210      	bcs.n	80045da <outputPwmColorPump+0x62>
			{
				pumpTemp->countHighSpeed++;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]
				HAL_GPIO_TogglePin(pumpTemp->GPIOx, pumpTemp->GPIO_Pin);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f001 fb9e 	bl	8005d0e <HAL_GPIO_TogglePin>
				printf(".");
 80045d2:	202e      	movs	r0, #46	; 0x2e
 80045d4:	f005 fcf0 	bl	8009fb8 <putchar>
	else

	{
		//printf(" PAUSE \r\n");
	}
}
 80045d8:	e03a      	b.n	8004650 <outputPwmColorPump+0xd8>
				if (pumpTemp->countLowSpeed < pumpTemp->pulseSetLowSpeed)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d21b      	bcs.n	800461e <outputPwmColorPump+0xa6>
					if (pumpTemp->countDelay < slow)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	89fb      	ldrh	r3, [r7, #14]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d205      	bcs.n	80045fc <outputPwmColorPump+0x84>
						pumpTemp->countDelay++;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	619a      	str	r2, [r3, #24]
}
 80045fa:	e029      	b.n	8004650 <outputPwmColorPump+0xd8>
						pumpTemp->countDelay = 0;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	619a      	str	r2, [r3, #24]
						pumpTemp->countLowSpeed++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	611a      	str	r2, [r3, #16]
						HAL_GPIO_TogglePin(pumpTemp->GPIOx, pumpTemp->GPIO_Pin);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f001 fb79 	bl	8005d0e <HAL_GPIO_TogglePin>
}
 800461c:	e018      	b.n	8004650 <outputPwmColorPump+0xd8>
					printf(" index: %d-------->STOP \r\n", index);
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	4619      	mov	r1, r3
 8004622:	480d      	ldr	r0, [pc, #52]	; (8004658 <outputPwmColorPump+0xe0>)
 8004624:	f005 fcb6 	bl	8009f94 <iprintf>
					pumpTemp->sleep = SLEEP;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	705a      	strb	r2, [r3, #1]
					out(pumpTemp->GPIOx, pumpTemp->GPIO_Pin, 0);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004636:	2200      	movs	r2, #0
 8004638:	4619      	mov	r1, r3
 800463a:	f001 fb50 	bl	8005cde <HAL_GPIO_WritePin>
					out(pumpTemp->EN_Port, pumpTemp->EN_Pin, 1); // disable motor//
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8004648:	2201      	movs	r2, #1
 800464a:	4619      	mov	r1, r3
 800464c:	f001 fb47 	bl	8005cde <HAL_GPIO_WritePin>
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	0800ecd8 	.word	0x0800ecd8

0800465c <calc_colorPulseOutput>:

/*
 * Tính toán số xung cần xuất ra để điều khiển bơm
 */
void calc_colorPulseOutput(pump *pumpTemp)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b089      	sub	sp, #36	; 0x24
 8004660:	af04      	add	r7, sp, #16
 8004662:	6078      	str	r0, [r7, #4]
	uint32_t Nguyen		=	(uint32_t)    (pumpTemp->mililit);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	4618      	mov	r0, r3
 800466a:	f7fc fcab 	bl	8000fc4 <__aeabi_f2uiz>
 800466e:	4603      	mov	r3, r0
 8004670:	60fb      	str	r3, [r7, #12]
	uint16_t boiSo01ml 	= 	(uint16_t) 	  (pumpTemp->mililit * 10)  % 10;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	4938      	ldr	r1, [pc, #224]	; (8004758 <calc_colorPulseOutput+0xfc>)
 8004678:	4618      	mov	r0, r3
 800467a:	f7fb fddd 	bl	8000238 <__aeabi_fmul>
 800467e:	4603      	mov	r3, r0
 8004680:	4618      	mov	r0, r3
 8004682:	f7fc fc9f 	bl	8000fc4 <__aeabi_f2uiz>
 8004686:	4603      	mov	r3, r0
 8004688:	b29a      	uxth	r2, r3
 800468a:	4b34      	ldr	r3, [pc, #208]	; (800475c <calc_colorPulseOutput+0x100>)
 800468c:	fba3 1302 	umull	r1, r3, r3, r2
 8004690:	08d9      	lsrs	r1, r3, #3
 8004692:	460b      	mov	r3, r1
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	817b      	strh	r3, [r7, #10]
	uint16_t boiSo001ml = 	(uint16_t) 	  (pumpTemp->mililit * 100) % 10;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	492f      	ldr	r1, [pc, #188]	; (8004760 <calc_colorPulseOutput+0x104>)
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fb fdc7 	bl	8000238 <__aeabi_fmul>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fc fc89 	bl	8000fc4 <__aeabi_f2uiz>
 80046b2:	4603      	mov	r3, r0
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4b29      	ldr	r3, [pc, #164]	; (800475c <calc_colorPulseOutput+0x100>)
 80046b8:	fba3 1302 	umull	r1, r3, r3, r2
 80046bc:	08d9      	lsrs	r1, r3, #3
 80046be:	460b      	mov	r3, r1
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	813b      	strh	r3, [r7, #8]

	pumpTemp->pulseSetHighSpeed = (Nguyen * pumpTemp->pulse1ml)*2;  // double for toggle pulse //
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	005a      	lsls	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	605a      	str	r2, [r3, #4]
	pumpTemp->pulseSetLowSpeed  = (boiSo01ml * pumpTemp->pulse01ml + boiSo001ml * pumpTemp->pulse001ml)*2;  // double for toggle pulse //
 80046da:	897b      	ldrh	r3, [r7, #10]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6a12      	ldr	r2, [r2, #32]
 80046e0:	fb03 f202 	mul.w	r2, r3, r2
 80046e4:	893b      	ldrh	r3, [r7, #8]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	4413      	add	r3, r2
 80046f0:	005a      	lsls	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	609a      	str	r2, [r3, #8]

	///// 08-05-2024 //
	// > 1.0 -> total is high fulse //
	if(pumpTemp->pulseSetHighSpeed  > 0)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <calc_colorPulseOutput+0xb6>
	{
		pumpTemp->pulseSetHighSpeed = pumpTemp->pulseSetHighSpeed + pumpTemp->pulseSetLowSpeed;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	441a      	add	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	605a      	str	r2, [r3, #4]
		pumpTemp->pulseSetLowSpeed= 0;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
	}
	else;

	pumpTemp->countHighSpeed = 0;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	60da      	str	r2, [r3, #12]
	pumpTemp->countLowSpeed  = 0;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]

	printf("CALC: 1ml=%u, 01ml=%u, 001ml=%u --> Fulse->1ml: %u - 01ml: %u - 001ml: %u \r\n", Nguyen, boiSo01ml, boiSo001ml, pumpTemp->pulse1ml, pumpTemp->pulse01ml , pumpTemp->pulse001ml);
 800471e:	8978      	ldrh	r0, [r7, #10]
 8004720:	893c      	ldrh	r4, [r7, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6a12      	ldr	r2, [r2, #32]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800472e:	9102      	str	r1, [sp, #8]
 8004730:	9201      	str	r2, [sp, #4]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	4623      	mov	r3, r4
 8004736:	4602      	mov	r2, r0
 8004738:	68f9      	ldr	r1, [r7, #12]
 800473a:	480a      	ldr	r0, [pc, #40]	; (8004764 <calc_colorPulseOutput+0x108>)
 800473c:	f005 fc2a 	bl	8009f94 <iprintf>
	printf("CALC: pulseHighSpeed=%u, pulseLowSpeed=%u \r\n", pumpTemp->pulseSetHighSpeed, pumpTemp->pulseSetLowSpeed);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	461a      	mov	r2, r3
 800474a:	4807      	ldr	r0, [pc, #28]	; (8004768 <calc_colorPulseOutput+0x10c>)
 800474c:	f005 fc22 	bl	8009f94 <iprintf>
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	bd90      	pop	{r4, r7, pc}
 8004758:	41200000 	.word	0x41200000
 800475c:	cccccccd 	.word	0xcccccccd
 8004760:	42c80000 	.word	0x42c80000
 8004764:	0800ecf4 	.word	0x0800ecf4
 8004768:	0800ed44 	.word	0x0800ed44

0800476c <pump_pwm_handle>:

// 1 cycles = 50us //
void pump_pwm_handle()
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 16; i++)
 8004772:	2300      	movs	r3, #0
 8004774:	71fb      	strb	r3, [r7, #7]
 8004776:	e00e      	b.n	8004796 <pump_pwm_handle+0x2a>
	{
		outputPwmColorPump(&bomMau[i], i);
 8004778:	79fa      	ldrb	r2, [r7, #7]
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <pump_pwm_handle+0x3c>)
 8004784:	4413      	add	r3, r2
 8004786:	79fa      	ldrb	r2, [r7, #7]
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fef4 	bl	8004578 <outputPwmColorPump>
	for (uint8_t i = 0; i < 16; i++)
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	3301      	adds	r3, #1
 8004794:	71fb      	strb	r3, [r7, #7]
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	2b0f      	cmp	r3, #15
 800479a:	d9ed      	bls.n	8004778 <pump_pwm_handle+0xc>
	}
	check_dir_sleep_Colorpump();
 800479c:	f7ff fe9c 	bl	80044d8 <check_dir_sleep_Colorpump>
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20000d04 	.word	0x20000d04

080047ac <pump_tron_handle>:

void pump_tron_handle()
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PUL_ALL_16_GPIO_Port, PUL_ALL_16_Pin);
 80047b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047b4:	4802      	ldr	r0, [pc, #8]	; (80047c0 <pump_tron_handle+0x14>)
 80047b6:	f001 faaa 	bl	8005d0e <HAL_GPIO_TogglePin>
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40011000 	.word	0x40011000

080047c4 <AlarmTask>:

}


void AlarmTask()
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af02      	add	r7, sp, #8
	static uint32_t tick_1s = 0;
	static int last_min = 0;
	RTC_TimeTypeDef gTime;
	if (HAL_GetTick() - tick_1s > 1000)
 80047ca:	f000 fe5f 	bl	800548c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <AlarmTask+0xbc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047da:	d94d      	bls.n	8004878 <AlarmTask+0xb4>
	{
		tick_1s = HAL_GetTick();
 80047dc:	f000 fe56 	bl	800548c <HAL_GetTick>
 80047e0:	4603      	mov	r3, r0
 80047e2:	4a27      	ldr	r2, [pc, #156]	; (8004880 <AlarmTask+0xbc>)
 80047e4:	6013      	str	r3, [r2, #0]

		timeNow.time_in_sec++;
 80047e6:	4b27      	ldr	r3, [pc, #156]	; (8004884 <AlarmTask+0xc0>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	3301      	adds	r3, #1
 80047ec:	4a25      	ldr	r2, [pc, #148]	; (8004884 <AlarmTask+0xc0>)
 80047ee:	60d3      	str	r3, [r2, #12]
		checkAlarm();
 80047f0:	f000 f908 	bl	8004a04 <checkAlarm>
		checkRuaDauPhun();
 80047f4:	f000 f88a 	bl	800490c <checkRuaDauPhun>

		int _hour = (timeNow.time_in_sec / 3600);
 80047f8:	4b22      	ldr	r3, [pc, #136]	; (8004884 <AlarmTask+0xc0>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <AlarmTask+0xc4>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	0adb      	lsrs	r3, r3, #11
 8004804:	60fb      	str	r3, [r7, #12]
		int _min = (timeNow.time_in_sec / 60) % 60;
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <AlarmTask+0xc0>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	4a20      	ldr	r2, [pc, #128]	; (800488c <AlarmTask+0xc8>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	0959      	lsrs	r1, r3, #5
 8004812:	4b1e      	ldr	r3, [pc, #120]	; (800488c <AlarmTask+0xc8>)
 8004814:	fba3 2301 	umull	r2, r3, r3, r1
 8004818:	095a      	lsrs	r2, r3, #5
 800481a:	4613      	mov	r3, r2
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	1aca      	subs	r2, r1, r3
 8004824:	60ba      	str	r2, [r7, #8]
		int _sec = (timeNow.time_in_sec % 60);
 8004826:	4b17      	ldr	r3, [pc, #92]	; (8004884 <AlarmTask+0xc0>)
 8004828:	68d9      	ldr	r1, [r3, #12]
 800482a:	4b18      	ldr	r3, [pc, #96]	; (800488c <AlarmTask+0xc8>)
 800482c:	fba3 2301 	umull	r2, r3, r3, r1
 8004830:	095a      	lsrs	r2, r3, #5
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	1aca      	subs	r2, r1, r3
 800483c:	607a      	str	r2, [r7, #4]

		//printf("time now_in sec: %d-> %02d:%02d:%02d \n\r",timeNow.time_in_sec, _hour, _min, _sec);
		if (_hour == 24 && _min == 0 && _sec == 0)  // reset for newday //
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b18      	cmp	r3, #24
 8004842:	d108      	bne.n	8004856 <AlarmTask+0x92>
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <AlarmTask+0x92>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <AlarmTask+0x92>
			timeNow.time_in_sec = 0;
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <AlarmTask+0xc0>)
 8004852:	2200      	movs	r2, #0
 8004854:	60da      	str	r2, [r3, #12]

		if (last_min != _min)
 8004856:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <AlarmTask+0xcc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	d00b      	beq.n	8004878 <AlarmTask+0xb4>
		{
			last_min = _min;
 8004860:	4a0b      	ldr	r2, [pc, #44]	; (8004890 <AlarmTask+0xcc>)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6013      	str	r3, [r2, #0]
			printf("time now_in sec: %d-> %02d:%02d:%02d \n\r", timeNow.time_in_sec, _hour, _min, _sec);
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <AlarmTask+0xc0>)
 8004868:	68d9      	ldr	r1, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4808      	ldr	r0, [pc, #32]	; (8004894 <AlarmTask+0xd0>)
 8004874:	f005 fb8e 	bl	8009f94 <iprintf>
		}
	}
	else;

}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2000144c 	.word	0x2000144c
 8004884:	20001218 	.word	0x20001218
 8004888:	91a2b3c5 	.word	0x91a2b3c5
 800488c:	88888889 	.word	0x88888889
 8004890:	20001450 	.word	0x20001450
 8004894:	0800ed74 	.word	0x0800ed74

08004898 <AlarmOff>:
{
   return;
}

void AlarmOff(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 10; i++)
 800489e:	2300      	movs	r3, #0
 80048a0:	71fb      	strb	r3, [r7, #7]
 80048a2:	e00c      	b.n	80048be <AlarmOff+0x26>
	{
		timeAlarm[i].en = 0;
 80048a4:	79fa      	ldrb	r2, [r7, #7]
 80048a6:	4914      	ldr	r1, [pc, #80]	; (80048f8 <AlarmOff+0x60>)
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	3303      	adds	r3, #3
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 10; i++)
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	3301      	adds	r3, #1
 80048bc:	71fb      	strb	r3, [r7, #7]
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	2b09      	cmp	r3, #9
 80048c2:	d9ef      	bls.n	80048a4 <AlarmOff+0xc>
	}
	DISABLE_TIMER_TRON;
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <AlarmOff+0x64>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	490c      	ldr	r1, [pc, #48]	; (80048fc <AlarmOff+0x64>)
 80048ca:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80048ce:	4013      	ands	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]
 80048d2:	480b      	ldr	r0, [pc, #44]	; (8004900 <AlarmOff+0x68>)
 80048d4:	f003 fa08 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 1);
 80048d8:	2201      	movs	r2, #1
 80048da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048de:	4809      	ldr	r0, [pc, #36]	; (8004904 <AlarmOff+0x6c>)
 80048e0:	f001 f9fd 	bl	8005cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 80048e4:	2200      	movs	r2, #0
 80048e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048ea:	4807      	ldr	r0, [pc, #28]	; (8004908 <AlarmOff+0x70>)
 80048ec:	f001 f9f7 	bl	8005cde <HAL_GPIO_WritePin>
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20001234 	.word	0x20001234
 80048fc:	40001000 	.word	0x40001000
 8004900:	20000ae0 	.word	0x20000ae0
 8004904:	40010800 	.word	0x40010800
 8004908:	40011000 	.word	0x40011000

0800490c <checkRuaDauPhun>:

extern void ruaDauPhun();

void checkRuaDauPhun()
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
	static uint8_t en_timer[10] = {0};
		uint8_t total_state = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	71fb      	strb	r3, [r7, #7]
		//uint8_t last_en_timer[10] = {0};
		static uint8_t startTimer = 0;

		for(int i=0; i<10; i++)
 8004916:	2300      	movs	r3, #0
 8004918:	603b      	str	r3, [r7, #0]
 800491a:	e04d      	b.n	80049b8 <checkRuaDauPhun+0xac>
		{
			if(timeAlarm[i].en == 2)  // == 2  is rua dau phun //
 800491c:	4933      	ldr	r1, [pc, #204]	; (80049ec <checkRuaDauPhun+0xe0>)
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	3303      	adds	r3, #3
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d133      	bne.n	800499a <checkRuaDauPhun+0x8e>
			{
				if(timeAlarm[i].time_in_sec < timeNow.time_in_sec && timeAlarm[i].time_in_sec + 2 > timeNow.time_in_sec)
 8004932:	492e      	ldr	r1, [pc, #184]	; (80049ec <checkRuaDauPhun+0xe0>)
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	4613      	mov	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	330c      	adds	r3, #12
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <checkRuaDauPhun+0xe4>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	429a      	cmp	r2, r3
 800494a:	d219      	bcs.n	8004980 <checkRuaDauPhun+0x74>
 800494c:	4927      	ldr	r1, [pc, #156]	; (80049ec <checkRuaDauPhun+0xe0>)
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	330c      	adds	r3, #12
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	1c9a      	adds	r2, r3, #2
 8004960:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <checkRuaDauPhun+0xe4>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	429a      	cmp	r2, r3
 8004966:	d90b      	bls.n	8004980 <checkRuaDauPhun+0x74>
				{
					en_timer[i] = 1;
 8004968:	4a22      	ldr	r2, [pc, #136]	; (80049f4 <checkRuaDauPhun+0xe8>)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	4413      	add	r3, r2
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
					printf("[ALARM_RUA_DAU_PHUN------>] \r\n");
 8004972:	4821      	ldr	r0, [pc, #132]	; (80049f8 <checkRuaDauPhun+0xec>)
 8004974:	f005 fb7c 	bl	800a070 <puts>
					ruaDauPhun_Alarm = 1;
 8004978:	4b20      	ldr	r3, [pc, #128]	; (80049fc <checkRuaDauPhun+0xf0>)
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e004      	b.n	800498a <checkRuaDauPhun+0x7e>
				}
				else
				{
					en_timer[i] = 0;
 8004980:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <checkRuaDauPhun+0xe8>)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	4413      	add	r3, r2
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
				}
				total_state +=en_timer[i];
 800498a:	4a1a      	ldr	r2, [pc, #104]	; (80049f4 <checkRuaDauPhun+0xe8>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4413      	add	r3, r2
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	4413      	add	r3, r2
 8004996:	71fb      	strb	r3, [r7, #7]
 8004998:	e004      	b.n	80049a4 <checkRuaDauPhun+0x98>
			}
			else
			{
				en_timer[i] = 0;
 800499a:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <checkRuaDauPhun+0xe8>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4413      	add	r3, r2
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
			}
			total_state += en_timer[i];
 80049a4:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <checkRuaDauPhun+0xe8>)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	4413      	add	r3, r2
 80049aa:	781a      	ldrb	r2, [r3, #0]
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	4413      	add	r3, r2
 80049b0:	71fb      	strb	r3, [r7, #7]
		for(int i=0; i<10; i++)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b09      	cmp	r3, #9
 80049bc:	ddae      	ble.n	800491c <checkRuaDauPhun+0x10>
		}


	    if(total_state > 0 && startTimer == 0)
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <checkRuaDauPhun+0xc8>
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <checkRuaDauPhun+0xf4>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d103      	bne.n	80049d4 <checkRuaDauPhun+0xc8>
	    {
	    	startTimer = 1;
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <checkRuaDauPhun+0xf4>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e005      	b.n	80049e0 <checkRuaDauPhun+0xd4>
	    }
	    else if(total_state == 0)
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <checkRuaDauPhun+0xd4>
	    {
	    	startTimer = 0;
 80049da:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <checkRuaDauPhun+0xf4>)
 80049dc:	2200      	movs	r2, #0
 80049de:	701a      	strb	r2, [r3, #0]
	    }
	    else;
		total_state= 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	71fb      	strb	r3, [r7, #7]
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20001234 	.word	0x20001234
 80049f0:	20001218 	.word	0x20001218
 80049f4:	20001454 	.word	0x20001454
 80049f8:	0800ed9c 	.word	0x0800ed9c
 80049fc:	2000023a 	.word	0x2000023a
 8004a00:	2000145e 	.word	0x2000145e

08004a04 <checkAlarm>:
 *  timeAlarm[i].time =  thơi gian khuay mau
 *
 * */

void checkAlarm()  // check alarm khuay mau //
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
	static uint8_t en_timer[10] = {0};
	uint8_t  total_state = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	71fb      	strb	r3, [r7, #7]
	static uint8_t startTimer = 0;

	// if khuay  == OFF, return //
	if(Khuay_Alarm == OFF)
 8004a0e:	4b55      	ldr	r3, [pc, #340]	; (8004b64 <checkAlarm+0x160>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <checkAlarm+0x1c>
	{
		printf(" alarm khuay off \n\r");
 8004a18:	4853      	ldr	r0, [pc, #332]	; (8004b68 <checkAlarm+0x164>)
 8004a1a:	f005 fabb 	bl	8009f94 <iprintf>
		return;  // break if khuay is OFF
 8004a1e:	e09d      	b.n	8004b5c <checkAlarm+0x158>
	}

	for (uint8_t i = 0; i < 10; i++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	71bb      	strb	r3, [r7, #6]
 8004a24:	e05c      	b.n	8004ae0 <checkAlarm+0xdc>
	{
		if(timeAlarm[i].en == 1)  // == 1  khuay //
 8004a26:	79ba      	ldrb	r2, [r7, #6]
 8004a28:	4950      	ldr	r1, [pc, #320]	; (8004b6c <checkAlarm+0x168>)
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	3303      	adds	r3, #3
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d144      	bne.n	8004ac6 <checkAlarm+0xc2>
		{
			if(timeAlarm[i].time_in_sec < timeNow.time_in_sec && timeAlarm[i].time_in_sec + timeAlarm[i].time*60 > timeNow.time_in_sec)
 8004a3c:	79ba      	ldrb	r2, [r7, #6]
 8004a3e:	494b      	ldr	r1, [pc, #300]	; (8004b6c <checkAlarm+0x168>)
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b48      	ldr	r3, [pc, #288]	; (8004b70 <checkAlarm+0x16c>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d22c      	bcs.n	8004ab0 <checkAlarm+0xac>
 8004a56:	79ba      	ldrb	r2, [r7, #6]
 8004a58:	4944      	ldr	r1, [pc, #272]	; (8004b6c <checkAlarm+0x168>)
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	330c      	adds	r3, #12
 8004a66:	6819      	ldr	r1, [r3, #0]
 8004a68:	79ba      	ldrb	r2, [r7, #6]
 8004a6a:	4840      	ldr	r0, [pc, #256]	; (8004b6c <checkAlarm+0x168>)
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4403      	add	r3, r0
 8004a76:	3304      	adds	r3, #4
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	18ca      	adds	r2, r1, r3
 8004a86:	4b3a      	ldr	r3, [pc, #232]	; (8004b70 <checkAlarm+0x16c>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d910      	bls.n	8004ab0 <checkAlarm+0xac>
			{
				en_timer[i] = 1;
 8004a8e:	79bb      	ldrb	r3, [r7, #6]
 8004a90:	4a38      	ldr	r2, [pc, #224]	; (8004b74 <checkAlarm+0x170>)
 8004a92:	2101      	movs	r1, #1
 8004a94:	54d1      	strb	r1, [r2, r3]
				//printf(" alarm ---\n\r");
				HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 0);
 8004a96:	2200      	movs	r2, #0
 8004a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a9c:	4836      	ldr	r0, [pc, #216]	; (8004b78 <checkAlarm+0x174>)
 8004a9e:	f001 f91e 	bl	8005cde <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004aa8:	4834      	ldr	r0, [pc, #208]	; (8004b7c <checkAlarm+0x178>)
 8004aaa:	f001 f918 	bl	8005cde <HAL_GPIO_WritePin>
 8004aae:	e003      	b.n	8004ab8 <checkAlarm+0xb4>
			}
			else
			{
				en_timer[i] = 0;
 8004ab0:	79bb      	ldrb	r3, [r7, #6]
 8004ab2:	4a30      	ldr	r2, [pc, #192]	; (8004b74 <checkAlarm+0x170>)
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	54d1      	strb	r1, [r2, r3]
			}
			total_state +=en_timer[i];
 8004ab8:	79bb      	ldrb	r3, [r7, #6]
 8004aba:	4a2e      	ldr	r2, [pc, #184]	; (8004b74 <checkAlarm+0x170>)
 8004abc:	5cd2      	ldrb	r2, [r2, r3]
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	71fb      	strb	r3, [r7, #7]
 8004ac4:	e003      	b.n	8004ace <checkAlarm+0xca>
		}
		else
		{
			en_timer[i] = 0;
 8004ac6:	79bb      	ldrb	r3, [r7, #6]
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	; (8004b74 <checkAlarm+0x170>)
 8004aca:	2100      	movs	r1, #0
 8004acc:	54d1      	strb	r1, [r2, r3]
		}
		total_state += en_timer[i];
 8004ace:	79bb      	ldrb	r3, [r7, #6]
 8004ad0:	4a28      	ldr	r2, [pc, #160]	; (8004b74 <checkAlarm+0x170>)
 8004ad2:	5cd2      	ldrb	r2, [r2, r3]
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 10; i++)
 8004ada:	79bb      	ldrb	r3, [r7, #6]
 8004adc:	3301      	adds	r3, #1
 8004ade:	71bb      	strb	r3, [r7, #6]
 8004ae0:	79bb      	ldrb	r3, [r7, #6]
 8004ae2:	2b09      	cmp	r3, #9
 8004ae4:	d99f      	bls.n	8004a26 <checkAlarm+0x22>
	}


    if(total_state > 0 && startTimer == 0)
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d013      	beq.n	8004b14 <checkAlarm+0x110>
 8004aec:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <checkAlarm+0x17c>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <checkAlarm+0x110>
    {
    	startTimer = 1;
 8004af4:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <checkAlarm+0x17c>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
    	printf("[ALARM_KHUAY_MAU------>] \r\n");
 8004afa:	4822      	ldr	r0, [pc, #136]	; (8004b84 <checkAlarm+0x180>)
 8004afc:	f005 fab8 	bl	800a070 <puts>
    	ENABLE_TIMER_TRON;
 8004b00:	4b21      	ldr	r3, [pc, #132]	; (8004b88 <checkAlarm+0x184>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a20      	ldr	r2, [pc, #128]	; (8004b88 <checkAlarm+0x184>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	481f      	ldr	r0, [pc, #124]	; (8004b8c <checkAlarm+0x188>)
 8004b0e:	f003 f88b 	bl	8007c28 <HAL_TIM_Base_Start_IT>
 8004b12:	e021      	b.n	8004b58 <checkAlarm+0x154>
    }
    else if(total_state == 0)
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d11e      	bne.n	8004b58 <checkAlarm+0x154>
    {
    	startTimer = 0;
 8004b1a:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <checkAlarm+0x17c>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
    	DISABLE_TIMER_TRON;
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <checkAlarm+0x184>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4918      	ldr	r1, [pc, #96]	; (8004b88 <checkAlarm+0x184>)
 8004b26:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]
 8004b2e:	4817      	ldr	r0, [pc, #92]	; (8004b8c <checkAlarm+0x188>)
 8004b30:	f003 f8da 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
    	HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 1);
 8004b34:	2201      	movs	r2, #1
 8004b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b3a:	480f      	ldr	r0, [pc, #60]	; (8004b78 <checkAlarm+0x174>)
 8004b3c:	f001 f8cf 	bl	8005cde <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 8004b40:	2200      	movs	r2, #0
 8004b42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b46:	480d      	ldr	r0, [pc, #52]	; (8004b7c <checkAlarm+0x178>)
 8004b48:	f001 f8c9 	bl	8005cde <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(PUL_ALL_16_GPIO_Port, PUL_ALL_16_Pin, 0);
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b52:	480a      	ldr	r0, [pc, #40]	; (8004b7c <checkAlarm+0x178>)
 8004b54:	f001 f8c3 	bl	8005cde <HAL_GPIO_WritePin>
    	//printf("[ALARM_ KHAY MAU OFF------>] \r\n");
    }
    else;

	total_state= 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	71fb      	strb	r3, [r7, #7]
}
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	2000023b 	.word	0x2000023b
 8004b68:	0800edbc 	.word	0x0800edbc
 8004b6c:	20001234 	.word	0x20001234
 8004b70:	20001218 	.word	0x20001218
 8004b74:	20001460 	.word	0x20001460
 8004b78:	40010800 	.word	0x40010800
 8004b7c:	40011000 	.word	0x40011000
 8004b80:	2000146a 	.word	0x2000146a
 8004b84:	0800edd0 	.word	0x0800edd0
 8004b88:	40001000 	.word	0x40001000
 8004b8c:	20000ae0 	.word	0x20000ae0

08004b90 <loadConfigInEeprom>:


void loadConfigInEeprom()
{
 8004b90:	b5b0      	push	{r4, r5, r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af02      	add	r7, sp, #8
	//Dừng khuấy màu

	bomTron.en=false;
 8004b96:	4ba0      	ldr	r3, [pc, #640]	; (8004e18 <loadConfigInEeprom+0x288>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	701a      	strb	r2, [r3, #0]
	//dừng bơm
	//write4Byte595_bom(0xffffffff, 1);

	//Thời gian nghỉ khuấy màu
	khuayMau.khoiDongKhuayMau.time.gio=eep_read_word(khuayMau.khoiDongKhuayMau.time.addr.gio);
 8004b9c:	4b9f      	ldr	r3, [pc, #636]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004b9e:	8a1b      	ldrh	r3, [r3, #16]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fb93 	bl	80052cc <eep_read_word>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4b9c      	ldr	r3, [pc, #624]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004bac:	701a      	strb	r2, [r3, #0]
	khuayMau.khoiDongKhuayMau.time.phut=eep_read_word(khuayMau.khoiDongKhuayMau.time.addr.phut);
 8004bae:	4b9b      	ldr	r3, [pc, #620]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004bb0:	8a5b      	ldrh	r3, [r3, #18]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fb8a 	bl	80052cc <eep_read_word>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	4b97      	ldr	r3, [pc, #604]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004bbe:	705a      	strb	r2, [r3, #1]
	khuayMau.khoiDongKhuayMau.time.giay=eep_read_word(khuayMau.khoiDongKhuayMau.time.addr.giay);
 8004bc0:	4b96      	ldr	r3, [pc, #600]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004bc2:	8a9b      	ldrh	r3, [r3, #20]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fb81 	bl	80052cc <eep_read_word>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	4b93      	ldr	r3, [pc, #588]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004bd0:	709a      	strb	r2, [r3, #2]
	//thời gian khuấy màu
	khuayMau.khuayMau.time.phut=eep_read_word(khuayMau.khuayMau.time.addr.phut);
 8004bd2:	4b92      	ldr	r3, [pc, #584]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fb78 	bl	80052cc <eep_read_word>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	4b8e      	ldr	r3, [pc, #568]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	khuayMau.khuayMau.time.giay=eep_read_word(khuayMau.khuayMau.time.addr.giay);
 8004be6:	4b8d      	ldr	r3, [pc, #564]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004be8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fb6e 	bl	80052cc <eep_read_word>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	4b89      	ldr	r3, [pc, #548]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004bf6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	//tốc độ bơm khi vệ sinh đầu phun
	khuayMau.tocDoBomVeSinh.value=eep_read_word(khuayMau.tocDoBomVeSinh.address);
 8004bfa:	4b88      	ldr	r3, [pc, #544]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004bfc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fb63 	bl	80052cc <eep_read_word>
 8004c06:	4603      	mov	r3, r0
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4b84      	ldr	r3, [pc, #528]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004c0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	//lượng màu phun ra
	khuayMau.luongMauPhunRa.value=eep_read_word(khuayMau.luongMauPhunRa.address);
 8004c10:	4b82      	ldr	r3, [pc, #520]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004c12:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fb58 	bl	80052cc <eep_read_word>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4b7e      	ldr	r3, [pc, #504]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	//góc đóng mở nắp


	gocDongNap=eep_read_word(gocDongNap_addr);
 8004c26:	4b7e      	ldr	r3, [pc, #504]	; (8004e20 <loadConfigInEeprom+0x290>)
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fb4e 	bl	80052cc <eep_read_word>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	4b7b      	ldr	r3, [pc, #492]	; (8004e24 <loadConfigInEeprom+0x294>)
 8004c36:	801a      	strh	r2, [r3, #0]
	gocMoNap=eep_read_word(gocMoNap_addr);
 8004c38:	4b7b      	ldr	r3, [pc, #492]	; (8004e28 <loadConfigInEeprom+0x298>)
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fb45 	bl	80052cc <eep_read_word>
 8004c42:	4603      	mov	r3, r0
 8004c44:	461a      	mov	r2, r3
 8004c46:	4b79      	ldr	r3, [pc, #484]	; (8004e2c <loadConfigInEeprom+0x29c>)
 8004c48:	801a      	strh	r2, [r3, #0]
	//Độ rộng xung điều khiển bơm màu


	uint16_t TonBomMau=0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	83fb      	strh	r3, [r7, #30]

   TonBomMau=eep_read_word(doRongXungBomMau_addr);
 8004c4e:	4b78      	ldr	r3, [pc, #480]	; (8004e30 <loadConfigInEeprom+0x2a0>)
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb3a 	bl	80052cc <eep_read_word>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	83fb      	strh	r3, [r7, #30]
	if(TonBomMau > 9999)  // = 65535 //
 8004c5c:	8bfb      	ldrh	r3, [r7, #30]
 8004c5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d90b      	bls.n	8004c7e <loadConfigInEeprom+0xee>
	{
		TonBomMau=200;
 8004c66:	23c8      	movs	r3, #200	; 0xc8
 8004c68:	83fb      	strh	r3, [r7, #30]
		eep_write_word(doRongXungBomMau_addr,TonBomMau);
 8004c6a:	4b71      	ldr	r3, [pc, #452]	; (8004e30 <loadConfigInEeprom+0x2a0>)
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	8bfa      	ldrh	r2, [r7, #30]
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fafc 	bl	8005270 <eep_write_word>
		printf(" set ton bom mau default = 200 \n\r");
 8004c78:	486e      	ldr	r0, [pc, #440]	; (8004e34 <loadConfigInEeprom+0x2a4>)
 8004c7a:	f005 f98b 	bl	8009f94 <iprintf>
//	{
//		TonBomMau=50;
//		eep_write_word(doRongXungBomMau_addr,TonBomMau);
//	}

	TimerBomMau_SetFulseUs(TonBomMau);
 8004c7e:	8bfb      	ldrh	r3, [r7, #30]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fa5b 	bl	800513c <TimerBomMau_SetFulseUs>

	//Độ rộng xung khuấy màu
	khuayMau.doRongXung.value = eep_read_word(khuayMau.doRongXung.address);
 8004c86:	4b65      	ldr	r3, [pc, #404]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fb1d 	bl	80052cc <eep_read_word>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	4b61      	ldr	r3, [pc, #388]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004c98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	if(khuayMau.doRongXung.value > 9999)
 8004c9c:	4b5f      	ldr	r3, [pc, #380]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ca2:	f242 720f 	movw	r2, #9999	; 0x270f
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d90f      	bls.n	8004cca <loadConfigInEeprom+0x13a>
	{
		khuayMau.doRongXung.value = 400;
 8004caa:	4b5c      	ldr	r3, [pc, #368]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004cac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004cb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		eep_write_word(khuayMau.doRongXung.address,350);
 8004cb4:	4b59      	ldr	r3, [pc, #356]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004cb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cba:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fad6 	bl	8005270 <eep_write_word>
		printf(" set T tron default = 400 \n\r");
 8004cc4:	485c      	ldr	r0, [pc, #368]	; (8004e38 <loadConfigInEeprom+0x2a8>)
 8004cc6:	f005 f965 	bl	8009f94 <iprintf>
	}
	bomTron.Tset=khuayMau.doRongXung.value/10;
 8004cca:	4b54      	ldr	r3, [pc, #336]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004ccc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cd0:	4a5a      	ldr	r2, [pc, #360]	; (8004e3c <loadConfigInEeprom+0x2ac>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	08db      	lsrs	r3, r3, #3
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	4b4e      	ldr	r3, [pc, #312]	; (8004e18 <loadConfigInEeprom+0x288>)
 8004cde:	711a      	strb	r2, [r3, #4]
	bomTron.countT=0;
 8004ce0:	4b4d      	ldr	r3, [pc, #308]	; (8004e18 <loadConfigInEeprom+0x288>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	70da      	strb	r2, [r3, #3]

	TimerKhuayMau_SetFulseUs(khuayMau.doRongXung.value);
 8004ce6:	4b4d      	ldr	r3, [pc, #308]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004ce8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fa59 	bl	80051a4 <TimerKhuayMau_SetFulseUs>

	khuayMau.levelThap.address=28;
 8004cf2:	4b4a      	ldr	r3, [pc, #296]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004cf4:	221c      	movs	r2, #28
 8004cf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	khuayMau.levelTrungBinh.address=30;
 8004cfa:	4b48      	ldr	r3, [pc, #288]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004cfc:	221e      	movs	r2, #30
 8004cfe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	khuayMau.levelCao.address=32;
 8004d02:	4b46      	ldr	r3, [pc, #280]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d04:	2220      	movs	r2, #32
 8004d06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	//tốc độ khuấy màu
	//level thấp
	khuayMau.levelThap.value=eep_read_word(khuayMau.levelThap.address);
 8004d0a:	4b44      	ldr	r3, [pc, #272]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fadb 	bl	80052cc <eep_read_word>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4b40      	ldr	r3, [pc, #256]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	if(khuayMau.levelThap.value>100)
 8004d20:	4b3e      	ldr	r3, [pc, #248]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d90d      	bls.n	8004d46 <loadConfigInEeprom+0x1b6>
	{
		khuayMau.levelThap.value=10;
 8004d2a:	4b3c      	ldr	r3, [pc, #240]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d2c:	220a      	movs	r2, #10
 8004d2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		eep_write_word(khuayMau.levelThap.address,khuayMau.levelThap.value);
 8004d32:	4b3a      	ldr	r3, [pc, #232]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d38:	4a38      	ldr	r2, [pc, #224]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d3a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fa95 	bl	8005270 <eep_write_word>
	}
	//level trung bình
	khuayMau.levelTrungBinh.value=eep_read_word(khuayMau.levelTrungBinh.address);
 8004d46:	4b35      	ldr	r3, [pc, #212]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fabd 	bl	80052cc <eep_read_word>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461a      	mov	r2, r3
 8004d56:	4b31      	ldr	r3, [pc, #196]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	if(khuayMau.levelTrungBinh.value>100)
 8004d5c:	4b2f      	ldr	r3, [pc, #188]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004d62:	2b64      	cmp	r3, #100	; 0x64
 8004d64:	d90d      	bls.n	8004d82 <loadConfigInEeprom+0x1f2>
	{
		khuayMau.levelTrungBinh.value=5;
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d68:	2205      	movs	r2, #5
 8004d6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		eep_write_word(khuayMau.levelTrungBinh.address,khuayMau.levelTrungBinh.value);
 8004d6e:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004d74:	4a29      	ldr	r2, [pc, #164]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d76:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fa77 	bl	8005270 <eep_write_word>
	}
	//level cao
	khuayMau.levelCao.value=eep_read_word(khuayMau.levelCao.address);
 8004d82:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fa9f 	bl	80052cc <eep_read_word>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	if(khuayMau.levelCao.value>100)
 8004d98:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004d9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d90d      	bls.n	8004dbe <loadConfigInEeprom+0x22e>
	{
		khuayMau.levelCao.value=1;
 8004da2:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		eep_write_word(khuayMau.levelCao.address,khuayMau.levelCao.value);
 8004daa:	4b1c      	ldr	r3, [pc, #112]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004dac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004db0:	4a1a      	ldr	r2, [pc, #104]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004db2:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fa59 	bl	8005270 <eep_write_word>
	}
	if(khuayMau.tocDoKhuayMau.value==THAP) bomTron.slowLevel=khuayMau.levelThap.value;
 8004dbe:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004dc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d106      	bne.n	8004dd6 <loadConfigInEeprom+0x246>
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004dca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <loadConfigInEeprom+0x288>)
 8004dd2:	705a      	strb	r2, [r3, #1]
 8004dd4:	e016      	b.n	8004e04 <loadConfigInEeprom+0x274>
	else if(khuayMau.tocDoKhuayMau.value==TRUNGBINH) bomTron.slowLevel=khuayMau.levelTrungBinh.value;
 8004dd6:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d106      	bne.n	8004dee <loadConfigInEeprom+0x25e>
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004de2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <loadConfigInEeprom+0x288>)
 8004dea:	705a      	strb	r2, [r3, #1]
 8004dec:	e00a      	b.n	8004e04 <loadConfigInEeprom+0x274>
	else if(khuayMau.tocDoKhuayMau.value==CAO) bomTron.slowLevel=khuayMau.levelCao.value;
 8004dee:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004df0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d105      	bne.n	8004e04 <loadConfigInEeprom+0x274>
 8004df8:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <loadConfigInEeprom+0x28c>)
 8004dfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <loadConfigInEeprom+0x288>)
 8004e02:	705a      	strb	r2, [r3, #1]

    /*******************************************************************************************/
	HAL_Delay(50);
 8004e04:	2032      	movs	r0, #50	; 0x32
 8004e06:	f000 fb4b 	bl	80054a0 <HAL_Delay>
	printf("load config ton \n\r");
 8004e0a:	480d      	ldr	r0, [pc, #52]	; (8004e40 <loadConfigInEeprom+0x2b0>)
 8004e0c:	f005 f8c2 	bl	8009f94 <iprintf>
	for(int i=0;i<16;i++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	e04d      	b.n	8004eb2 <loadConfigInEeprom+0x322>
 8004e16:	bf00      	nop
 8004e18:	20001204 	.word	0x20001204
 8004e1c:	2000023c 	.word	0x2000023c
 8004e20:	200002a8 	.word	0x200002a8
 8004e24:	20000238 	.word	0x20000238
 8004e28:	200002aa 	.word	0x200002aa
 8004e2c:	2000120a 	.word	0x2000120a
 8004e30:	200002ac 	.word	0x200002ac
 8004e34:	0800edec 	.word	0x0800edec
 8004e38:	0800ee10 	.word	0x0800ee10
 8004e3c:	cccccccd 	.word	0xcccccccd
 8004e40:	0800ee30 	.word	0x0800ee30
	{
			uint16_t data= {0};
 8004e44:	2300      	movs	r3, #0
 8004e46:	81fb      	strh	r3, [r7, #14]
			data = eep_read_word(200+i*2);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	3364      	adds	r3, #100	; 0x64
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fa3a 	bl	80052cc <eep_read_word>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	81fb      	strh	r3, [r7, #14]
			if(data = 0xFFFF)
 8004e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e60:	81fb      	strh	r3, [r7, #14]
				data = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	81fb      	strh	r3, [r7, #14]
			bomMau[i].Ton = data;
 8004e66:	49a8      	ldr	r1, [pc, #672]	; (8005108 <loadConfigInEeprom+0x578>)
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	440b      	add	r3, r1
 8004e74:	332e      	adds	r3, #46	; 0x2e
 8004e76:	89fa      	ldrh	r2, [r7, #14]
 8004e78:	801a      	strh	r2, [r3, #0]
			printf("bomMau[%d]=%d", i, bomMau[i].Ton);
 8004e7a:	49a3      	ldr	r1, [pc, #652]	; (8005108 <loadConfigInEeprom+0x578>)
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	440b      	add	r3, r1
 8004e88:	332e      	adds	r3, #46	; 0x2e
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	69b9      	ldr	r1, [r7, #24]
 8004e92:	489e      	ldr	r0, [pc, #632]	; (800510c <loadConfigInEeprom+0x57c>)
 8004e94:	f005 f87e 	bl	8009f94 <iprintf>

			bomMau[i].delayLowSpeed =  TonBomMau;
 8004e98:	499b      	ldr	r1, [pc, #620]	; (8005108 <loadConfigInEeprom+0x578>)
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	440b      	add	r3, r1
 8004ea6:	3334      	adds	r3, #52	; 0x34
 8004ea8:	8bfa      	ldrh	r2, [r7, #30]
 8004eaa:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<16;i++)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	ddc5      	ble.n	8004e44 <loadConfigInEeprom+0x2b4>
	}

	printf("\n\r");
 8004eb8:	4895      	ldr	r0, [pc, #596]	; (8005110 <loadConfigInEeprom+0x580>)
 8004eba:	f005 f86b 	bl	8009f94 <iprintf>
	printf("Delay low counter = %d \n\r",bomMau[0].delayLowSpeed );
 8004ebe:	4b92      	ldr	r3, [pc, #584]	; (8005108 <loadConfigInEeprom+0x578>)
 8004ec0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4893      	ldr	r0, [pc, #588]	; (8005114 <loadConfigInEeprom+0x584>)
 8004ec8:	f005 f864 	bl	8009f94 <iprintf>


	HAL_Delay(50);
 8004ecc:	2032      	movs	r0, #50	; 0x32
 8004ece:	f000 fae7 	bl	80054a0 <HAL_Delay>
	//hẹn giờ khuấy màu -- 100- 186
	for (int i = 0; i < 10; i++) {
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	e041      	b.n	8004f5c <loadConfigInEeprom+0x3cc>
		timeAlarm[i].addr.gio = 100 + 8 * i;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3364      	adds	r3, #100	; 0x64
 8004ee2:	b298      	uxth	r0, r3
 8004ee4:	498c      	ldr	r1, [pc, #560]	; (8005118 <loadConfigInEeprom+0x588>)
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	801a      	strh	r2, [r3, #0]
		timeAlarm[i].addr.phut = 100 + 8 * i + 2;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3366      	adds	r3, #102	; 0x66
 8004f02:	b298      	uxth	r0, r3
 8004f04:	4984      	ldr	r1, [pc, #528]	; (8005118 <loadConfigInEeprom+0x588>)
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	3312      	adds	r3, #18
 8004f14:	4602      	mov	r2, r0
 8004f16:	801a      	strh	r2, [r3, #0]
		timeAlarm[i].addr.time = 100 + 8 * i + 4;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	330d      	adds	r3, #13
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	b298      	uxth	r0, r3
 8004f22:	497d      	ldr	r1, [pc, #500]	; (8005118 <loadConfigInEeprom+0x588>)
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	3316      	adds	r3, #22
 8004f32:	4602      	mov	r2, r0
 8004f34:	801a      	strh	r2, [r3, #0]
		timeAlarm[i].addr.en = 100 + 8 * i + 6;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	336a      	adds	r3, #106	; 0x6a
 8004f40:	b298      	uxth	r0, r3
 8004f42:	4975      	ldr	r1, [pc, #468]	; (8005118 <loadConfigInEeprom+0x588>)
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	3318      	adds	r3, #24
 8004f52:	4602      	mov	r2, r0
 8004f54:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 10; i++) {
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b09      	cmp	r3, #9
 8004f60:	ddba      	ble.n	8004ed8 <loadConfigInEeprom+0x348>
		//rs232_print("addr.gio=%d addr.phut=%d addr.time=%d addr.en=%d\n",timeAlarm[i].addr.gio,timeAlarm[i].addr.phut,timeAlarm[i].addr.time,timeAlarm[i].addr.en);
	}

	/* load time setting alarmmmm */
	printf("...............readback alarm when 121023 ...............\r\n");
 8004f62:	486e      	ldr	r0, [pc, #440]	; (800511c <loadConfigInEeprom+0x58c>)
 8004f64:	f005 f884 	bl	800a070 <puts>
	for(int i=0;i<10;i++)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	e0c0      	b.n	80050f0 <loadConfigInEeprom+0x560>
	{
		uint16_t data[4]= {0};
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	605a      	str	r2, [r3, #4]

		data[0] = eep_read_word(timeAlarm[i].addr.gio);
 8004f76:	4968      	ldr	r1, [pc, #416]	; (8005118 <loadConfigInEeprom+0x588>)
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	3310      	adds	r3, #16
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 f99f 	bl	80052cc <eep_read_word>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	80bb      	strh	r3, [r7, #4]
		data[1] = eep_read_word(timeAlarm[i].addr.phut);
 8004f92:	4961      	ldr	r1, [pc, #388]	; (8005118 <loadConfigInEeprom+0x588>)
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4613      	mov	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3312      	adds	r3, #18
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f991 	bl	80052cc <eep_read_word>
 8004faa:	4603      	mov	r3, r0
 8004fac:	80fb      	strh	r3, [r7, #6]
		data[2] = eep_read_word(timeAlarm[i].addr.time);
 8004fae:	495a      	ldr	r1, [pc, #360]	; (8005118 <loadConfigInEeprom+0x588>)
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3316      	adds	r3, #22
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f983 	bl	80052cc <eep_read_word>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	813b      	strh	r3, [r7, #8]
		data[3] = eep_read_word(timeAlarm[i].addr.en);
 8004fca:	4953      	ldr	r1, [pc, #332]	; (8005118 <loadConfigInEeprom+0x588>)
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	3318      	adds	r3, #24
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 f975 	bl	80052cc <eep_read_word>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	817b      	strh	r3, [r7, #10]

		timeAlarm[i].gio  = data[0];
 8004fe6:	88bb      	ldrh	r3, [r7, #4]
 8004fe8:	b2d8      	uxtb	r0, r3
 8004fea:	494b      	ldr	r1, [pc, #300]	; (8005118 <loadConfigInEeprom+0x588>)
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	701a      	strb	r2, [r3, #0]
		timeAlarm[i].phut = data[1];
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	b2d8      	uxtb	r0, r3
 8005000:	4945      	ldr	r1, [pc, #276]	; (8005118 <loadConfigInEeprom+0x588>)
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	1a9b      	subs	r3, r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3301      	adds	r3, #1
 8005010:	4602      	mov	r2, r0
 8005012:	701a      	strb	r2, [r3, #0]
		timeAlarm[i].time = data[2];
 8005014:	893b      	ldrh	r3, [r7, #8]
 8005016:	b2d8      	uxtb	r0, r3
 8005018:	493f      	ldr	r1, [pc, #252]	; (8005118 <loadConfigInEeprom+0x588>)
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	3304      	adds	r3, #4
 8005028:	4602      	mov	r2, r0
 800502a:	701a      	strb	r2, [r3, #0]
		timeAlarm[i].en   = data[3];
 800502c:	897b      	ldrh	r3, [r7, #10]
 800502e:	b2d8      	uxtb	r0, r3
 8005030:	4939      	ldr	r1, [pc, #228]	; (8005118 <loadConfigInEeprom+0x588>)
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4613      	mov	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	3303      	adds	r3, #3
 8005040:	4602      	mov	r2, r0
 8005042:	701a      	strb	r2, [r3, #0]

		timeAlarm[i].time_in_sec = timeAlarm[i].gio* 3600 + timeAlarm[i].phut*60;
 8005044:	4934      	ldr	r1, [pc, #208]	; (8005118 <loadConfigInEeprom+0x588>)
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800505a:	fb03 f102 	mul.w	r1, r3, r2
 800505e:	482e      	ldr	r0, [pc, #184]	; (8005118 <loadConfigInEeprom+0x588>)
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4613      	mov	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4403      	add	r3, r0
 800506c:	3301      	adds	r3, #1
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	4618      	mov	r0, r3
 800507e:	4926      	ldr	r1, [pc, #152]	; (8005118 <loadConfigInEeprom+0x588>)
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	330c      	adds	r3, #12
 800508e:	6018      	str	r0, [r3, #0]
		printf("gio:%d phut:%d interval: %d state:%d \r\n", timeAlarm[i].gio, timeAlarm[i].phut, timeAlarm[i].time , timeAlarm[i].en);
 8005090:	4921      	ldr	r1, [pc, #132]	; (8005118 <loadConfigInEeprom+0x588>)
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	491d      	ldr	r1, [pc, #116]	; (8005118 <loadConfigInEeprom+0x588>)
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4613      	mov	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	3301      	adds	r3, #1
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	461c      	mov	r4, r3
 80050b6:	4918      	ldr	r1, [pc, #96]	; (8005118 <loadConfigInEeprom+0x588>)
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	3304      	adds	r3, #4
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	461d      	mov	r5, r3
 80050ca:	4913      	ldr	r1, [pc, #76]	; (8005118 <loadConfigInEeprom+0x588>)
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	3303      	adds	r3, #3
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	462b      	mov	r3, r5
 80050e0:	4622      	mov	r2, r4
 80050e2:	4601      	mov	r1, r0
 80050e4:	480e      	ldr	r0, [pc, #56]	; (8005120 <loadConfigInEeprom+0x590>)
 80050e6:	f004 ff55 	bl	8009f94 <iprintf>
	for(int i=0;i<10;i++)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3301      	adds	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b09      	cmp	r3, #9
 80050f4:	f77f af3b 	ble.w	8004f6e <loadConfigInEeprom+0x3de>
	}
	HAL_Delay(50);
 80050f8:	2032      	movs	r0, #50	; 0x32
 80050fa:	f000 f9d1 	bl	80054a0 <HAL_Delay>

	/** load config Ton for 16P PWM **/


}
 80050fe:	bf00      	nop
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bdb0      	pop	{r4, r5, r7, pc}
 8005106:	bf00      	nop
 8005108:	20000d04 	.word	0x20000d04
 800510c:	0800ee44 	.word	0x0800ee44
 8005110:	0800ee54 	.word	0x0800ee54
 8005114:	0800ee58 	.word	0x0800ee58
 8005118:	20001234 	.word	0x20001234
 800511c:	0800ee74 	.word	0x0800ee74
 8005120:	0800eeb0 	.word	0x0800eeb0

08005124 <dongNapHandle>:
	HAL_TIM_Base_Start_IT(&htim5);

}

void dongNapHandle()
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 8005128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800512c:	4802      	ldr	r0, [pc, #8]	; (8005138 <dongNapHandle+0x14>)
 800512e:	f000 fdee 	bl	8005d0e <HAL_GPIO_TogglePin>
}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40011000 	.word	0x40011000

0800513c <TimerBomMau_SetFulseUs>:
 *  prescaler: 71 + 1 -> timerClk = 1.000.000hz = 1Mhz = 1us
 *  period: value = value * 1us.
 *  note:  50 < Value < 400 -> motor stable
 */
void TimerBomMau_SetFulseUs(uint16_t value)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	80fb      	strh	r3, [r7, #6]

	printf("update timer bom mau -> %d us \r\n", value);
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	4619      	mov	r1, r3
 800514a:	4813      	ldr	r0, [pc, #76]	; (8005198 <TimerBomMau_SetFulseUs+0x5c>)
 800514c:	f004 ff22 	bl	8009f94 <iprintf>
	HAL_TIM_Base_Stop_IT(&htim3);
 8005150:	4812      	ldr	r0, [pc, #72]	; (800519c <TimerBomMau_SetFulseUs+0x60>)
 8005152:	f002 fdc9 	bl	8007ce8 <HAL_TIM_Base_Stop_IT>
	htim3.Instance = TIM3;
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <TimerBomMau_SetFulseUs+0x60>)
 8005158:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <TimerBomMau_SetFulseUs+0x64>)
 800515a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 71;
 800515c:	4b0f      	ldr	r3, [pc, #60]	; (800519c <TimerBomMau_SetFulseUs+0x60>)
 800515e:	2247      	movs	r2, #71	; 0x47
 8005160:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005162:	4b0e      	ldr	r3, [pc, #56]	; (800519c <TimerBomMau_SetFulseUs+0x60>)
 8005164:	2200      	movs	r2, #0
 8005166:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = value-1;
 8005168:	88fb      	ldrh	r3, [r7, #6]
 800516a:	3b01      	subs	r3, #1
 800516c:	461a      	mov	r2, r3
 800516e:	4b0b      	ldr	r3, [pc, #44]	; (800519c <TimerBomMau_SetFulseUs+0x60>)
 8005170:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <TimerBomMau_SetFulseUs+0x60>)
 8005174:	2200      	movs	r2, #0
 8005176:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005178:	4b08      	ldr	r3, [pc, #32]	; (800519c <TimerBomMau_SetFulseUs+0x60>)
 800517a:	2280      	movs	r2, #128	; 0x80
 800517c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800517e:	4807      	ldr	r0, [pc, #28]	; (800519c <TimerBomMau_SetFulseUs+0x60>)
 8005180:	f002 fd03 	bl	8007b8a <HAL_TIM_Base_Init>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <TimerBomMau_SetFulseUs+0x52>
	{
		Error_Handler();
 800518a:	f7fc fbd3 	bl	8001934 <Error_Handler>
	}
	//HAL_TIM_Base_Start_IT(&htim3);
}
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	0800eed8 	.word	0x0800eed8
 800519c:	20000a08 	.word	0x20000a08
 80051a0:	40000400 	.word	0x40000400

080051a4 <TimerKhuayMau_SetFulseUs>:


void TimerKhuayMau_SetFulseUs(uint16_t value)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	80fb      	strh	r3, [r7, #6]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	605a      	str	r2, [r3, #4]

	  /* USER CODE BEGIN TIM6_Init 1 */

	  /* USER CODE END TIM6_Init 1 */
	  htim6.Instance = TIM6;
 80051b8:	4b15      	ldr	r3, [pc, #84]	; (8005210 <TimerKhuayMau_SetFulseUs+0x6c>)
 80051ba:	4a16      	ldr	r2, [pc, #88]	; (8005214 <TimerKhuayMau_SetFulseUs+0x70>)
 80051bc:	601a      	str	r2, [r3, #0]
	  htim6.Init.Prescaler = 71;
 80051be:	4b14      	ldr	r3, [pc, #80]	; (8005210 <TimerKhuayMau_SetFulseUs+0x6c>)
 80051c0:	2247      	movs	r2, #71	; 0x47
 80051c2:	605a      	str	r2, [r3, #4]
	  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c4:	4b12      	ldr	r3, [pc, #72]	; (8005210 <TimerKhuayMau_SetFulseUs+0x6c>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	609a      	str	r2, [r3, #8]
	  htim6.Init.Period = value-1;
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <TimerKhuayMau_SetFulseUs+0x6c>)
 80051d2:	60da      	str	r2, [r3, #12]
	  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051d4:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <TimerKhuayMau_SetFulseUs+0x6c>)
 80051d6:	2280      	movs	r2, #128	; 0x80
 80051d8:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80051da:	480d      	ldr	r0, [pc, #52]	; (8005210 <TimerKhuayMau_SetFulseUs+0x6c>)
 80051dc:	f002 fcd5 	bl	8007b8a <HAL_TIM_Base_Init>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <TimerKhuayMau_SetFulseUs+0x46>
	  {
	    Error_Handler();
 80051e6:	f7fc fba5 	bl	8001934 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80051f2:	f107 0308 	add.w	r3, r7, #8
 80051f6:	4619      	mov	r1, r3
 80051f8:	4805      	ldr	r0, [pc, #20]	; (8005210 <TimerKhuayMau_SetFulseUs+0x6c>)
 80051fa:	f003 f8a7 	bl	800834c <HAL_TIMEx_MasterConfigSynchronization>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <TimerKhuayMau_SetFulseUs+0x64>
	  {
	    Error_Handler();
 8005204:	f7fc fb96 	bl	8001934 <Error_Handler>
	  }
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000ae0 	.word	0x20000ae0
 8005214:	40001000 	.word	0x40001000

08005218 <getAlarm_RuaDauPhun>:

/// rua dau phun //
uint8_t getAlarm_RuaDauPhun(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
	return ruaDauPhun_Alarm;
 800521c:	4b03      	ldr	r3, [pc, #12]	; (800522c <getAlarm_RuaDauPhun+0x14>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	b2db      	uxtb	r3, r3
}
 8005222:	4618      	mov	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	2000023a 	.word	0x2000023a

08005230 <setAlarm_RuaDauPhun>:
void setAlarm_RuaDauPhun(uint8_t value)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
	ruaDauPhun_Alarm = value;
 800523a:	4a04      	ldr	r2, [pc, #16]	; (800524c <setAlarm_RuaDauPhun+0x1c>)
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	7013      	strb	r3, [r2, #0]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	2000023a 	.word	0x2000023a

08005250 <setAlarm_Khuay>:
/**
 * Value = ON or OFF
 * */

void setAlarm_Khuay(uint8_t value)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
	Khuay_Alarm = value;
 800525a:	4a04      	ldr	r2, [pc, #16]	; (800526c <setAlarm_Khuay+0x1c>)
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	7013      	strb	r3, [r2, #0]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2000023b 	.word	0x2000023b

08005270 <eep_write_word>:
	return buf[0];
}


uint8_t eep_write_word (uint16_t address, uint16_t data)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af04      	add	r7, sp, #16
 8005276:	4603      	mov	r3, r0
 8005278:	460a      	mov	r2, r1
 800527a:	80fb      	strh	r3, [r7, #6]
 800527c:	4613      	mov	r3, r2
 800527e:	80bb      	strh	r3, [r7, #4]
	char result=0;
 8005280:	2300      	movs	r3, #0
 8005282:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0]=(data&0xff00)>>8;
 8005284:	88bb      	ldrh	r3, [r7, #4]
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	b29b      	uxth	r3, r3
 800528a:	b2db      	uxtb	r3, r3
 800528c:	733b      	strb	r3, [r7, #12]
	buf[1]=data&0xff;
 800528e:	88bb      	ldrh	r3, [r7, #4]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	737b      	strb	r3, [r7, #13]
	result = HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address*2, I2C_MEMADD_SIZE_16BIT, buf, 2, 100);  // write the data to the EEPROM
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	2364      	movs	r3, #100	; 0x64
 800529c:	9302      	str	r3, [sp, #8]
 800529e:	2302      	movs	r3, #2
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	f107 030c 	add.w	r3, r7, #12
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2310      	movs	r3, #16
 80052aa:	21a0      	movs	r1, #160	; 0xa0
 80052ac:	4806      	ldr	r0, [pc, #24]	; (80052c8 <eep_write_word+0x58>)
 80052ae:	f000 fea3 	bl	8005ff8 <HAL_I2C_Mem_Write>
 80052b2:	4603      	mov	r3, r0
 80052b4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(T_DELAY);  // Write cycle delay (5ms)
 80052b6:	200a      	movs	r0, #10
 80052b8:	f000 f8f2 	bl	80054a0 <HAL_Delay>
	return result;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000954 	.word	0x20000954

080052cc <eep_read_word>:

uint16_t eep_read_word (uint16_t address)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af04      	add	r7, sp, #16
 80052d2:	4603      	mov	r3, r0
 80052d4:	80fb      	strh	r3, [r7, #6]
	unsigned int result=0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
	uint8_t buf[2]={0};
 80052da:	2300      	movs	r3, #0
 80052dc:	813b      	strh	r3, [r7, #8]
	result = HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address*2, I2C_MEMADD_SIZE_16BIT, buf, 2, 100);
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	2364      	movs	r3, #100	; 0x64
 80052e6:	9302      	str	r3, [sp, #8]
 80052e8:	2302      	movs	r3, #2
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	f107 0308 	add.w	r3, r7, #8
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	2310      	movs	r3, #16
 80052f4:	21a0      	movs	r1, #160	; 0xa0
 80052f6:	4809      	ldr	r0, [pc, #36]	; (800531c <eep_read_word+0x50>)
 80052f8:	f000 ff78 	bl	80061ec <HAL_I2C_Mem_Read>
 80052fc:	4603      	mov	r3, r0
 80052fe:	60fb      	str	r3, [r7, #12]
	result=(buf[0]<<8)|buf[1];
 8005300:	7a3b      	ldrb	r3, [r7, #8]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	7a7a      	ldrb	r2, [r7, #9]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
	HAL_Delay (T_DELAY);
 800530a:	200a      	movs	r0, #10
 800530c:	f000 f8c8 	bl	80054a0 <HAL_Delay>
	return result;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	b29b      	uxth	r3, r3
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000954 	.word	0x20000954

08005320 <trim>:


//----------------------------------------------------

bool trim(char *source,char *des,char key_start[30],char key_stop[30])
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b089      	sub	sp, #36	; 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
    unsigned int start_id=0,stop_id=0;
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
    if(strstr(source,key_start)==0) return false;
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f005 f814 	bl	800a366 <strstr>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <trim+0x28>
 8005344:	2300      	movs	r3, #0
 8005346:	e044      	b.n	80053d2 <trim+0xb2>
    if(strstr(source,key_stop)==0) return false;
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f005 f80b 	bl	800a366 <strstr>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <trim+0x3a>
 8005356:	2300      	movs	r3, #0
 8005358:	e03b      	b.n	80053d2 <trim+0xb2>
    memset(des,0,strlen(des));
 800535a:	68b8      	ldr	r0, [r7, #8]
 800535c:	f7fa ff64 	bl	8000228 <strlen>
 8005360:	4603      	mov	r3, r0
 8005362:	461a      	mov	r2, r3
 8005364:	2100      	movs	r1, #0
 8005366:	68b8      	ldr	r0, [r7, #8]
 8005368:	f004 ffe8 	bl	800a33c <memset>
    start_id=strstr(source,key_start)+strlen(key_start)-source;
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f004 fff9 	bl	800a366 <strstr>
 8005374:	4604      	mov	r4, r0
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fa ff56 	bl	8000228 <strlen>
 800537c:	4603      	mov	r3, r0
 800537e:	18e2      	adds	r2, r4, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	61bb      	str	r3, [r7, #24]
    stop_id=strstr(source+start_id,key_stop)-source;
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	4413      	add	r3, r2
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f004 ffe9 	bl	800a366 <strstr>
 8005394:	4602      	mov	r2, r0
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	617b      	str	r3, [r7, #20]
    //printf("start_id: %d\n",start_id);
    //printf("stop_id: %d\n",stop_id);
    if(start_id>stop_id) return false;
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d901      	bls.n	80053a8 <trim+0x88>
 80053a4:	2300      	movs	r3, #0
 80053a6:	e014      	b.n	80053d2 <trim+0xb2>
    for(int i=start_id;i<stop_id;i++)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	e00c      	b.n	80053c8 <trim+0xa8>
    	des[i-start_id]=source[i];
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	441a      	add	r2, r3
 80053b4:	69f9      	ldr	r1, [r7, #28]
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	1acb      	subs	r3, r1, r3
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	440b      	add	r3, r1
 80053be:	7812      	ldrb	r2, [r2, #0]
 80053c0:	701a      	strb	r2, [r3, #0]
    for(int i=start_id;i<stop_id;i++)
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	3301      	adds	r3, #1
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d8ee      	bhi.n	80053ae <trim+0x8e>
    return true;
 80053d0:	2301      	movs	r3, #1
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3724      	adds	r7, #36	; 0x24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd90      	pop	{r4, r7, pc}
	...

080053dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053e0:	4b08      	ldr	r3, [pc, #32]	; (8005404 <HAL_Init+0x28>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a07      	ldr	r2, [pc, #28]	; (8005404 <HAL_Init+0x28>)
 80053e6:	f043 0310 	orr.w	r3, r3, #16
 80053ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053ec:	2003      	movs	r0, #3
 80053ee:	f000 f947 	bl	8005680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053f2:	200f      	movs	r0, #15
 80053f4:	f000 f808 	bl	8005408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053f8:	f7fc fae2 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40022000 	.word	0x40022000

08005408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <HAL_InitTick+0x54>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_InitTick+0x58>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	4619      	mov	r1, r3
 800541a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800541e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f95f 	bl	80056ea <HAL_SYSTICK_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e00e      	b.n	8005454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b0f      	cmp	r3, #15
 800543a:	d80a      	bhi.n	8005452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800543c:	2200      	movs	r2, #0
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	f000 f927 	bl	8005696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005448:	4a06      	ldr	r2, [pc, #24]	; (8005464 <HAL_InitTick+0x5c>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	e000      	b.n	8005454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20000000 	.word	0x20000000
 8005460:	200002b4 	.word	0x200002b4
 8005464:	200002b0 	.word	0x200002b0

08005468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_IncTick+0x1c>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_IncTick+0x20>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4413      	add	r3, r2
 8005478:	4a03      	ldr	r2, [pc, #12]	; (8005488 <HAL_IncTick+0x20>)
 800547a:	6013      	str	r3, [r2, #0]
}
 800547c:	bf00      	nop
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	200002b4 	.word	0x200002b4
 8005488:	2000146c 	.word	0x2000146c

0800548c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return uwTick;
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <HAL_GetTick+0x10>)
 8005492:	681b      	ldr	r3, [r3, #0]
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	2000146c 	.word	0x2000146c

080054a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054a8:	f7ff fff0 	bl	800548c <HAL_GetTick>
 80054ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d005      	beq.n	80054c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054ba:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <HAL_Delay+0x44>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054c6:	bf00      	nop
 80054c8:	f7ff ffe0 	bl	800548c <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d8f7      	bhi.n	80054c8 <HAL_Delay+0x28>
  {
  }
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	200002b4 	.word	0x200002b4

080054e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <__NVIC_SetPriorityGrouping+0x44>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005504:	4013      	ands	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800551a:	4a04      	ldr	r2, [pc, #16]	; (800552c <__NVIC_SetPriorityGrouping+0x44>)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	60d3      	str	r3, [r2, #12]
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	e000ed00 	.word	0xe000ed00

08005530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005534:	4b04      	ldr	r3, [pc, #16]	; (8005548 <__NVIC_GetPriorityGrouping+0x18>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	f003 0307 	and.w	r3, r3, #7
}
 800553e:	4618      	mov	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555a:	2b00      	cmp	r3, #0
 800555c:	db0b      	blt.n	8005576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	f003 021f 	and.w	r2, r3, #31
 8005564:	4906      	ldr	r1, [pc, #24]	; (8005580 <__NVIC_EnableIRQ+0x34>)
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	2001      	movs	r0, #1
 800556e:	fa00 f202 	lsl.w	r2, r0, r2
 8005572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr
 8005580:	e000e100 	.word	0xe000e100

08005584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	6039      	str	r1, [r7, #0]
 800558e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005594:	2b00      	cmp	r3, #0
 8005596:	db0a      	blt.n	80055ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	b2da      	uxtb	r2, r3
 800559c:	490c      	ldr	r1, [pc, #48]	; (80055d0 <__NVIC_SetPriority+0x4c>)
 800559e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a2:	0112      	lsls	r2, r2, #4
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	440b      	add	r3, r1
 80055a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055ac:	e00a      	b.n	80055c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	4908      	ldr	r1, [pc, #32]	; (80055d4 <__NVIC_SetPriority+0x50>)
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	3b04      	subs	r3, #4
 80055bc:	0112      	lsls	r2, r2, #4
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	440b      	add	r3, r1
 80055c2:	761a      	strb	r2, [r3, #24]
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	e000e100 	.word	0xe000e100
 80055d4:	e000ed00 	.word	0xe000ed00

080055d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055d8:	b480      	push	{r7}
 80055da:	b089      	sub	sp, #36	; 0x24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f1c3 0307 	rsb	r3, r3, #7
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	bf28      	it	cs
 80055f6:	2304      	movcs	r3, #4
 80055f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	3304      	adds	r3, #4
 80055fe:	2b06      	cmp	r3, #6
 8005600:	d902      	bls.n	8005608 <NVIC_EncodePriority+0x30>
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	3b03      	subs	r3, #3
 8005606:	e000      	b.n	800560a <NVIC_EncodePriority+0x32>
 8005608:	2300      	movs	r3, #0
 800560a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800560c:	f04f 32ff 	mov.w	r2, #4294967295
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43da      	mvns	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	401a      	ands	r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005620:	f04f 31ff 	mov.w	r1, #4294967295
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	fa01 f303 	lsl.w	r3, r1, r3
 800562a:	43d9      	mvns	r1, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005630:	4313      	orrs	r3, r2
         );
}
 8005632:	4618      	mov	r0, r3
 8005634:	3724      	adds	r7, #36	; 0x24
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3b01      	subs	r3, #1
 8005648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800564c:	d301      	bcc.n	8005652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800564e:	2301      	movs	r3, #1
 8005650:	e00f      	b.n	8005672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005652:	4a0a      	ldr	r2, [pc, #40]	; (800567c <SysTick_Config+0x40>)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3b01      	subs	r3, #1
 8005658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800565a:	210f      	movs	r1, #15
 800565c:	f04f 30ff 	mov.w	r0, #4294967295
 8005660:	f7ff ff90 	bl	8005584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <SysTick_Config+0x40>)
 8005666:	2200      	movs	r2, #0
 8005668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <SysTick_Config+0x40>)
 800566c:	2207      	movs	r2, #7
 800566e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	e000e010 	.word	0xe000e010

08005680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff ff2d 	bl	80054e8 <__NVIC_SetPriorityGrouping>
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005696:	b580      	push	{r7, lr}
 8005698:	b086      	sub	sp, #24
 800569a:	af00      	add	r7, sp, #0
 800569c:	4603      	mov	r3, r0
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056a8:	f7ff ff42 	bl	8005530 <__NVIC_GetPriorityGrouping>
 80056ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	6978      	ldr	r0, [r7, #20]
 80056b4:	f7ff ff90 	bl	80055d8 <NVIC_EncodePriority>
 80056b8:	4602      	mov	r2, r0
 80056ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ff5f 	bl	8005584 <__NVIC_SetPriority>
}
 80056c6:	bf00      	nop
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	4603      	mov	r3, r0
 80056d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff ff35 	bl	800554c <__NVIC_EnableIRQ>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ffa2 	bl	800563c <SysTick_Config>
 80056f8:	4603      	mov	r3, r0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d008      	beq.n	800572c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2204      	movs	r2, #4
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e020      	b.n	800576e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 020e 	bic.w	r2, r2, #14
 800573a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005754:	2101      	movs	r1, #1
 8005756:	fa01 f202 	lsl.w	r2, r1, r2
 800575a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800576c:	7bfb      	ldrb	r3, [r7, #15]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d005      	beq.n	800579c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2204      	movs	r2, #4
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
 800579a:	e0d6      	b.n	800594a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 020e 	bic.w	r2, r2, #14
 80057aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0201 	bic.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	4b64      	ldr	r3, [pc, #400]	; (8005954 <HAL_DMA_Abort_IT+0x1dc>)
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d958      	bls.n	800587a <HAL_DMA_Abort_IT+0x102>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a62      	ldr	r2, [pc, #392]	; (8005958 <HAL_DMA_Abort_IT+0x1e0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d04f      	beq.n	8005872 <HAL_DMA_Abort_IT+0xfa>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a61      	ldr	r2, [pc, #388]	; (800595c <HAL_DMA_Abort_IT+0x1e4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d048      	beq.n	800586e <HAL_DMA_Abort_IT+0xf6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a5f      	ldr	r2, [pc, #380]	; (8005960 <HAL_DMA_Abort_IT+0x1e8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d040      	beq.n	8005868 <HAL_DMA_Abort_IT+0xf0>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a5e      	ldr	r2, [pc, #376]	; (8005964 <HAL_DMA_Abort_IT+0x1ec>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d038      	beq.n	8005862 <HAL_DMA_Abort_IT+0xea>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a5c      	ldr	r2, [pc, #368]	; (8005968 <HAL_DMA_Abort_IT+0x1f0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d030      	beq.n	800585c <HAL_DMA_Abort_IT+0xe4>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a5b      	ldr	r2, [pc, #364]	; (800596c <HAL_DMA_Abort_IT+0x1f4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d028      	beq.n	8005856 <HAL_DMA_Abort_IT+0xde>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a52      	ldr	r2, [pc, #328]	; (8005954 <HAL_DMA_Abort_IT+0x1dc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d020      	beq.n	8005850 <HAL_DMA_Abort_IT+0xd8>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a57      	ldr	r2, [pc, #348]	; (8005970 <HAL_DMA_Abort_IT+0x1f8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d019      	beq.n	800584c <HAL_DMA_Abort_IT+0xd4>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a55      	ldr	r2, [pc, #340]	; (8005974 <HAL_DMA_Abort_IT+0x1fc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d012      	beq.n	8005848 <HAL_DMA_Abort_IT+0xd0>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a54      	ldr	r2, [pc, #336]	; (8005978 <HAL_DMA_Abort_IT+0x200>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00a      	beq.n	8005842 <HAL_DMA_Abort_IT+0xca>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a52      	ldr	r2, [pc, #328]	; (800597c <HAL_DMA_Abort_IT+0x204>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d102      	bne.n	800583c <HAL_DMA_Abort_IT+0xc4>
 8005836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800583a:	e01b      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 800583c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005840:	e018      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 8005842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005846:	e015      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 8005848:	2310      	movs	r3, #16
 800584a:	e013      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 800584c:	2301      	movs	r3, #1
 800584e:	e011      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 8005850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005854:	e00e      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 8005856:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800585a:	e00b      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 800585c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005860:	e008      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 8005862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005866:	e005      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 8005868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800586c:	e002      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 800586e:	2310      	movs	r3, #16
 8005870:	e000      	b.n	8005874 <HAL_DMA_Abort_IT+0xfc>
 8005872:	2301      	movs	r3, #1
 8005874:	4a42      	ldr	r2, [pc, #264]	; (8005980 <HAL_DMA_Abort_IT+0x208>)
 8005876:	6053      	str	r3, [r2, #4]
 8005878:	e057      	b.n	800592a <HAL_DMA_Abort_IT+0x1b2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a36      	ldr	r2, [pc, #216]	; (8005958 <HAL_DMA_Abort_IT+0x1e0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d04f      	beq.n	8005924 <HAL_DMA_Abort_IT+0x1ac>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a34      	ldr	r2, [pc, #208]	; (800595c <HAL_DMA_Abort_IT+0x1e4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d048      	beq.n	8005920 <HAL_DMA_Abort_IT+0x1a8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a33      	ldr	r2, [pc, #204]	; (8005960 <HAL_DMA_Abort_IT+0x1e8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d040      	beq.n	800591a <HAL_DMA_Abort_IT+0x1a2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a31      	ldr	r2, [pc, #196]	; (8005964 <HAL_DMA_Abort_IT+0x1ec>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d038      	beq.n	8005914 <HAL_DMA_Abort_IT+0x19c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a30      	ldr	r2, [pc, #192]	; (8005968 <HAL_DMA_Abort_IT+0x1f0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d030      	beq.n	800590e <HAL_DMA_Abort_IT+0x196>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a2e      	ldr	r2, [pc, #184]	; (800596c <HAL_DMA_Abort_IT+0x1f4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d028      	beq.n	8005908 <HAL_DMA_Abort_IT+0x190>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a26      	ldr	r2, [pc, #152]	; (8005954 <HAL_DMA_Abort_IT+0x1dc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d020      	beq.n	8005902 <HAL_DMA_Abort_IT+0x18a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a2a      	ldr	r2, [pc, #168]	; (8005970 <HAL_DMA_Abort_IT+0x1f8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d019      	beq.n	80058fe <HAL_DMA_Abort_IT+0x186>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a29      	ldr	r2, [pc, #164]	; (8005974 <HAL_DMA_Abort_IT+0x1fc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d012      	beq.n	80058fa <HAL_DMA_Abort_IT+0x182>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a27      	ldr	r2, [pc, #156]	; (8005978 <HAL_DMA_Abort_IT+0x200>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00a      	beq.n	80058f4 <HAL_DMA_Abort_IT+0x17c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a26      	ldr	r2, [pc, #152]	; (800597c <HAL_DMA_Abort_IT+0x204>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d102      	bne.n	80058ee <HAL_DMA_Abort_IT+0x176>
 80058e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058ec:	e01b      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 80058ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058f2:	e018      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 80058f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058f8:	e015      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 80058fa:	2310      	movs	r3, #16
 80058fc:	e013      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 80058fe:	2301      	movs	r3, #1
 8005900:	e011      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 8005902:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005906:	e00e      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 8005908:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800590c:	e00b      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 800590e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005912:	e008      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 8005914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005918:	e005      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 800591a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800591e:	e002      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 8005920:	2310      	movs	r3, #16
 8005922:	e000      	b.n	8005926 <HAL_DMA_Abort_IT+0x1ae>
 8005924:	2301      	movs	r3, #1
 8005926:	4a17      	ldr	r2, [pc, #92]	; (8005984 <HAL_DMA_Abort_IT+0x20c>)
 8005928:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
    } 
  }
  return status;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40020080 	.word	0x40020080
 8005958:	40020008 	.word	0x40020008
 800595c:	4002001c 	.word	0x4002001c
 8005960:	40020030 	.word	0x40020030
 8005964:	40020044 	.word	0x40020044
 8005968:	40020058 	.word	0x40020058
 800596c:	4002006c 	.word	0x4002006c
 8005970:	40020408 	.word	0x40020408
 8005974:	4002041c 	.word	0x4002041c
 8005978:	40020430 	.word	0x40020430
 800597c:	40020444 	.word	0x40020444
 8005980:	40020400 	.word	0x40020400
 8005984:	40020000 	.word	0x40020000

08005988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005988:	b480      	push	{r7}
 800598a:	b08b      	sub	sp, #44	; 0x2c
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005992:	2300      	movs	r3, #0
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005996:	2300      	movs	r3, #0
 8005998:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800599a:	e179      	b.n	8005c90 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800599c:	2201      	movs	r2, #1
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	4013      	ands	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	f040 8168 	bne.w	8005c8a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	4a96      	ldr	r2, [pc, #600]	; (8005c18 <HAL_GPIO_Init+0x290>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d05e      	beq.n	8005a82 <HAL_GPIO_Init+0xfa>
 80059c4:	4a94      	ldr	r2, [pc, #592]	; (8005c18 <HAL_GPIO_Init+0x290>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d875      	bhi.n	8005ab6 <HAL_GPIO_Init+0x12e>
 80059ca:	4a94      	ldr	r2, [pc, #592]	; (8005c1c <HAL_GPIO_Init+0x294>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d058      	beq.n	8005a82 <HAL_GPIO_Init+0xfa>
 80059d0:	4a92      	ldr	r2, [pc, #584]	; (8005c1c <HAL_GPIO_Init+0x294>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d86f      	bhi.n	8005ab6 <HAL_GPIO_Init+0x12e>
 80059d6:	4a92      	ldr	r2, [pc, #584]	; (8005c20 <HAL_GPIO_Init+0x298>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d052      	beq.n	8005a82 <HAL_GPIO_Init+0xfa>
 80059dc:	4a90      	ldr	r2, [pc, #576]	; (8005c20 <HAL_GPIO_Init+0x298>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d869      	bhi.n	8005ab6 <HAL_GPIO_Init+0x12e>
 80059e2:	4a90      	ldr	r2, [pc, #576]	; (8005c24 <HAL_GPIO_Init+0x29c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d04c      	beq.n	8005a82 <HAL_GPIO_Init+0xfa>
 80059e8:	4a8e      	ldr	r2, [pc, #568]	; (8005c24 <HAL_GPIO_Init+0x29c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d863      	bhi.n	8005ab6 <HAL_GPIO_Init+0x12e>
 80059ee:	4a8e      	ldr	r2, [pc, #568]	; (8005c28 <HAL_GPIO_Init+0x2a0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d046      	beq.n	8005a82 <HAL_GPIO_Init+0xfa>
 80059f4:	4a8c      	ldr	r2, [pc, #560]	; (8005c28 <HAL_GPIO_Init+0x2a0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d85d      	bhi.n	8005ab6 <HAL_GPIO_Init+0x12e>
 80059fa:	2b12      	cmp	r3, #18
 80059fc:	d82a      	bhi.n	8005a54 <HAL_GPIO_Init+0xcc>
 80059fe:	2b12      	cmp	r3, #18
 8005a00:	d859      	bhi.n	8005ab6 <HAL_GPIO_Init+0x12e>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <HAL_GPIO_Init+0x80>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a83 	.word	0x08005a83
 8005a0c:	08005a5d 	.word	0x08005a5d
 8005a10:	08005a6f 	.word	0x08005a6f
 8005a14:	08005ab1 	.word	0x08005ab1
 8005a18:	08005ab7 	.word	0x08005ab7
 8005a1c:	08005ab7 	.word	0x08005ab7
 8005a20:	08005ab7 	.word	0x08005ab7
 8005a24:	08005ab7 	.word	0x08005ab7
 8005a28:	08005ab7 	.word	0x08005ab7
 8005a2c:	08005ab7 	.word	0x08005ab7
 8005a30:	08005ab7 	.word	0x08005ab7
 8005a34:	08005ab7 	.word	0x08005ab7
 8005a38:	08005ab7 	.word	0x08005ab7
 8005a3c:	08005ab7 	.word	0x08005ab7
 8005a40:	08005ab7 	.word	0x08005ab7
 8005a44:	08005ab7 	.word	0x08005ab7
 8005a48:	08005ab7 	.word	0x08005ab7
 8005a4c:	08005a65 	.word	0x08005a65
 8005a50:	08005a79 	.word	0x08005a79
 8005a54:	4a75      	ldr	r2, [pc, #468]	; (8005c2c <HAL_GPIO_Init+0x2a4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005a5a:	e02c      	b.n	8005ab6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	623b      	str	r3, [r7, #32]
          break;
 8005a62:	e029      	b.n	8005ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	623b      	str	r3, [r7, #32]
          break;
 8005a6c:	e024      	b.n	8005ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	3308      	adds	r3, #8
 8005a74:	623b      	str	r3, [r7, #32]
          break;
 8005a76:	e01f      	b.n	8005ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	623b      	str	r3, [r7, #32]
          break;
 8005a80:	e01a      	b.n	8005ab8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	623b      	str	r3, [r7, #32]
          break;
 8005a8e:	e013      	b.n	8005ab8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d105      	bne.n	8005aa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a98:	2308      	movs	r3, #8
 8005a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	611a      	str	r2, [r3, #16]
          break;
 8005aa2:	e009      	b.n	8005ab8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005aa4:	2308      	movs	r3, #8
 8005aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	615a      	str	r2, [r3, #20]
          break;
 8005aae:	e003      	b.n	8005ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	623b      	str	r3, [r7, #32]
          break;
 8005ab4:	e000      	b.n	8005ab8 <HAL_GPIO_Init+0x130>
          break;
 8005ab6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2bff      	cmp	r3, #255	; 0xff
 8005abc:	d801      	bhi.n	8005ac2 <HAL_GPIO_Init+0x13a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	e001      	b.n	8005ac6 <HAL_GPIO_Init+0x13e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	2bff      	cmp	r3, #255	; 0xff
 8005acc:	d802      	bhi.n	8005ad4 <HAL_GPIO_Init+0x14c>
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	e002      	b.n	8005ada <HAL_GPIO_Init+0x152>
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	3b08      	subs	r3, #8
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	210f      	movs	r1, #15
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	401a      	ands	r2, r3
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	fa01 f303 	lsl.w	r3, r1, r3
 8005af4:	431a      	orrs	r2, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 80c1 	beq.w	8005c8a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b08:	4b49      	ldr	r3, [pc, #292]	; (8005c30 <HAL_GPIO_Init+0x2a8>)
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	4a48      	ldr	r2, [pc, #288]	; (8005c30 <HAL_GPIO_Init+0x2a8>)
 8005b0e:	f043 0301 	orr.w	r3, r3, #1
 8005b12:	6193      	str	r3, [r2, #24]
 8005b14:	4b46      	ldr	r3, [pc, #280]	; (8005c30 <HAL_GPIO_Init+0x2a8>)
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	60bb      	str	r3, [r7, #8]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005b20:	4a44      	ldr	r2, [pc, #272]	; (8005c34 <HAL_GPIO_Init+0x2ac>)
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	089b      	lsrs	r3, r3, #2
 8005b26:	3302      	adds	r3, #2
 8005b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	220f      	movs	r2, #15
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a3c      	ldr	r2, [pc, #240]	; (8005c38 <HAL_GPIO_Init+0x2b0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d01f      	beq.n	8005b8c <HAL_GPIO_Init+0x204>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a3b      	ldr	r2, [pc, #236]	; (8005c3c <HAL_GPIO_Init+0x2b4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d019      	beq.n	8005b88 <HAL_GPIO_Init+0x200>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a3a      	ldr	r2, [pc, #232]	; (8005c40 <HAL_GPIO_Init+0x2b8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <HAL_GPIO_Init+0x1fc>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a39      	ldr	r2, [pc, #228]	; (8005c44 <HAL_GPIO_Init+0x2bc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00d      	beq.n	8005b80 <HAL_GPIO_Init+0x1f8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a38      	ldr	r2, [pc, #224]	; (8005c48 <HAL_GPIO_Init+0x2c0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <HAL_GPIO_Init+0x1f4>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a37      	ldr	r2, [pc, #220]	; (8005c4c <HAL_GPIO_Init+0x2c4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d101      	bne.n	8005b78 <HAL_GPIO_Init+0x1f0>
 8005b74:	2305      	movs	r3, #5
 8005b76:	e00a      	b.n	8005b8e <HAL_GPIO_Init+0x206>
 8005b78:	2306      	movs	r3, #6
 8005b7a:	e008      	b.n	8005b8e <HAL_GPIO_Init+0x206>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	e006      	b.n	8005b8e <HAL_GPIO_Init+0x206>
 8005b80:	2303      	movs	r3, #3
 8005b82:	e004      	b.n	8005b8e <HAL_GPIO_Init+0x206>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e002      	b.n	8005b8e <HAL_GPIO_Init+0x206>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <HAL_GPIO_Init+0x206>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b90:	f002 0203 	and.w	r2, r2, #3
 8005b94:	0092      	lsls	r2, r2, #2
 8005b96:	4093      	lsls	r3, r2
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005b9e:	4925      	ldr	r1, [pc, #148]	; (8005c34 <HAL_GPIO_Init+0x2ac>)
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <HAL_GPIO_Init+0x2c8>)
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	4924      	ldr	r1, [pc, #144]	; (8005c50 <HAL_GPIO_Init+0x2c8>)
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	608b      	str	r3, [r1, #8]
 8005bc4:	e006      	b.n	8005bd4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005bc6:	4b22      	ldr	r3, [pc, #136]	; (8005c50 <HAL_GPIO_Init+0x2c8>)
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	4920      	ldr	r1, [pc, #128]	; (8005c50 <HAL_GPIO_Init+0x2c8>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d006      	beq.n	8005bee <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005be0:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <HAL_GPIO_Init+0x2c8>)
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	491a      	ldr	r1, [pc, #104]	; (8005c50 <HAL_GPIO_Init+0x2c8>)
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60cb      	str	r3, [r1, #12]
 8005bec:	e006      	b.n	8005bfc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005bee:	4b18      	ldr	r3, [pc, #96]	; (8005c50 <HAL_GPIO_Init+0x2c8>)
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	4916      	ldr	r1, [pc, #88]	; (8005c50 <HAL_GPIO_Init+0x2c8>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d025      	beq.n	8005c54 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005c08:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <HAL_GPIO_Init+0x2c8>)
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	4910      	ldr	r1, [pc, #64]	; (8005c50 <HAL_GPIO_Init+0x2c8>)
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	604b      	str	r3, [r1, #4]
 8005c14:	e025      	b.n	8005c62 <HAL_GPIO_Init+0x2da>
 8005c16:	bf00      	nop
 8005c18:	10320000 	.word	0x10320000
 8005c1c:	10310000 	.word	0x10310000
 8005c20:	10220000 	.word	0x10220000
 8005c24:	10210000 	.word	0x10210000
 8005c28:	10120000 	.word	0x10120000
 8005c2c:	10110000 	.word	0x10110000
 8005c30:	40021000 	.word	0x40021000
 8005c34:	40010000 	.word	0x40010000
 8005c38:	40010800 	.word	0x40010800
 8005c3c:	40010c00 	.word	0x40010c00
 8005c40:	40011000 	.word	0x40011000
 8005c44:	40011400 	.word	0x40011400
 8005c48:	40011800 	.word	0x40011800
 8005c4c:	40011c00 	.word	0x40011c00
 8005c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005c54:	4b15      	ldr	r3, [pc, #84]	; (8005cac <HAL_GPIO_Init+0x324>)
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	4913      	ldr	r1, [pc, #76]	; (8005cac <HAL_GPIO_Init+0x324>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d006      	beq.n	8005c7c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <HAL_GPIO_Init+0x324>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	490e      	ldr	r1, [pc, #56]	; (8005cac <HAL_GPIO_Init+0x324>)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	600b      	str	r3, [r1, #0]
 8005c7a:	e006      	b.n	8005c8a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <HAL_GPIO_Init+0x324>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	43db      	mvns	r3, r3
 8005c84:	4909      	ldr	r1, [pc, #36]	; (8005cac <HAL_GPIO_Init+0x324>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f47f ae7e 	bne.w	800599c <HAL_GPIO_Init+0x14>
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	372c      	adds	r7, #44	; 0x2c
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr
 8005cac:	40010400 	.word	0x40010400

08005cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	887b      	ldrh	r3, [r7, #2]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
 8005ccc:	e001      	b.n	8005cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr

08005cde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	807b      	strh	r3, [r7, #2]
 8005cea:	4613      	mov	r3, r2
 8005cec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cee:	787b      	ldrb	r3, [r7, #1]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cf4:	887a      	ldrh	r2, [r7, #2]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005cfa:	e003      	b.n	8005d04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005cfc:	887b      	ldrh	r3, [r7, #2]
 8005cfe:	041a      	lsls	r2, r3, #16
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	611a      	str	r2, [r3, #16]
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr

08005d0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d20:	887a      	ldrh	r2, [r7, #2]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4013      	ands	r3, r2
 8005d26:	041a      	lsls	r2, r3, #16
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	43d9      	mvns	r1, r3
 8005d2c:	887b      	ldrh	r3, [r7, #2]
 8005d2e:	400b      	ands	r3, r1
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	611a      	str	r2, [r3, #16]
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d4a:	4b08      	ldr	r3, [pc, #32]	; (8005d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d006      	beq.n	8005d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d56:	4a05      	ldr	r2, [pc, #20]	; (8005d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fc fae1 	bl	8002326 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40010400 	.word	0x40010400

08005d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e12b      	b.n	8005fda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fb fc82 	bl	80016a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2224      	movs	r2, #36	; 0x24
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005dd4:	f001 fbfc 	bl	80075d0 <HAL_RCC_GetPCLK1Freq>
 8005dd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	4a81      	ldr	r2, [pc, #516]	; (8005fe4 <HAL_I2C_Init+0x274>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d807      	bhi.n	8005df4 <HAL_I2C_Init+0x84>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a80      	ldr	r2, [pc, #512]	; (8005fe8 <HAL_I2C_Init+0x278>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	bf94      	ite	ls
 8005dec:	2301      	movls	r3, #1
 8005dee:	2300      	movhi	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	e006      	b.n	8005e02 <HAL_I2C_Init+0x92>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4a7d      	ldr	r2, [pc, #500]	; (8005fec <HAL_I2C_Init+0x27c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	bf94      	ite	ls
 8005dfc:	2301      	movls	r3, #1
 8005dfe:	2300      	movhi	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e0e7      	b.n	8005fda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4a78      	ldr	r2, [pc, #480]	; (8005ff0 <HAL_I2C_Init+0x280>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	0c9b      	lsrs	r3, r3, #18
 8005e14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a6a      	ldr	r2, [pc, #424]	; (8005fe4 <HAL_I2C_Init+0x274>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d802      	bhi.n	8005e44 <HAL_I2C_Init+0xd4>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	3301      	adds	r3, #1
 8005e42:	e009      	b.n	8005e58 <HAL_I2C_Init+0xe8>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	4a69      	ldr	r2, [pc, #420]	; (8005ff4 <HAL_I2C_Init+0x284>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	099b      	lsrs	r3, r3, #6
 8005e56:	3301      	adds	r3, #1
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6812      	ldr	r2, [r2, #0]
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	495c      	ldr	r1, [pc, #368]	; (8005fe4 <HAL_I2C_Init+0x274>)
 8005e74:	428b      	cmp	r3, r1
 8005e76:	d819      	bhi.n	8005eac <HAL_I2C_Init+0x13c>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	1e59      	subs	r1, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e86:	1c59      	adds	r1, r3, #1
 8005e88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <HAL_I2C_Init+0x138>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1e59      	subs	r1, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea6:	e051      	b.n	8005f4c <HAL_I2C_Init+0x1dc>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	e04f      	b.n	8005f4c <HAL_I2C_Init+0x1dc>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d111      	bne.n	8005ed8 <HAL_I2C_Init+0x168>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1e58      	subs	r0, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6859      	ldr	r1, [r3, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	440b      	add	r3, r1
 8005ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bf0c      	ite	eq
 8005ed0:	2301      	moveq	r3, #1
 8005ed2:	2300      	movne	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	e012      	b.n	8005efe <HAL_I2C_Init+0x18e>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	1e58      	subs	r0, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	0099      	lsls	r1, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2301      	moveq	r3, #1
 8005efa:	2300      	movne	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_I2C_Init+0x196>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e022      	b.n	8005f4c <HAL_I2C_Init+0x1dc>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10e      	bne.n	8005f2c <HAL_I2C_Init+0x1bc>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1e58      	subs	r0, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6859      	ldr	r1, [r3, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	440b      	add	r3, r1
 8005f1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f20:	3301      	adds	r3, #1
 8005f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	e00f      	b.n	8005f4c <HAL_I2C_Init+0x1dc>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1e58      	subs	r0, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	0099      	lsls	r1, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f42:	3301      	adds	r3, #1
 8005f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	6809      	ldr	r1, [r1, #0]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6911      	ldr	r1, [r2, #16]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68d2      	ldr	r2, [r2, #12]
 8005f86:	4311      	orrs	r1, r2
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	000186a0 	.word	0x000186a0
 8005fe8:	001e847f 	.word	0x001e847f
 8005fec:	003d08ff 	.word	0x003d08ff
 8005ff0:	431bde83 	.word	0x431bde83
 8005ff4:	10624dd3 	.word	0x10624dd3

08005ff8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	4608      	mov	r0, r1
 8006002:	4611      	mov	r1, r2
 8006004:	461a      	mov	r2, r3
 8006006:	4603      	mov	r3, r0
 8006008:	817b      	strh	r3, [r7, #10]
 800600a:	460b      	mov	r3, r1
 800600c:	813b      	strh	r3, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006012:	f7ff fa3b 	bl	800548c <HAL_GetTick>
 8006016:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b20      	cmp	r3, #32
 8006022:	f040 80d9 	bne.w	80061d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	2319      	movs	r3, #25
 800602c:	2201      	movs	r2, #1
 800602e:	496d      	ldr	r1, [pc, #436]	; (80061e4 <HAL_I2C_Mem_Write+0x1ec>)
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fcc1 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800603c:	2302      	movs	r3, #2
 800603e:	e0cc      	b.n	80061da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_I2C_Mem_Write+0x56>
 800604a:	2302      	movs	r3, #2
 800604c:	e0c5      	b.n	80061da <HAL_I2C_Mem_Write+0x1e2>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d007      	beq.n	8006074 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006082:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2221      	movs	r2, #33	; 0x21
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2240      	movs	r2, #64	; 0x40
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a3a      	ldr	r2, [r7, #32]
 800609e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a4d      	ldr	r2, [pc, #308]	; (80061e8 <HAL_I2C_Mem_Write+0x1f0>)
 80060b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060b6:	88f8      	ldrh	r0, [r7, #6]
 80060b8:	893a      	ldrh	r2, [r7, #8]
 80060ba:	8979      	ldrh	r1, [r7, #10]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	4603      	mov	r3, r0
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 faf8 	bl	80066bc <I2C_RequestMemoryWrite>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d052      	beq.n	8006178 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e081      	b.n	80061da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fd86 	bl	8006bec <I2C_WaitOnTXEFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d107      	bne.n	80060fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e06b      	b.n	80061da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b04      	cmp	r3, #4
 800613e:	d11b      	bne.n	8006178 <HAL_I2C_Mem_Write+0x180>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	d017      	beq.n	8006178 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	781a      	ldrb	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1aa      	bne.n	80060d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 fd79 	bl	8006c7c <I2C_WaitOnBTFFlagUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00d      	beq.n	80061ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	2b04      	cmp	r3, #4
 8006196:	d107      	bne.n	80061a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e016      	b.n	80061da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e000      	b.n	80061da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	00100002 	.word	0x00100002
 80061e8:	ffff0000 	.word	0xffff0000

080061ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	; 0x30
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	4608      	mov	r0, r1
 80061f6:	4611      	mov	r1, r2
 80061f8:	461a      	mov	r2, r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	817b      	strh	r3, [r7, #10]
 80061fe:	460b      	mov	r3, r1
 8006200:	813b      	strh	r3, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800620a:	f7ff f93f 	bl	800548c <HAL_GetTick>
 800620e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b20      	cmp	r3, #32
 800621a:	f040 8244 	bne.w	80066a6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	2319      	movs	r3, #25
 8006224:	2201      	movs	r2, #1
 8006226:	4982      	ldr	r1, [pc, #520]	; (8006430 <HAL_I2C_Mem_Read+0x244>)
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 fbc5 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
 8006236:	e237      	b.n	80066a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_I2C_Mem_Read+0x5a>
 8006242:	2302      	movs	r3, #2
 8006244:	e230      	b.n	80066a8 <HAL_I2C_Mem_Read+0x4bc>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d007      	beq.n	800626c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800627a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2222      	movs	r2, #34	; 0x22
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2240      	movs	r2, #64	; 0x40
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800629c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a62      	ldr	r2, [pc, #392]	; (8006434 <HAL_I2C_Mem_Read+0x248>)
 80062ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062ae:	88f8      	ldrh	r0, [r7, #6]
 80062b0:	893a      	ldrh	r2, [r7, #8]
 80062b2:	8979      	ldrh	r1, [r7, #10]
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	4603      	mov	r3, r0
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fa92 	bl	80067e8 <I2C_RequestMemoryRead>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e1ec      	b.n	80066a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d113      	bne.n	80062fe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062d6:	2300      	movs	r3, #0
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	61fb      	str	r3, [r7, #28]
 80062ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e1c0      	b.n	8006680 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006302:	2b01      	cmp	r3, #1
 8006304:	d11e      	bne.n	8006344 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006314:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006316:	b672      	cpsid	i
}
 8006318:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800631a:	2300      	movs	r3, #0
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800633e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006340:	b662      	cpsie	i
}
 8006342:	e035      	b.n	80063b0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006348:	2b02      	cmp	r3, #2
 800634a:	d11e      	bne.n	800638a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800635a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800635c:	b672      	cpsid	i
}
 800635e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006384:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006386:	b662      	cpsie	i
}
 8006388:	e012      	b.n	80063b0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006398:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80063b0:	e166      	b.n	8006680 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	f200 811f 	bhi.w	80065fa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d123      	bne.n	800640c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fc9f 	bl	8006d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e167      	b.n	80066a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691a      	ldr	r2, [r3, #16]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	855a      	strh	r2, [r3, #42]	; 0x2a
 800640a:	e139      	b.n	8006680 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006410:	2b02      	cmp	r3, #2
 8006412:	d152      	bne.n	80064ba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	2200      	movs	r2, #0
 800641c:	4906      	ldr	r1, [pc, #24]	; (8006438 <HAL_I2C_Mem_Read+0x24c>)
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 faca 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e13c      	b.n	80066a8 <HAL_I2C_Mem_Read+0x4bc>
 800642e:	bf00      	nop
 8006430:	00100002 	.word	0x00100002
 8006434:	ffff0000 	.word	0xffff0000
 8006438:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800643c:	b672      	cpsid	i
}
 800643e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800644e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006482:	b662      	cpsie	i
}
 8006484:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064b8:	e0e2      	b.n	8006680 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	2200      	movs	r2, #0
 80064c2:	497b      	ldr	r1, [pc, #492]	; (80066b0 <HAL_I2C_Mem_Read+0x4c4>)
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fa77 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0e9      	b.n	80066a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80064e4:	b672      	cpsid	i
}
 80064e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800651a:	4b66      	ldr	r3, [pc, #408]	; (80066b4 <HAL_I2C_Mem_Read+0x4c8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	08db      	lsrs	r3, r3, #3
 8006520:	4a65      	ldr	r2, [pc, #404]	; (80066b8 <HAL_I2C_Mem_Read+0x4cc>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	0a1a      	lsrs	r2, r3, #8
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	00da      	lsls	r2, r3, #3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	3b01      	subs	r3, #1
 8006538:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d118      	bne.n	8006572 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f043 0220 	orr.w	r2, r3, #32
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006562:	b662      	cpsie	i
}
 8006564:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e09a      	b.n	80066a8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b04      	cmp	r3, #4
 800657e:	d1d9      	bne.n	8006534 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691a      	ldr	r2, [r3, #16]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80065c2:	b662      	cpsie	i
}
 80065c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065f8:	e042      	b.n	8006680 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 fb84 	bl	8006d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e04c      	b.n	80066a8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b04      	cmp	r3, #4
 800664c:	d118      	bne.n	8006680 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006684:	2b00      	cmp	r3, #0
 8006686:	f47f ae94 	bne.w	80063b2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
  }
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3728      	adds	r7, #40	; 0x28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	00010004 	.word	0x00010004
 80066b4:	20000000 	.word	0x20000000
 80066b8:	14f8b589 	.word	0x14f8b589

080066bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	4608      	mov	r0, r1
 80066c6:	4611      	mov	r1, r2
 80066c8:	461a      	mov	r2, r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	817b      	strh	r3, [r7, #10]
 80066ce:	460b      	mov	r3, r1
 80066d0:	813b      	strh	r3, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f960 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00d      	beq.n	800671a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670c:	d103      	bne.n	8006716 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006714:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e05f      	b.n	80067da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800671a:	897b      	ldrh	r3, [r7, #10]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	6a3a      	ldr	r2, [r7, #32]
 800672e:	492d      	ldr	r1, [pc, #180]	; (80067e4 <I2C_RequestMemoryWrite+0x128>)
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f9bb 	bl	8006aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e04c      	b.n	80067da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006740:	2300      	movs	r3, #0
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006758:	6a39      	ldr	r1, [r7, #32]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 fa46 	bl	8006bec <I2C_WaitOnTXEFlagUntilTimeout>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00d      	beq.n	8006782 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	2b04      	cmp	r3, #4
 800676c:	d107      	bne.n	800677e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e02b      	b.n	80067da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d105      	bne.n	8006794 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006788:	893b      	ldrh	r3, [r7, #8]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	611a      	str	r2, [r3, #16]
 8006792:	e021      	b.n	80067d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006794:	893b      	ldrh	r3, [r7, #8]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	b29b      	uxth	r3, r3
 800679a:	b2da      	uxtb	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a4:	6a39      	ldr	r1, [r7, #32]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fa20 	bl	8006bec <I2C_WaitOnTXEFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d107      	bne.n	80067ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e005      	b.n	80067da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067ce:	893b      	ldrh	r3, [r7, #8]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	00010002 	.word	0x00010002

080067e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	4608      	mov	r0, r1
 80067f2:	4611      	mov	r1, r2
 80067f4:	461a      	mov	r2, r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	817b      	strh	r3, [r7, #10]
 80067fa:	460b      	mov	r3, r1
 80067fc:	813b      	strh	r3, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006810:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006820:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	2200      	movs	r2, #0
 800682a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 f8c2 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00d      	beq.n	8006856 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006848:	d103      	bne.n	8006852 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e0aa      	b.n	80069ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006856:	897b      	ldrh	r3, [r7, #10]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	461a      	mov	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006864:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	6a3a      	ldr	r2, [r7, #32]
 800686a:	4952      	ldr	r1, [pc, #328]	; (80069b4 <I2C_RequestMemoryRead+0x1cc>)
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f91d 	bl	8006aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e097      	b.n	80069ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006894:	6a39      	ldr	r1, [r7, #32]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f9a8 	bl	8006bec <I2C_WaitOnTXEFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00d      	beq.n	80068be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d107      	bne.n	80068ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e076      	b.n	80069ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068be:	88fb      	ldrh	r3, [r7, #6]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d105      	bne.n	80068d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068c4:	893b      	ldrh	r3, [r7, #8]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	611a      	str	r2, [r3, #16]
 80068ce:	e021      	b.n	8006914 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068d0:	893b      	ldrh	r3, [r7, #8]
 80068d2:	0a1b      	lsrs	r3, r3, #8
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e0:	6a39      	ldr	r1, [r7, #32]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 f982 	bl	8006bec <I2C_WaitOnTXEFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00d      	beq.n	800690a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d107      	bne.n	8006906 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006904:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e050      	b.n	80069ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800690a:	893b      	ldrh	r3, [r7, #8]
 800690c:	b2da      	uxtb	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006916:	6a39      	ldr	r1, [r7, #32]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f967 	bl	8006bec <I2C_WaitOnTXEFlagUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00d      	beq.n	8006940 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	2b04      	cmp	r3, #4
 800692a:	d107      	bne.n	800693c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800693a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e035      	b.n	80069ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800694e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	2200      	movs	r2, #0
 8006958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f82b 	bl	80069b8 <I2C_WaitOnFlagUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00d      	beq.n	8006984 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006976:	d103      	bne.n	8006980 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800697e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e013      	b.n	80069ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006984:	897b      	ldrh	r3, [r7, #10]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	f043 0301 	orr.w	r3, r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	6a3a      	ldr	r2, [r7, #32]
 8006998:	4906      	ldr	r1, [pc, #24]	; (80069b4 <I2C_RequestMemoryRead+0x1cc>)
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f886 	bl	8006aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	00010002 	.word	0x00010002

080069b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069c8:	e048      	b.n	8006a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d044      	beq.n	8006a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d2:	f7fe fd5b 	bl	800548c <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d302      	bcc.n	80069e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d139      	bne.n	8006a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	0c1b      	lsrs	r3, r3, #16
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d10d      	bne.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x56>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	43da      	mvns	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4013      	ands	r3, r2
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	e00c      	b.n	8006a28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	43da      	mvns	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bf0c      	ite	eq
 8006a20:	2301      	moveq	r3, #1
 8006a22:	2300      	movne	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	461a      	mov	r2, r3
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d116      	bne.n	8006a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e023      	b.n	8006aa4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	0c1b      	lsrs	r3, r3, #16
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d10d      	bne.n	8006a82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	43da      	mvns	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4013      	ands	r3, r2
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bf0c      	ite	eq
 8006a78:	2301      	moveq	r3, #1
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	e00c      	b.n	8006a9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	43da      	mvns	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	bf0c      	ite	eq
 8006a94:	2301      	moveq	r3, #1
 8006a96:	2300      	movne	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d093      	beq.n	80069ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006aba:	e071      	b.n	8006ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aca:	d123      	bne.n	8006b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ada:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ae4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	f043 0204 	orr.w	r2, r3, #4
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e067      	b.n	8006be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1a:	d041      	beq.n	8006ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1c:	f7fe fcb6 	bl	800548c <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d302      	bcc.n	8006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d136      	bne.n	8006ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	0c1b      	lsrs	r3, r3, #16
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d10c      	bne.n	8006b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	43da      	mvns	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4013      	ands	r3, r2
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bf14      	ite	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	2300      	moveq	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	e00b      	b.n	8006b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	43da      	mvns	r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4013      	ands	r3, r2
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	bf14      	ite	ne
 8006b68:	2301      	movne	r3, #1
 8006b6a:	2300      	moveq	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	f043 0220 	orr.w	r2, r3, #32
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e021      	b.n	8006be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	0c1b      	lsrs	r3, r3, #16
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d10c      	bne.n	8006bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	43da      	mvns	r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bf14      	ite	ne
 8006bbc:	2301      	movne	r3, #1
 8006bbe:	2300      	moveq	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	e00b      	b.n	8006bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	43da      	mvns	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bf14      	ite	ne
 8006bd6:	2301      	movne	r3, #1
 8006bd8:	2300      	moveq	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f47f af6d 	bne.w	8006abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bf8:	e034      	b.n	8006c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f8e3 	bl	8006dc6 <I2C_IsAcknowledgeFailed>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e034      	b.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c10:	d028      	beq.n	8006c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c12:	f7fe fc3b 	bl	800548c <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d302      	bcc.n	8006c28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d11d      	bne.n	8006c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c32:	2b80      	cmp	r3, #128	; 0x80
 8006c34:	d016      	beq.n	8006c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	f043 0220 	orr.w	r2, r3, #32
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e007      	b.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6e:	2b80      	cmp	r3, #128	; 0x80
 8006c70:	d1c3      	bne.n	8006bfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c88:	e034      	b.n	8006cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f89b 	bl	8006dc6 <I2C_IsAcknowledgeFailed>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e034      	b.n	8006d04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d028      	beq.n	8006cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca2:	f7fe fbf3 	bl	800548c <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d302      	bcc.n	8006cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11d      	bne.n	8006cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d016      	beq.n	8006cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	f043 0220 	orr.w	r2, r3, #32
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e007      	b.n	8006d04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d1c3      	bne.n	8006c8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d18:	e049      	b.n	8006dae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b10      	cmp	r3, #16
 8006d26:	d119      	bne.n	8006d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f06f 0210 	mvn.w	r2, #16
 8006d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e030      	b.n	8006dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d5c:	f7fe fb96 	bl	800548c <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d302      	bcc.n	8006d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d11d      	bne.n	8006dae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d016      	beq.n	8006dae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	f043 0220 	orr.w	r2, r3, #32
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e007      	b.n	8006dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d1ae      	bne.n	8006d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ddc:	d11b      	bne.n	8006e16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006de6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f043 0204 	orr.w	r2, r3, #4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
	...

08006e24 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006e24:	b480      	push	{r7}
 8006e26:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006e28:	4b03      	ldr	r3, [pc, #12]	; (8006e38 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]
}
 8006e2e:	bf00      	nop
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bc80      	pop	{r7}
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	420e0020 	.word	0x420e0020

08006e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e272      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8087 	beq.w	8006f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e5c:	4b92      	ldr	r3, [pc, #584]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f003 030c 	and.w	r3, r3, #12
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d00c      	beq.n	8006e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e68:	4b8f      	ldr	r3, [pc, #572]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f003 030c 	and.w	r3, r3, #12
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d112      	bne.n	8006e9a <HAL_RCC_OscConfig+0x5e>
 8006e74:	4b8c      	ldr	r3, [pc, #560]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e80:	d10b      	bne.n	8006e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e82:	4b89      	ldr	r3, [pc, #548]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d06c      	beq.n	8006f68 <HAL_RCC_OscConfig+0x12c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d168      	bne.n	8006f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e24c      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea2:	d106      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x76>
 8006ea4:	4b80      	ldr	r3, [pc, #512]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a7f      	ldr	r2, [pc, #508]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	e02e      	b.n	8006f10 <HAL_RCC_OscConfig+0xd4>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x98>
 8006eba:	4b7b      	ldr	r3, [pc, #492]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a7a      	ldr	r2, [pc, #488]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	4b78      	ldr	r3, [pc, #480]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a77      	ldr	r2, [pc, #476]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e01d      	b.n	8006f10 <HAL_RCC_OscConfig+0xd4>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006edc:	d10c      	bne.n	8006ef8 <HAL_RCC_OscConfig+0xbc>
 8006ede:	4b72      	ldr	r3, [pc, #456]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a71      	ldr	r2, [pc, #452]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	4b6f      	ldr	r3, [pc, #444]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a6e      	ldr	r2, [pc, #440]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	e00b      	b.n	8006f10 <HAL_RCC_OscConfig+0xd4>
 8006ef8:	4b6b      	ldr	r3, [pc, #428]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a6a      	ldr	r2, [pc, #424]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	4b68      	ldr	r3, [pc, #416]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a67      	ldr	r2, [pc, #412]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d013      	beq.n	8006f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f18:	f7fe fab8 	bl	800548c <HAL_GetTick>
 8006f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f20:	f7fe fab4 	bl	800548c <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b64      	cmp	r3, #100	; 0x64
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e200      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f32:	4b5d      	ldr	r3, [pc, #372]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0f0      	beq.n	8006f20 <HAL_RCC_OscConfig+0xe4>
 8006f3e:	e014      	b.n	8006f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f40:	f7fe faa4 	bl	800548c <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f48:	f7fe faa0 	bl	800548c <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b64      	cmp	r3, #100	; 0x64
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e1ec      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5a:	4b53      	ldr	r3, [pc, #332]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f0      	bne.n	8006f48 <HAL_RCC_OscConfig+0x10c>
 8006f66:	e000      	b.n	8006f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d063      	beq.n	800703e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f76:	4b4c      	ldr	r3, [pc, #304]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f003 030c 	and.w	r3, r3, #12
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f82:	4b49      	ldr	r3, [pc, #292]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f003 030c 	and.w	r3, r3, #12
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d11c      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x18c>
 8006f8e:	4b46      	ldr	r3, [pc, #280]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d116      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f9a:	4b43      	ldr	r3, [pc, #268]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x176>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d001      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e1c0      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb2:	4b3d      	ldr	r3, [pc, #244]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	4939      	ldr	r1, [pc, #228]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fc6:	e03a      	b.n	800703e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d020      	beq.n	8007012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fd0:	4b36      	ldr	r3, [pc, #216]	; (80070ac <HAL_RCC_OscConfig+0x270>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd6:	f7fe fa59 	bl	800548c <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fde:	f7fe fa55 	bl	800548c <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e1a1      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff0:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ffc:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	4927      	ldr	r1, [pc, #156]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 800700c:	4313      	orrs	r3, r2
 800700e:	600b      	str	r3, [r1, #0]
 8007010:	e015      	b.n	800703e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007012:	4b26      	ldr	r3, [pc, #152]	; (80070ac <HAL_RCC_OscConfig+0x270>)
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007018:	f7fe fa38 	bl	800548c <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007020:	f7fe fa34 	bl	800548c <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e180      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007032:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f0      	bne.n	8007020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d03a      	beq.n	80070c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d019      	beq.n	8007086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007052:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <HAL_RCC_OscConfig+0x274>)
 8007054:	2201      	movs	r2, #1
 8007056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007058:	f7fe fa18 	bl	800548c <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007060:	f7fe fa14 	bl	800548c <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e160      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0f0      	beq.n	8007060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800707e:	2001      	movs	r0, #1
 8007080:	f000 face 	bl	8007620 <RCC_Delay>
 8007084:	e01c      	b.n	80070c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007086:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <HAL_RCC_OscConfig+0x274>)
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800708c:	f7fe f9fe 	bl	800548c <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007092:	e00f      	b.n	80070b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007094:	f7fe f9fa 	bl	800548c <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d908      	bls.n	80070b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e146      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
 80070a6:	bf00      	nop
 80070a8:	40021000 	.word	0x40021000
 80070ac:	42420000 	.word	0x42420000
 80070b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b4:	4b92      	ldr	r3, [pc, #584]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e9      	bne.n	8007094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80a6 	beq.w	800721a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070d2:	4b8b      	ldr	r3, [pc, #556]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10d      	bne.n	80070fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070de:	4b88      	ldr	r3, [pc, #544]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	4a87      	ldr	r2, [pc, #540]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80070e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e8:	61d3      	str	r3, [r2, #28]
 80070ea:	4b85      	ldr	r3, [pc, #532]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070f2:	60bb      	str	r3, [r7, #8]
 80070f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fa:	4b82      	ldr	r3, [pc, #520]	; (8007304 <HAL_RCC_OscConfig+0x4c8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d118      	bne.n	8007138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007106:	4b7f      	ldr	r3, [pc, #508]	; (8007304 <HAL_RCC_OscConfig+0x4c8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a7e      	ldr	r2, [pc, #504]	; (8007304 <HAL_RCC_OscConfig+0x4c8>)
 800710c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007112:	f7fe f9bb 	bl	800548c <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800711a:	f7fe f9b7 	bl	800548c <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b64      	cmp	r3, #100	; 0x64
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e103      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800712c:	4b75      	ldr	r3, [pc, #468]	; (8007304 <HAL_RCC_OscConfig+0x4c8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f0      	beq.n	800711a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d106      	bne.n	800714e <HAL_RCC_OscConfig+0x312>
 8007140:	4b6f      	ldr	r3, [pc, #444]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	4a6e      	ldr	r2, [pc, #440]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	6213      	str	r3, [r2, #32]
 800714c:	e02d      	b.n	80071aa <HAL_RCC_OscConfig+0x36e>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10c      	bne.n	8007170 <HAL_RCC_OscConfig+0x334>
 8007156:	4b6a      	ldr	r3, [pc, #424]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	4a69      	ldr	r2, [pc, #420]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	6213      	str	r3, [r2, #32]
 8007162:	4b67      	ldr	r3, [pc, #412]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	4a66      	ldr	r2, [pc, #408]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007168:	f023 0304 	bic.w	r3, r3, #4
 800716c:	6213      	str	r3, [r2, #32]
 800716e:	e01c      	b.n	80071aa <HAL_RCC_OscConfig+0x36e>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	2b05      	cmp	r3, #5
 8007176:	d10c      	bne.n	8007192 <HAL_RCC_OscConfig+0x356>
 8007178:	4b61      	ldr	r3, [pc, #388]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	4a60      	ldr	r2, [pc, #384]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800717e:	f043 0304 	orr.w	r3, r3, #4
 8007182:	6213      	str	r3, [r2, #32]
 8007184:	4b5e      	ldr	r3, [pc, #376]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	4a5d      	ldr	r2, [pc, #372]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	6213      	str	r3, [r2, #32]
 8007190:	e00b      	b.n	80071aa <HAL_RCC_OscConfig+0x36e>
 8007192:	4b5b      	ldr	r3, [pc, #364]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	4a5a      	ldr	r2, [pc, #360]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	6213      	str	r3, [r2, #32]
 800719e:	4b58      	ldr	r3, [pc, #352]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	4a57      	ldr	r2, [pc, #348]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80071a4:	f023 0304 	bic.w	r3, r3, #4
 80071a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d015      	beq.n	80071de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b2:	f7fe f96b 	bl	800548c <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071b8:	e00a      	b.n	80071d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ba:	f7fe f967 	bl	800548c <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e0b1      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d0:	4b4b      	ldr	r3, [pc, #300]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0ee      	beq.n	80071ba <HAL_RCC_OscConfig+0x37e>
 80071dc:	e014      	b.n	8007208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071de:	f7fe f955 	bl	800548c <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071e4:	e00a      	b.n	80071fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e6:	f7fe f951 	bl	800548c <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e09b      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071fc:	4b40      	ldr	r3, [pc, #256]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1ee      	bne.n	80071e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d105      	bne.n	800721a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800720e:	4b3c      	ldr	r3, [pc, #240]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	4a3b      	ldr	r2, [pc, #236]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8087 	beq.w	8007332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007224:	4b36      	ldr	r3, [pc, #216]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f003 030c 	and.w	r3, r3, #12
 800722c:	2b08      	cmp	r3, #8
 800722e:	d061      	beq.n	80072f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	2b02      	cmp	r3, #2
 8007236:	d146      	bne.n	80072c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007238:	4b33      	ldr	r3, [pc, #204]	; (8007308 <HAL_RCC_OscConfig+0x4cc>)
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800723e:	f7fe f925 	bl	800548c <HAL_GetTick>
 8007242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007244:	e008      	b.n	8007258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007246:	f7fe f921 	bl	800548c <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e06d      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007258:	4b29      	ldr	r3, [pc, #164]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1f0      	bne.n	8007246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800726c:	d108      	bne.n	8007280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800726e:	4b24      	ldr	r3, [pc, #144]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	4921      	ldr	r1, [pc, #132]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800727c:	4313      	orrs	r3, r2
 800727e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007280:	4b1f      	ldr	r3, [pc, #124]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a19      	ldr	r1, [r3, #32]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	430b      	orrs	r3, r1
 8007292:	491b      	ldr	r1, [pc, #108]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007294:	4313      	orrs	r3, r2
 8007296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007298:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <HAL_RCC_OscConfig+0x4cc>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800729e:	f7fe f8f5 	bl	800548c <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072a6:	f7fe f8f1 	bl	800548c <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e03d      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072b8:	4b11      	ldr	r3, [pc, #68]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f0      	beq.n	80072a6 <HAL_RCC_OscConfig+0x46a>
 80072c4:	e035      	b.n	8007332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <HAL_RCC_OscConfig+0x4cc>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072cc:	f7fe f8de 	bl	800548c <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d4:	f7fe f8da 	bl	800548c <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e026      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f0      	bne.n	80072d4 <HAL_RCC_OscConfig+0x498>
 80072f2:	e01e      	b.n	8007332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d107      	bne.n	800730c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e019      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
 8007300:	40021000 	.word	0x40021000
 8007304:	40007000 	.word	0x40007000
 8007308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800730c:	4b0b      	ldr	r3, [pc, #44]	; (800733c <HAL_RCC_OscConfig+0x500>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	429a      	cmp	r2, r3
 800731e:	d106      	bne.n	800732e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800732a:	429a      	cmp	r2, r3
 800732c:	d001      	beq.n	8007332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40021000 	.word	0x40021000

08007340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e0d0      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007354:	4b6a      	ldr	r3, [pc, #424]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d910      	bls.n	8007384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007362:	4b67      	ldr	r3, [pc, #412]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f023 0207 	bic.w	r2, r3, #7
 800736a:	4965      	ldr	r1, [pc, #404]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	4313      	orrs	r3, r2
 8007370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007372:	4b63      	ldr	r3, [pc, #396]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d001      	beq.n	8007384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e0b8      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d020      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	d005      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800739c:	4b59      	ldr	r3, [pc, #356]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	4a58      	ldr	r2, [pc, #352]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80073a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073b4:	4b53      	ldr	r3, [pc, #332]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	4a52      	ldr	r2, [pc, #328]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80073be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073c0:	4b50      	ldr	r3, [pc, #320]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	494d      	ldr	r1, [pc, #308]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d040      	beq.n	8007460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d107      	bne.n	80073f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e6:	4b47      	ldr	r3, [pc, #284]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d115      	bne.n	800741e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e07f      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d107      	bne.n	800740e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073fe:	4b41      	ldr	r3, [pc, #260]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e073      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800740e:	4b3d      	ldr	r3, [pc, #244]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e06b      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800741e:	4b39      	ldr	r3, [pc, #228]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f023 0203 	bic.w	r2, r3, #3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4936      	ldr	r1, [pc, #216]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 800742c:	4313      	orrs	r3, r2
 800742e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007430:	f7fe f82c 	bl	800548c <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007436:	e00a      	b.n	800744e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007438:	f7fe f828 	bl	800548c <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	f241 3288 	movw	r2, #5000	; 0x1388
 8007446:	4293      	cmp	r3, r2
 8007448:	d901      	bls.n	800744e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e053      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744e:	4b2d      	ldr	r3, [pc, #180]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f003 020c 	and.w	r2, r3, #12
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	429a      	cmp	r2, r3
 800745e:	d1eb      	bne.n	8007438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007460:	4b27      	ldr	r3, [pc, #156]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d210      	bcs.n	8007490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746e:	4b24      	ldr	r3, [pc, #144]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f023 0207 	bic.w	r2, r3, #7
 8007476:	4922      	ldr	r1, [pc, #136]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	4313      	orrs	r3, r2
 800747c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800747e:	4b20      	ldr	r3, [pc, #128]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d001      	beq.n	8007490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e032      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d008      	beq.n	80074ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800749c:	4b19      	ldr	r3, [pc, #100]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	4916      	ldr	r1, [pc, #88]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	490e      	ldr	r1, [pc, #56]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074ce:	f000 f821 	bl	8007514 <HAL_RCC_GetSysClockFreq>
 80074d2:	4602      	mov	r2, r0
 80074d4:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	091b      	lsrs	r3, r3, #4
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	490a      	ldr	r1, [pc, #40]	; (8007508 <HAL_RCC_ClockConfig+0x1c8>)
 80074e0:	5ccb      	ldrb	r3, [r1, r3]
 80074e2:	fa22 f303 	lsr.w	r3, r2, r3
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <HAL_RCC_ClockConfig+0x1cc>)
 80074e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074ea:	4b09      	ldr	r3, [pc, #36]	; (8007510 <HAL_RCC_ClockConfig+0x1d0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fd ff8a 	bl	8005408 <HAL_InitTick>

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40022000 	.word	0x40022000
 8007504:	40021000 	.word	0x40021000
 8007508:	0800ef1c 	.word	0x0800ef1c
 800750c:	20000000 	.word	0x20000000
 8007510:	200002b0 	.word	0x200002b0

08007514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
 800751e:	2300      	movs	r3, #0
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	2300      	movs	r3, #0
 8007528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800752e:	4b1e      	ldr	r3, [pc, #120]	; (80075a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 030c 	and.w	r3, r3, #12
 800753a:	2b04      	cmp	r3, #4
 800753c:	d002      	beq.n	8007544 <HAL_RCC_GetSysClockFreq+0x30>
 800753e:	2b08      	cmp	r3, #8
 8007540:	d003      	beq.n	800754a <HAL_RCC_GetSysClockFreq+0x36>
 8007542:	e027      	b.n	8007594 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007544:	4b19      	ldr	r3, [pc, #100]	; (80075ac <HAL_RCC_GetSysClockFreq+0x98>)
 8007546:	613b      	str	r3, [r7, #16]
      break;
 8007548:	e027      	b.n	800759a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	0c9b      	lsrs	r3, r3, #18
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	4a17      	ldr	r2, [pc, #92]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007554:	5cd3      	ldrb	r3, [r2, r3]
 8007556:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d010      	beq.n	8007584 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007562:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	0c5b      	lsrs	r3, r3, #17
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	4a11      	ldr	r2, [pc, #68]	; (80075b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800756e:	5cd3      	ldrb	r3, [r2, r3]
 8007570:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a0d      	ldr	r2, [pc, #52]	; (80075ac <HAL_RCC_GetSysClockFreq+0x98>)
 8007576:	fb03 f202 	mul.w	r2, r3, r2
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e004      	b.n	800758e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007588:	fb02 f303 	mul.w	r3, r2, r3
 800758c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	613b      	str	r3, [r7, #16]
      break;
 8007592:	e002      	b.n	800759a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <HAL_RCC_GetSysClockFreq+0x98>)
 8007596:	613b      	str	r3, [r7, #16]
      break;
 8007598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800759a:	693b      	ldr	r3, [r7, #16]
}
 800759c:	4618      	mov	r0, r3
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40021000 	.word	0x40021000
 80075ac:	007a1200 	.word	0x007a1200
 80075b0:	0800ef34 	.word	0x0800ef34
 80075b4:	0800ef44 	.word	0x0800ef44
 80075b8:	003d0900 	.word	0x003d0900

080075bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075c0:	4b02      	ldr	r3, [pc, #8]	; (80075cc <HAL_RCC_GetHCLKFreq+0x10>)
 80075c2:	681b      	ldr	r3, [r3, #0]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr
 80075cc:	20000000 	.word	0x20000000

080075d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075d4:	f7ff fff2 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 80075d8:	4602      	mov	r2, r0
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	0a1b      	lsrs	r3, r3, #8
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	4903      	ldr	r1, [pc, #12]	; (80075f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075e6:	5ccb      	ldrb	r3, [r1, r3]
 80075e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40021000 	.word	0x40021000
 80075f4:	0800ef2c 	.word	0x0800ef2c

080075f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075fc:	f7ff ffde 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 8007600:	4602      	mov	r2, r0
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	0adb      	lsrs	r3, r3, #11
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	4903      	ldr	r1, [pc, #12]	; (800761c <HAL_RCC_GetPCLK2Freq+0x24>)
 800760e:	5ccb      	ldrb	r3, [r1, r3]
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40021000 	.word	0x40021000
 800761c:	0800ef2c 	.word	0x0800ef2c

08007620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <RCC_Delay+0x34>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a0a      	ldr	r2, [pc, #40]	; (8007658 <RCC_Delay+0x38>)
 800762e:	fba2 2303 	umull	r2, r3, r2, r3
 8007632:	0a5b      	lsrs	r3, r3, #9
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	fb02 f303 	mul.w	r3, r2, r3
 800763a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800763c:	bf00      	nop
  }
  while (Delay --);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	1e5a      	subs	r2, r3, #1
 8007642:	60fa      	str	r2, [r7, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f9      	bne.n	800763c <RCC_Delay+0x1c>
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr
 8007654:	20000000 	.word	0x20000000
 8007658:	10624dd3 	.word	0x10624dd3

0800765c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	2300      	movs	r3, #0
 800766a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d07d      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007678:	2300      	movs	r3, #0
 800767a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800767c:	4b4f      	ldr	r3, [pc, #316]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10d      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007688:	4b4c      	ldr	r3, [pc, #304]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	4a4b      	ldr	r2, [pc, #300]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800768e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007692:	61d3      	str	r3, [r2, #28]
 8007694:	4b49      	ldr	r3, [pc, #292]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769c:	60bb      	str	r3, [r7, #8]
 800769e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076a0:	2301      	movs	r3, #1
 80076a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076a4:	4b46      	ldr	r3, [pc, #280]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d118      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076b0:	4b43      	ldr	r3, [pc, #268]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a42      	ldr	r2, [pc, #264]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076bc:	f7fd fee6 	bl	800548c <HAL_GetTick>
 80076c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076c2:	e008      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c4:	f7fd fee2 	bl	800548c <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b64      	cmp	r3, #100	; 0x64
 80076d0:	d901      	bls.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e06d      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076d6:	4b3a      	ldr	r3, [pc, #232]	; (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076e2:	4b36      	ldr	r3, [pc, #216]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d02e      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d027      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007700:	4b2e      	ldr	r3, [pc, #184]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007708:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800770a:	4b2e      	ldr	r3, [pc, #184]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800770c:	2201      	movs	r2, #1
 800770e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007710:	4b2c      	ldr	r3, [pc, #176]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007716:	4a29      	ldr	r2, [pc, #164]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d014      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007726:	f7fd feb1 	bl	800548c <HAL_GetTick>
 800772a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800772c:	e00a      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800772e:	f7fd fead 	bl	800548c <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	f241 3288 	movw	r2, #5000	; 0x1388
 800773c:	4293      	cmp	r3, r2
 800773e:	d901      	bls.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e036      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007744:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d0ee      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007750:	4b1a      	ldr	r3, [pc, #104]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	4917      	ldr	r1, [pc, #92]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800775e:	4313      	orrs	r3, r2
 8007760:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d105      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007768:	4b14      	ldr	r3, [pc, #80]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	4a13      	ldr	r2, [pc, #76]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800776e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007772:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d008      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007780:	4b0e      	ldr	r3, [pc, #56]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	490b      	ldr	r1, [pc, #44]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800778e:	4313      	orrs	r3, r2
 8007790:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b00      	cmp	r3, #0
 800779c:	d008      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800779e:	4b07      	ldr	r3, [pc, #28]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	4904      	ldr	r1, [pc, #16]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40021000 	.word	0x40021000
 80077c0:	40007000 	.word	0x40007000
 80077c4:	42420440 	.word	0x42420440

080077c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	2300      	movs	r3, #0
 80077d6:	61fb      	str	r3, [r7, #28]
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	2300      	movs	r3, #0
 80077e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	2b0f      	cmp	r3, #15
 80077ea:	f200 80af 	bhi.w	800794c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80077ee:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	080078cb 	.word	0x080078cb
 80077f8:	08007931 	.word	0x08007931
 80077fc:	0800794d 	.word	0x0800794d
 8007800:	080078bb 	.word	0x080078bb
 8007804:	0800794d 	.word	0x0800794d
 8007808:	0800794d 	.word	0x0800794d
 800780c:	0800794d 	.word	0x0800794d
 8007810:	080078c3 	.word	0x080078c3
 8007814:	0800794d 	.word	0x0800794d
 8007818:	0800794d 	.word	0x0800794d
 800781c:	0800794d 	.word	0x0800794d
 8007820:	0800794d 	.word	0x0800794d
 8007824:	0800794d 	.word	0x0800794d
 8007828:	0800794d 	.word	0x0800794d
 800782c:	0800794d 	.word	0x0800794d
 8007830:	08007835 	.word	0x08007835
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007834:	4b4a      	ldr	r3, [pc, #296]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800783a:	4b49      	ldr	r3, [pc, #292]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 8084 	beq.w	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	0c9b      	lsrs	r3, r3, #18
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	4a44      	ldr	r2, [pc, #272]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8007852:	5cd3      	ldrb	r3, [r2, r3]
 8007854:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d015      	beq.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007860:	4b3f      	ldr	r3, [pc, #252]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	0c5b      	lsrs	r3, r3, #17
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	4a3f      	ldr	r2, [pc, #252]	; (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800786c:	5cd3      	ldrb	r3, [r2, r3]
 800786e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00d      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800787a:	4a3c      	ldr	r2, [pc, #240]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	fb02 f303 	mul.w	r3, r2, r3
 8007888:	61fb      	str	r3, [r7, #28]
 800788a:	e004      	b.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	4a38      	ldr	r2, [pc, #224]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007890:	fb02 f303 	mul.w	r3, r2, r3
 8007894:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007896:	4b32      	ldr	r3, [pc, #200]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078a2:	d102      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80078a8:	e052      	b.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	4a31      	ldr	r2, [pc, #196]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80078b0:	fba2 2303 	umull	r2, r3, r2, r3
 80078b4:	085b      	lsrs	r3, r3, #1
 80078b6:	61bb      	str	r3, [r7, #24]
      break;
 80078b8:	e04a      	b.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80078ba:	f7ff fe2b 	bl	8007514 <HAL_RCC_GetSysClockFreq>
 80078be:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80078c0:	e049      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80078c2:	f7ff fe27 	bl	8007514 <HAL_RCC_GetSysClockFreq>
 80078c6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80078c8:	e045      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80078ca:	4b25      	ldr	r3, [pc, #148]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078da:	d108      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80078e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ea:	61bb      	str	r3, [r7, #24]
 80078ec:	e01f      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f8:	d109      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80078fa:	4b19      	ldr	r3, [pc, #100]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8007906:	f649 4340 	movw	r3, #40000	; 0x9c40
 800790a:	61bb      	str	r3, [r7, #24]
 800790c:	e00f      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007918:	d11c      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800791a:	4b11      	ldr	r3, [pc, #68]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d016      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8007926:	f24f 4324 	movw	r3, #62500	; 0xf424
 800792a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800792c:	e012      	b.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800792e:	e011      	b.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007930:	f7ff fe62 	bl	80075f8 <HAL_RCC_GetPCLK2Freq>
 8007934:	4602      	mov	r2, r0
 8007936:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	0b9b      	lsrs	r3, r3, #14
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	3301      	adds	r3, #1
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	fbb2 f3f3 	udiv	r3, r2, r3
 8007948:	61bb      	str	r3, [r7, #24]
      break;
 800794a:	e004      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 800794c:	bf00      	nop
 800794e:	e002      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007950:	bf00      	nop
 8007952:	e000      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007954:	bf00      	nop
    }
  }
  return (frequency);
 8007956:	69bb      	ldr	r3, [r7, #24]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3720      	adds	r7, #32
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	40021000 	.word	0x40021000
 8007964:	0800ef48 	.word	0x0800ef48
 8007968:	0800ef58 	.word	0x0800ef58
 800796c:	007a1200 	.word	0x007a1200
 8007970:	003d0900 	.word	0x003d0900
 8007974:	aaaaaaab 	.word	0xaaaaaaab

08007978 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e07a      	b.n	8007a84 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7c5b      	ldrb	r3, [r3, #17]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7f9 ffea 	bl	8001978 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f870 	bl	8007a90 <HAL_RTC_WaitForSynchro>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d004      	beq.n	80079c0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2204      	movs	r2, #4
 80079ba:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e061      	b.n	8007a84 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f892 	bl	8007aea <RTC_EnterInitMode>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d004      	beq.n	80079d6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2204      	movs	r2, #4
 80079d0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e056      	b.n	8007a84 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0207 	bic.w	r2, r2, #7
 80079e4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d005      	beq.n	80079fa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80079ee:	4b27      	ldr	r3, [pc, #156]	; (8007a8c <HAL_RTC_Init+0x114>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	4a26      	ldr	r2, [pc, #152]	; (8007a8c <HAL_RTC_Init+0x114>)
 80079f4:	f023 0301 	bic.w	r3, r3, #1
 80079f8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80079fa:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <HAL_RTC_Init+0x114>)
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	4921      	ldr	r1, [pc, #132]	; (8007a8c <HAL_RTC_Init+0x114>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d003      	beq.n	8007a1e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e00e      	b.n	8007a3c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007a1e:	2001      	movs	r0, #1
 8007a20:	f7ff fed2 	bl	80077c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a24:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d104      	bne.n	8007a36 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2204      	movs	r2, #4
 8007a30:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e026      	b.n	8007a84 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	0c1a      	lsrs	r2, r3, #16
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f002 020f 	and.w	r2, r2, #15
 8007a48:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	b292      	uxth	r2, r2
 8007a52:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f870 	bl	8007b3a <RTC_ExitInitMode>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d004      	beq.n	8007a6a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2204      	movs	r2, #4
 8007a64:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e00c      	b.n	8007a84 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007a82:	2300      	movs	r3, #0
  }
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40006c00 	.word	0x40006c00

08007a90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e01d      	b.n	8007ae2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0208 	bic.w	r2, r2, #8
 8007ab4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007ab6:	f7fd fce9 	bl	800548c <HAL_GetTick>
 8007aba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007abc:	e009      	b.n	8007ad2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007abe:	f7fd fce5 	bl	800548c <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007acc:	d901      	bls.n	8007ad2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e007      	b.n	8007ae2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0ee      	beq.n	8007abe <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007af6:	f7fd fcc9 	bl	800548c <HAL_GetTick>
 8007afa:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007afc:	e009      	b.n	8007b12 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007afe:	f7fd fcc5 	bl	800548c <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b0c:	d901      	bls.n	8007b12 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e00f      	b.n	8007b32 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f003 0320 	and.w	r3, r3, #32
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0ee      	beq.n	8007afe <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0210 	orr.w	r2, r2, #16
 8007b2e:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0210 	bic.w	r2, r2, #16
 8007b54:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007b56:	f7fd fc99 	bl	800548c <HAL_GetTick>
 8007b5a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007b5c:	e009      	b.n	8007b72 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007b5e:	f7fd fc95 	bl	800548c <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b6c:	d901      	bls.n	8007b72 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e007      	b.n	8007b82 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f003 0320 	and.w	r3, r3, #32
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0ee      	beq.n	8007b5e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e041      	b.n	8007c20 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d106      	bne.n	8007bb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7fa f9cd 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2202      	movs	r2, #2
 8007bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4610      	mov	r0, r2
 8007bca:	f000 faaf 	bl	800812c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d001      	beq.n	8007c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e044      	b.n	8007cca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0201 	orr.w	r2, r2, #1
 8007c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1d      	ldr	r2, [pc, #116]	; (8007cd4 <HAL_TIM_Base_Start_IT+0xac>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d018      	beq.n	8007c94 <HAL_TIM_Base_Start_IT+0x6c>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a1c      	ldr	r2, [pc, #112]	; (8007cd8 <HAL_TIM_Base_Start_IT+0xb0>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d013      	beq.n	8007c94 <HAL_TIM_Base_Start_IT+0x6c>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c74:	d00e      	beq.n	8007c94 <HAL_TIM_Base_Start_IT+0x6c>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a18      	ldr	r2, [pc, #96]	; (8007cdc <HAL_TIM_Base_Start_IT+0xb4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d009      	beq.n	8007c94 <HAL_TIM_Base_Start_IT+0x6c>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a16      	ldr	r2, [pc, #88]	; (8007ce0 <HAL_TIM_Base_Start_IT+0xb8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d004      	beq.n	8007c94 <HAL_TIM_Base_Start_IT+0x6c>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a15      	ldr	r2, [pc, #84]	; (8007ce4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d111      	bne.n	8007cb8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b06      	cmp	r3, #6
 8007ca4:	d010      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0201 	orr.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb6:	e007      	b.n	8007cc8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0201 	orr.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40013400 	.word	0x40013400
 8007cdc:	40000400 	.word	0x40000400
 8007ce0:	40000800 	.word	0x40000800
 8007ce4:	40000c00 	.word	0x40000c00

08007ce8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0201 	bic.w	r2, r2, #1
 8007cfe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6a1a      	ldr	r2, [r3, #32]
 8007d06:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10f      	bne.n	8007d30 <HAL_TIM_Base_Stop_IT+0x48>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6a1a      	ldr	r2, [r3, #32]
 8007d16:	f240 4344 	movw	r3, #1092	; 0x444
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d107      	bne.n	8007d30 <HAL_TIM_Base_Stop_IT+0x48>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0201 	bic.w	r2, r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr

08007d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d122      	bne.n	8007da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d11b      	bne.n	8007da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0202 	mvn.w	r2, #2
 8007d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f9b4 	bl	80080f4 <HAL_TIM_IC_CaptureCallback>
 8007d8c:	e005      	b.n	8007d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f9a7 	bl	80080e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f9b6 	bl	8008106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	d122      	bne.n	8007df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d11b      	bne.n	8007df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f06f 0204 	mvn.w	r2, #4
 8007dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f98a 	bl	80080f4 <HAL_TIM_IC_CaptureCallback>
 8007de0:	e005      	b.n	8007dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f97d 	bl	80080e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f98c 	bl	8008106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0308 	and.w	r3, r3, #8
 8007dfe:	2b08      	cmp	r3, #8
 8007e00:	d122      	bne.n	8007e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f003 0308 	and.w	r3, r3, #8
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d11b      	bne.n	8007e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f06f 0208 	mvn.w	r2, #8
 8007e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2204      	movs	r2, #4
 8007e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f960 	bl	80080f4 <HAL_TIM_IC_CaptureCallback>
 8007e34:	e005      	b.n	8007e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f953 	bl	80080e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f962 	bl	8008106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f003 0310 	and.w	r3, r3, #16
 8007e52:	2b10      	cmp	r3, #16
 8007e54:	d122      	bne.n	8007e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f003 0310 	and.w	r3, r3, #16
 8007e60:	2b10      	cmp	r3, #16
 8007e62:	d11b      	bne.n	8007e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0210 	mvn.w	r2, #16
 8007e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2208      	movs	r2, #8
 8007e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f936 	bl	80080f4 <HAL_TIM_IC_CaptureCallback>
 8007e88:	e005      	b.n	8007e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f929 	bl	80080e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f938 	bl	8008106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d10e      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d107      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f06f 0201 	mvn.w	r2, #1
 8007ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7f9 fd2d 	bl	8001922 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed2:	2b80      	cmp	r3, #128	; 0x80
 8007ed4:	d10e      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee0:	2b80      	cmp	r3, #128	; 0x80
 8007ee2:	d107      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 faa1 	bl	8008436 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	d10e      	bne.n	8007f20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b40      	cmp	r3, #64	; 0x40
 8007f0e:	d107      	bne.n	8007f20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f8fc 	bl	8008118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d10e      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	d107      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f06f 0220 	mvn.w	r2, #32
 8007f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fa6c 	bl	8008424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_TIM_ConfigClockSource+0x1c>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e0b4      	b.n	80080da <HAL_TIM_ConfigClockSource+0x186>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fa8:	d03e      	beq.n	8008028 <HAL_TIM_ConfigClockSource+0xd4>
 8007faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fae:	f200 8087 	bhi.w	80080c0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb6:	f000 8086 	beq.w	80080c6 <HAL_TIM_ConfigClockSource+0x172>
 8007fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fbe:	d87f      	bhi.n	80080c0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fc0:	2b70      	cmp	r3, #112	; 0x70
 8007fc2:	d01a      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0xa6>
 8007fc4:	2b70      	cmp	r3, #112	; 0x70
 8007fc6:	d87b      	bhi.n	80080c0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fc8:	2b60      	cmp	r3, #96	; 0x60
 8007fca:	d050      	beq.n	800806e <HAL_TIM_ConfigClockSource+0x11a>
 8007fcc:	2b60      	cmp	r3, #96	; 0x60
 8007fce:	d877      	bhi.n	80080c0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fd0:	2b50      	cmp	r3, #80	; 0x50
 8007fd2:	d03c      	beq.n	800804e <HAL_TIM_ConfigClockSource+0xfa>
 8007fd4:	2b50      	cmp	r3, #80	; 0x50
 8007fd6:	d873      	bhi.n	80080c0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fd8:	2b40      	cmp	r3, #64	; 0x40
 8007fda:	d058      	beq.n	800808e <HAL_TIM_ConfigClockSource+0x13a>
 8007fdc:	2b40      	cmp	r3, #64	; 0x40
 8007fde:	d86f      	bhi.n	80080c0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe0:	2b30      	cmp	r3, #48	; 0x30
 8007fe2:	d064      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0x15a>
 8007fe4:	2b30      	cmp	r3, #48	; 0x30
 8007fe6:	d86b      	bhi.n	80080c0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	d060      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0x15a>
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	d867      	bhi.n	80080c0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d05c      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0x15a>
 8007ff4:	2b10      	cmp	r3, #16
 8007ff6:	d05a      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0x15a>
 8007ff8:	e062      	b.n	80080c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800800a:	f000 f980 	bl	800830e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800801c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	609a      	str	r2, [r3, #8]
      break;
 8008026:	e04f      	b.n	80080c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008038:	f000 f969 	bl	800830e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800804a:	609a      	str	r2, [r3, #8]
      break;
 800804c:	e03c      	b.n	80080c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800805a:	461a      	mov	r2, r3
 800805c:	f000 f8e0 	bl	8008220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2150      	movs	r1, #80	; 0x50
 8008066:	4618      	mov	r0, r3
 8008068:	f000 f937 	bl	80082da <TIM_ITRx_SetConfig>
      break;
 800806c:	e02c      	b.n	80080c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800807a:	461a      	mov	r2, r3
 800807c:	f000 f8fe 	bl	800827c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2160      	movs	r1, #96	; 0x60
 8008086:	4618      	mov	r0, r3
 8008088:	f000 f927 	bl	80082da <TIM_ITRx_SetConfig>
      break;
 800808c:	e01c      	b.n	80080c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800809a:	461a      	mov	r2, r3
 800809c:	f000 f8c0 	bl	8008220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2140      	movs	r1, #64	; 0x40
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f917 	bl	80082da <TIM_ITRx_SetConfig>
      break;
 80080ac:	e00c      	b.n	80080c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f000 f90e 	bl	80082da <TIM_ITRx_SetConfig>
      break;
 80080be:	e003      	b.n	80080c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
      break;
 80080c4:	e000      	b.n	80080c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b083      	sub	sp, #12
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr

080080f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr

08008106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr

08008118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr
	...

0800812c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a33      	ldr	r2, [pc, #204]	; (800820c <TIM_Base_SetConfig+0xe0>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d013      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a32      	ldr	r2, [pc, #200]	; (8008210 <TIM_Base_SetConfig+0xe4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00f      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008152:	d00b      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a2f      	ldr	r2, [pc, #188]	; (8008214 <TIM_Base_SetConfig+0xe8>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d007      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a2e      	ldr	r2, [pc, #184]	; (8008218 <TIM_Base_SetConfig+0xec>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d003      	beq.n	800816c <TIM_Base_SetConfig+0x40>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a2d      	ldr	r2, [pc, #180]	; (800821c <TIM_Base_SetConfig+0xf0>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d108      	bne.n	800817e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a22      	ldr	r2, [pc, #136]	; (800820c <TIM_Base_SetConfig+0xe0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d013      	beq.n	80081ae <TIM_Base_SetConfig+0x82>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a21      	ldr	r2, [pc, #132]	; (8008210 <TIM_Base_SetConfig+0xe4>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d00f      	beq.n	80081ae <TIM_Base_SetConfig+0x82>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008194:	d00b      	beq.n	80081ae <TIM_Base_SetConfig+0x82>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a1e      	ldr	r2, [pc, #120]	; (8008214 <TIM_Base_SetConfig+0xe8>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d007      	beq.n	80081ae <TIM_Base_SetConfig+0x82>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a1d      	ldr	r2, [pc, #116]	; (8008218 <TIM_Base_SetConfig+0xec>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d003      	beq.n	80081ae <TIM_Base_SetConfig+0x82>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a1c      	ldr	r2, [pc, #112]	; (800821c <TIM_Base_SetConfig+0xf0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d108      	bne.n	80081c0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a09      	ldr	r2, [pc, #36]	; (800820c <TIM_Base_SetConfig+0xe0>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d003      	beq.n	80081f4 <TIM_Base_SetConfig+0xc8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a08      	ldr	r2, [pc, #32]	; (8008210 <TIM_Base_SetConfig+0xe4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d103      	bne.n	80081fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	615a      	str	r2, [r3, #20]
}
 8008202:	bf00      	nop
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	bc80      	pop	{r7}
 800820a:	4770      	bx	lr
 800820c:	40012c00 	.word	0x40012c00
 8008210:	40013400 	.word	0x40013400
 8008214:	40000400 	.word	0x40000400
 8008218:	40000800 	.word	0x40000800
 800821c:	40000c00 	.word	0x40000c00

08008220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	f023 0201 	bic.w	r2, r3, #1
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800824a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	4313      	orrs	r3, r2
 8008254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f023 030a 	bic.w	r3, r3, #10
 800825c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	621a      	str	r2, [r3, #32]
}
 8008272:	bf00      	nop
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	f023 0210 	bic.w	r2, r3, #16
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	031b      	lsls	r3, r3, #12
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	621a      	str	r2, [r3, #32]
}
 80082d0:	bf00      	nop
 80082d2:	371c      	adds	r7, #28
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bc80      	pop	{r7}
 80082d8:	4770      	bx	lr

080082da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082da:	b480      	push	{r7}
 80082dc:	b085      	sub	sp, #20
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	f043 0307 	orr.w	r3, r3, #7
 80082fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	609a      	str	r2, [r3, #8]
}
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr

0800830e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800830e:	b480      	push	{r7}
 8008310:	b087      	sub	sp, #28
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
 800831a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008328:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	021a      	lsls	r2, r3, #8
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	431a      	orrs	r2, r3
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	4313      	orrs	r3, r2
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	4313      	orrs	r3, r2
 800833a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	609a      	str	r2, [r3, #8]
}
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr

0800834c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800835c:	2b01      	cmp	r3, #1
 800835e:	d101      	bne.n	8008364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008360:	2302      	movs	r3, #2
 8008362:	e050      	b.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1b      	ldr	r2, [pc, #108]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d018      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a19      	ldr	r2, [pc, #100]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d013      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ba:	d00e      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a15      	ldr	r2, [pc, #84]	; (8008418 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d009      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a14      	ldr	r2, [pc, #80]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d004      	beq.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a12      	ldr	r2, [pc, #72]	; (8008420 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d10c      	bne.n	80083f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	bc80      	pop	{r7}
 800840e:	4770      	bx	lr
 8008410:	40012c00 	.word	0x40012c00
 8008414:	40013400 	.word	0x40013400
 8008418:	40000400 	.word	0x40000400
 800841c:	40000800 	.word	0x40000800
 8008420:	40000c00 	.word	0x40000c00

08008424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	bc80      	pop	{r7}
 8008434:	4770      	bx	lr

08008436 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e042      	b.n	80084e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d106      	bne.n	8008474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7f9 fe88 	bl	8002184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2224      	movs	r2, #36	; 0x24
 8008478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800848a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fdc5 	bl	800901c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695a      	ldr	r2, [r3, #20]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68da      	ldr	r2, [r3, #12]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08a      	sub	sp, #40	; 0x28
 80084ec:	af02      	add	r7, sp, #8
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	4613      	mov	r3, r2
 80084f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b20      	cmp	r3, #32
 8008506:	d16d      	bne.n	80085e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d002      	beq.n	8008514 <HAL_UART_Transmit+0x2c>
 800850e:	88fb      	ldrh	r3, [r7, #6]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e066      	b.n	80085e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2221      	movs	r2, #33	; 0x21
 8008522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008526:	f7fc ffb1 	bl	800548c <HAL_GetTick>
 800852a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	88fa      	ldrh	r2, [r7, #6]
 8008536:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008540:	d108      	bne.n	8008554 <HAL_UART_Transmit+0x6c>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d104      	bne.n	8008554 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	61bb      	str	r3, [r7, #24]
 8008552:	e003      	b.n	800855c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008558:	2300      	movs	r3, #0
 800855a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800855c:	e02a      	b.n	80085b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2200      	movs	r2, #0
 8008566:	2180      	movs	r1, #128	; 0x80
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fb14 	bl	8008b96 <UART_WaitOnFlagUntilTimeout>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e036      	b.n	80085e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10b      	bne.n	8008596 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800858c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	3302      	adds	r3, #2
 8008592:	61bb      	str	r3, [r7, #24]
 8008594:	e007      	b.n	80085a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	3301      	adds	r3, #1
 80085a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	3b01      	subs	r3, #1
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1cf      	bne.n	800855e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2200      	movs	r2, #0
 80085c6:	2140      	movs	r1, #64	; 0x40
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 fae4 	bl	8008b96 <UART_WaitOnFlagUntilTimeout>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e006      	b.n	80085e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2220      	movs	r2, #32
 80085dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	e000      	b.n	80085e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80085e4:	2302      	movs	r3, #2
  }
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	4613      	mov	r3, r2
 80085fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b20      	cmp	r3, #32
 8008606:	d112      	bne.n	800862e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <HAL_UART_Receive_IT+0x26>
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e00b      	b.n	8008630 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800861e:	88fb      	ldrh	r3, [r7, #6]
 8008620:	461a      	mov	r2, r3
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fb24 	bl	8008c72 <UART_Start_Receive_IT>
 800862a:	4603      	mov	r3, r0
 800862c:	e000      	b.n	8008630 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800862e:	2302      	movs	r3, #2
  }
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b0ba      	sub	sp, #232	; 0xe8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800865e:	2300      	movs	r3, #0
 8008660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008664:	2300      	movs	r3, #0
 8008666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866e:	f003 030f 	and.w	r3, r3, #15
 8008672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10f      	bne.n	800869e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800867e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008682:	f003 0320 	and.w	r3, r3, #32
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <HAL_UART_IRQHandler+0x66>
 800868a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc01 	bl	8008e9e <UART_Receive_IT>
      return;
 800869c:	e25b      	b.n	8008b56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800869e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 80de 	beq.w	8008864 <HAL_UART_IRQHandler+0x22c>
 80086a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d106      	bne.n	80086c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 80d1 	beq.w	8008864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <HAL_UART_IRQHandler+0xae>
 80086ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086de:	f043 0201 	orr.w	r2, r3, #1
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00b      	beq.n	800870a <HAL_UART_IRQHandler+0xd2>
 80086f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008702:	f043 0202 	orr.w	r2, r3, #2
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800870a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00b      	beq.n	800872e <HAL_UART_IRQHandler+0xf6>
 8008716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d005      	beq.n	800872e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008726:	f043 0204 	orr.w	r2, r3, #4
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800872e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	2b00      	cmp	r3, #0
 8008738:	d011      	beq.n	800875e <HAL_UART_IRQHandler+0x126>
 800873a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008756:	f043 0208 	orr.w	r2, r3, #8
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 81f2 	beq.w	8008b4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800876c:	f003 0320 	and.w	r3, r3, #32
 8008770:	2b00      	cmp	r3, #0
 8008772:	d008      	beq.n	8008786 <HAL_UART_IRQHandler+0x14e>
 8008774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fb8c 	bl	8008e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008790:	2b00      	cmp	r3, #0
 8008792:	bf14      	ite	ne
 8008794:	2301      	movne	r3, #1
 8008796:	2300      	moveq	r3, #0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a2:	f003 0308 	and.w	r3, r3, #8
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d103      	bne.n	80087b2 <HAL_UART_IRQHandler+0x17a>
 80087aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d04f      	beq.n	8008852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fa96 	bl	8008ce4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d041      	beq.n	800884a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3314      	adds	r3, #20
 80087cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3314      	adds	r3, #20
 80087ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800880a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1d9      	bne.n	80087c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d013      	beq.n	8008842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881e:	4a7e      	ldr	r2, [pc, #504]	; (8008a18 <HAL_UART_IRQHandler+0x3e0>)
 8008820:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008826:	4618      	mov	r0, r3
 8008828:	f7fc ffa6 	bl	8005778 <HAL_DMA_Abort_IT>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d016      	beq.n	8008860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008840:	e00e      	b.n	8008860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f993 	bl	8008b6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008848:	e00a      	b.n	8008860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f98f 	bl	8008b6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008850:	e006      	b.n	8008860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f98b 	bl	8008b6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800885e:	e175      	b.n	8008b4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008860:	bf00      	nop
    return;
 8008862:	e173      	b.n	8008b4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008868:	2b01      	cmp	r3, #1
 800886a:	f040 814f 	bne.w	8008b0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800886e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008872:	f003 0310 	and.w	r3, r3, #16
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 8148 	beq.w	8008b0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800887c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008880:	f003 0310 	and.w	r3, r3, #16
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 8141 	beq.w	8008b0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800888a:	2300      	movs	r3, #0
 800888c:	60bb      	str	r3, [r7, #8]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60bb      	str	r3, [r7, #8]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 80b6 	beq.w	8008a1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 8145 	beq.w	8008b50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ce:	429a      	cmp	r2, r3
 80088d0:	f080 813e 	bcs.w	8008b50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	2b20      	cmp	r3, #32
 80088e4:	f000 8088 	beq.w	80089f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	330c      	adds	r3, #12
 80088ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	330c      	adds	r3, #12
 8008910:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008914:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008918:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008920:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008924:	e841 2300 	strex	r3, r2, [r1]
 8008928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800892c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1d9      	bne.n	80088e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3314      	adds	r3, #20
 800893a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008946:	f023 0301 	bic.w	r3, r3, #1
 800894a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3314      	adds	r3, #20
 8008954:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008958:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800895c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008960:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008964:	e841 2300 	strex	r3, r2, [r1]
 8008968:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800896a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e1      	bne.n	8008934 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3314      	adds	r3, #20
 8008976:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3314      	adds	r3, #20
 8008990:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008994:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008996:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008998:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800899a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800899c:	e841 2300 	strex	r3, r2, [r1]
 80089a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1e3      	bne.n	8008970 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	330c      	adds	r3, #12
 80089bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c8:	f023 0310 	bic.w	r3, r3, #16
 80089cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	330c      	adds	r3, #12
 80089d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089da:	65ba      	str	r2, [r7, #88]	; 0x58
 80089dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e3      	bne.n	80089b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fc fe85 	bl	8005702 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f8b6 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a14:	e09c      	b.n	8008b50 <HAL_UART_IRQHandler+0x518>
 8008a16:	bf00      	nop
 8008a18:	08008da9 	.word	0x08008da9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 808e 	beq.w	8008b54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8089 	beq.w	8008b54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	330c      	adds	r3, #12
 8008a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	330c      	adds	r3, #12
 8008a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a66:	647a      	str	r2, [r7, #68]	; 0x44
 8008a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e3      	bne.n	8008a42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3314      	adds	r3, #20
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	623b      	str	r3, [r7, #32]
   return(result);
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	f023 0301 	bic.w	r3, r3, #1
 8008a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3314      	adds	r3, #20
 8008a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8008aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e3      	bne.n	8008a7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0310 	bic.w	r3, r3, #16
 8008ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	330c      	adds	r3, #12
 8008ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ae4:	61fa      	str	r2, [r7, #28]
 8008ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	69b9      	ldr	r1, [r7, #24]
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	617b      	str	r3, [r7, #20]
   return(result);
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e3      	bne.n	8008ac0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f83b 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b0a:	e023      	b.n	8008b54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d009      	beq.n	8008b2c <HAL_UART_IRQHandler+0x4f4>
 8008b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f953 	bl	8008dd0 <UART_Transmit_IT>
    return;
 8008b2a:	e014      	b.n	8008b56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00e      	beq.n	8008b56 <HAL_UART_IRQHandler+0x51e>
 8008b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d008      	beq.n	8008b56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f992 	bl	8008e6e <UART_EndTransmit_IT>
    return;
 8008b4a:	e004      	b.n	8008b56 <HAL_UART_IRQHandler+0x51e>
    return;
 8008b4c:	bf00      	nop
 8008b4e:	e002      	b.n	8008b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b50:	bf00      	nop
 8008b52:	e000      	b.n	8008b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b54:	bf00      	nop
  }
}
 8008b56:	37e8      	adds	r7, #232	; 0xe8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bc80      	pop	{r7}
 8008b6c:	4770      	bx	lr

08008b6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr

08008b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr

08008b96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b090      	sub	sp, #64	; 0x40
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	603b      	str	r3, [r7, #0]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba6:	e050      	b.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bae:	d04c      	beq.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d007      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bb6:	f7fc fc69 	bl	800548c <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d241      	bcs.n	8008c4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	330c      	adds	r3, #12
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	e853 3f00 	ldrex	r3, [r3]
 8008bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	330c      	adds	r3, #12
 8008be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008be6:	637a      	str	r2, [r7, #52]	; 0x34
 8008be8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e5      	bne.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3314      	adds	r3, #20
 8008c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	613b      	str	r3, [r7, #16]
   return(result);
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f023 0301 	bic.w	r3, r3, #1
 8008c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3314      	adds	r3, #20
 8008c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c1a:	623a      	str	r2, [r7, #32]
 8008c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	69f9      	ldr	r1, [r7, #28]
 8008c20:	6a3a      	ldr	r2, [r7, #32]
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e5      	bne.n	8008bfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e00f      	b.n	8008c6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	4013      	ands	r3, r2
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	bf0c      	ite	eq
 8008c5a:	2301      	moveq	r3, #1
 8008c5c:	2300      	movne	r3, #0
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d09f      	beq.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3740      	adds	r7, #64	; 0x40
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	88fa      	ldrh	r2, [r7, #6]
 8008c8a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	88fa      	ldrh	r2, [r7, #6]
 8008c90:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2222      	movs	r2, #34	; 0x22
 8008c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d007      	beq.n	8008cb8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cb6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695a      	ldr	r2, [r3, #20]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0201 	orr.w	r2, r2, #1
 8008cc6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0220 	orr.w	r2, r2, #32
 8008cd6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr

08008ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b095      	sub	sp, #84	; 0x54
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	330c      	adds	r3, #12
 8008d0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d0c:	643a      	str	r2, [r7, #64]	; 0x40
 8008d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e5      	bne.n	8008cec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3314      	adds	r3, #20
 8008d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	f023 0301 	bic.w	r3, r3, #1
 8008d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3314      	adds	r3, #20
 8008d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d48:	e841 2300 	strex	r3, r2, [r1]
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e5      	bne.n	8008d20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d119      	bne.n	8008d90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	330c      	adds	r3, #12
 8008d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	f023 0310 	bic.w	r3, r3, #16
 8008d72:	647b      	str	r3, [r7, #68]	; 0x44
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d7c:	61ba      	str	r2, [r7, #24]
 8008d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	6979      	ldr	r1, [r7, #20]
 8008d82:	69ba      	ldr	r2, [r7, #24]
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	613b      	str	r3, [r7, #16]
   return(result);
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e5      	bne.n	8008d5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d9e:	bf00      	nop
 8008da0:	3754      	adds	r7, #84	; 0x54
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bc80      	pop	{r7}
 8008da6:	4770      	bx	lr

08008da8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f7ff fed3 	bl	8008b6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc8:	bf00      	nop
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b21      	cmp	r3, #33	; 0x21
 8008de2:	d13e      	bne.n	8008e62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dec:	d114      	bne.n	8008e18 <UART_Transmit_IT+0x48>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d110      	bne.n	8008e18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	881b      	ldrh	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	1c9a      	adds	r2, r3, #2
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	621a      	str	r2, [r3, #32]
 8008e16:	e008      	b.n	8008e2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	1c59      	adds	r1, r3, #1
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	6211      	str	r1, [r2, #32]
 8008e22:	781a      	ldrb	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	3b01      	subs	r3, #1
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4619      	mov	r1, r3
 8008e38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10f      	bne.n	8008e5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e000      	b.n	8008e64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e62:	2302      	movs	r3, #2
  }
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bc80      	pop	{r7}
 8008e6c:	4770      	bx	lr

08008e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff fe64 	bl	8008b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b08c      	sub	sp, #48	; 0x30
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b22      	cmp	r3, #34	; 0x22
 8008eb0:	f040 80ae 	bne.w	8009010 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ebc:	d117      	bne.n	8008eee <UART_Receive_IT+0x50>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d113      	bne.n	8008eee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ece:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee6:	1c9a      	adds	r2, r3, #2
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	629a      	str	r2, [r3, #40]	; 0x28
 8008eec:	e026      	b.n	8008f3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f00:	d007      	beq.n	8008f12 <UART_Receive_IT+0x74>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10a      	bne.n	8008f20 <UART_Receive_IT+0x82>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	701a      	strb	r2, [r3, #0]
 8008f1e:	e008      	b.n	8008f32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	3b01      	subs	r3, #1
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d15d      	bne.n	800900c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f022 0220 	bic.w	r2, r2, #32
 8008f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695a      	ldr	r2, [r3, #20]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0201 	bic.w	r2, r2, #1
 8008f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2220      	movs	r2, #32
 8008f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d135      	bne.n	8009002 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	330c      	adds	r3, #12
 8008fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	e853 3f00 	ldrex	r3, [r3]
 8008faa:	613b      	str	r3, [r7, #16]
   return(result);
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f023 0310 	bic.w	r3, r3, #16
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	330c      	adds	r3, #12
 8008fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fbc:	623a      	str	r2, [r7, #32]
 8008fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	69f9      	ldr	r1, [r7, #28]
 8008fc2:	6a3a      	ldr	r2, [r7, #32]
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e5      	bne.n	8008f9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0310 	and.w	r3, r3, #16
 8008fda:	2b10      	cmp	r3, #16
 8008fdc:	d10a      	bne.n	8008ff4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	60fb      	str	r3, [r7, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff fdc0 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
 8009000:	e002      	b.n	8009008 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7f8 fb8c 	bl	8001720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	e002      	b.n	8009012 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	e000      	b.n	8009012 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009010:	2302      	movs	r3, #2
  }
}
 8009012:	4618      	mov	r0, r3
 8009014:	3730      	adds	r7, #48	; 0x30
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	4313      	orrs	r3, r2
 800904a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009056:	f023 030c 	bic.w	r3, r3, #12
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	6812      	ldr	r2, [r2, #0]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	430b      	orrs	r3, r1
 8009062:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a2c      	ldr	r2, [pc, #176]	; (8009130 <UART_SetConfig+0x114>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d103      	bne.n	800908c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009084:	f7fe fab8 	bl	80075f8 <HAL_RCC_GetPCLK2Freq>
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	e002      	b.n	8009092 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800908c:	f7fe faa0 	bl	80075d0 <HAL_RCC_GetPCLK1Freq>
 8009090:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4613      	mov	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	009a      	lsls	r2, r3, #2
 800909c:	441a      	add	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a8:	4a22      	ldr	r2, [pc, #136]	; (8009134 <UART_SetConfig+0x118>)
 80090aa:	fba2 2303 	umull	r2, r3, r2, r3
 80090ae:	095b      	lsrs	r3, r3, #5
 80090b0:	0119      	lsls	r1, r3, #4
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009a      	lsls	r2, r3, #2
 80090bc:	441a      	add	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80090c8:	4b1a      	ldr	r3, [pc, #104]	; (8009134 <UART_SetConfig+0x118>)
 80090ca:	fba3 0302 	umull	r0, r3, r3, r2
 80090ce:	095b      	lsrs	r3, r3, #5
 80090d0:	2064      	movs	r0, #100	; 0x64
 80090d2:	fb00 f303 	mul.w	r3, r0, r3
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	011b      	lsls	r3, r3, #4
 80090da:	3332      	adds	r3, #50	; 0x32
 80090dc:	4a15      	ldr	r2, [pc, #84]	; (8009134 <UART_SetConfig+0x118>)
 80090de:	fba2 2303 	umull	r2, r3, r2, r3
 80090e2:	095b      	lsrs	r3, r3, #5
 80090e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090e8:	4419      	add	r1, r3
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009a      	lsls	r2, r3, #2
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009100:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <UART_SetConfig+0x118>)
 8009102:	fba3 0302 	umull	r0, r3, r3, r2
 8009106:	095b      	lsrs	r3, r3, #5
 8009108:	2064      	movs	r0, #100	; 0x64
 800910a:	fb00 f303 	mul.w	r3, r0, r3
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	3332      	adds	r3, #50	; 0x32
 8009114:	4a07      	ldr	r2, [pc, #28]	; (8009134 <UART_SetConfig+0x118>)
 8009116:	fba2 2303 	umull	r2, r3, r2, r3
 800911a:	095b      	lsrs	r3, r3, #5
 800911c:	f003 020f 	and.w	r2, r3, #15
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	440a      	add	r2, r1
 8009126:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009128:	bf00      	nop
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	40013800 	.word	0x40013800
 8009134:	51eb851f 	.word	0x51eb851f

08009138 <__cvt>:
 8009138:	2b00      	cmp	r3, #0
 800913a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800913e:	461f      	mov	r7, r3
 8009140:	bfbb      	ittet	lt
 8009142:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009146:	461f      	movlt	r7, r3
 8009148:	2300      	movge	r3, #0
 800914a:	232d      	movlt	r3, #45	; 0x2d
 800914c:	b088      	sub	sp, #32
 800914e:	4614      	mov	r4, r2
 8009150:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009152:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009154:	7013      	strb	r3, [r2, #0]
 8009156:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009158:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800915c:	f023 0820 	bic.w	r8, r3, #32
 8009160:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009164:	d005      	beq.n	8009172 <__cvt+0x3a>
 8009166:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800916a:	d100      	bne.n	800916e <__cvt+0x36>
 800916c:	3501      	adds	r5, #1
 800916e:	2302      	movs	r3, #2
 8009170:	e000      	b.n	8009174 <__cvt+0x3c>
 8009172:	2303      	movs	r3, #3
 8009174:	aa07      	add	r2, sp, #28
 8009176:	9204      	str	r2, [sp, #16]
 8009178:	aa06      	add	r2, sp, #24
 800917a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800917e:	e9cd 3500 	strd	r3, r5, [sp]
 8009182:	4622      	mov	r2, r4
 8009184:	463b      	mov	r3, r7
 8009186:	f001 fa33 	bl	800a5f0 <_dtoa_r>
 800918a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800918e:	4606      	mov	r6, r0
 8009190:	d102      	bne.n	8009198 <__cvt+0x60>
 8009192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009194:	07db      	lsls	r3, r3, #31
 8009196:	d522      	bpl.n	80091de <__cvt+0xa6>
 8009198:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800919c:	eb06 0905 	add.w	r9, r6, r5
 80091a0:	d110      	bne.n	80091c4 <__cvt+0x8c>
 80091a2:	7833      	ldrb	r3, [r6, #0]
 80091a4:	2b30      	cmp	r3, #48	; 0x30
 80091a6:	d10a      	bne.n	80091be <__cvt+0x86>
 80091a8:	2200      	movs	r2, #0
 80091aa:	2300      	movs	r3, #0
 80091ac:	4620      	mov	r0, r4
 80091ae:	4639      	mov	r1, r7
 80091b0:	f7f7 fd1a 	bl	8000be8 <__aeabi_dcmpeq>
 80091b4:	b918      	cbnz	r0, 80091be <__cvt+0x86>
 80091b6:	f1c5 0501 	rsb	r5, r5, #1
 80091ba:	f8ca 5000 	str.w	r5, [sl]
 80091be:	f8da 3000 	ldr.w	r3, [sl]
 80091c2:	4499      	add	r9, r3
 80091c4:	2200      	movs	r2, #0
 80091c6:	2300      	movs	r3, #0
 80091c8:	4620      	mov	r0, r4
 80091ca:	4639      	mov	r1, r7
 80091cc:	f7f7 fd0c 	bl	8000be8 <__aeabi_dcmpeq>
 80091d0:	b108      	cbz	r0, 80091d6 <__cvt+0x9e>
 80091d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80091d6:	2230      	movs	r2, #48	; 0x30
 80091d8:	9b07      	ldr	r3, [sp, #28]
 80091da:	454b      	cmp	r3, r9
 80091dc:	d307      	bcc.n	80091ee <__cvt+0xb6>
 80091de:	4630      	mov	r0, r6
 80091e0:	9b07      	ldr	r3, [sp, #28]
 80091e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80091e4:	1b9b      	subs	r3, r3, r6
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	b008      	add	sp, #32
 80091ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ee:	1c59      	adds	r1, r3, #1
 80091f0:	9107      	str	r1, [sp, #28]
 80091f2:	701a      	strb	r2, [r3, #0]
 80091f4:	e7f0      	b.n	80091d8 <__cvt+0xa0>

080091f6 <__exponent>:
 80091f6:	4603      	mov	r3, r0
 80091f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091fa:	2900      	cmp	r1, #0
 80091fc:	f803 2b02 	strb.w	r2, [r3], #2
 8009200:	bfb6      	itet	lt
 8009202:	222d      	movlt	r2, #45	; 0x2d
 8009204:	222b      	movge	r2, #43	; 0x2b
 8009206:	4249      	neglt	r1, r1
 8009208:	2909      	cmp	r1, #9
 800920a:	7042      	strb	r2, [r0, #1]
 800920c:	dd2a      	ble.n	8009264 <__exponent+0x6e>
 800920e:	f10d 0207 	add.w	r2, sp, #7
 8009212:	4617      	mov	r7, r2
 8009214:	260a      	movs	r6, #10
 8009216:	fb91 f5f6 	sdiv	r5, r1, r6
 800921a:	4694      	mov	ip, r2
 800921c:	fb06 1415 	mls	r4, r6, r5, r1
 8009220:	3430      	adds	r4, #48	; 0x30
 8009222:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009226:	460c      	mov	r4, r1
 8009228:	2c63      	cmp	r4, #99	; 0x63
 800922a:	4629      	mov	r1, r5
 800922c:	f102 32ff 	add.w	r2, r2, #4294967295
 8009230:	dcf1      	bgt.n	8009216 <__exponent+0x20>
 8009232:	3130      	adds	r1, #48	; 0x30
 8009234:	f1ac 0402 	sub.w	r4, ip, #2
 8009238:	f802 1c01 	strb.w	r1, [r2, #-1]
 800923c:	4622      	mov	r2, r4
 800923e:	1c41      	adds	r1, r0, #1
 8009240:	42ba      	cmp	r2, r7
 8009242:	d30a      	bcc.n	800925a <__exponent+0x64>
 8009244:	f10d 0209 	add.w	r2, sp, #9
 8009248:	eba2 020c 	sub.w	r2, r2, ip
 800924c:	42bc      	cmp	r4, r7
 800924e:	bf88      	it	hi
 8009250:	2200      	movhi	r2, #0
 8009252:	4413      	add	r3, r2
 8009254:	1a18      	subs	r0, r3, r0
 8009256:	b003      	add	sp, #12
 8009258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800925a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800925e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009262:	e7ed      	b.n	8009240 <__exponent+0x4a>
 8009264:	2330      	movs	r3, #48	; 0x30
 8009266:	3130      	adds	r1, #48	; 0x30
 8009268:	7083      	strb	r3, [r0, #2]
 800926a:	70c1      	strb	r1, [r0, #3]
 800926c:	1d03      	adds	r3, r0, #4
 800926e:	e7f1      	b.n	8009254 <__exponent+0x5e>

08009270 <_printf_float>:
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	b091      	sub	sp, #68	; 0x44
 8009276:	460c      	mov	r4, r1
 8009278:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800927c:	4616      	mov	r6, r2
 800927e:	461f      	mov	r7, r3
 8009280:	4605      	mov	r5, r0
 8009282:	f001 f887 	bl	800a394 <_localeconv_r>
 8009286:	6803      	ldr	r3, [r0, #0]
 8009288:	4618      	mov	r0, r3
 800928a:	9309      	str	r3, [sp, #36]	; 0x24
 800928c:	f7f6 ffcc 	bl	8000228 <strlen>
 8009290:	2300      	movs	r3, #0
 8009292:	930e      	str	r3, [sp, #56]	; 0x38
 8009294:	f8d8 3000 	ldr.w	r3, [r8]
 8009298:	900a      	str	r0, [sp, #40]	; 0x28
 800929a:	3307      	adds	r3, #7
 800929c:	f023 0307 	bic.w	r3, r3, #7
 80092a0:	f103 0208 	add.w	r2, r3, #8
 80092a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80092a8:	f8d4 b000 	ldr.w	fp, [r4]
 80092ac:	f8c8 2000 	str.w	r2, [r8]
 80092b0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80092b4:	4652      	mov	r2, sl
 80092b6:	4643      	mov	r3, r8
 80092b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80092bc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80092c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	4650      	mov	r0, sl
 80092c8:	4b9c      	ldr	r3, [pc, #624]	; (800953c <_printf_float+0x2cc>)
 80092ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092cc:	f7f7 fcbe 	bl	8000c4c <__aeabi_dcmpun>
 80092d0:	bb70      	cbnz	r0, 8009330 <_printf_float+0xc0>
 80092d2:	f04f 32ff 	mov.w	r2, #4294967295
 80092d6:	4650      	mov	r0, sl
 80092d8:	4b98      	ldr	r3, [pc, #608]	; (800953c <_printf_float+0x2cc>)
 80092da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092dc:	f7f7 fc98 	bl	8000c10 <__aeabi_dcmple>
 80092e0:	bb30      	cbnz	r0, 8009330 <_printf_float+0xc0>
 80092e2:	2200      	movs	r2, #0
 80092e4:	2300      	movs	r3, #0
 80092e6:	4650      	mov	r0, sl
 80092e8:	4641      	mov	r1, r8
 80092ea:	f7f7 fc87 	bl	8000bfc <__aeabi_dcmplt>
 80092ee:	b110      	cbz	r0, 80092f6 <_printf_float+0x86>
 80092f0:	232d      	movs	r3, #45	; 0x2d
 80092f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092f6:	4a92      	ldr	r2, [pc, #584]	; (8009540 <_printf_float+0x2d0>)
 80092f8:	4b92      	ldr	r3, [pc, #584]	; (8009544 <_printf_float+0x2d4>)
 80092fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80092fe:	bf94      	ite	ls
 8009300:	4690      	movls	r8, r2
 8009302:	4698      	movhi	r8, r3
 8009304:	2303      	movs	r3, #3
 8009306:	f04f 0a00 	mov.w	sl, #0
 800930a:	6123      	str	r3, [r4, #16]
 800930c:	f02b 0304 	bic.w	r3, fp, #4
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	4633      	mov	r3, r6
 8009314:	4621      	mov	r1, r4
 8009316:	4628      	mov	r0, r5
 8009318:	9700      	str	r7, [sp, #0]
 800931a:	aa0f      	add	r2, sp, #60	; 0x3c
 800931c:	f000 f9d6 	bl	80096cc <_printf_common>
 8009320:	3001      	adds	r0, #1
 8009322:	f040 8090 	bne.w	8009446 <_printf_float+0x1d6>
 8009326:	f04f 30ff 	mov.w	r0, #4294967295
 800932a:	b011      	add	sp, #68	; 0x44
 800932c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009330:	4652      	mov	r2, sl
 8009332:	4643      	mov	r3, r8
 8009334:	4650      	mov	r0, sl
 8009336:	4641      	mov	r1, r8
 8009338:	f7f7 fc88 	bl	8000c4c <__aeabi_dcmpun>
 800933c:	b148      	cbz	r0, 8009352 <_printf_float+0xe2>
 800933e:	f1b8 0f00 	cmp.w	r8, #0
 8009342:	bfb8      	it	lt
 8009344:	232d      	movlt	r3, #45	; 0x2d
 8009346:	4a80      	ldr	r2, [pc, #512]	; (8009548 <_printf_float+0x2d8>)
 8009348:	bfb8      	it	lt
 800934a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800934e:	4b7f      	ldr	r3, [pc, #508]	; (800954c <_printf_float+0x2dc>)
 8009350:	e7d3      	b.n	80092fa <_printf_float+0x8a>
 8009352:	6863      	ldr	r3, [r4, #4]
 8009354:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	d142      	bne.n	80093e2 <_printf_float+0x172>
 800935c:	2306      	movs	r3, #6
 800935e:	6063      	str	r3, [r4, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	9206      	str	r2, [sp, #24]
 8009364:	aa0e      	add	r2, sp, #56	; 0x38
 8009366:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800936a:	aa0d      	add	r2, sp, #52	; 0x34
 800936c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009370:	9203      	str	r2, [sp, #12]
 8009372:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009376:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800937a:	6023      	str	r3, [r4, #0]
 800937c:	6863      	ldr	r3, [r4, #4]
 800937e:	4652      	mov	r2, sl
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	4628      	mov	r0, r5
 8009384:	4643      	mov	r3, r8
 8009386:	910b      	str	r1, [sp, #44]	; 0x2c
 8009388:	f7ff fed6 	bl	8009138 <__cvt>
 800938c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800938e:	4680      	mov	r8, r0
 8009390:	2947      	cmp	r1, #71	; 0x47
 8009392:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009394:	d108      	bne.n	80093a8 <_printf_float+0x138>
 8009396:	1cc8      	adds	r0, r1, #3
 8009398:	db02      	blt.n	80093a0 <_printf_float+0x130>
 800939a:	6863      	ldr	r3, [r4, #4]
 800939c:	4299      	cmp	r1, r3
 800939e:	dd40      	ble.n	8009422 <_printf_float+0x1b2>
 80093a0:	f1a9 0902 	sub.w	r9, r9, #2
 80093a4:	fa5f f989 	uxtb.w	r9, r9
 80093a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80093ac:	d81f      	bhi.n	80093ee <_printf_float+0x17e>
 80093ae:	464a      	mov	r2, r9
 80093b0:	3901      	subs	r1, #1
 80093b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80093b6:	910d      	str	r1, [sp, #52]	; 0x34
 80093b8:	f7ff ff1d 	bl	80091f6 <__exponent>
 80093bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093be:	4682      	mov	sl, r0
 80093c0:	1813      	adds	r3, r2, r0
 80093c2:	2a01      	cmp	r2, #1
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	dc02      	bgt.n	80093ce <_printf_float+0x15e>
 80093c8:	6822      	ldr	r2, [r4, #0]
 80093ca:	07d2      	lsls	r2, r2, #31
 80093cc:	d501      	bpl.n	80093d2 <_printf_float+0x162>
 80093ce:	3301      	adds	r3, #1
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d09b      	beq.n	8009312 <_printf_float+0xa2>
 80093da:	232d      	movs	r3, #45	; 0x2d
 80093dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093e0:	e797      	b.n	8009312 <_printf_float+0xa2>
 80093e2:	2947      	cmp	r1, #71	; 0x47
 80093e4:	d1bc      	bne.n	8009360 <_printf_float+0xf0>
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1ba      	bne.n	8009360 <_printf_float+0xf0>
 80093ea:	2301      	movs	r3, #1
 80093ec:	e7b7      	b.n	800935e <_printf_float+0xee>
 80093ee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80093f2:	d118      	bne.n	8009426 <_printf_float+0x1b6>
 80093f4:	2900      	cmp	r1, #0
 80093f6:	6863      	ldr	r3, [r4, #4]
 80093f8:	dd0b      	ble.n	8009412 <_printf_float+0x1a2>
 80093fa:	6121      	str	r1, [r4, #16]
 80093fc:	b913      	cbnz	r3, 8009404 <_printf_float+0x194>
 80093fe:	6822      	ldr	r2, [r4, #0]
 8009400:	07d0      	lsls	r0, r2, #31
 8009402:	d502      	bpl.n	800940a <_printf_float+0x19a>
 8009404:	3301      	adds	r3, #1
 8009406:	440b      	add	r3, r1
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	f04f 0a00 	mov.w	sl, #0
 800940e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009410:	e7df      	b.n	80093d2 <_printf_float+0x162>
 8009412:	b913      	cbnz	r3, 800941a <_printf_float+0x1aa>
 8009414:	6822      	ldr	r2, [r4, #0]
 8009416:	07d2      	lsls	r2, r2, #31
 8009418:	d501      	bpl.n	800941e <_printf_float+0x1ae>
 800941a:	3302      	adds	r3, #2
 800941c:	e7f4      	b.n	8009408 <_printf_float+0x198>
 800941e:	2301      	movs	r3, #1
 8009420:	e7f2      	b.n	8009408 <_printf_float+0x198>
 8009422:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009428:	4299      	cmp	r1, r3
 800942a:	db05      	blt.n	8009438 <_printf_float+0x1c8>
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	6121      	str	r1, [r4, #16]
 8009430:	07d8      	lsls	r0, r3, #31
 8009432:	d5ea      	bpl.n	800940a <_printf_float+0x19a>
 8009434:	1c4b      	adds	r3, r1, #1
 8009436:	e7e7      	b.n	8009408 <_printf_float+0x198>
 8009438:	2900      	cmp	r1, #0
 800943a:	bfcc      	ite	gt
 800943c:	2201      	movgt	r2, #1
 800943e:	f1c1 0202 	rsble	r2, r1, #2
 8009442:	4413      	add	r3, r2
 8009444:	e7e0      	b.n	8009408 <_printf_float+0x198>
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	055a      	lsls	r2, r3, #21
 800944a:	d407      	bmi.n	800945c <_printf_float+0x1ec>
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	4642      	mov	r2, r8
 8009450:	4631      	mov	r1, r6
 8009452:	4628      	mov	r0, r5
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	d12b      	bne.n	80094b2 <_printf_float+0x242>
 800945a:	e764      	b.n	8009326 <_printf_float+0xb6>
 800945c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009460:	f240 80dd 	bls.w	800961e <_printf_float+0x3ae>
 8009464:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009468:	2200      	movs	r2, #0
 800946a:	2300      	movs	r3, #0
 800946c:	f7f7 fbbc 	bl	8000be8 <__aeabi_dcmpeq>
 8009470:	2800      	cmp	r0, #0
 8009472:	d033      	beq.n	80094dc <_printf_float+0x26c>
 8009474:	2301      	movs	r3, #1
 8009476:	4631      	mov	r1, r6
 8009478:	4628      	mov	r0, r5
 800947a:	4a35      	ldr	r2, [pc, #212]	; (8009550 <_printf_float+0x2e0>)
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	f43f af51 	beq.w	8009326 <_printf_float+0xb6>
 8009484:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009488:	429a      	cmp	r2, r3
 800948a:	db02      	blt.n	8009492 <_printf_float+0x222>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	07d8      	lsls	r0, r3, #31
 8009490:	d50f      	bpl.n	80094b2 <_printf_float+0x242>
 8009492:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009496:	4631      	mov	r1, r6
 8009498:	4628      	mov	r0, r5
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	f43f af42 	beq.w	8009326 <_printf_float+0xb6>
 80094a2:	f04f 0800 	mov.w	r8, #0
 80094a6:	f104 091a 	add.w	r9, r4, #26
 80094aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ac:	3b01      	subs	r3, #1
 80094ae:	4543      	cmp	r3, r8
 80094b0:	dc09      	bgt.n	80094c6 <_printf_float+0x256>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	079b      	lsls	r3, r3, #30
 80094b6:	f100 8104 	bmi.w	80096c2 <_printf_float+0x452>
 80094ba:	68e0      	ldr	r0, [r4, #12]
 80094bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094be:	4298      	cmp	r0, r3
 80094c0:	bfb8      	it	lt
 80094c2:	4618      	movlt	r0, r3
 80094c4:	e731      	b.n	800932a <_printf_float+0xba>
 80094c6:	2301      	movs	r3, #1
 80094c8:	464a      	mov	r2, r9
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	f43f af28 	beq.w	8009326 <_printf_float+0xb6>
 80094d6:	f108 0801 	add.w	r8, r8, #1
 80094da:	e7e6      	b.n	80094aa <_printf_float+0x23a>
 80094dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094de:	2b00      	cmp	r3, #0
 80094e0:	dc38      	bgt.n	8009554 <_printf_float+0x2e4>
 80094e2:	2301      	movs	r3, #1
 80094e4:	4631      	mov	r1, r6
 80094e6:	4628      	mov	r0, r5
 80094e8:	4a19      	ldr	r2, [pc, #100]	; (8009550 <_printf_float+0x2e0>)
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	f43f af1a 	beq.w	8009326 <_printf_float+0xb6>
 80094f2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80094f6:	4313      	orrs	r3, r2
 80094f8:	d102      	bne.n	8009500 <_printf_float+0x290>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	07d9      	lsls	r1, r3, #31
 80094fe:	d5d8      	bpl.n	80094b2 <_printf_float+0x242>
 8009500:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	47b8      	blx	r7
 800950a:	3001      	adds	r0, #1
 800950c:	f43f af0b 	beq.w	8009326 <_printf_float+0xb6>
 8009510:	f04f 0900 	mov.w	r9, #0
 8009514:	f104 0a1a 	add.w	sl, r4, #26
 8009518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800951a:	425b      	negs	r3, r3
 800951c:	454b      	cmp	r3, r9
 800951e:	dc01      	bgt.n	8009524 <_printf_float+0x2b4>
 8009520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009522:	e794      	b.n	800944e <_printf_float+0x1de>
 8009524:	2301      	movs	r3, #1
 8009526:	4652      	mov	r2, sl
 8009528:	4631      	mov	r1, r6
 800952a:	4628      	mov	r0, r5
 800952c:	47b8      	blx	r7
 800952e:	3001      	adds	r0, #1
 8009530:	f43f aef9 	beq.w	8009326 <_printf_float+0xb6>
 8009534:	f109 0901 	add.w	r9, r9, #1
 8009538:	e7ee      	b.n	8009518 <_printf_float+0x2a8>
 800953a:	bf00      	nop
 800953c:	7fefffff 	.word	0x7fefffff
 8009540:	0800ef5a 	.word	0x0800ef5a
 8009544:	0800ef5e 	.word	0x0800ef5e
 8009548:	0800ef62 	.word	0x0800ef62
 800954c:	0800ef66 	.word	0x0800ef66
 8009550:	0800f330 	.word	0x0800f330
 8009554:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009558:	429a      	cmp	r2, r3
 800955a:	bfa8      	it	ge
 800955c:	461a      	movge	r2, r3
 800955e:	2a00      	cmp	r2, #0
 8009560:	4691      	mov	r9, r2
 8009562:	dc37      	bgt.n	80095d4 <_printf_float+0x364>
 8009564:	f04f 0b00 	mov.w	fp, #0
 8009568:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800956c:	f104 021a 	add.w	r2, r4, #26
 8009570:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009574:	ebaa 0309 	sub.w	r3, sl, r9
 8009578:	455b      	cmp	r3, fp
 800957a:	dc33      	bgt.n	80095e4 <_printf_float+0x374>
 800957c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009580:	429a      	cmp	r2, r3
 8009582:	db3b      	blt.n	80095fc <_printf_float+0x38c>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	07da      	lsls	r2, r3, #31
 8009588:	d438      	bmi.n	80095fc <_printf_float+0x38c>
 800958a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800958e:	eba2 0903 	sub.w	r9, r2, r3
 8009592:	eba2 020a 	sub.w	r2, r2, sl
 8009596:	4591      	cmp	r9, r2
 8009598:	bfa8      	it	ge
 800959a:	4691      	movge	r9, r2
 800959c:	f1b9 0f00 	cmp.w	r9, #0
 80095a0:	dc34      	bgt.n	800960c <_printf_float+0x39c>
 80095a2:	f04f 0800 	mov.w	r8, #0
 80095a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095aa:	f104 0a1a 	add.w	sl, r4, #26
 80095ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	eba3 0309 	sub.w	r3, r3, r9
 80095b8:	4543      	cmp	r3, r8
 80095ba:	f77f af7a 	ble.w	80094b2 <_printf_float+0x242>
 80095be:	2301      	movs	r3, #1
 80095c0:	4652      	mov	r2, sl
 80095c2:	4631      	mov	r1, r6
 80095c4:	4628      	mov	r0, r5
 80095c6:	47b8      	blx	r7
 80095c8:	3001      	adds	r0, #1
 80095ca:	f43f aeac 	beq.w	8009326 <_printf_float+0xb6>
 80095ce:	f108 0801 	add.w	r8, r8, #1
 80095d2:	e7ec      	b.n	80095ae <_printf_float+0x33e>
 80095d4:	4613      	mov	r3, r2
 80095d6:	4631      	mov	r1, r6
 80095d8:	4642      	mov	r2, r8
 80095da:	4628      	mov	r0, r5
 80095dc:	47b8      	blx	r7
 80095de:	3001      	adds	r0, #1
 80095e0:	d1c0      	bne.n	8009564 <_printf_float+0x2f4>
 80095e2:	e6a0      	b.n	8009326 <_printf_float+0xb6>
 80095e4:	2301      	movs	r3, #1
 80095e6:	4631      	mov	r1, r6
 80095e8:	4628      	mov	r0, r5
 80095ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80095ec:	47b8      	blx	r7
 80095ee:	3001      	adds	r0, #1
 80095f0:	f43f ae99 	beq.w	8009326 <_printf_float+0xb6>
 80095f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095f6:	f10b 0b01 	add.w	fp, fp, #1
 80095fa:	e7b9      	b.n	8009570 <_printf_float+0x300>
 80095fc:	4631      	mov	r1, r6
 80095fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	d1bf      	bne.n	800958a <_printf_float+0x31a>
 800960a:	e68c      	b.n	8009326 <_printf_float+0xb6>
 800960c:	464b      	mov	r3, r9
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	eb08 020a 	add.w	r2, r8, sl
 8009616:	47b8      	blx	r7
 8009618:	3001      	adds	r0, #1
 800961a:	d1c2      	bne.n	80095a2 <_printf_float+0x332>
 800961c:	e683      	b.n	8009326 <_printf_float+0xb6>
 800961e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009620:	2a01      	cmp	r2, #1
 8009622:	dc01      	bgt.n	8009628 <_printf_float+0x3b8>
 8009624:	07db      	lsls	r3, r3, #31
 8009626:	d539      	bpl.n	800969c <_printf_float+0x42c>
 8009628:	2301      	movs	r3, #1
 800962a:	4642      	mov	r2, r8
 800962c:	4631      	mov	r1, r6
 800962e:	4628      	mov	r0, r5
 8009630:	47b8      	blx	r7
 8009632:	3001      	adds	r0, #1
 8009634:	f43f ae77 	beq.w	8009326 <_printf_float+0xb6>
 8009638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	47b8      	blx	r7
 8009642:	3001      	adds	r0, #1
 8009644:	f43f ae6f 	beq.w	8009326 <_printf_float+0xb6>
 8009648:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800964c:	2200      	movs	r2, #0
 800964e:	2300      	movs	r3, #0
 8009650:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009654:	f7f7 fac8 	bl	8000be8 <__aeabi_dcmpeq>
 8009658:	b9d8      	cbnz	r0, 8009692 <_printf_float+0x422>
 800965a:	f109 33ff 	add.w	r3, r9, #4294967295
 800965e:	f108 0201 	add.w	r2, r8, #1
 8009662:	4631      	mov	r1, r6
 8009664:	4628      	mov	r0, r5
 8009666:	47b8      	blx	r7
 8009668:	3001      	adds	r0, #1
 800966a:	d10e      	bne.n	800968a <_printf_float+0x41a>
 800966c:	e65b      	b.n	8009326 <_printf_float+0xb6>
 800966e:	2301      	movs	r3, #1
 8009670:	464a      	mov	r2, r9
 8009672:	4631      	mov	r1, r6
 8009674:	4628      	mov	r0, r5
 8009676:	47b8      	blx	r7
 8009678:	3001      	adds	r0, #1
 800967a:	f43f ae54 	beq.w	8009326 <_printf_float+0xb6>
 800967e:	f108 0801 	add.w	r8, r8, #1
 8009682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009684:	3b01      	subs	r3, #1
 8009686:	4543      	cmp	r3, r8
 8009688:	dcf1      	bgt.n	800966e <_printf_float+0x3fe>
 800968a:	4653      	mov	r3, sl
 800968c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009690:	e6de      	b.n	8009450 <_printf_float+0x1e0>
 8009692:	f04f 0800 	mov.w	r8, #0
 8009696:	f104 091a 	add.w	r9, r4, #26
 800969a:	e7f2      	b.n	8009682 <_printf_float+0x412>
 800969c:	2301      	movs	r3, #1
 800969e:	4642      	mov	r2, r8
 80096a0:	e7df      	b.n	8009662 <_printf_float+0x3f2>
 80096a2:	2301      	movs	r3, #1
 80096a4:	464a      	mov	r2, r9
 80096a6:	4631      	mov	r1, r6
 80096a8:	4628      	mov	r0, r5
 80096aa:	47b8      	blx	r7
 80096ac:	3001      	adds	r0, #1
 80096ae:	f43f ae3a 	beq.w	8009326 <_printf_float+0xb6>
 80096b2:	f108 0801 	add.w	r8, r8, #1
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80096ba:	1a5b      	subs	r3, r3, r1
 80096bc:	4543      	cmp	r3, r8
 80096be:	dcf0      	bgt.n	80096a2 <_printf_float+0x432>
 80096c0:	e6fb      	b.n	80094ba <_printf_float+0x24a>
 80096c2:	f04f 0800 	mov.w	r8, #0
 80096c6:	f104 0919 	add.w	r9, r4, #25
 80096ca:	e7f4      	b.n	80096b6 <_printf_float+0x446>

080096cc <_printf_common>:
 80096cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	4616      	mov	r6, r2
 80096d2:	4699      	mov	r9, r3
 80096d4:	688a      	ldr	r2, [r1, #8]
 80096d6:	690b      	ldr	r3, [r1, #16]
 80096d8:	4607      	mov	r7, r0
 80096da:	4293      	cmp	r3, r2
 80096dc:	bfb8      	it	lt
 80096de:	4613      	movlt	r3, r2
 80096e0:	6033      	str	r3, [r6, #0]
 80096e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096e6:	460c      	mov	r4, r1
 80096e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096ec:	b10a      	cbz	r2, 80096f2 <_printf_common+0x26>
 80096ee:	3301      	adds	r3, #1
 80096f0:	6033      	str	r3, [r6, #0]
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	0699      	lsls	r1, r3, #26
 80096f6:	bf42      	ittt	mi
 80096f8:	6833      	ldrmi	r3, [r6, #0]
 80096fa:	3302      	addmi	r3, #2
 80096fc:	6033      	strmi	r3, [r6, #0]
 80096fe:	6825      	ldr	r5, [r4, #0]
 8009700:	f015 0506 	ands.w	r5, r5, #6
 8009704:	d106      	bne.n	8009714 <_printf_common+0x48>
 8009706:	f104 0a19 	add.w	sl, r4, #25
 800970a:	68e3      	ldr	r3, [r4, #12]
 800970c:	6832      	ldr	r2, [r6, #0]
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	42ab      	cmp	r3, r5
 8009712:	dc2b      	bgt.n	800976c <_printf_common+0xa0>
 8009714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009718:	1e13      	subs	r3, r2, #0
 800971a:	6822      	ldr	r2, [r4, #0]
 800971c:	bf18      	it	ne
 800971e:	2301      	movne	r3, #1
 8009720:	0692      	lsls	r2, r2, #26
 8009722:	d430      	bmi.n	8009786 <_printf_common+0xba>
 8009724:	4649      	mov	r1, r9
 8009726:	4638      	mov	r0, r7
 8009728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800972c:	47c0      	blx	r8
 800972e:	3001      	adds	r0, #1
 8009730:	d023      	beq.n	800977a <_printf_common+0xae>
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	6922      	ldr	r2, [r4, #16]
 8009736:	f003 0306 	and.w	r3, r3, #6
 800973a:	2b04      	cmp	r3, #4
 800973c:	bf14      	ite	ne
 800973e:	2500      	movne	r5, #0
 8009740:	6833      	ldreq	r3, [r6, #0]
 8009742:	f04f 0600 	mov.w	r6, #0
 8009746:	bf08      	it	eq
 8009748:	68e5      	ldreq	r5, [r4, #12]
 800974a:	f104 041a 	add.w	r4, r4, #26
 800974e:	bf08      	it	eq
 8009750:	1aed      	subeq	r5, r5, r3
 8009752:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009756:	bf08      	it	eq
 8009758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800975c:	4293      	cmp	r3, r2
 800975e:	bfc4      	itt	gt
 8009760:	1a9b      	subgt	r3, r3, r2
 8009762:	18ed      	addgt	r5, r5, r3
 8009764:	42b5      	cmp	r5, r6
 8009766:	d11a      	bne.n	800979e <_printf_common+0xd2>
 8009768:	2000      	movs	r0, #0
 800976a:	e008      	b.n	800977e <_printf_common+0xb2>
 800976c:	2301      	movs	r3, #1
 800976e:	4652      	mov	r2, sl
 8009770:	4649      	mov	r1, r9
 8009772:	4638      	mov	r0, r7
 8009774:	47c0      	blx	r8
 8009776:	3001      	adds	r0, #1
 8009778:	d103      	bne.n	8009782 <_printf_common+0xb6>
 800977a:	f04f 30ff 	mov.w	r0, #4294967295
 800977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009782:	3501      	adds	r5, #1
 8009784:	e7c1      	b.n	800970a <_printf_common+0x3e>
 8009786:	2030      	movs	r0, #48	; 0x30
 8009788:	18e1      	adds	r1, r4, r3
 800978a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009794:	4422      	add	r2, r4
 8009796:	3302      	adds	r3, #2
 8009798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800979c:	e7c2      	b.n	8009724 <_printf_common+0x58>
 800979e:	2301      	movs	r3, #1
 80097a0:	4622      	mov	r2, r4
 80097a2:	4649      	mov	r1, r9
 80097a4:	4638      	mov	r0, r7
 80097a6:	47c0      	blx	r8
 80097a8:	3001      	adds	r0, #1
 80097aa:	d0e6      	beq.n	800977a <_printf_common+0xae>
 80097ac:	3601      	adds	r6, #1
 80097ae:	e7d9      	b.n	8009764 <_printf_common+0x98>

080097b0 <_printf_i>:
 80097b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	7e0f      	ldrb	r7, [r1, #24]
 80097b6:	4691      	mov	r9, r2
 80097b8:	2f78      	cmp	r7, #120	; 0x78
 80097ba:	4680      	mov	r8, r0
 80097bc:	460c      	mov	r4, r1
 80097be:	469a      	mov	sl, r3
 80097c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097c6:	d807      	bhi.n	80097d8 <_printf_i+0x28>
 80097c8:	2f62      	cmp	r7, #98	; 0x62
 80097ca:	d80a      	bhi.n	80097e2 <_printf_i+0x32>
 80097cc:	2f00      	cmp	r7, #0
 80097ce:	f000 80d5 	beq.w	800997c <_printf_i+0x1cc>
 80097d2:	2f58      	cmp	r7, #88	; 0x58
 80097d4:	f000 80c1 	beq.w	800995a <_printf_i+0x1aa>
 80097d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097e0:	e03a      	b.n	8009858 <_printf_i+0xa8>
 80097e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097e6:	2b15      	cmp	r3, #21
 80097e8:	d8f6      	bhi.n	80097d8 <_printf_i+0x28>
 80097ea:	a101      	add	r1, pc, #4	; (adr r1, 80097f0 <_printf_i+0x40>)
 80097ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097f0:	08009849 	.word	0x08009849
 80097f4:	0800985d 	.word	0x0800985d
 80097f8:	080097d9 	.word	0x080097d9
 80097fc:	080097d9 	.word	0x080097d9
 8009800:	080097d9 	.word	0x080097d9
 8009804:	080097d9 	.word	0x080097d9
 8009808:	0800985d 	.word	0x0800985d
 800980c:	080097d9 	.word	0x080097d9
 8009810:	080097d9 	.word	0x080097d9
 8009814:	080097d9 	.word	0x080097d9
 8009818:	080097d9 	.word	0x080097d9
 800981c:	08009963 	.word	0x08009963
 8009820:	08009889 	.word	0x08009889
 8009824:	0800991d 	.word	0x0800991d
 8009828:	080097d9 	.word	0x080097d9
 800982c:	080097d9 	.word	0x080097d9
 8009830:	08009985 	.word	0x08009985
 8009834:	080097d9 	.word	0x080097d9
 8009838:	08009889 	.word	0x08009889
 800983c:	080097d9 	.word	0x080097d9
 8009840:	080097d9 	.word	0x080097d9
 8009844:	08009925 	.word	0x08009925
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	1d1a      	adds	r2, r3, #4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	602a      	str	r2, [r5, #0]
 8009850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009858:	2301      	movs	r3, #1
 800985a:	e0a0      	b.n	800999e <_printf_i+0x1ee>
 800985c:	6820      	ldr	r0, [r4, #0]
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	0607      	lsls	r7, r0, #24
 8009862:	f103 0104 	add.w	r1, r3, #4
 8009866:	6029      	str	r1, [r5, #0]
 8009868:	d501      	bpl.n	800986e <_printf_i+0xbe>
 800986a:	681e      	ldr	r6, [r3, #0]
 800986c:	e003      	b.n	8009876 <_printf_i+0xc6>
 800986e:	0646      	lsls	r6, r0, #25
 8009870:	d5fb      	bpl.n	800986a <_printf_i+0xba>
 8009872:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009876:	2e00      	cmp	r6, #0
 8009878:	da03      	bge.n	8009882 <_printf_i+0xd2>
 800987a:	232d      	movs	r3, #45	; 0x2d
 800987c:	4276      	negs	r6, r6
 800987e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009882:	230a      	movs	r3, #10
 8009884:	4859      	ldr	r0, [pc, #356]	; (80099ec <_printf_i+0x23c>)
 8009886:	e012      	b.n	80098ae <_printf_i+0xfe>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	6820      	ldr	r0, [r4, #0]
 800988c:	1d19      	adds	r1, r3, #4
 800988e:	6029      	str	r1, [r5, #0]
 8009890:	0605      	lsls	r5, r0, #24
 8009892:	d501      	bpl.n	8009898 <_printf_i+0xe8>
 8009894:	681e      	ldr	r6, [r3, #0]
 8009896:	e002      	b.n	800989e <_printf_i+0xee>
 8009898:	0641      	lsls	r1, r0, #25
 800989a:	d5fb      	bpl.n	8009894 <_printf_i+0xe4>
 800989c:	881e      	ldrh	r6, [r3, #0]
 800989e:	2f6f      	cmp	r7, #111	; 0x6f
 80098a0:	bf0c      	ite	eq
 80098a2:	2308      	moveq	r3, #8
 80098a4:	230a      	movne	r3, #10
 80098a6:	4851      	ldr	r0, [pc, #324]	; (80099ec <_printf_i+0x23c>)
 80098a8:	2100      	movs	r1, #0
 80098aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098ae:	6865      	ldr	r5, [r4, #4]
 80098b0:	2d00      	cmp	r5, #0
 80098b2:	bfa8      	it	ge
 80098b4:	6821      	ldrge	r1, [r4, #0]
 80098b6:	60a5      	str	r5, [r4, #8]
 80098b8:	bfa4      	itt	ge
 80098ba:	f021 0104 	bicge.w	r1, r1, #4
 80098be:	6021      	strge	r1, [r4, #0]
 80098c0:	b90e      	cbnz	r6, 80098c6 <_printf_i+0x116>
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	d04b      	beq.n	800995e <_printf_i+0x1ae>
 80098c6:	4615      	mov	r5, r2
 80098c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80098cc:	fb03 6711 	mls	r7, r3, r1, r6
 80098d0:	5dc7      	ldrb	r7, [r0, r7]
 80098d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098d6:	4637      	mov	r7, r6
 80098d8:	42bb      	cmp	r3, r7
 80098da:	460e      	mov	r6, r1
 80098dc:	d9f4      	bls.n	80098c8 <_printf_i+0x118>
 80098de:	2b08      	cmp	r3, #8
 80098e0:	d10b      	bne.n	80098fa <_printf_i+0x14a>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	07de      	lsls	r6, r3, #31
 80098e6:	d508      	bpl.n	80098fa <_printf_i+0x14a>
 80098e8:	6923      	ldr	r3, [r4, #16]
 80098ea:	6861      	ldr	r1, [r4, #4]
 80098ec:	4299      	cmp	r1, r3
 80098ee:	bfde      	ittt	le
 80098f0:	2330      	movle	r3, #48	; 0x30
 80098f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098fa:	1b52      	subs	r2, r2, r5
 80098fc:	6122      	str	r2, [r4, #16]
 80098fe:	464b      	mov	r3, r9
 8009900:	4621      	mov	r1, r4
 8009902:	4640      	mov	r0, r8
 8009904:	f8cd a000 	str.w	sl, [sp]
 8009908:	aa03      	add	r2, sp, #12
 800990a:	f7ff fedf 	bl	80096cc <_printf_common>
 800990e:	3001      	adds	r0, #1
 8009910:	d14a      	bne.n	80099a8 <_printf_i+0x1f8>
 8009912:	f04f 30ff 	mov.w	r0, #4294967295
 8009916:	b004      	add	sp, #16
 8009918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	f043 0320 	orr.w	r3, r3, #32
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	2778      	movs	r7, #120	; 0x78
 8009926:	4832      	ldr	r0, [pc, #200]	; (80099f0 <_printf_i+0x240>)
 8009928:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	6829      	ldr	r1, [r5, #0]
 8009930:	061f      	lsls	r7, r3, #24
 8009932:	f851 6b04 	ldr.w	r6, [r1], #4
 8009936:	d402      	bmi.n	800993e <_printf_i+0x18e>
 8009938:	065f      	lsls	r7, r3, #25
 800993a:	bf48      	it	mi
 800993c:	b2b6      	uxthmi	r6, r6
 800993e:	07df      	lsls	r7, r3, #31
 8009940:	bf48      	it	mi
 8009942:	f043 0320 	orrmi.w	r3, r3, #32
 8009946:	6029      	str	r1, [r5, #0]
 8009948:	bf48      	it	mi
 800994a:	6023      	strmi	r3, [r4, #0]
 800994c:	b91e      	cbnz	r6, 8009956 <_printf_i+0x1a6>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	f023 0320 	bic.w	r3, r3, #32
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	2310      	movs	r3, #16
 8009958:	e7a6      	b.n	80098a8 <_printf_i+0xf8>
 800995a:	4824      	ldr	r0, [pc, #144]	; (80099ec <_printf_i+0x23c>)
 800995c:	e7e4      	b.n	8009928 <_printf_i+0x178>
 800995e:	4615      	mov	r5, r2
 8009960:	e7bd      	b.n	80098de <_printf_i+0x12e>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	6826      	ldr	r6, [r4, #0]
 8009966:	1d18      	adds	r0, r3, #4
 8009968:	6961      	ldr	r1, [r4, #20]
 800996a:	6028      	str	r0, [r5, #0]
 800996c:	0635      	lsls	r5, r6, #24
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	d501      	bpl.n	8009976 <_printf_i+0x1c6>
 8009972:	6019      	str	r1, [r3, #0]
 8009974:	e002      	b.n	800997c <_printf_i+0x1cc>
 8009976:	0670      	lsls	r0, r6, #25
 8009978:	d5fb      	bpl.n	8009972 <_printf_i+0x1c2>
 800997a:	8019      	strh	r1, [r3, #0]
 800997c:	2300      	movs	r3, #0
 800997e:	4615      	mov	r5, r2
 8009980:	6123      	str	r3, [r4, #16]
 8009982:	e7bc      	b.n	80098fe <_printf_i+0x14e>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	2100      	movs	r1, #0
 8009988:	1d1a      	adds	r2, r3, #4
 800998a:	602a      	str	r2, [r5, #0]
 800998c:	681d      	ldr	r5, [r3, #0]
 800998e:	6862      	ldr	r2, [r4, #4]
 8009990:	4628      	mov	r0, r5
 8009992:	f000 fd64 	bl	800a45e <memchr>
 8009996:	b108      	cbz	r0, 800999c <_printf_i+0x1ec>
 8009998:	1b40      	subs	r0, r0, r5
 800999a:	6060      	str	r0, [r4, #4]
 800999c:	6863      	ldr	r3, [r4, #4]
 800999e:	6123      	str	r3, [r4, #16]
 80099a0:	2300      	movs	r3, #0
 80099a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099a6:	e7aa      	b.n	80098fe <_printf_i+0x14e>
 80099a8:	462a      	mov	r2, r5
 80099aa:	4649      	mov	r1, r9
 80099ac:	4640      	mov	r0, r8
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	47d0      	blx	sl
 80099b2:	3001      	adds	r0, #1
 80099b4:	d0ad      	beq.n	8009912 <_printf_i+0x162>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	079b      	lsls	r3, r3, #30
 80099ba:	d413      	bmi.n	80099e4 <_printf_i+0x234>
 80099bc:	68e0      	ldr	r0, [r4, #12]
 80099be:	9b03      	ldr	r3, [sp, #12]
 80099c0:	4298      	cmp	r0, r3
 80099c2:	bfb8      	it	lt
 80099c4:	4618      	movlt	r0, r3
 80099c6:	e7a6      	b.n	8009916 <_printf_i+0x166>
 80099c8:	2301      	movs	r3, #1
 80099ca:	4632      	mov	r2, r6
 80099cc:	4649      	mov	r1, r9
 80099ce:	4640      	mov	r0, r8
 80099d0:	47d0      	blx	sl
 80099d2:	3001      	adds	r0, #1
 80099d4:	d09d      	beq.n	8009912 <_printf_i+0x162>
 80099d6:	3501      	adds	r5, #1
 80099d8:	68e3      	ldr	r3, [r4, #12]
 80099da:	9903      	ldr	r1, [sp, #12]
 80099dc:	1a5b      	subs	r3, r3, r1
 80099de:	42ab      	cmp	r3, r5
 80099e0:	dcf2      	bgt.n	80099c8 <_printf_i+0x218>
 80099e2:	e7eb      	b.n	80099bc <_printf_i+0x20c>
 80099e4:	2500      	movs	r5, #0
 80099e6:	f104 0619 	add.w	r6, r4, #25
 80099ea:	e7f5      	b.n	80099d8 <_printf_i+0x228>
 80099ec:	0800ef6a 	.word	0x0800ef6a
 80099f0:	0800ef7b 	.word	0x0800ef7b

080099f4 <_scanf_float>:
 80099f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	b087      	sub	sp, #28
 80099fa:	9303      	str	r3, [sp, #12]
 80099fc:	688b      	ldr	r3, [r1, #8]
 80099fe:	4617      	mov	r7, r2
 8009a00:	1e5a      	subs	r2, r3, #1
 8009a02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009a06:	bf85      	ittet	hi
 8009a08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009a0c:	195b      	addhi	r3, r3, r5
 8009a0e:	2300      	movls	r3, #0
 8009a10:	9302      	strhi	r3, [sp, #8]
 8009a12:	bf88      	it	hi
 8009a14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009a18:	468b      	mov	fp, r1
 8009a1a:	f04f 0500 	mov.w	r5, #0
 8009a1e:	bf8c      	ite	hi
 8009a20:	608b      	strhi	r3, [r1, #8]
 8009a22:	9302      	strls	r3, [sp, #8]
 8009a24:	680b      	ldr	r3, [r1, #0]
 8009a26:	4680      	mov	r8, r0
 8009a28:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009a2c:	f84b 3b1c 	str.w	r3, [fp], #28
 8009a30:	460c      	mov	r4, r1
 8009a32:	465e      	mov	r6, fp
 8009a34:	46aa      	mov	sl, r5
 8009a36:	46a9      	mov	r9, r5
 8009a38:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009a3c:	9501      	str	r5, [sp, #4]
 8009a3e:	68a2      	ldr	r2, [r4, #8]
 8009a40:	b152      	cbz	r2, 8009a58 <_scanf_float+0x64>
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	2b4e      	cmp	r3, #78	; 0x4e
 8009a48:	d864      	bhi.n	8009b14 <_scanf_float+0x120>
 8009a4a:	2b40      	cmp	r3, #64	; 0x40
 8009a4c:	d83c      	bhi.n	8009ac8 <_scanf_float+0xd4>
 8009a4e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009a52:	b2c8      	uxtb	r0, r1
 8009a54:	280e      	cmp	r0, #14
 8009a56:	d93a      	bls.n	8009ace <_scanf_float+0xda>
 8009a58:	f1b9 0f00 	cmp.w	r9, #0
 8009a5c:	d003      	beq.n	8009a66 <_scanf_float+0x72>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a6a:	f1ba 0f01 	cmp.w	sl, #1
 8009a6e:	f200 8113 	bhi.w	8009c98 <_scanf_float+0x2a4>
 8009a72:	455e      	cmp	r6, fp
 8009a74:	f200 8105 	bhi.w	8009c82 <_scanf_float+0x28e>
 8009a78:	2501      	movs	r5, #1
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	b007      	add	sp, #28
 8009a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a82:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009a86:	2a0d      	cmp	r2, #13
 8009a88:	d8e6      	bhi.n	8009a58 <_scanf_float+0x64>
 8009a8a:	a101      	add	r1, pc, #4	; (adr r1, 8009a90 <_scanf_float+0x9c>)
 8009a8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009a90:	08009bcf 	.word	0x08009bcf
 8009a94:	08009a59 	.word	0x08009a59
 8009a98:	08009a59 	.word	0x08009a59
 8009a9c:	08009a59 	.word	0x08009a59
 8009aa0:	08009c2f 	.word	0x08009c2f
 8009aa4:	08009c07 	.word	0x08009c07
 8009aa8:	08009a59 	.word	0x08009a59
 8009aac:	08009a59 	.word	0x08009a59
 8009ab0:	08009bdd 	.word	0x08009bdd
 8009ab4:	08009a59 	.word	0x08009a59
 8009ab8:	08009a59 	.word	0x08009a59
 8009abc:	08009a59 	.word	0x08009a59
 8009ac0:	08009a59 	.word	0x08009a59
 8009ac4:	08009b95 	.word	0x08009b95
 8009ac8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009acc:	e7db      	b.n	8009a86 <_scanf_float+0x92>
 8009ace:	290e      	cmp	r1, #14
 8009ad0:	d8c2      	bhi.n	8009a58 <_scanf_float+0x64>
 8009ad2:	a001      	add	r0, pc, #4	; (adr r0, 8009ad8 <_scanf_float+0xe4>)
 8009ad4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009ad8:	08009b87 	.word	0x08009b87
 8009adc:	08009a59 	.word	0x08009a59
 8009ae0:	08009b87 	.word	0x08009b87
 8009ae4:	08009c1b 	.word	0x08009c1b
 8009ae8:	08009a59 	.word	0x08009a59
 8009aec:	08009b35 	.word	0x08009b35
 8009af0:	08009b71 	.word	0x08009b71
 8009af4:	08009b71 	.word	0x08009b71
 8009af8:	08009b71 	.word	0x08009b71
 8009afc:	08009b71 	.word	0x08009b71
 8009b00:	08009b71 	.word	0x08009b71
 8009b04:	08009b71 	.word	0x08009b71
 8009b08:	08009b71 	.word	0x08009b71
 8009b0c:	08009b71 	.word	0x08009b71
 8009b10:	08009b71 	.word	0x08009b71
 8009b14:	2b6e      	cmp	r3, #110	; 0x6e
 8009b16:	d809      	bhi.n	8009b2c <_scanf_float+0x138>
 8009b18:	2b60      	cmp	r3, #96	; 0x60
 8009b1a:	d8b2      	bhi.n	8009a82 <_scanf_float+0x8e>
 8009b1c:	2b54      	cmp	r3, #84	; 0x54
 8009b1e:	d077      	beq.n	8009c10 <_scanf_float+0x21c>
 8009b20:	2b59      	cmp	r3, #89	; 0x59
 8009b22:	d199      	bne.n	8009a58 <_scanf_float+0x64>
 8009b24:	2d07      	cmp	r5, #7
 8009b26:	d197      	bne.n	8009a58 <_scanf_float+0x64>
 8009b28:	2508      	movs	r5, #8
 8009b2a:	e029      	b.n	8009b80 <_scanf_float+0x18c>
 8009b2c:	2b74      	cmp	r3, #116	; 0x74
 8009b2e:	d06f      	beq.n	8009c10 <_scanf_float+0x21c>
 8009b30:	2b79      	cmp	r3, #121	; 0x79
 8009b32:	e7f6      	b.n	8009b22 <_scanf_float+0x12e>
 8009b34:	6821      	ldr	r1, [r4, #0]
 8009b36:	05c8      	lsls	r0, r1, #23
 8009b38:	d51a      	bpl.n	8009b70 <_scanf_float+0x17c>
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009b40:	6021      	str	r1, [r4, #0]
 8009b42:	f109 0901 	add.w	r9, r9, #1
 8009b46:	b11b      	cbz	r3, 8009b50 <_scanf_float+0x15c>
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	3201      	adds	r2, #1
 8009b4c:	9302      	str	r3, [sp, #8]
 8009b4e:	60a2      	str	r2, [r4, #8]
 8009b50:	68a3      	ldr	r3, [r4, #8]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	60a3      	str	r3, [r4, #8]
 8009b56:	6923      	ldr	r3, [r4, #16]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	6123      	str	r3, [r4, #16]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	607b      	str	r3, [r7, #4]
 8009b64:	f340 8084 	ble.w	8009c70 <_scanf_float+0x27c>
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	603b      	str	r3, [r7, #0]
 8009b6e:	e766      	b.n	8009a3e <_scanf_float+0x4a>
 8009b70:	eb1a 0f05 	cmn.w	sl, r5
 8009b74:	f47f af70 	bne.w	8009a58 <_scanf_float+0x64>
 8009b78:	6822      	ldr	r2, [r4, #0]
 8009b7a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009b7e:	6022      	str	r2, [r4, #0]
 8009b80:	f806 3b01 	strb.w	r3, [r6], #1
 8009b84:	e7e4      	b.n	8009b50 <_scanf_float+0x15c>
 8009b86:	6822      	ldr	r2, [r4, #0]
 8009b88:	0610      	lsls	r0, r2, #24
 8009b8a:	f57f af65 	bpl.w	8009a58 <_scanf_float+0x64>
 8009b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b92:	e7f4      	b.n	8009b7e <_scanf_float+0x18a>
 8009b94:	f1ba 0f00 	cmp.w	sl, #0
 8009b98:	d10e      	bne.n	8009bb8 <_scanf_float+0x1c4>
 8009b9a:	f1b9 0f00 	cmp.w	r9, #0
 8009b9e:	d10e      	bne.n	8009bbe <_scanf_float+0x1ca>
 8009ba0:	6822      	ldr	r2, [r4, #0]
 8009ba2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009ba6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009baa:	d108      	bne.n	8009bbe <_scanf_float+0x1ca>
 8009bac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009bb0:	f04f 0a01 	mov.w	sl, #1
 8009bb4:	6022      	str	r2, [r4, #0]
 8009bb6:	e7e3      	b.n	8009b80 <_scanf_float+0x18c>
 8009bb8:	f1ba 0f02 	cmp.w	sl, #2
 8009bbc:	d055      	beq.n	8009c6a <_scanf_float+0x276>
 8009bbe:	2d01      	cmp	r5, #1
 8009bc0:	d002      	beq.n	8009bc8 <_scanf_float+0x1d4>
 8009bc2:	2d04      	cmp	r5, #4
 8009bc4:	f47f af48 	bne.w	8009a58 <_scanf_float+0x64>
 8009bc8:	3501      	adds	r5, #1
 8009bca:	b2ed      	uxtb	r5, r5
 8009bcc:	e7d8      	b.n	8009b80 <_scanf_float+0x18c>
 8009bce:	f1ba 0f01 	cmp.w	sl, #1
 8009bd2:	f47f af41 	bne.w	8009a58 <_scanf_float+0x64>
 8009bd6:	f04f 0a02 	mov.w	sl, #2
 8009bda:	e7d1      	b.n	8009b80 <_scanf_float+0x18c>
 8009bdc:	b97d      	cbnz	r5, 8009bfe <_scanf_float+0x20a>
 8009bde:	f1b9 0f00 	cmp.w	r9, #0
 8009be2:	f47f af3c 	bne.w	8009a5e <_scanf_float+0x6a>
 8009be6:	6822      	ldr	r2, [r4, #0]
 8009be8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009bec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009bf0:	f47f af39 	bne.w	8009a66 <_scanf_float+0x72>
 8009bf4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009bf8:	2501      	movs	r5, #1
 8009bfa:	6022      	str	r2, [r4, #0]
 8009bfc:	e7c0      	b.n	8009b80 <_scanf_float+0x18c>
 8009bfe:	2d03      	cmp	r5, #3
 8009c00:	d0e2      	beq.n	8009bc8 <_scanf_float+0x1d4>
 8009c02:	2d05      	cmp	r5, #5
 8009c04:	e7de      	b.n	8009bc4 <_scanf_float+0x1d0>
 8009c06:	2d02      	cmp	r5, #2
 8009c08:	f47f af26 	bne.w	8009a58 <_scanf_float+0x64>
 8009c0c:	2503      	movs	r5, #3
 8009c0e:	e7b7      	b.n	8009b80 <_scanf_float+0x18c>
 8009c10:	2d06      	cmp	r5, #6
 8009c12:	f47f af21 	bne.w	8009a58 <_scanf_float+0x64>
 8009c16:	2507      	movs	r5, #7
 8009c18:	e7b2      	b.n	8009b80 <_scanf_float+0x18c>
 8009c1a:	6822      	ldr	r2, [r4, #0]
 8009c1c:	0591      	lsls	r1, r2, #22
 8009c1e:	f57f af1b 	bpl.w	8009a58 <_scanf_float+0x64>
 8009c22:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009c26:	6022      	str	r2, [r4, #0]
 8009c28:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c2c:	e7a8      	b.n	8009b80 <_scanf_float+0x18c>
 8009c2e:	6822      	ldr	r2, [r4, #0]
 8009c30:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009c34:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009c38:	d006      	beq.n	8009c48 <_scanf_float+0x254>
 8009c3a:	0550      	lsls	r0, r2, #21
 8009c3c:	f57f af0c 	bpl.w	8009a58 <_scanf_float+0x64>
 8009c40:	f1b9 0f00 	cmp.w	r9, #0
 8009c44:	f43f af0f 	beq.w	8009a66 <_scanf_float+0x72>
 8009c48:	0591      	lsls	r1, r2, #22
 8009c4a:	bf58      	it	pl
 8009c4c:	9901      	ldrpl	r1, [sp, #4]
 8009c4e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c52:	bf58      	it	pl
 8009c54:	eba9 0101 	subpl.w	r1, r9, r1
 8009c58:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009c5c:	f04f 0900 	mov.w	r9, #0
 8009c60:	bf58      	it	pl
 8009c62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009c66:	6022      	str	r2, [r4, #0]
 8009c68:	e78a      	b.n	8009b80 <_scanf_float+0x18c>
 8009c6a:	f04f 0a03 	mov.w	sl, #3
 8009c6e:	e787      	b.n	8009b80 <_scanf_float+0x18c>
 8009c70:	4639      	mov	r1, r7
 8009c72:	4640      	mov	r0, r8
 8009c74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c78:	4798      	blx	r3
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	f43f aedf 	beq.w	8009a3e <_scanf_float+0x4a>
 8009c80:	e6ea      	b.n	8009a58 <_scanf_float+0x64>
 8009c82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c86:	463a      	mov	r2, r7
 8009c88:	4640      	mov	r0, r8
 8009c8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c8e:	4798      	blx	r3
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	6123      	str	r3, [r4, #16]
 8009c96:	e6ec      	b.n	8009a72 <_scanf_float+0x7e>
 8009c98:	1e6b      	subs	r3, r5, #1
 8009c9a:	2b06      	cmp	r3, #6
 8009c9c:	d825      	bhi.n	8009cea <_scanf_float+0x2f6>
 8009c9e:	2d02      	cmp	r5, #2
 8009ca0:	d836      	bhi.n	8009d10 <_scanf_float+0x31c>
 8009ca2:	455e      	cmp	r6, fp
 8009ca4:	f67f aee8 	bls.w	8009a78 <_scanf_float+0x84>
 8009ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cac:	463a      	mov	r2, r7
 8009cae:	4640      	mov	r0, r8
 8009cb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009cb4:	4798      	blx	r3
 8009cb6:	6923      	ldr	r3, [r4, #16]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	6123      	str	r3, [r4, #16]
 8009cbc:	e7f1      	b.n	8009ca2 <_scanf_float+0x2ae>
 8009cbe:	9802      	ldr	r0, [sp, #8]
 8009cc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cc4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009cc8:	463a      	mov	r2, r7
 8009cca:	9002      	str	r0, [sp, #8]
 8009ccc:	4640      	mov	r0, r8
 8009cce:	4798      	blx	r3
 8009cd0:	6923      	ldr	r3, [r4, #16]
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	6123      	str	r3, [r4, #16]
 8009cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cda:	fa5f fa8a 	uxtb.w	sl, sl
 8009cde:	f1ba 0f02 	cmp.w	sl, #2
 8009ce2:	d1ec      	bne.n	8009cbe <_scanf_float+0x2ca>
 8009ce4:	3d03      	subs	r5, #3
 8009ce6:	b2ed      	uxtb	r5, r5
 8009ce8:	1b76      	subs	r6, r6, r5
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	05da      	lsls	r2, r3, #23
 8009cee:	d52f      	bpl.n	8009d50 <_scanf_float+0x35c>
 8009cf0:	055b      	lsls	r3, r3, #21
 8009cf2:	d510      	bpl.n	8009d16 <_scanf_float+0x322>
 8009cf4:	455e      	cmp	r6, fp
 8009cf6:	f67f aebf 	bls.w	8009a78 <_scanf_float+0x84>
 8009cfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cfe:	463a      	mov	r2, r7
 8009d00:	4640      	mov	r0, r8
 8009d02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d06:	4798      	blx	r3
 8009d08:	6923      	ldr	r3, [r4, #16]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	6123      	str	r3, [r4, #16]
 8009d0e:	e7f1      	b.n	8009cf4 <_scanf_float+0x300>
 8009d10:	46aa      	mov	sl, r5
 8009d12:	9602      	str	r6, [sp, #8]
 8009d14:	e7df      	b.n	8009cd6 <_scanf_float+0x2e2>
 8009d16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	2965      	cmp	r1, #101	; 0x65
 8009d1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d22:	f106 35ff 	add.w	r5, r6, #4294967295
 8009d26:	6123      	str	r3, [r4, #16]
 8009d28:	d00c      	beq.n	8009d44 <_scanf_float+0x350>
 8009d2a:	2945      	cmp	r1, #69	; 0x45
 8009d2c:	d00a      	beq.n	8009d44 <_scanf_float+0x350>
 8009d2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d32:	463a      	mov	r2, r7
 8009d34:	4640      	mov	r0, r8
 8009d36:	4798      	blx	r3
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	1eb5      	subs	r5, r6, #2
 8009d42:	6123      	str	r3, [r4, #16]
 8009d44:	463a      	mov	r2, r7
 8009d46:	4640      	mov	r0, r8
 8009d48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d4c:	4798      	blx	r3
 8009d4e:	462e      	mov	r6, r5
 8009d50:	6825      	ldr	r5, [r4, #0]
 8009d52:	f015 0510 	ands.w	r5, r5, #16
 8009d56:	d155      	bne.n	8009e04 <_scanf_float+0x410>
 8009d58:	7035      	strb	r5, [r6, #0]
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d64:	d11d      	bne.n	8009da2 <_scanf_float+0x3ae>
 8009d66:	9b01      	ldr	r3, [sp, #4]
 8009d68:	454b      	cmp	r3, r9
 8009d6a:	eba3 0209 	sub.w	r2, r3, r9
 8009d6e:	d125      	bne.n	8009dbc <_scanf_float+0x3c8>
 8009d70:	2200      	movs	r2, #0
 8009d72:	4659      	mov	r1, fp
 8009d74:	4640      	mov	r0, r8
 8009d76:	f002 fdcf 	bl	800c918 <_strtod_r>
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	f8d4 c000 	ldr.w	ip, [r4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f01c 0f02 	tst.w	ip, #2
 8009d86:	4606      	mov	r6, r0
 8009d88:	460f      	mov	r7, r1
 8009d8a:	f103 0204 	add.w	r2, r3, #4
 8009d8e:	d020      	beq.n	8009dd2 <_scanf_float+0x3de>
 8009d90:	9903      	ldr	r1, [sp, #12]
 8009d92:	600a      	str	r2, [r1, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	e9c3 6700 	strd	r6, r7, [r3]
 8009d9a:	68e3      	ldr	r3, [r4, #12]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	60e3      	str	r3, [r4, #12]
 8009da0:	e66b      	b.n	8009a7a <_scanf_float+0x86>
 8009da2:	9b04      	ldr	r3, [sp, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0e3      	beq.n	8009d70 <_scanf_float+0x37c>
 8009da8:	9905      	ldr	r1, [sp, #20]
 8009daa:	230a      	movs	r3, #10
 8009dac:	462a      	mov	r2, r5
 8009dae:	4640      	mov	r0, r8
 8009db0:	3101      	adds	r1, #1
 8009db2:	f002 fe35 	bl	800ca20 <_strtol_r>
 8009db6:	9b04      	ldr	r3, [sp, #16]
 8009db8:	9e05      	ldr	r6, [sp, #20]
 8009dba:	1ac2      	subs	r2, r0, r3
 8009dbc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009dc0:	429e      	cmp	r6, r3
 8009dc2:	bf28      	it	cs
 8009dc4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009dc8:	4630      	mov	r0, r6
 8009dca:	490f      	ldr	r1, [pc, #60]	; (8009e08 <_scanf_float+0x414>)
 8009dcc:	f000 f958 	bl	800a080 <siprintf>
 8009dd0:	e7ce      	b.n	8009d70 <_scanf_float+0x37c>
 8009dd2:	f01c 0f04 	tst.w	ip, #4
 8009dd6:	d1db      	bne.n	8009d90 <_scanf_float+0x39c>
 8009dd8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009ddc:	f8cc 2000 	str.w	r2, [ip]
 8009de0:	f8d3 8000 	ldr.w	r8, [r3]
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	f7f6 ff30 	bl	8000c4c <__aeabi_dcmpun>
 8009dec:	b128      	cbz	r0, 8009dfa <_scanf_float+0x406>
 8009dee:	4807      	ldr	r0, [pc, #28]	; (8009e0c <_scanf_float+0x418>)
 8009df0:	f000 fb52 	bl	800a498 <nanf>
 8009df4:	f8c8 0000 	str.w	r0, [r8]
 8009df8:	e7cf      	b.n	8009d9a <_scanf_float+0x3a6>
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	f7f6 ff83 	bl	8000d08 <__aeabi_d2f>
 8009e02:	e7f7      	b.n	8009df4 <_scanf_float+0x400>
 8009e04:	2500      	movs	r5, #0
 8009e06:	e638      	b.n	8009a7a <_scanf_float+0x86>
 8009e08:	0800ef8c 	.word	0x0800ef8c
 8009e0c:	0800efcc 	.word	0x0800efcc

08009e10 <std>:
 8009e10:	2300      	movs	r3, #0
 8009e12:	b510      	push	{r4, lr}
 8009e14:	4604      	mov	r4, r0
 8009e16:	e9c0 3300 	strd	r3, r3, [r0]
 8009e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e1e:	6083      	str	r3, [r0, #8]
 8009e20:	8181      	strh	r1, [r0, #12]
 8009e22:	6643      	str	r3, [r0, #100]	; 0x64
 8009e24:	81c2      	strh	r2, [r0, #14]
 8009e26:	6183      	str	r3, [r0, #24]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	305c      	adds	r0, #92	; 0x5c
 8009e2e:	f000 fa85 	bl	800a33c <memset>
 8009e32:	4b0d      	ldr	r3, [pc, #52]	; (8009e68 <std+0x58>)
 8009e34:	6224      	str	r4, [r4, #32]
 8009e36:	6263      	str	r3, [r4, #36]	; 0x24
 8009e38:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <std+0x5c>)
 8009e3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e3c:	4b0c      	ldr	r3, [pc, #48]	; (8009e70 <std+0x60>)
 8009e3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e40:	4b0c      	ldr	r3, [pc, #48]	; (8009e74 <std+0x64>)
 8009e42:	6323      	str	r3, [r4, #48]	; 0x30
 8009e44:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <std+0x68>)
 8009e46:	429c      	cmp	r4, r3
 8009e48:	d006      	beq.n	8009e58 <std+0x48>
 8009e4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009e4e:	4294      	cmp	r4, r2
 8009e50:	d002      	beq.n	8009e58 <std+0x48>
 8009e52:	33d0      	adds	r3, #208	; 0xd0
 8009e54:	429c      	cmp	r4, r3
 8009e56:	d105      	bne.n	8009e64 <std+0x54>
 8009e58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e60:	f000 bafa 	b.w	800a458 <__retarget_lock_init_recursive>
 8009e64:	bd10      	pop	{r4, pc}
 8009e66:	bf00      	nop
 8009e68:	0800a115 	.word	0x0800a115
 8009e6c:	0800a13b 	.word	0x0800a13b
 8009e70:	0800a173 	.word	0x0800a173
 8009e74:	0800a197 	.word	0x0800a197
 8009e78:	20001470 	.word	0x20001470

08009e7c <stdio_exit_handler>:
 8009e7c:	4a02      	ldr	r2, [pc, #8]	; (8009e88 <stdio_exit_handler+0xc>)
 8009e7e:	4903      	ldr	r1, [pc, #12]	; (8009e8c <stdio_exit_handler+0x10>)
 8009e80:	4803      	ldr	r0, [pc, #12]	; (8009e90 <stdio_exit_handler+0x14>)
 8009e82:	f000 b869 	b.w	8009f58 <_fwalk_sglue>
 8009e86:	bf00      	nop
 8009e88:	200002b8 	.word	0x200002b8
 8009e8c:	0800d699 	.word	0x0800d699
 8009e90:	200002c4 	.word	0x200002c4

08009e94 <cleanup_stdio>:
 8009e94:	6841      	ldr	r1, [r0, #4]
 8009e96:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <cleanup_stdio+0x34>)
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	4299      	cmp	r1, r3
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	d001      	beq.n	8009ea4 <cleanup_stdio+0x10>
 8009ea0:	f003 fbfa 	bl	800d698 <_fflush_r>
 8009ea4:	68a1      	ldr	r1, [r4, #8]
 8009ea6:	4b09      	ldr	r3, [pc, #36]	; (8009ecc <cleanup_stdio+0x38>)
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d002      	beq.n	8009eb2 <cleanup_stdio+0x1e>
 8009eac:	4620      	mov	r0, r4
 8009eae:	f003 fbf3 	bl	800d698 <_fflush_r>
 8009eb2:	68e1      	ldr	r1, [r4, #12]
 8009eb4:	4b06      	ldr	r3, [pc, #24]	; (8009ed0 <cleanup_stdio+0x3c>)
 8009eb6:	4299      	cmp	r1, r3
 8009eb8:	d004      	beq.n	8009ec4 <cleanup_stdio+0x30>
 8009eba:	4620      	mov	r0, r4
 8009ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ec0:	f003 bbea 	b.w	800d698 <_fflush_r>
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20001470 	.word	0x20001470
 8009ecc:	200014d8 	.word	0x200014d8
 8009ed0:	20001540 	.word	0x20001540

08009ed4 <global_stdio_init.part.0>:
 8009ed4:	b510      	push	{r4, lr}
 8009ed6:	4b0b      	ldr	r3, [pc, #44]	; (8009f04 <global_stdio_init.part.0+0x30>)
 8009ed8:	4c0b      	ldr	r4, [pc, #44]	; (8009f08 <global_stdio_init.part.0+0x34>)
 8009eda:	4a0c      	ldr	r2, [pc, #48]	; (8009f0c <global_stdio_init.part.0+0x38>)
 8009edc:	4620      	mov	r0, r4
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	2104      	movs	r1, #4
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f7ff ff94 	bl	8009e10 <std>
 8009ee8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009eec:	2201      	movs	r2, #1
 8009eee:	2109      	movs	r1, #9
 8009ef0:	f7ff ff8e 	bl	8009e10 <std>
 8009ef4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009ef8:	2202      	movs	r2, #2
 8009efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009efe:	2112      	movs	r1, #18
 8009f00:	f7ff bf86 	b.w	8009e10 <std>
 8009f04:	200015a8 	.word	0x200015a8
 8009f08:	20001470 	.word	0x20001470
 8009f0c:	08009e7d 	.word	0x08009e7d

08009f10 <__sfp_lock_acquire>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__sfp_lock_acquire+0x8>)
 8009f12:	f000 baa2 	b.w	800a45a <__retarget_lock_acquire_recursive>
 8009f16:	bf00      	nop
 8009f18:	200015b1 	.word	0x200015b1

08009f1c <__sfp_lock_release>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <__sfp_lock_release+0x8>)
 8009f1e:	f000 ba9d 	b.w	800a45c <__retarget_lock_release_recursive>
 8009f22:	bf00      	nop
 8009f24:	200015b1 	.word	0x200015b1

08009f28 <__sinit>:
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	f7ff fff0 	bl	8009f10 <__sfp_lock_acquire>
 8009f30:	6a23      	ldr	r3, [r4, #32]
 8009f32:	b11b      	cbz	r3, 8009f3c <__sinit+0x14>
 8009f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f38:	f7ff bff0 	b.w	8009f1c <__sfp_lock_release>
 8009f3c:	4b04      	ldr	r3, [pc, #16]	; (8009f50 <__sinit+0x28>)
 8009f3e:	6223      	str	r3, [r4, #32]
 8009f40:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <__sinit+0x2c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1f5      	bne.n	8009f34 <__sinit+0xc>
 8009f48:	f7ff ffc4 	bl	8009ed4 <global_stdio_init.part.0>
 8009f4c:	e7f2      	b.n	8009f34 <__sinit+0xc>
 8009f4e:	bf00      	nop
 8009f50:	08009e95 	.word	0x08009e95
 8009f54:	200015a8 	.word	0x200015a8

08009f58 <_fwalk_sglue>:
 8009f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	4688      	mov	r8, r1
 8009f60:	4614      	mov	r4, r2
 8009f62:	2600      	movs	r6, #0
 8009f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f68:	f1b9 0901 	subs.w	r9, r9, #1
 8009f6c:	d505      	bpl.n	8009f7a <_fwalk_sglue+0x22>
 8009f6e:	6824      	ldr	r4, [r4, #0]
 8009f70:	2c00      	cmp	r4, #0
 8009f72:	d1f7      	bne.n	8009f64 <_fwalk_sglue+0xc>
 8009f74:	4630      	mov	r0, r6
 8009f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7a:	89ab      	ldrh	r3, [r5, #12]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d907      	bls.n	8009f90 <_fwalk_sglue+0x38>
 8009f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f84:	3301      	adds	r3, #1
 8009f86:	d003      	beq.n	8009f90 <_fwalk_sglue+0x38>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	47c0      	blx	r8
 8009f8e:	4306      	orrs	r6, r0
 8009f90:	3568      	adds	r5, #104	; 0x68
 8009f92:	e7e9      	b.n	8009f68 <_fwalk_sglue+0x10>

08009f94 <iprintf>:
 8009f94:	b40f      	push	{r0, r1, r2, r3}
 8009f96:	b507      	push	{r0, r1, r2, lr}
 8009f98:	4906      	ldr	r1, [pc, #24]	; (8009fb4 <iprintf+0x20>)
 8009f9a:	ab04      	add	r3, sp, #16
 8009f9c:	6808      	ldr	r0, [r1, #0]
 8009f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fa2:	6881      	ldr	r1, [r0, #8]
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	f003 f88f 	bl	800d0c8 <_vfiprintf_r>
 8009faa:	b003      	add	sp, #12
 8009fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fb0:	b004      	add	sp, #16
 8009fb2:	4770      	bx	lr
 8009fb4:	20000310 	.word	0x20000310

08009fb8 <putchar>:
 8009fb8:	4b02      	ldr	r3, [pc, #8]	; (8009fc4 <putchar+0xc>)
 8009fba:	4601      	mov	r1, r0
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	6882      	ldr	r2, [r0, #8]
 8009fc0:	f003 bc05 	b.w	800d7ce <_putc_r>
 8009fc4:	20000310 	.word	0x20000310

08009fc8 <_puts_r>:
 8009fc8:	6a03      	ldr	r3, [r0, #32]
 8009fca:	b570      	push	{r4, r5, r6, lr}
 8009fcc:	4605      	mov	r5, r0
 8009fce:	460e      	mov	r6, r1
 8009fd0:	6884      	ldr	r4, [r0, #8]
 8009fd2:	b90b      	cbnz	r3, 8009fd8 <_puts_r+0x10>
 8009fd4:	f7ff ffa8 	bl	8009f28 <__sinit>
 8009fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fda:	07db      	lsls	r3, r3, #31
 8009fdc:	d405      	bmi.n	8009fea <_puts_r+0x22>
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	0598      	lsls	r0, r3, #22
 8009fe2:	d402      	bmi.n	8009fea <_puts_r+0x22>
 8009fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fe6:	f000 fa38 	bl	800a45a <__retarget_lock_acquire_recursive>
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	0719      	lsls	r1, r3, #28
 8009fee:	d513      	bpl.n	800a018 <_puts_r+0x50>
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	b18b      	cbz	r3, 800a018 <_puts_r+0x50>
 8009ff4:	3e01      	subs	r6, #1
 8009ff6:	68a3      	ldr	r3, [r4, #8]
 8009ff8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	60a3      	str	r3, [r4, #8]
 800a000:	b9e9      	cbnz	r1, 800a03e <_puts_r+0x76>
 800a002:	2b00      	cmp	r3, #0
 800a004:	da2e      	bge.n	800a064 <_puts_r+0x9c>
 800a006:	4622      	mov	r2, r4
 800a008:	210a      	movs	r1, #10
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 f900 	bl	800a210 <__swbuf_r>
 800a010:	3001      	adds	r0, #1
 800a012:	d007      	beq.n	800a024 <_puts_r+0x5c>
 800a014:	250a      	movs	r5, #10
 800a016:	e007      	b.n	800a028 <_puts_r+0x60>
 800a018:	4621      	mov	r1, r4
 800a01a:	4628      	mov	r0, r5
 800a01c:	f000 f936 	bl	800a28c <__swsetup_r>
 800a020:	2800      	cmp	r0, #0
 800a022:	d0e7      	beq.n	8009ff4 <_puts_r+0x2c>
 800a024:	f04f 35ff 	mov.w	r5, #4294967295
 800a028:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a02a:	07da      	lsls	r2, r3, #31
 800a02c:	d405      	bmi.n	800a03a <_puts_r+0x72>
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	059b      	lsls	r3, r3, #22
 800a032:	d402      	bmi.n	800a03a <_puts_r+0x72>
 800a034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a036:	f000 fa11 	bl	800a45c <__retarget_lock_release_recursive>
 800a03a:	4628      	mov	r0, r5
 800a03c:	bd70      	pop	{r4, r5, r6, pc}
 800a03e:	2b00      	cmp	r3, #0
 800a040:	da04      	bge.n	800a04c <_puts_r+0x84>
 800a042:	69a2      	ldr	r2, [r4, #24]
 800a044:	429a      	cmp	r2, r3
 800a046:	dc06      	bgt.n	800a056 <_puts_r+0x8e>
 800a048:	290a      	cmp	r1, #10
 800a04a:	d004      	beq.n	800a056 <_puts_r+0x8e>
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	1c5a      	adds	r2, r3, #1
 800a050:	6022      	str	r2, [r4, #0]
 800a052:	7019      	strb	r1, [r3, #0]
 800a054:	e7cf      	b.n	8009ff6 <_puts_r+0x2e>
 800a056:	4622      	mov	r2, r4
 800a058:	4628      	mov	r0, r5
 800a05a:	f000 f8d9 	bl	800a210 <__swbuf_r>
 800a05e:	3001      	adds	r0, #1
 800a060:	d1c9      	bne.n	8009ff6 <_puts_r+0x2e>
 800a062:	e7df      	b.n	800a024 <_puts_r+0x5c>
 800a064:	250a      	movs	r5, #10
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	6022      	str	r2, [r4, #0]
 800a06c:	701d      	strb	r5, [r3, #0]
 800a06e:	e7db      	b.n	800a028 <_puts_r+0x60>

0800a070 <puts>:
 800a070:	4b02      	ldr	r3, [pc, #8]	; (800a07c <puts+0xc>)
 800a072:	4601      	mov	r1, r0
 800a074:	6818      	ldr	r0, [r3, #0]
 800a076:	f7ff bfa7 	b.w	8009fc8 <_puts_r>
 800a07a:	bf00      	nop
 800a07c:	20000310 	.word	0x20000310

0800a080 <siprintf>:
 800a080:	b40e      	push	{r1, r2, r3}
 800a082:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a086:	b500      	push	{lr}
 800a088:	b09c      	sub	sp, #112	; 0x70
 800a08a:	ab1d      	add	r3, sp, #116	; 0x74
 800a08c:	9002      	str	r0, [sp, #8]
 800a08e:	9006      	str	r0, [sp, #24]
 800a090:	9107      	str	r1, [sp, #28]
 800a092:	9104      	str	r1, [sp, #16]
 800a094:	4808      	ldr	r0, [pc, #32]	; (800a0b8 <siprintf+0x38>)
 800a096:	4909      	ldr	r1, [pc, #36]	; (800a0bc <siprintf+0x3c>)
 800a098:	f853 2b04 	ldr.w	r2, [r3], #4
 800a09c:	9105      	str	r1, [sp, #20]
 800a09e:	6800      	ldr	r0, [r0, #0]
 800a0a0:	a902      	add	r1, sp, #8
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	f002 fd18 	bl	800cad8 <_svfiprintf_r>
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	9b02      	ldr	r3, [sp, #8]
 800a0ac:	701a      	strb	r2, [r3, #0]
 800a0ae:	b01c      	add	sp, #112	; 0x70
 800a0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0b4:	b003      	add	sp, #12
 800a0b6:	4770      	bx	lr
 800a0b8:	20000310 	.word	0x20000310
 800a0bc:	ffff0208 	.word	0xffff0208

0800a0c0 <siscanf>:
 800a0c0:	b40e      	push	{r1, r2, r3}
 800a0c2:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a0c6:	b530      	push	{r4, r5, lr}
 800a0c8:	b09c      	sub	sp, #112	; 0x70
 800a0ca:	ac1f      	add	r4, sp, #124	; 0x7c
 800a0cc:	f854 5b04 	ldr.w	r5, [r4], #4
 800a0d0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a0d4:	9002      	str	r0, [sp, #8]
 800a0d6:	9006      	str	r0, [sp, #24]
 800a0d8:	f7f6 f8a6 	bl	8000228 <strlen>
 800a0dc:	4b0b      	ldr	r3, [pc, #44]	; (800a10c <siscanf+0x4c>)
 800a0de:	9003      	str	r0, [sp, #12]
 800a0e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0e6:	9314      	str	r3, [sp, #80]	; 0x50
 800a0e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0ec:	9007      	str	r0, [sp, #28]
 800a0ee:	4808      	ldr	r0, [pc, #32]	; (800a110 <siscanf+0x50>)
 800a0f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a0f4:	462a      	mov	r2, r5
 800a0f6:	4623      	mov	r3, r4
 800a0f8:	a902      	add	r1, sp, #8
 800a0fa:	6800      	ldr	r0, [r0, #0]
 800a0fc:	9401      	str	r4, [sp, #4]
 800a0fe:	f002 fe43 	bl	800cd88 <__ssvfiscanf_r>
 800a102:	b01c      	add	sp, #112	; 0x70
 800a104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a108:	b003      	add	sp, #12
 800a10a:	4770      	bx	lr
 800a10c:	0800a137 	.word	0x0800a137
 800a110:	20000310 	.word	0x20000310

0800a114 <__sread>:
 800a114:	b510      	push	{r4, lr}
 800a116:	460c      	mov	r4, r1
 800a118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a11c:	f000 f960 	bl	800a3e0 <_read_r>
 800a120:	2800      	cmp	r0, #0
 800a122:	bfab      	itete	ge
 800a124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a126:	89a3      	ldrhlt	r3, [r4, #12]
 800a128:	181b      	addge	r3, r3, r0
 800a12a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a12e:	bfac      	ite	ge
 800a130:	6563      	strge	r3, [r4, #84]	; 0x54
 800a132:	81a3      	strhlt	r3, [r4, #12]
 800a134:	bd10      	pop	{r4, pc}

0800a136 <__seofread>:
 800a136:	2000      	movs	r0, #0
 800a138:	4770      	bx	lr

0800a13a <__swrite>:
 800a13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a13e:	461f      	mov	r7, r3
 800a140:	898b      	ldrh	r3, [r1, #12]
 800a142:	4605      	mov	r5, r0
 800a144:	05db      	lsls	r3, r3, #23
 800a146:	460c      	mov	r4, r1
 800a148:	4616      	mov	r6, r2
 800a14a:	d505      	bpl.n	800a158 <__swrite+0x1e>
 800a14c:	2302      	movs	r3, #2
 800a14e:	2200      	movs	r2, #0
 800a150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a154:	f000 f932 	bl	800a3bc <_lseek_r>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	4632      	mov	r2, r6
 800a15c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	4628      	mov	r0, r5
 800a164:	463b      	mov	r3, r7
 800a166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a16a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a16e:	f7f7 b90d 	b.w	800138c <_write_r>

0800a172 <__sseek>:
 800a172:	b510      	push	{r4, lr}
 800a174:	460c      	mov	r4, r1
 800a176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a17a:	f000 f91f 	bl	800a3bc <_lseek_r>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	bf15      	itete	ne
 800a184:	6560      	strne	r0, [r4, #84]	; 0x54
 800a186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a18a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a18e:	81a3      	strheq	r3, [r4, #12]
 800a190:	bf18      	it	ne
 800a192:	81a3      	strhne	r3, [r4, #12]
 800a194:	bd10      	pop	{r4, pc}

0800a196 <__sclose>:
 800a196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a19a:	f000 b8ff 	b.w	800a39c <_close_r>

0800a19e <_vsniprintf_r>:
 800a19e:	b530      	push	{r4, r5, lr}
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	2c00      	cmp	r4, #0
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	b09b      	sub	sp, #108	; 0x6c
 800a1aa:	da05      	bge.n	800a1b8 <_vsniprintf_r+0x1a>
 800a1ac:	238b      	movs	r3, #139	; 0x8b
 800a1ae:	6003      	str	r3, [r0, #0]
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b4:	b01b      	add	sp, #108	; 0x6c
 800a1b6:	bd30      	pop	{r4, r5, pc}
 800a1b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a1bc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a1c0:	bf0c      	ite	eq
 800a1c2:	4623      	moveq	r3, r4
 800a1c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a1c8:	9302      	str	r3, [sp, #8]
 800a1ca:	9305      	str	r3, [sp, #20]
 800a1cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1d0:	9100      	str	r1, [sp, #0]
 800a1d2:	9104      	str	r1, [sp, #16]
 800a1d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a1d8:	4669      	mov	r1, sp
 800a1da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a1dc:	f002 fc7c 	bl	800cad8 <_svfiprintf_r>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	bfbc      	itt	lt
 800a1e4:	238b      	movlt	r3, #139	; 0x8b
 800a1e6:	602b      	strlt	r3, [r5, #0]
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	d0e3      	beq.n	800a1b4 <_vsniprintf_r+0x16>
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	9b00      	ldr	r3, [sp, #0]
 800a1f0:	701a      	strb	r2, [r3, #0]
 800a1f2:	e7df      	b.n	800a1b4 <_vsniprintf_r+0x16>

0800a1f4 <vsniprintf>:
 800a1f4:	b507      	push	{r0, r1, r2, lr}
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	460a      	mov	r2, r1
 800a1fc:	4601      	mov	r1, r0
 800a1fe:	4803      	ldr	r0, [pc, #12]	; (800a20c <vsniprintf+0x18>)
 800a200:	6800      	ldr	r0, [r0, #0]
 800a202:	f7ff ffcc 	bl	800a19e <_vsniprintf_r>
 800a206:	b003      	add	sp, #12
 800a208:	f85d fb04 	ldr.w	pc, [sp], #4
 800a20c:	20000310 	.word	0x20000310

0800a210 <__swbuf_r>:
 800a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a212:	460e      	mov	r6, r1
 800a214:	4614      	mov	r4, r2
 800a216:	4605      	mov	r5, r0
 800a218:	b118      	cbz	r0, 800a222 <__swbuf_r+0x12>
 800a21a:	6a03      	ldr	r3, [r0, #32]
 800a21c:	b90b      	cbnz	r3, 800a222 <__swbuf_r+0x12>
 800a21e:	f7ff fe83 	bl	8009f28 <__sinit>
 800a222:	69a3      	ldr	r3, [r4, #24]
 800a224:	60a3      	str	r3, [r4, #8]
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	071a      	lsls	r2, r3, #28
 800a22a:	d525      	bpl.n	800a278 <__swbuf_r+0x68>
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	b31b      	cbz	r3, 800a278 <__swbuf_r+0x68>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	6922      	ldr	r2, [r4, #16]
 800a234:	b2f6      	uxtb	r6, r6
 800a236:	1a98      	subs	r0, r3, r2
 800a238:	6963      	ldr	r3, [r4, #20]
 800a23a:	4637      	mov	r7, r6
 800a23c:	4283      	cmp	r3, r0
 800a23e:	dc04      	bgt.n	800a24a <__swbuf_r+0x3a>
 800a240:	4621      	mov	r1, r4
 800a242:	4628      	mov	r0, r5
 800a244:	f003 fa28 	bl	800d698 <_fflush_r>
 800a248:	b9e0      	cbnz	r0, 800a284 <__swbuf_r+0x74>
 800a24a:	68a3      	ldr	r3, [r4, #8]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	60a3      	str	r3, [r4, #8]
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	6022      	str	r2, [r4, #0]
 800a256:	701e      	strb	r6, [r3, #0]
 800a258:	6962      	ldr	r2, [r4, #20]
 800a25a:	1c43      	adds	r3, r0, #1
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d004      	beq.n	800a26a <__swbuf_r+0x5a>
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	07db      	lsls	r3, r3, #31
 800a264:	d506      	bpl.n	800a274 <__swbuf_r+0x64>
 800a266:	2e0a      	cmp	r6, #10
 800a268:	d104      	bne.n	800a274 <__swbuf_r+0x64>
 800a26a:	4621      	mov	r1, r4
 800a26c:	4628      	mov	r0, r5
 800a26e:	f003 fa13 	bl	800d698 <_fflush_r>
 800a272:	b938      	cbnz	r0, 800a284 <__swbuf_r+0x74>
 800a274:	4638      	mov	r0, r7
 800a276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a278:	4621      	mov	r1, r4
 800a27a:	4628      	mov	r0, r5
 800a27c:	f000 f806 	bl	800a28c <__swsetup_r>
 800a280:	2800      	cmp	r0, #0
 800a282:	d0d5      	beq.n	800a230 <__swbuf_r+0x20>
 800a284:	f04f 37ff 	mov.w	r7, #4294967295
 800a288:	e7f4      	b.n	800a274 <__swbuf_r+0x64>
	...

0800a28c <__swsetup_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4b2a      	ldr	r3, [pc, #168]	; (800a338 <__swsetup_r+0xac>)
 800a290:	4605      	mov	r5, r0
 800a292:	6818      	ldr	r0, [r3, #0]
 800a294:	460c      	mov	r4, r1
 800a296:	b118      	cbz	r0, 800a2a0 <__swsetup_r+0x14>
 800a298:	6a03      	ldr	r3, [r0, #32]
 800a29a:	b90b      	cbnz	r3, 800a2a0 <__swsetup_r+0x14>
 800a29c:	f7ff fe44 	bl	8009f28 <__sinit>
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2a6:	0718      	lsls	r0, r3, #28
 800a2a8:	d422      	bmi.n	800a2f0 <__swsetup_r+0x64>
 800a2aa:	06d9      	lsls	r1, r3, #27
 800a2ac:	d407      	bmi.n	800a2be <__swsetup_r+0x32>
 800a2ae:	2309      	movs	r3, #9
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	e034      	b.n	800a328 <__swsetup_r+0x9c>
 800a2be:	0758      	lsls	r0, r3, #29
 800a2c0:	d512      	bpl.n	800a2e8 <__swsetup_r+0x5c>
 800a2c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2c4:	b141      	cbz	r1, 800a2d8 <__swsetup_r+0x4c>
 800a2c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2ca:	4299      	cmp	r1, r3
 800a2cc:	d002      	beq.n	800a2d4 <__swsetup_r+0x48>
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 ff72 	bl	800b1b8 <_free_r>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6363      	str	r3, [r4, #52]	; 0x34
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2de:	81a3      	strh	r3, [r4, #12]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	6063      	str	r3, [r4, #4]
 800a2e4:	6923      	ldr	r3, [r4, #16]
 800a2e6:	6023      	str	r3, [r4, #0]
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	f043 0308 	orr.w	r3, r3, #8
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	6923      	ldr	r3, [r4, #16]
 800a2f2:	b94b      	cbnz	r3, 800a308 <__swsetup_r+0x7c>
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2fe:	d003      	beq.n	800a308 <__swsetup_r+0x7c>
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f003 fa27 	bl	800d756 <__smakebuf_r>
 800a308:	89a0      	ldrh	r0, [r4, #12]
 800a30a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a30e:	f010 0301 	ands.w	r3, r0, #1
 800a312:	d00a      	beq.n	800a32a <__swsetup_r+0x9e>
 800a314:	2300      	movs	r3, #0
 800a316:	60a3      	str	r3, [r4, #8]
 800a318:	6963      	ldr	r3, [r4, #20]
 800a31a:	425b      	negs	r3, r3
 800a31c:	61a3      	str	r3, [r4, #24]
 800a31e:	6923      	ldr	r3, [r4, #16]
 800a320:	b943      	cbnz	r3, 800a334 <__swsetup_r+0xa8>
 800a322:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a326:	d1c4      	bne.n	800a2b2 <__swsetup_r+0x26>
 800a328:	bd38      	pop	{r3, r4, r5, pc}
 800a32a:	0781      	lsls	r1, r0, #30
 800a32c:	bf58      	it	pl
 800a32e:	6963      	ldrpl	r3, [r4, #20]
 800a330:	60a3      	str	r3, [r4, #8]
 800a332:	e7f4      	b.n	800a31e <__swsetup_r+0x92>
 800a334:	2000      	movs	r0, #0
 800a336:	e7f7      	b.n	800a328 <__swsetup_r+0x9c>
 800a338:	20000310 	.word	0x20000310

0800a33c <memset>:
 800a33c:	4603      	mov	r3, r0
 800a33e:	4402      	add	r2, r0
 800a340:	4293      	cmp	r3, r2
 800a342:	d100      	bne.n	800a346 <memset+0xa>
 800a344:	4770      	bx	lr
 800a346:	f803 1b01 	strb.w	r1, [r3], #1
 800a34a:	e7f9      	b.n	800a340 <memset+0x4>

0800a34c <strchr>:
 800a34c:	4603      	mov	r3, r0
 800a34e:	b2c9      	uxtb	r1, r1
 800a350:	4618      	mov	r0, r3
 800a352:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a356:	b112      	cbz	r2, 800a35e <strchr+0x12>
 800a358:	428a      	cmp	r2, r1
 800a35a:	d1f9      	bne.n	800a350 <strchr+0x4>
 800a35c:	4770      	bx	lr
 800a35e:	2900      	cmp	r1, #0
 800a360:	bf18      	it	ne
 800a362:	2000      	movne	r0, #0
 800a364:	4770      	bx	lr

0800a366 <strstr>:
 800a366:	780a      	ldrb	r2, [r1, #0]
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	b96a      	cbnz	r2, 800a388 <strstr+0x22>
 800a36c:	bd70      	pop	{r4, r5, r6, pc}
 800a36e:	429a      	cmp	r2, r3
 800a370:	d109      	bne.n	800a386 <strstr+0x20>
 800a372:	460c      	mov	r4, r1
 800a374:	4605      	mov	r5, r0
 800a376:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d0f6      	beq.n	800a36c <strstr+0x6>
 800a37e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a382:	429e      	cmp	r6, r3
 800a384:	d0f7      	beq.n	800a376 <strstr+0x10>
 800a386:	3001      	adds	r0, #1
 800a388:	7803      	ldrb	r3, [r0, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1ef      	bne.n	800a36e <strstr+0x8>
 800a38e:	4618      	mov	r0, r3
 800a390:	e7ec      	b.n	800a36c <strstr+0x6>
	...

0800a394 <_localeconv_r>:
 800a394:	4800      	ldr	r0, [pc, #0]	; (800a398 <_localeconv_r+0x4>)
 800a396:	4770      	bx	lr
 800a398:	20000404 	.word	0x20000404

0800a39c <_close_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	2300      	movs	r3, #0
 800a3a0:	4d05      	ldr	r5, [pc, #20]	; (800a3b8 <_close_r+0x1c>)
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	602b      	str	r3, [r5, #0]
 800a3a8:	f7f7 fbfa 	bl	8001ba0 <_close>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_close_r+0x1a>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_close_r+0x1a>
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	200015ac 	.word	0x200015ac

0800a3bc <_lseek_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	4d05      	ldr	r5, [pc, #20]	; (800a3dc <_lseek_r+0x20>)
 800a3c8:	602a      	str	r2, [r5, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f7f7 fc0c 	bl	8001be8 <_lseek>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d102      	bne.n	800a3da <_lseek_r+0x1e>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	b103      	cbz	r3, 800a3da <_lseek_r+0x1e>
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	200015ac 	.word	0x200015ac

0800a3e0 <_read_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4d05      	ldr	r5, [pc, #20]	; (800a400 <_read_r+0x20>)
 800a3ec:	602a      	str	r2, [r5, #0]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	f7f7 fbb9 	bl	8001b66 <_read>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_read_r+0x1e>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_read_r+0x1e>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	200015ac 	.word	0x200015ac

0800a404 <__errno>:
 800a404:	4b01      	ldr	r3, [pc, #4]	; (800a40c <__errno+0x8>)
 800a406:	6818      	ldr	r0, [r3, #0]
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	20000310 	.word	0x20000310

0800a410 <__libc_init_array>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	2600      	movs	r6, #0
 800a414:	4d0c      	ldr	r5, [pc, #48]	; (800a448 <__libc_init_array+0x38>)
 800a416:	4c0d      	ldr	r4, [pc, #52]	; (800a44c <__libc_init_array+0x3c>)
 800a418:	1b64      	subs	r4, r4, r5
 800a41a:	10a4      	asrs	r4, r4, #2
 800a41c:	42a6      	cmp	r6, r4
 800a41e:	d109      	bne.n	800a434 <__libc_init_array+0x24>
 800a420:	f003 ff62 	bl	800e2e8 <_init>
 800a424:	2600      	movs	r6, #0
 800a426:	4d0a      	ldr	r5, [pc, #40]	; (800a450 <__libc_init_array+0x40>)
 800a428:	4c0a      	ldr	r4, [pc, #40]	; (800a454 <__libc_init_array+0x44>)
 800a42a:	1b64      	subs	r4, r4, r5
 800a42c:	10a4      	asrs	r4, r4, #2
 800a42e:	42a6      	cmp	r6, r4
 800a430:	d105      	bne.n	800a43e <__libc_init_array+0x2e>
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	f855 3b04 	ldr.w	r3, [r5], #4
 800a438:	4798      	blx	r3
 800a43a:	3601      	adds	r6, #1
 800a43c:	e7ee      	b.n	800a41c <__libc_init_array+0xc>
 800a43e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a442:	4798      	blx	r3
 800a444:	3601      	adds	r6, #1
 800a446:	e7f2      	b.n	800a42e <__libc_init_array+0x1e>
 800a448:	0800f3a0 	.word	0x0800f3a0
 800a44c:	0800f3a0 	.word	0x0800f3a0
 800a450:	0800f3a0 	.word	0x0800f3a0
 800a454:	0800f3a4 	.word	0x0800f3a4

0800a458 <__retarget_lock_init_recursive>:
 800a458:	4770      	bx	lr

0800a45a <__retarget_lock_acquire_recursive>:
 800a45a:	4770      	bx	lr

0800a45c <__retarget_lock_release_recursive>:
 800a45c:	4770      	bx	lr

0800a45e <memchr>:
 800a45e:	4603      	mov	r3, r0
 800a460:	b510      	push	{r4, lr}
 800a462:	b2c9      	uxtb	r1, r1
 800a464:	4402      	add	r2, r0
 800a466:	4293      	cmp	r3, r2
 800a468:	4618      	mov	r0, r3
 800a46a:	d101      	bne.n	800a470 <memchr+0x12>
 800a46c:	2000      	movs	r0, #0
 800a46e:	e003      	b.n	800a478 <memchr+0x1a>
 800a470:	7804      	ldrb	r4, [r0, #0]
 800a472:	3301      	adds	r3, #1
 800a474:	428c      	cmp	r4, r1
 800a476:	d1f6      	bne.n	800a466 <memchr+0x8>
 800a478:	bd10      	pop	{r4, pc}

0800a47a <memcpy>:
 800a47a:	440a      	add	r2, r1
 800a47c:	4291      	cmp	r1, r2
 800a47e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a482:	d100      	bne.n	800a486 <memcpy+0xc>
 800a484:	4770      	bx	lr
 800a486:	b510      	push	{r4, lr}
 800a488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a48c:	4291      	cmp	r1, r2
 800a48e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a492:	d1f9      	bne.n	800a488 <memcpy+0xe>
 800a494:	bd10      	pop	{r4, pc}
	...

0800a498 <nanf>:
 800a498:	4800      	ldr	r0, [pc, #0]	; (800a49c <nanf+0x4>)
 800a49a:	4770      	bx	lr
 800a49c:	7fc00000 	.word	0x7fc00000

0800a4a0 <__assert_func>:
 800a4a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4a2:	4614      	mov	r4, r2
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <__assert_func+0x2c>)
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68d8      	ldr	r0, [r3, #12]
 800a4ae:	b14c      	cbz	r4, 800a4c4 <__assert_func+0x24>
 800a4b0:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <__assert_func+0x30>)
 800a4b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4b6:	9100      	str	r1, [sp, #0]
 800a4b8:	462b      	mov	r3, r5
 800a4ba:	4906      	ldr	r1, [pc, #24]	; (800a4d4 <__assert_func+0x34>)
 800a4bc:	f003 f914 	bl	800d6e8 <fiprintf>
 800a4c0:	f003 fa8e 	bl	800d9e0 <abort>
 800a4c4:	4b04      	ldr	r3, [pc, #16]	; (800a4d8 <__assert_func+0x38>)
 800a4c6:	461c      	mov	r4, r3
 800a4c8:	e7f3      	b.n	800a4b2 <__assert_func+0x12>
 800a4ca:	bf00      	nop
 800a4cc:	20000310 	.word	0x20000310
 800a4d0:	0800ef91 	.word	0x0800ef91
 800a4d4:	0800ef9e 	.word	0x0800ef9e
 800a4d8:	0800efcc 	.word	0x0800efcc

0800a4dc <quorem>:
 800a4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	6903      	ldr	r3, [r0, #16]
 800a4e2:	690c      	ldr	r4, [r1, #16]
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	42a3      	cmp	r3, r4
 800a4e8:	db7f      	blt.n	800a5ea <quorem+0x10e>
 800a4ea:	3c01      	subs	r4, #1
 800a4ec:	f100 0514 	add.w	r5, r0, #20
 800a4f0:	f101 0814 	add.w	r8, r1, #20
 800a4f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a502:	3301      	adds	r3, #1
 800a504:	429a      	cmp	r2, r3
 800a506:	fbb2 f6f3 	udiv	r6, r2, r3
 800a50a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a50e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a512:	d331      	bcc.n	800a578 <quorem+0x9c>
 800a514:	f04f 0e00 	mov.w	lr, #0
 800a518:	4640      	mov	r0, r8
 800a51a:	46ac      	mov	ip, r5
 800a51c:	46f2      	mov	sl, lr
 800a51e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a522:	b293      	uxth	r3, r2
 800a524:	fb06 e303 	mla	r3, r6, r3, lr
 800a528:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a52c:	0c1a      	lsrs	r2, r3, #16
 800a52e:	b29b      	uxth	r3, r3
 800a530:	fb06 220e 	mla	r2, r6, lr, r2
 800a534:	ebaa 0303 	sub.w	r3, sl, r3
 800a538:	f8dc a000 	ldr.w	sl, [ip]
 800a53c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a540:	fa1f fa8a 	uxth.w	sl, sl
 800a544:	4453      	add	r3, sl
 800a546:	f8dc a000 	ldr.w	sl, [ip]
 800a54a:	b292      	uxth	r2, r2
 800a54c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a554:	b29b      	uxth	r3, r3
 800a556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a55a:	4581      	cmp	r9, r0
 800a55c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a560:	f84c 3b04 	str.w	r3, [ip], #4
 800a564:	d2db      	bcs.n	800a51e <quorem+0x42>
 800a566:	f855 300b 	ldr.w	r3, [r5, fp]
 800a56a:	b92b      	cbnz	r3, 800a578 <quorem+0x9c>
 800a56c:	9b01      	ldr	r3, [sp, #4]
 800a56e:	3b04      	subs	r3, #4
 800a570:	429d      	cmp	r5, r3
 800a572:	461a      	mov	r2, r3
 800a574:	d32d      	bcc.n	800a5d2 <quorem+0xf6>
 800a576:	613c      	str	r4, [r7, #16]
 800a578:	4638      	mov	r0, r7
 800a57a:	f001 f9dd 	bl	800b938 <__mcmp>
 800a57e:	2800      	cmp	r0, #0
 800a580:	db23      	blt.n	800a5ca <quorem+0xee>
 800a582:	4629      	mov	r1, r5
 800a584:	2000      	movs	r0, #0
 800a586:	3601      	adds	r6, #1
 800a588:	f858 2b04 	ldr.w	r2, [r8], #4
 800a58c:	f8d1 c000 	ldr.w	ip, [r1]
 800a590:	b293      	uxth	r3, r2
 800a592:	1ac3      	subs	r3, r0, r3
 800a594:	0c12      	lsrs	r2, r2, #16
 800a596:	fa1f f08c 	uxth.w	r0, ip
 800a59a:	4403      	add	r3, r0
 800a59c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a5a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5aa:	45c1      	cmp	r9, r8
 800a5ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a5b0:	f841 3b04 	str.w	r3, [r1], #4
 800a5b4:	d2e8      	bcs.n	800a588 <quorem+0xac>
 800a5b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5be:	b922      	cbnz	r2, 800a5ca <quorem+0xee>
 800a5c0:	3b04      	subs	r3, #4
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	d30a      	bcc.n	800a5de <quorem+0x102>
 800a5c8:	613c      	str	r4, [r7, #16]
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	b003      	add	sp, #12
 800a5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d2:	6812      	ldr	r2, [r2, #0]
 800a5d4:	3b04      	subs	r3, #4
 800a5d6:	2a00      	cmp	r2, #0
 800a5d8:	d1cd      	bne.n	800a576 <quorem+0x9a>
 800a5da:	3c01      	subs	r4, #1
 800a5dc:	e7c8      	b.n	800a570 <quorem+0x94>
 800a5de:	6812      	ldr	r2, [r2, #0]
 800a5e0:	3b04      	subs	r3, #4
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	d1f0      	bne.n	800a5c8 <quorem+0xec>
 800a5e6:	3c01      	subs	r4, #1
 800a5e8:	e7eb      	b.n	800a5c2 <quorem+0xe6>
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	e7ee      	b.n	800a5cc <quorem+0xf0>
	...

0800a5f0 <_dtoa_r>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	4616      	mov	r6, r2
 800a5f6:	461f      	mov	r7, r3
 800a5f8:	69c4      	ldr	r4, [r0, #28]
 800a5fa:	b099      	sub	sp, #100	; 0x64
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a602:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a606:	b974      	cbnz	r4, 800a626 <_dtoa_r+0x36>
 800a608:	2010      	movs	r0, #16
 800a60a:	f000 fe1d 	bl	800b248 <malloc>
 800a60e:	4602      	mov	r2, r0
 800a610:	61e8      	str	r0, [r5, #28]
 800a612:	b920      	cbnz	r0, 800a61e <_dtoa_r+0x2e>
 800a614:	21ef      	movs	r1, #239	; 0xef
 800a616:	4bac      	ldr	r3, [pc, #688]	; (800a8c8 <_dtoa_r+0x2d8>)
 800a618:	48ac      	ldr	r0, [pc, #688]	; (800a8cc <_dtoa_r+0x2dc>)
 800a61a:	f7ff ff41 	bl	800a4a0 <__assert_func>
 800a61e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a622:	6004      	str	r4, [r0, #0]
 800a624:	60c4      	str	r4, [r0, #12]
 800a626:	69eb      	ldr	r3, [r5, #28]
 800a628:	6819      	ldr	r1, [r3, #0]
 800a62a:	b151      	cbz	r1, 800a642 <_dtoa_r+0x52>
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	2301      	movs	r3, #1
 800a630:	4093      	lsls	r3, r2
 800a632:	604a      	str	r2, [r1, #4]
 800a634:	608b      	str	r3, [r1, #8]
 800a636:	4628      	mov	r0, r5
 800a638:	f000 fefa 	bl	800b430 <_Bfree>
 800a63c:	2200      	movs	r2, #0
 800a63e:	69eb      	ldr	r3, [r5, #28]
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	1e3b      	subs	r3, r7, #0
 800a644:	bfaf      	iteee	ge
 800a646:	2300      	movge	r3, #0
 800a648:	2201      	movlt	r2, #1
 800a64a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a64e:	9305      	strlt	r3, [sp, #20]
 800a650:	bfa8      	it	ge
 800a652:	f8c8 3000 	strge.w	r3, [r8]
 800a656:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a65a:	4b9d      	ldr	r3, [pc, #628]	; (800a8d0 <_dtoa_r+0x2e0>)
 800a65c:	bfb8      	it	lt
 800a65e:	f8c8 2000 	strlt.w	r2, [r8]
 800a662:	ea33 0309 	bics.w	r3, r3, r9
 800a666:	d119      	bne.n	800a69c <_dtoa_r+0xac>
 800a668:	f242 730f 	movw	r3, #9999	; 0x270f
 800a66c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a674:	4333      	orrs	r3, r6
 800a676:	f000 8589 	beq.w	800b18c <_dtoa_r+0xb9c>
 800a67a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a67c:	b953      	cbnz	r3, 800a694 <_dtoa_r+0xa4>
 800a67e:	4b95      	ldr	r3, [pc, #596]	; (800a8d4 <_dtoa_r+0x2e4>)
 800a680:	e023      	b.n	800a6ca <_dtoa_r+0xda>
 800a682:	4b95      	ldr	r3, [pc, #596]	; (800a8d8 <_dtoa_r+0x2e8>)
 800a684:	9303      	str	r3, [sp, #12]
 800a686:	3308      	adds	r3, #8
 800a688:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	9803      	ldr	r0, [sp, #12]
 800a68e:	b019      	add	sp, #100	; 0x64
 800a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a694:	4b8f      	ldr	r3, [pc, #572]	; (800a8d4 <_dtoa_r+0x2e4>)
 800a696:	9303      	str	r3, [sp, #12]
 800a698:	3303      	adds	r3, #3
 800a69a:	e7f5      	b.n	800a688 <_dtoa_r+0x98>
 800a69c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a6a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a6a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	f7f6 fa9c 	bl	8000be8 <__aeabi_dcmpeq>
 800a6b0:	4680      	mov	r8, r0
 800a6b2:	b160      	cbz	r0, 800a6ce <_dtoa_r+0xde>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f000 8562 	beq.w	800b186 <_dtoa_r+0xb96>
 800a6c2:	4b86      	ldr	r3, [pc, #536]	; (800a8dc <_dtoa_r+0x2ec>)
 800a6c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	9303      	str	r3, [sp, #12]
 800a6cc:	e7de      	b.n	800a68c <_dtoa_r+0x9c>
 800a6ce:	ab16      	add	r3, sp, #88	; 0x58
 800a6d0:	9301      	str	r3, [sp, #4]
 800a6d2:	ab17      	add	r3, sp, #92	; 0x5c
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6dc:	f001 fa3c 	bl	800bb58 <__d2b>
 800a6e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a6e4:	4682      	mov	sl, r0
 800a6e6:	2c00      	cmp	r4, #0
 800a6e8:	d07e      	beq.n	800a7e8 <_dtoa_r+0x1f8>
 800a6ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6f8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a6fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a700:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a704:	4619      	mov	r1, r3
 800a706:	2200      	movs	r2, #0
 800a708:	4b75      	ldr	r3, [pc, #468]	; (800a8e0 <_dtoa_r+0x2f0>)
 800a70a:	f7f5 fe4d 	bl	80003a8 <__aeabi_dsub>
 800a70e:	a368      	add	r3, pc, #416	; (adr r3, 800a8b0 <_dtoa_r+0x2c0>)
 800a710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a714:	f7f6 f800 	bl	8000718 <__aeabi_dmul>
 800a718:	a367      	add	r3, pc, #412	; (adr r3, 800a8b8 <_dtoa_r+0x2c8>)
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	f7f5 fe45 	bl	80003ac <__adddf3>
 800a722:	4606      	mov	r6, r0
 800a724:	4620      	mov	r0, r4
 800a726:	460f      	mov	r7, r1
 800a728:	f7f5 ff8c 	bl	8000644 <__aeabi_i2d>
 800a72c:	a364      	add	r3, pc, #400	; (adr r3, 800a8c0 <_dtoa_r+0x2d0>)
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	f7f5 fff1 	bl	8000718 <__aeabi_dmul>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4630      	mov	r0, r6
 800a73c:	4639      	mov	r1, r7
 800a73e:	f7f5 fe35 	bl	80003ac <__adddf3>
 800a742:	4606      	mov	r6, r0
 800a744:	460f      	mov	r7, r1
 800a746:	f7f6 fa97 	bl	8000c78 <__aeabi_d2iz>
 800a74a:	2200      	movs	r2, #0
 800a74c:	4683      	mov	fp, r0
 800a74e:	2300      	movs	r3, #0
 800a750:	4630      	mov	r0, r6
 800a752:	4639      	mov	r1, r7
 800a754:	f7f6 fa52 	bl	8000bfc <__aeabi_dcmplt>
 800a758:	b148      	cbz	r0, 800a76e <_dtoa_r+0x17e>
 800a75a:	4658      	mov	r0, fp
 800a75c:	f7f5 ff72 	bl	8000644 <__aeabi_i2d>
 800a760:	4632      	mov	r2, r6
 800a762:	463b      	mov	r3, r7
 800a764:	f7f6 fa40 	bl	8000be8 <__aeabi_dcmpeq>
 800a768:	b908      	cbnz	r0, 800a76e <_dtoa_r+0x17e>
 800a76a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a76e:	f1bb 0f16 	cmp.w	fp, #22
 800a772:	d857      	bhi.n	800a824 <_dtoa_r+0x234>
 800a774:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a778:	4b5a      	ldr	r3, [pc, #360]	; (800a8e4 <_dtoa_r+0x2f4>)
 800a77a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	f7f6 fa3b 	bl	8000bfc <__aeabi_dcmplt>
 800a786:	2800      	cmp	r0, #0
 800a788:	d04e      	beq.n	800a828 <_dtoa_r+0x238>
 800a78a:	2300      	movs	r3, #0
 800a78c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a790:	930f      	str	r3, [sp, #60]	; 0x3c
 800a792:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a794:	1b1b      	subs	r3, r3, r4
 800a796:	1e5a      	subs	r2, r3, #1
 800a798:	bf46      	itte	mi
 800a79a:	f1c3 0901 	rsbmi	r9, r3, #1
 800a79e:	2300      	movmi	r3, #0
 800a7a0:	f04f 0900 	movpl.w	r9, #0
 800a7a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a7a6:	bf48      	it	mi
 800a7a8:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a7aa:	f1bb 0f00 	cmp.w	fp, #0
 800a7ae:	db3d      	blt.n	800a82c <_dtoa_r+0x23c>
 800a7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a7b6:	445b      	add	r3, fp
 800a7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	930a      	str	r3, [sp, #40]	; 0x28
 800a7be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7c0:	2b09      	cmp	r3, #9
 800a7c2:	d867      	bhi.n	800a894 <_dtoa_r+0x2a4>
 800a7c4:	2b05      	cmp	r3, #5
 800a7c6:	bfc4      	itt	gt
 800a7c8:	3b04      	subgt	r3, #4
 800a7ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a7cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7ce:	bfc8      	it	gt
 800a7d0:	2400      	movgt	r4, #0
 800a7d2:	f1a3 0302 	sub.w	r3, r3, #2
 800a7d6:	bfd8      	it	le
 800a7d8:	2401      	movle	r4, #1
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	f200 8086 	bhi.w	800a8ec <_dtoa_r+0x2fc>
 800a7e0:	e8df f003 	tbb	[pc, r3]
 800a7e4:	5637392c 	.word	0x5637392c
 800a7e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a7ec:	441c      	add	r4, r3
 800a7ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a7f2:	2b20      	cmp	r3, #32
 800a7f4:	bfc1      	itttt	gt
 800a7f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7fa:	fa09 f903 	lslgt.w	r9, r9, r3
 800a7fe:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800a802:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a806:	bfd6      	itet	le
 800a808:	f1c3 0320 	rsble	r3, r3, #32
 800a80c:	ea49 0003 	orrgt.w	r0, r9, r3
 800a810:	fa06 f003 	lslle.w	r0, r6, r3
 800a814:	f7f5 ff06 	bl	8000624 <__aeabi_ui2d>
 800a818:	2201      	movs	r2, #1
 800a81a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a81e:	3c01      	subs	r4, #1
 800a820:	9213      	str	r2, [sp, #76]	; 0x4c
 800a822:	e76f      	b.n	800a704 <_dtoa_r+0x114>
 800a824:	2301      	movs	r3, #1
 800a826:	e7b3      	b.n	800a790 <_dtoa_r+0x1a0>
 800a828:	900f      	str	r0, [sp, #60]	; 0x3c
 800a82a:	e7b2      	b.n	800a792 <_dtoa_r+0x1a2>
 800a82c:	f1cb 0300 	rsb	r3, fp, #0
 800a830:	930a      	str	r3, [sp, #40]	; 0x28
 800a832:	2300      	movs	r3, #0
 800a834:	eba9 090b 	sub.w	r9, r9, fp
 800a838:	930e      	str	r3, [sp, #56]	; 0x38
 800a83a:	e7c0      	b.n	800a7be <_dtoa_r+0x1ce>
 800a83c:	2300      	movs	r3, #0
 800a83e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a840:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a842:	2b00      	cmp	r3, #0
 800a844:	dc55      	bgt.n	800a8f2 <_dtoa_r+0x302>
 800a846:	2301      	movs	r3, #1
 800a848:	461a      	mov	r2, r3
 800a84a:	9306      	str	r3, [sp, #24]
 800a84c:	9308      	str	r3, [sp, #32]
 800a84e:	9223      	str	r2, [sp, #140]	; 0x8c
 800a850:	e00b      	b.n	800a86a <_dtoa_r+0x27a>
 800a852:	2301      	movs	r3, #1
 800a854:	e7f3      	b.n	800a83e <_dtoa_r+0x24e>
 800a856:	2300      	movs	r3, #0
 800a858:	930b      	str	r3, [sp, #44]	; 0x2c
 800a85a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a85c:	445b      	add	r3, fp
 800a85e:	9306      	str	r3, [sp, #24]
 800a860:	3301      	adds	r3, #1
 800a862:	2b01      	cmp	r3, #1
 800a864:	9308      	str	r3, [sp, #32]
 800a866:	bfb8      	it	lt
 800a868:	2301      	movlt	r3, #1
 800a86a:	2100      	movs	r1, #0
 800a86c:	2204      	movs	r2, #4
 800a86e:	69e8      	ldr	r0, [r5, #28]
 800a870:	f102 0614 	add.w	r6, r2, #20
 800a874:	429e      	cmp	r6, r3
 800a876:	d940      	bls.n	800a8fa <_dtoa_r+0x30a>
 800a878:	6041      	str	r1, [r0, #4]
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 fd98 	bl	800b3b0 <_Balloc>
 800a880:	9003      	str	r0, [sp, #12]
 800a882:	2800      	cmp	r0, #0
 800a884:	d13c      	bne.n	800a900 <_dtoa_r+0x310>
 800a886:	4602      	mov	r2, r0
 800a888:	f240 11af 	movw	r1, #431	; 0x1af
 800a88c:	4b16      	ldr	r3, [pc, #88]	; (800a8e8 <_dtoa_r+0x2f8>)
 800a88e:	e6c3      	b.n	800a618 <_dtoa_r+0x28>
 800a890:	2301      	movs	r3, #1
 800a892:	e7e1      	b.n	800a858 <_dtoa_r+0x268>
 800a894:	2401      	movs	r4, #1
 800a896:	2300      	movs	r3, #0
 800a898:	940b      	str	r4, [sp, #44]	; 0x2c
 800a89a:	9322      	str	r3, [sp, #136]	; 0x88
 800a89c:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	9306      	str	r3, [sp, #24]
 800a8a4:	9308      	str	r3, [sp, #32]
 800a8a6:	2312      	movs	r3, #18
 800a8a8:	e7d1      	b.n	800a84e <_dtoa_r+0x25e>
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w
 800a8b0:	636f4361 	.word	0x636f4361
 800a8b4:	3fd287a7 	.word	0x3fd287a7
 800a8b8:	8b60c8b3 	.word	0x8b60c8b3
 800a8bc:	3fc68a28 	.word	0x3fc68a28
 800a8c0:	509f79fb 	.word	0x509f79fb
 800a8c4:	3fd34413 	.word	0x3fd34413
 800a8c8:	0800efda 	.word	0x0800efda
 800a8cc:	0800eff1 	.word	0x0800eff1
 800a8d0:	7ff00000 	.word	0x7ff00000
 800a8d4:	0800efd6 	.word	0x0800efd6
 800a8d8:	0800efcd 	.word	0x0800efcd
 800a8dc:	0800f331 	.word	0x0800f331
 800a8e0:	3ff80000 	.word	0x3ff80000
 800a8e4:	0800f0e0 	.word	0x0800f0e0
 800a8e8:	0800f049 	.word	0x0800f049
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8f0:	e7d4      	b.n	800a89c <_dtoa_r+0x2ac>
 800a8f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8f4:	9306      	str	r3, [sp, #24]
 800a8f6:	9308      	str	r3, [sp, #32]
 800a8f8:	e7b7      	b.n	800a86a <_dtoa_r+0x27a>
 800a8fa:	3101      	adds	r1, #1
 800a8fc:	0052      	lsls	r2, r2, #1
 800a8fe:	e7b7      	b.n	800a870 <_dtoa_r+0x280>
 800a900:	69eb      	ldr	r3, [r5, #28]
 800a902:	9a03      	ldr	r2, [sp, #12]
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	9b08      	ldr	r3, [sp, #32]
 800a908:	2b0e      	cmp	r3, #14
 800a90a:	f200 80a8 	bhi.w	800aa5e <_dtoa_r+0x46e>
 800a90e:	2c00      	cmp	r4, #0
 800a910:	f000 80a5 	beq.w	800aa5e <_dtoa_r+0x46e>
 800a914:	f1bb 0f00 	cmp.w	fp, #0
 800a918:	dd34      	ble.n	800a984 <_dtoa_r+0x394>
 800a91a:	4b9a      	ldr	r3, [pc, #616]	; (800ab84 <_dtoa_r+0x594>)
 800a91c:	f00b 020f 	and.w	r2, fp, #15
 800a920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a924:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a928:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a92c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a930:	ea4f 142b 	mov.w	r4, fp, asr #4
 800a934:	d016      	beq.n	800a964 <_dtoa_r+0x374>
 800a936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a93a:	4b93      	ldr	r3, [pc, #588]	; (800ab88 <_dtoa_r+0x598>)
 800a93c:	2703      	movs	r7, #3
 800a93e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a942:	f7f6 f813 	bl	800096c <__aeabi_ddiv>
 800a946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a94a:	f004 040f 	and.w	r4, r4, #15
 800a94e:	4e8e      	ldr	r6, [pc, #568]	; (800ab88 <_dtoa_r+0x598>)
 800a950:	b954      	cbnz	r4, 800a968 <_dtoa_r+0x378>
 800a952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a95a:	f7f6 f807 	bl	800096c <__aeabi_ddiv>
 800a95e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a962:	e029      	b.n	800a9b8 <_dtoa_r+0x3c8>
 800a964:	2702      	movs	r7, #2
 800a966:	e7f2      	b.n	800a94e <_dtoa_r+0x35e>
 800a968:	07e1      	lsls	r1, r4, #31
 800a96a:	d508      	bpl.n	800a97e <_dtoa_r+0x38e>
 800a96c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a970:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a974:	f7f5 fed0 	bl	8000718 <__aeabi_dmul>
 800a978:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a97c:	3701      	adds	r7, #1
 800a97e:	1064      	asrs	r4, r4, #1
 800a980:	3608      	adds	r6, #8
 800a982:	e7e5      	b.n	800a950 <_dtoa_r+0x360>
 800a984:	f000 80a5 	beq.w	800aad2 <_dtoa_r+0x4e2>
 800a988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a98c:	f1cb 0400 	rsb	r4, fp, #0
 800a990:	4b7c      	ldr	r3, [pc, #496]	; (800ab84 <_dtoa_r+0x594>)
 800a992:	f004 020f 	and.w	r2, r4, #15
 800a996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	f7f5 febb 	bl	8000718 <__aeabi_dmul>
 800a9a2:	2702      	movs	r7, #2
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9aa:	4e77      	ldr	r6, [pc, #476]	; (800ab88 <_dtoa_r+0x598>)
 800a9ac:	1124      	asrs	r4, r4, #4
 800a9ae:	2c00      	cmp	r4, #0
 800a9b0:	f040 8084 	bne.w	800aabc <_dtoa_r+0x4cc>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1d2      	bne.n	800a95e <_dtoa_r+0x36e>
 800a9b8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a9bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a9c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 8087 	beq.w	800aad6 <_dtoa_r+0x4e6>
 800a9c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4b6f      	ldr	r3, [pc, #444]	; (800ab8c <_dtoa_r+0x59c>)
 800a9d0:	f7f6 f914 	bl	8000bfc <__aeabi_dcmplt>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d07e      	beq.n	800aad6 <_dtoa_r+0x4e6>
 800a9d8:	9b08      	ldr	r3, [sp, #32]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d07b      	beq.n	800aad6 <_dtoa_r+0x4e6>
 800a9de:	9b06      	ldr	r3, [sp, #24]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dd38      	ble.n	800aa56 <_dtoa_r+0x466>
 800a9e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	4b69      	ldr	r3, [pc, #420]	; (800ab90 <_dtoa_r+0x5a0>)
 800a9ec:	f7f5 fe94 	bl	8000718 <__aeabi_dmul>
 800a9f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9f4:	9c06      	ldr	r4, [sp, #24]
 800a9f6:	f10b 38ff 	add.w	r8, fp, #4294967295
 800a9fa:	3701      	adds	r7, #1
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	f7f5 fe21 	bl	8000644 <__aeabi_i2d>
 800aa02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa06:	f7f5 fe87 	bl	8000718 <__aeabi_dmul>
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	4b61      	ldr	r3, [pc, #388]	; (800ab94 <_dtoa_r+0x5a4>)
 800aa0e:	f7f5 fccd 	bl	80003ac <__adddf3>
 800aa12:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aa16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa1a:	9611      	str	r6, [sp, #68]	; 0x44
 800aa1c:	2c00      	cmp	r4, #0
 800aa1e:	d15d      	bne.n	800aadc <_dtoa_r+0x4ec>
 800aa20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa24:	2200      	movs	r2, #0
 800aa26:	4b5c      	ldr	r3, [pc, #368]	; (800ab98 <_dtoa_r+0x5a8>)
 800aa28:	f7f5 fcbe 	bl	80003a8 <__aeabi_dsub>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa34:	4633      	mov	r3, r6
 800aa36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa38:	f7f6 f8fe 	bl	8000c38 <__aeabi_dcmpgt>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f040 8295 	bne.w	800af6c <_dtoa_r+0x97c>
 800aa42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aa4c:	f7f6 f8d6 	bl	8000bfc <__aeabi_dcmplt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f040 8289 	bne.w	800af68 <_dtoa_r+0x978>
 800aa56:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800aa5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aa5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f2c0 8151 	blt.w	800ad08 <_dtoa_r+0x718>
 800aa66:	f1bb 0f0e 	cmp.w	fp, #14
 800aa6a:	f300 814d 	bgt.w	800ad08 <_dtoa_r+0x718>
 800aa6e:	4b45      	ldr	r3, [pc, #276]	; (800ab84 <_dtoa_r+0x594>)
 800aa70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa74:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa78:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aa7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f280 80da 	bge.w	800ac38 <_dtoa_r+0x648>
 800aa84:	9b08      	ldr	r3, [sp, #32]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f300 80d6 	bgt.w	800ac38 <_dtoa_r+0x648>
 800aa8c:	f040 826b 	bne.w	800af66 <_dtoa_r+0x976>
 800aa90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa94:	2200      	movs	r2, #0
 800aa96:	4b40      	ldr	r3, [pc, #256]	; (800ab98 <_dtoa_r+0x5a8>)
 800aa98:	f7f5 fe3e 	bl	8000718 <__aeabi_dmul>
 800aa9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaa0:	f7f6 f8c0 	bl	8000c24 <__aeabi_dcmpge>
 800aaa4:	9c08      	ldr	r4, [sp, #32]
 800aaa6:	4626      	mov	r6, r4
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	f040 8241 	bne.w	800af30 <_dtoa_r+0x940>
 800aaae:	2331      	movs	r3, #49	; 0x31
 800aab0:	9f03      	ldr	r7, [sp, #12]
 800aab2:	f10b 0b01 	add.w	fp, fp, #1
 800aab6:	f807 3b01 	strb.w	r3, [r7], #1
 800aaba:	e23d      	b.n	800af38 <_dtoa_r+0x948>
 800aabc:	07e2      	lsls	r2, r4, #31
 800aabe:	d505      	bpl.n	800aacc <_dtoa_r+0x4dc>
 800aac0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aac4:	f7f5 fe28 	bl	8000718 <__aeabi_dmul>
 800aac8:	2301      	movs	r3, #1
 800aaca:	3701      	adds	r7, #1
 800aacc:	1064      	asrs	r4, r4, #1
 800aace:	3608      	adds	r6, #8
 800aad0:	e76d      	b.n	800a9ae <_dtoa_r+0x3be>
 800aad2:	2702      	movs	r7, #2
 800aad4:	e770      	b.n	800a9b8 <_dtoa_r+0x3c8>
 800aad6:	46d8      	mov	r8, fp
 800aad8:	9c08      	ldr	r4, [sp, #32]
 800aada:	e78f      	b.n	800a9fc <_dtoa_r+0x40c>
 800aadc:	9903      	ldr	r1, [sp, #12]
 800aade:	4b29      	ldr	r3, [pc, #164]	; (800ab84 <_dtoa_r+0x594>)
 800aae0:	4421      	add	r1, r4
 800aae2:	9112      	str	r1, [sp, #72]	; 0x48
 800aae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aae6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aaea:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aaee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aaf2:	2900      	cmp	r1, #0
 800aaf4:	d054      	beq.n	800aba0 <_dtoa_r+0x5b0>
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	4928      	ldr	r1, [pc, #160]	; (800ab9c <_dtoa_r+0x5ac>)
 800aafa:	f7f5 ff37 	bl	800096c <__aeabi_ddiv>
 800aafe:	463b      	mov	r3, r7
 800ab00:	4632      	mov	r2, r6
 800ab02:	f7f5 fc51 	bl	80003a8 <__aeabi_dsub>
 800ab06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab0a:	9f03      	ldr	r7, [sp, #12]
 800ab0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab10:	f7f6 f8b2 	bl	8000c78 <__aeabi_d2iz>
 800ab14:	4604      	mov	r4, r0
 800ab16:	f7f5 fd95 	bl	8000644 <__aeabi_i2d>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab22:	f7f5 fc41 	bl	80003a8 <__aeabi_dsub>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	3430      	adds	r4, #48	; 0x30
 800ab2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab34:	f807 4b01 	strb.w	r4, [r7], #1
 800ab38:	f7f6 f860 	bl	8000bfc <__aeabi_dcmplt>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d173      	bne.n	800ac28 <_dtoa_r+0x638>
 800ab40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab44:	2000      	movs	r0, #0
 800ab46:	4911      	ldr	r1, [pc, #68]	; (800ab8c <_dtoa_r+0x59c>)
 800ab48:	f7f5 fc2e 	bl	80003a8 <__aeabi_dsub>
 800ab4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab50:	f7f6 f854 	bl	8000bfc <__aeabi_dcmplt>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	f040 80b6 	bne.w	800acc6 <_dtoa_r+0x6d6>
 800ab5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab5c:	429f      	cmp	r7, r3
 800ab5e:	f43f af7a 	beq.w	800aa56 <_dtoa_r+0x466>
 800ab62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab66:	2200      	movs	r2, #0
 800ab68:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <_dtoa_r+0x5a0>)
 800ab6a:	f7f5 fdd5 	bl	8000718 <__aeabi_dmul>
 800ab6e:	2200      	movs	r2, #0
 800ab70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab78:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <_dtoa_r+0x5a0>)
 800ab7a:	f7f5 fdcd 	bl	8000718 <__aeabi_dmul>
 800ab7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab82:	e7c3      	b.n	800ab0c <_dtoa_r+0x51c>
 800ab84:	0800f0e0 	.word	0x0800f0e0
 800ab88:	0800f0b8 	.word	0x0800f0b8
 800ab8c:	3ff00000 	.word	0x3ff00000
 800ab90:	40240000 	.word	0x40240000
 800ab94:	401c0000 	.word	0x401c0000
 800ab98:	40140000 	.word	0x40140000
 800ab9c:	3fe00000 	.word	0x3fe00000
 800aba0:	4630      	mov	r0, r6
 800aba2:	4639      	mov	r1, r7
 800aba4:	f7f5 fdb8 	bl	8000718 <__aeabi_dmul>
 800aba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abaa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abae:	9c03      	ldr	r4, [sp, #12]
 800abb0:	9314      	str	r3, [sp, #80]	; 0x50
 800abb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abb6:	f7f6 f85f 	bl	8000c78 <__aeabi_d2iz>
 800abba:	9015      	str	r0, [sp, #84]	; 0x54
 800abbc:	f7f5 fd42 	bl	8000644 <__aeabi_i2d>
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abc8:	f7f5 fbee 	bl	80003a8 <__aeabi_dsub>
 800abcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abce:	4606      	mov	r6, r0
 800abd0:	3330      	adds	r3, #48	; 0x30
 800abd2:	f804 3b01 	strb.w	r3, [r4], #1
 800abd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abd8:	460f      	mov	r7, r1
 800abda:	429c      	cmp	r4, r3
 800abdc:	f04f 0200 	mov.w	r2, #0
 800abe0:	d124      	bne.n	800ac2c <_dtoa_r+0x63c>
 800abe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800abe6:	4baf      	ldr	r3, [pc, #700]	; (800aea4 <_dtoa_r+0x8b4>)
 800abe8:	f7f5 fbe0 	bl	80003ac <__adddf3>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f6 f820 	bl	8000c38 <__aeabi_dcmpgt>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d163      	bne.n	800acc4 <_dtoa_r+0x6d4>
 800abfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac00:	2000      	movs	r0, #0
 800ac02:	49a8      	ldr	r1, [pc, #672]	; (800aea4 <_dtoa_r+0x8b4>)
 800ac04:	f7f5 fbd0 	bl	80003a8 <__aeabi_dsub>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	4639      	mov	r1, r7
 800ac10:	f7f5 fff4 	bl	8000bfc <__aeabi_dcmplt>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f43f af1e 	beq.w	800aa56 <_dtoa_r+0x466>
 800ac1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ac1c:	1e7b      	subs	r3, r7, #1
 800ac1e:	9314      	str	r3, [sp, #80]	; 0x50
 800ac20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ac24:	2b30      	cmp	r3, #48	; 0x30
 800ac26:	d0f8      	beq.n	800ac1a <_dtoa_r+0x62a>
 800ac28:	46c3      	mov	fp, r8
 800ac2a:	e03b      	b.n	800aca4 <_dtoa_r+0x6b4>
 800ac2c:	4b9e      	ldr	r3, [pc, #632]	; (800aea8 <_dtoa_r+0x8b8>)
 800ac2e:	f7f5 fd73 	bl	8000718 <__aeabi_dmul>
 800ac32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac36:	e7bc      	b.n	800abb2 <_dtoa_r+0x5c2>
 800ac38:	9f03      	ldr	r7, [sp, #12]
 800ac3a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ac3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac42:	4640      	mov	r0, r8
 800ac44:	4649      	mov	r1, r9
 800ac46:	f7f5 fe91 	bl	800096c <__aeabi_ddiv>
 800ac4a:	f7f6 f815 	bl	8000c78 <__aeabi_d2iz>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	f7f5 fcf8 	bl	8000644 <__aeabi_i2d>
 800ac54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac58:	f7f5 fd5e 	bl	8000718 <__aeabi_dmul>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4640      	mov	r0, r8
 800ac62:	4649      	mov	r1, r9
 800ac64:	f7f5 fba0 	bl	80003a8 <__aeabi_dsub>
 800ac68:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ac6c:	f807 6b01 	strb.w	r6, [r7], #1
 800ac70:	9e03      	ldr	r6, [sp, #12]
 800ac72:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ac76:	1bbe      	subs	r6, r7, r6
 800ac78:	45b4      	cmp	ip, r6
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	d136      	bne.n	800acee <_dtoa_r+0x6fe>
 800ac80:	f7f5 fb94 	bl	80003ac <__adddf3>
 800ac84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac88:	4680      	mov	r8, r0
 800ac8a:	4689      	mov	r9, r1
 800ac8c:	f7f5 ffd4 	bl	8000c38 <__aeabi_dcmpgt>
 800ac90:	bb58      	cbnz	r0, 800acea <_dtoa_r+0x6fa>
 800ac92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac96:	4640      	mov	r0, r8
 800ac98:	4649      	mov	r1, r9
 800ac9a:	f7f5 ffa5 	bl	8000be8 <__aeabi_dcmpeq>
 800ac9e:	b108      	cbz	r0, 800aca4 <_dtoa_r+0x6b4>
 800aca0:	07e3      	lsls	r3, r4, #31
 800aca2:	d422      	bmi.n	800acea <_dtoa_r+0x6fa>
 800aca4:	4651      	mov	r1, sl
 800aca6:	4628      	mov	r0, r5
 800aca8:	f000 fbc2 	bl	800b430 <_Bfree>
 800acac:	2300      	movs	r3, #0
 800acae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800acb0:	703b      	strb	r3, [r7, #0]
 800acb2:	f10b 0301 	add.w	r3, fp, #1
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f43f ace6 	beq.w	800a68c <_dtoa_r+0x9c>
 800acc0:	601f      	str	r7, [r3, #0]
 800acc2:	e4e3      	b.n	800a68c <_dtoa_r+0x9c>
 800acc4:	4627      	mov	r7, r4
 800acc6:	463b      	mov	r3, r7
 800acc8:	461f      	mov	r7, r3
 800acca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acce:	2a39      	cmp	r2, #57	; 0x39
 800acd0:	d107      	bne.n	800ace2 <_dtoa_r+0x6f2>
 800acd2:	9a03      	ldr	r2, [sp, #12]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d1f7      	bne.n	800acc8 <_dtoa_r+0x6d8>
 800acd8:	2230      	movs	r2, #48	; 0x30
 800acda:	9903      	ldr	r1, [sp, #12]
 800acdc:	f108 0801 	add.w	r8, r8, #1
 800ace0:	700a      	strb	r2, [r1, #0]
 800ace2:	781a      	ldrb	r2, [r3, #0]
 800ace4:	3201      	adds	r2, #1
 800ace6:	701a      	strb	r2, [r3, #0]
 800ace8:	e79e      	b.n	800ac28 <_dtoa_r+0x638>
 800acea:	46d8      	mov	r8, fp
 800acec:	e7eb      	b.n	800acc6 <_dtoa_r+0x6d6>
 800acee:	2200      	movs	r2, #0
 800acf0:	4b6d      	ldr	r3, [pc, #436]	; (800aea8 <_dtoa_r+0x8b8>)
 800acf2:	f7f5 fd11 	bl	8000718 <__aeabi_dmul>
 800acf6:	2200      	movs	r2, #0
 800acf8:	2300      	movs	r3, #0
 800acfa:	4680      	mov	r8, r0
 800acfc:	4689      	mov	r9, r1
 800acfe:	f7f5 ff73 	bl	8000be8 <__aeabi_dcmpeq>
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d09b      	beq.n	800ac3e <_dtoa_r+0x64e>
 800ad06:	e7cd      	b.n	800aca4 <_dtoa_r+0x6b4>
 800ad08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad0a:	2a00      	cmp	r2, #0
 800ad0c:	f000 80c4 	beq.w	800ae98 <_dtoa_r+0x8a8>
 800ad10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ad12:	2a01      	cmp	r2, #1
 800ad14:	f300 80a8 	bgt.w	800ae68 <_dtoa_r+0x878>
 800ad18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad1a:	2a00      	cmp	r2, #0
 800ad1c:	f000 80a0 	beq.w	800ae60 <_dtoa_r+0x870>
 800ad20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad24:	464f      	mov	r7, r9
 800ad26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	441a      	add	r2, r3
 800ad2e:	4628      	mov	r0, r5
 800ad30:	4499      	add	r9, r3
 800ad32:	9209      	str	r2, [sp, #36]	; 0x24
 800ad34:	f000 fc7c 	bl	800b630 <__i2b>
 800ad38:	4606      	mov	r6, r0
 800ad3a:	b15f      	cbz	r7, 800ad54 <_dtoa_r+0x764>
 800ad3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	dd08      	ble.n	800ad54 <_dtoa_r+0x764>
 800ad42:	42bb      	cmp	r3, r7
 800ad44:	bfa8      	it	ge
 800ad46:	463b      	movge	r3, r7
 800ad48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad4a:	eba9 0903 	sub.w	r9, r9, r3
 800ad4e:	1aff      	subs	r7, r7, r3
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	9309      	str	r3, [sp, #36]	; 0x24
 800ad54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad56:	b1f3      	cbz	r3, 800ad96 <_dtoa_r+0x7a6>
 800ad58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f000 80a0 	beq.w	800aea0 <_dtoa_r+0x8b0>
 800ad60:	2c00      	cmp	r4, #0
 800ad62:	dd10      	ble.n	800ad86 <_dtoa_r+0x796>
 800ad64:	4631      	mov	r1, r6
 800ad66:	4622      	mov	r2, r4
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f000 fd1f 	bl	800b7ac <__pow5mult>
 800ad6e:	4652      	mov	r2, sl
 800ad70:	4601      	mov	r1, r0
 800ad72:	4606      	mov	r6, r0
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 fc71 	bl	800b65c <__multiply>
 800ad7a:	4680      	mov	r8, r0
 800ad7c:	4651      	mov	r1, sl
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f000 fb56 	bl	800b430 <_Bfree>
 800ad84:	46c2      	mov	sl, r8
 800ad86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad88:	1b1a      	subs	r2, r3, r4
 800ad8a:	d004      	beq.n	800ad96 <_dtoa_r+0x7a6>
 800ad8c:	4651      	mov	r1, sl
 800ad8e:	4628      	mov	r0, r5
 800ad90:	f000 fd0c 	bl	800b7ac <__pow5mult>
 800ad94:	4682      	mov	sl, r0
 800ad96:	2101      	movs	r1, #1
 800ad98:	4628      	mov	r0, r5
 800ad9a:	f000 fc49 	bl	800b630 <__i2b>
 800ad9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ada0:	4604      	mov	r4, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f340 8082 	ble.w	800aeac <_dtoa_r+0x8bc>
 800ada8:	461a      	mov	r2, r3
 800adaa:	4601      	mov	r1, r0
 800adac:	4628      	mov	r0, r5
 800adae:	f000 fcfd 	bl	800b7ac <__pow5mult>
 800adb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adb4:	4604      	mov	r4, r0
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	dd7b      	ble.n	800aeb2 <_dtoa_r+0x8c2>
 800adba:	f04f 0800 	mov.w	r8, #0
 800adbe:	6923      	ldr	r3, [r4, #16]
 800adc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adc4:	6918      	ldr	r0, [r3, #16]
 800adc6:	f000 fbe5 	bl	800b594 <__hi0bits>
 800adca:	f1c0 0020 	rsb	r0, r0, #32
 800adce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add0:	4418      	add	r0, r3
 800add2:	f010 001f 	ands.w	r0, r0, #31
 800add6:	f000 8092 	beq.w	800aefe <_dtoa_r+0x90e>
 800adda:	f1c0 0320 	rsb	r3, r0, #32
 800adde:	2b04      	cmp	r3, #4
 800ade0:	f340 8085 	ble.w	800aeee <_dtoa_r+0x8fe>
 800ade4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade6:	f1c0 001c 	rsb	r0, r0, #28
 800adea:	4403      	add	r3, r0
 800adec:	4481      	add	r9, r0
 800adee:	4407      	add	r7, r0
 800adf0:	9309      	str	r3, [sp, #36]	; 0x24
 800adf2:	f1b9 0f00 	cmp.w	r9, #0
 800adf6:	dd05      	ble.n	800ae04 <_dtoa_r+0x814>
 800adf8:	4651      	mov	r1, sl
 800adfa:	464a      	mov	r2, r9
 800adfc:	4628      	mov	r0, r5
 800adfe:	f000 fd2f 	bl	800b860 <__lshift>
 800ae02:	4682      	mov	sl, r0
 800ae04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	dd05      	ble.n	800ae16 <_dtoa_r+0x826>
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 fd26 	bl	800b860 <__lshift>
 800ae14:	4604      	mov	r4, r0
 800ae16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d072      	beq.n	800af02 <_dtoa_r+0x912>
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	4650      	mov	r0, sl
 800ae20:	f000 fd8a 	bl	800b938 <__mcmp>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	da6c      	bge.n	800af02 <_dtoa_r+0x912>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4651      	mov	r1, sl
 800ae2c:	220a      	movs	r2, #10
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f000 fb20 	bl	800b474 <__multadd>
 800ae34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae36:	4682      	mov	sl, r0
 800ae38:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 81ac 	beq.w	800b19a <_dtoa_r+0xbaa>
 800ae42:	2300      	movs	r3, #0
 800ae44:	4631      	mov	r1, r6
 800ae46:	220a      	movs	r2, #10
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f000 fb13 	bl	800b474 <__multadd>
 800ae4e:	9b06      	ldr	r3, [sp, #24]
 800ae50:	4606      	mov	r6, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f300 8093 	bgt.w	800af7e <_dtoa_r+0x98e>
 800ae58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	dc59      	bgt.n	800af12 <_dtoa_r+0x922>
 800ae5e:	e08e      	b.n	800af7e <_dtoa_r+0x98e>
 800ae60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae66:	e75d      	b.n	800ad24 <_dtoa_r+0x734>
 800ae68:	9b08      	ldr	r3, [sp, #32]
 800ae6a:	1e5c      	subs	r4, r3, #1
 800ae6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae6e:	42a3      	cmp	r3, r4
 800ae70:	bfbf      	itttt	lt
 800ae72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae74:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800ae76:	1ae3      	sublt	r3, r4, r3
 800ae78:	18d2      	addlt	r2, r2, r3
 800ae7a:	bfa8      	it	ge
 800ae7c:	1b1c      	subge	r4, r3, r4
 800ae7e:	9b08      	ldr	r3, [sp, #32]
 800ae80:	bfbe      	ittt	lt
 800ae82:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ae84:	920e      	strlt	r2, [sp, #56]	; 0x38
 800ae86:	2400      	movlt	r4, #0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	bfb5      	itete	lt
 800ae8c:	eba9 0703 	sublt.w	r7, r9, r3
 800ae90:	464f      	movge	r7, r9
 800ae92:	2300      	movlt	r3, #0
 800ae94:	9b08      	ldrge	r3, [sp, #32]
 800ae96:	e747      	b.n	800ad28 <_dtoa_r+0x738>
 800ae98:	464f      	mov	r7, r9
 800ae9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae9c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ae9e:	e74c      	b.n	800ad3a <_dtoa_r+0x74a>
 800aea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aea2:	e773      	b.n	800ad8c <_dtoa_r+0x79c>
 800aea4:	3fe00000 	.word	0x3fe00000
 800aea8:	40240000 	.word	0x40240000
 800aeac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	dc18      	bgt.n	800aee4 <_dtoa_r+0x8f4>
 800aeb2:	9b04      	ldr	r3, [sp, #16]
 800aeb4:	b9b3      	cbnz	r3, 800aee4 <_dtoa_r+0x8f4>
 800aeb6:	9b05      	ldr	r3, [sp, #20]
 800aeb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aebc:	b993      	cbnz	r3, 800aee4 <_dtoa_r+0x8f4>
 800aebe:	9b05      	ldr	r3, [sp, #20]
 800aec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aec4:	0d1b      	lsrs	r3, r3, #20
 800aec6:	051b      	lsls	r3, r3, #20
 800aec8:	b17b      	cbz	r3, 800aeea <_dtoa_r+0x8fa>
 800aeca:	f04f 0801 	mov.w	r8, #1
 800aece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed0:	f109 0901 	add.w	r9, r9, #1
 800aed4:	3301      	adds	r3, #1
 800aed6:	9309      	str	r3, [sp, #36]	; 0x24
 800aed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f47f af6f 	bne.w	800adbe <_dtoa_r+0x7ce>
 800aee0:	2001      	movs	r0, #1
 800aee2:	e774      	b.n	800adce <_dtoa_r+0x7de>
 800aee4:	f04f 0800 	mov.w	r8, #0
 800aee8:	e7f6      	b.n	800aed8 <_dtoa_r+0x8e8>
 800aeea:	4698      	mov	r8, r3
 800aeec:	e7f4      	b.n	800aed8 <_dtoa_r+0x8e8>
 800aeee:	d080      	beq.n	800adf2 <_dtoa_r+0x802>
 800aef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef2:	331c      	adds	r3, #28
 800aef4:	441a      	add	r2, r3
 800aef6:	4499      	add	r9, r3
 800aef8:	441f      	add	r7, r3
 800aefa:	9209      	str	r2, [sp, #36]	; 0x24
 800aefc:	e779      	b.n	800adf2 <_dtoa_r+0x802>
 800aefe:	4603      	mov	r3, r0
 800af00:	e7f6      	b.n	800aef0 <_dtoa_r+0x900>
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	2b00      	cmp	r3, #0
 800af06:	dc34      	bgt.n	800af72 <_dtoa_r+0x982>
 800af08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	dd31      	ble.n	800af72 <_dtoa_r+0x982>
 800af0e:	9b08      	ldr	r3, [sp, #32]
 800af10:	9306      	str	r3, [sp, #24]
 800af12:	9b06      	ldr	r3, [sp, #24]
 800af14:	b963      	cbnz	r3, 800af30 <_dtoa_r+0x940>
 800af16:	4621      	mov	r1, r4
 800af18:	2205      	movs	r2, #5
 800af1a:	4628      	mov	r0, r5
 800af1c:	f000 faaa 	bl	800b474 <__multadd>
 800af20:	4601      	mov	r1, r0
 800af22:	4604      	mov	r4, r0
 800af24:	4650      	mov	r0, sl
 800af26:	f000 fd07 	bl	800b938 <__mcmp>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	f73f adbf 	bgt.w	800aaae <_dtoa_r+0x4be>
 800af30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af32:	9f03      	ldr	r7, [sp, #12]
 800af34:	ea6f 0b03 	mvn.w	fp, r3
 800af38:	f04f 0800 	mov.w	r8, #0
 800af3c:	4621      	mov	r1, r4
 800af3e:	4628      	mov	r0, r5
 800af40:	f000 fa76 	bl	800b430 <_Bfree>
 800af44:	2e00      	cmp	r6, #0
 800af46:	f43f aead 	beq.w	800aca4 <_dtoa_r+0x6b4>
 800af4a:	f1b8 0f00 	cmp.w	r8, #0
 800af4e:	d005      	beq.n	800af5c <_dtoa_r+0x96c>
 800af50:	45b0      	cmp	r8, r6
 800af52:	d003      	beq.n	800af5c <_dtoa_r+0x96c>
 800af54:	4641      	mov	r1, r8
 800af56:	4628      	mov	r0, r5
 800af58:	f000 fa6a 	bl	800b430 <_Bfree>
 800af5c:	4631      	mov	r1, r6
 800af5e:	4628      	mov	r0, r5
 800af60:	f000 fa66 	bl	800b430 <_Bfree>
 800af64:	e69e      	b.n	800aca4 <_dtoa_r+0x6b4>
 800af66:	2400      	movs	r4, #0
 800af68:	4626      	mov	r6, r4
 800af6a:	e7e1      	b.n	800af30 <_dtoa_r+0x940>
 800af6c:	46c3      	mov	fp, r8
 800af6e:	4626      	mov	r6, r4
 800af70:	e59d      	b.n	800aaae <_dtoa_r+0x4be>
 800af72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af74:	2b00      	cmp	r3, #0
 800af76:	f000 80c8 	beq.w	800b10a <_dtoa_r+0xb1a>
 800af7a:	9b08      	ldr	r3, [sp, #32]
 800af7c:	9306      	str	r3, [sp, #24]
 800af7e:	2f00      	cmp	r7, #0
 800af80:	dd05      	ble.n	800af8e <_dtoa_r+0x99e>
 800af82:	4631      	mov	r1, r6
 800af84:	463a      	mov	r2, r7
 800af86:	4628      	mov	r0, r5
 800af88:	f000 fc6a 	bl	800b860 <__lshift>
 800af8c:	4606      	mov	r6, r0
 800af8e:	f1b8 0f00 	cmp.w	r8, #0
 800af92:	d05b      	beq.n	800b04c <_dtoa_r+0xa5c>
 800af94:	4628      	mov	r0, r5
 800af96:	6871      	ldr	r1, [r6, #4]
 800af98:	f000 fa0a 	bl	800b3b0 <_Balloc>
 800af9c:	4607      	mov	r7, r0
 800af9e:	b928      	cbnz	r0, 800afac <_dtoa_r+0x9bc>
 800afa0:	4602      	mov	r2, r0
 800afa2:	f240 21ef 	movw	r1, #751	; 0x2ef
 800afa6:	4b81      	ldr	r3, [pc, #516]	; (800b1ac <_dtoa_r+0xbbc>)
 800afa8:	f7ff bb36 	b.w	800a618 <_dtoa_r+0x28>
 800afac:	6932      	ldr	r2, [r6, #16]
 800afae:	f106 010c 	add.w	r1, r6, #12
 800afb2:	3202      	adds	r2, #2
 800afb4:	0092      	lsls	r2, r2, #2
 800afb6:	300c      	adds	r0, #12
 800afb8:	f7ff fa5f 	bl	800a47a <memcpy>
 800afbc:	2201      	movs	r2, #1
 800afbe:	4639      	mov	r1, r7
 800afc0:	4628      	mov	r0, r5
 800afc2:	f000 fc4d 	bl	800b860 <__lshift>
 800afc6:	46b0      	mov	r8, r6
 800afc8:	4606      	mov	r6, r0
 800afca:	9b03      	ldr	r3, [sp, #12]
 800afcc:	9a03      	ldr	r2, [sp, #12]
 800afce:	3301      	adds	r3, #1
 800afd0:	9308      	str	r3, [sp, #32]
 800afd2:	9b06      	ldr	r3, [sp, #24]
 800afd4:	4413      	add	r3, r2
 800afd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800afd8:	9b04      	ldr	r3, [sp, #16]
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	930a      	str	r3, [sp, #40]	; 0x28
 800afe0:	9b08      	ldr	r3, [sp, #32]
 800afe2:	4621      	mov	r1, r4
 800afe4:	3b01      	subs	r3, #1
 800afe6:	4650      	mov	r0, sl
 800afe8:	9304      	str	r3, [sp, #16]
 800afea:	f7ff fa77 	bl	800a4dc <quorem>
 800afee:	4641      	mov	r1, r8
 800aff0:	9006      	str	r0, [sp, #24]
 800aff2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aff6:	4650      	mov	r0, sl
 800aff8:	f000 fc9e 	bl	800b938 <__mcmp>
 800affc:	4632      	mov	r2, r6
 800affe:	9009      	str	r0, [sp, #36]	; 0x24
 800b000:	4621      	mov	r1, r4
 800b002:	4628      	mov	r0, r5
 800b004:	f000 fcb4 	bl	800b970 <__mdiff>
 800b008:	68c2      	ldr	r2, [r0, #12]
 800b00a:	4607      	mov	r7, r0
 800b00c:	bb02      	cbnz	r2, 800b050 <_dtoa_r+0xa60>
 800b00e:	4601      	mov	r1, r0
 800b010:	4650      	mov	r0, sl
 800b012:	f000 fc91 	bl	800b938 <__mcmp>
 800b016:	4602      	mov	r2, r0
 800b018:	4639      	mov	r1, r7
 800b01a:	4628      	mov	r0, r5
 800b01c:	920c      	str	r2, [sp, #48]	; 0x30
 800b01e:	f000 fa07 	bl	800b430 <_Bfree>
 800b022:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b024:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b026:	9f08      	ldr	r7, [sp, #32]
 800b028:	ea43 0102 	orr.w	r1, r3, r2
 800b02c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b02e:	4319      	orrs	r1, r3
 800b030:	d110      	bne.n	800b054 <_dtoa_r+0xa64>
 800b032:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b036:	d029      	beq.n	800b08c <_dtoa_r+0xa9c>
 800b038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	dd02      	ble.n	800b044 <_dtoa_r+0xa54>
 800b03e:	9b06      	ldr	r3, [sp, #24]
 800b040:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b044:	9b04      	ldr	r3, [sp, #16]
 800b046:	f883 9000 	strb.w	r9, [r3]
 800b04a:	e777      	b.n	800af3c <_dtoa_r+0x94c>
 800b04c:	4630      	mov	r0, r6
 800b04e:	e7ba      	b.n	800afc6 <_dtoa_r+0x9d6>
 800b050:	2201      	movs	r2, #1
 800b052:	e7e1      	b.n	800b018 <_dtoa_r+0xa28>
 800b054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b056:	2b00      	cmp	r3, #0
 800b058:	db04      	blt.n	800b064 <_dtoa_r+0xa74>
 800b05a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b05c:	430b      	orrs	r3, r1
 800b05e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b060:	430b      	orrs	r3, r1
 800b062:	d120      	bne.n	800b0a6 <_dtoa_r+0xab6>
 800b064:	2a00      	cmp	r2, #0
 800b066:	dded      	ble.n	800b044 <_dtoa_r+0xa54>
 800b068:	4651      	mov	r1, sl
 800b06a:	2201      	movs	r2, #1
 800b06c:	4628      	mov	r0, r5
 800b06e:	f000 fbf7 	bl	800b860 <__lshift>
 800b072:	4621      	mov	r1, r4
 800b074:	4682      	mov	sl, r0
 800b076:	f000 fc5f 	bl	800b938 <__mcmp>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	dc03      	bgt.n	800b086 <_dtoa_r+0xa96>
 800b07e:	d1e1      	bne.n	800b044 <_dtoa_r+0xa54>
 800b080:	f019 0f01 	tst.w	r9, #1
 800b084:	d0de      	beq.n	800b044 <_dtoa_r+0xa54>
 800b086:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b08a:	d1d8      	bne.n	800b03e <_dtoa_r+0xa4e>
 800b08c:	2339      	movs	r3, #57	; 0x39
 800b08e:	9a04      	ldr	r2, [sp, #16]
 800b090:	7013      	strb	r3, [r2, #0]
 800b092:	463b      	mov	r3, r7
 800b094:	461f      	mov	r7, r3
 800b096:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	2a39      	cmp	r2, #57	; 0x39
 800b09e:	d06b      	beq.n	800b178 <_dtoa_r+0xb88>
 800b0a0:	3201      	adds	r2, #1
 800b0a2:	701a      	strb	r2, [r3, #0]
 800b0a4:	e74a      	b.n	800af3c <_dtoa_r+0x94c>
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	dd07      	ble.n	800b0ba <_dtoa_r+0xaca>
 800b0aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b0ae:	d0ed      	beq.n	800b08c <_dtoa_r+0xa9c>
 800b0b0:	9a04      	ldr	r2, [sp, #16]
 800b0b2:	f109 0301 	add.w	r3, r9, #1
 800b0b6:	7013      	strb	r3, [r2, #0]
 800b0b8:	e740      	b.n	800af3c <_dtoa_r+0x94c>
 800b0ba:	9b08      	ldr	r3, [sp, #32]
 800b0bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0be:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d042      	beq.n	800b14c <_dtoa_r+0xb5c>
 800b0c6:	4651      	mov	r1, sl
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	220a      	movs	r2, #10
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f000 f9d1 	bl	800b474 <__multadd>
 800b0d2:	45b0      	cmp	r8, r6
 800b0d4:	4682      	mov	sl, r0
 800b0d6:	f04f 0300 	mov.w	r3, #0
 800b0da:	f04f 020a 	mov.w	r2, #10
 800b0de:	4641      	mov	r1, r8
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	d107      	bne.n	800b0f4 <_dtoa_r+0xb04>
 800b0e4:	f000 f9c6 	bl	800b474 <__multadd>
 800b0e8:	4680      	mov	r8, r0
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	9b08      	ldr	r3, [sp, #32]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	9308      	str	r3, [sp, #32]
 800b0f2:	e775      	b.n	800afe0 <_dtoa_r+0x9f0>
 800b0f4:	f000 f9be 	bl	800b474 <__multadd>
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	4680      	mov	r8, r0
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	220a      	movs	r2, #10
 800b100:	4628      	mov	r0, r5
 800b102:	f000 f9b7 	bl	800b474 <__multadd>
 800b106:	4606      	mov	r6, r0
 800b108:	e7f0      	b.n	800b0ec <_dtoa_r+0xafc>
 800b10a:	9b08      	ldr	r3, [sp, #32]
 800b10c:	9306      	str	r3, [sp, #24]
 800b10e:	9f03      	ldr	r7, [sp, #12]
 800b110:	4621      	mov	r1, r4
 800b112:	4650      	mov	r0, sl
 800b114:	f7ff f9e2 	bl	800a4dc <quorem>
 800b118:	9b03      	ldr	r3, [sp, #12]
 800b11a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b11e:	f807 9b01 	strb.w	r9, [r7], #1
 800b122:	1afa      	subs	r2, r7, r3
 800b124:	9b06      	ldr	r3, [sp, #24]
 800b126:	4293      	cmp	r3, r2
 800b128:	dd07      	ble.n	800b13a <_dtoa_r+0xb4a>
 800b12a:	4651      	mov	r1, sl
 800b12c:	2300      	movs	r3, #0
 800b12e:	220a      	movs	r2, #10
 800b130:	4628      	mov	r0, r5
 800b132:	f000 f99f 	bl	800b474 <__multadd>
 800b136:	4682      	mov	sl, r0
 800b138:	e7ea      	b.n	800b110 <_dtoa_r+0xb20>
 800b13a:	9b06      	ldr	r3, [sp, #24]
 800b13c:	f04f 0800 	mov.w	r8, #0
 800b140:	2b00      	cmp	r3, #0
 800b142:	bfcc      	ite	gt
 800b144:	461f      	movgt	r7, r3
 800b146:	2701      	movle	r7, #1
 800b148:	9b03      	ldr	r3, [sp, #12]
 800b14a:	441f      	add	r7, r3
 800b14c:	4651      	mov	r1, sl
 800b14e:	2201      	movs	r2, #1
 800b150:	4628      	mov	r0, r5
 800b152:	f000 fb85 	bl	800b860 <__lshift>
 800b156:	4621      	mov	r1, r4
 800b158:	4682      	mov	sl, r0
 800b15a:	f000 fbed 	bl	800b938 <__mcmp>
 800b15e:	2800      	cmp	r0, #0
 800b160:	dc97      	bgt.n	800b092 <_dtoa_r+0xaa2>
 800b162:	d102      	bne.n	800b16a <_dtoa_r+0xb7a>
 800b164:	f019 0f01 	tst.w	r9, #1
 800b168:	d193      	bne.n	800b092 <_dtoa_r+0xaa2>
 800b16a:	463b      	mov	r3, r7
 800b16c:	461f      	mov	r7, r3
 800b16e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b172:	2a30      	cmp	r2, #48	; 0x30
 800b174:	d0fa      	beq.n	800b16c <_dtoa_r+0xb7c>
 800b176:	e6e1      	b.n	800af3c <_dtoa_r+0x94c>
 800b178:	9a03      	ldr	r2, [sp, #12]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d18a      	bne.n	800b094 <_dtoa_r+0xaa4>
 800b17e:	2331      	movs	r3, #49	; 0x31
 800b180:	f10b 0b01 	add.w	fp, fp, #1
 800b184:	e797      	b.n	800b0b6 <_dtoa_r+0xac6>
 800b186:	4b0a      	ldr	r3, [pc, #40]	; (800b1b0 <_dtoa_r+0xbc0>)
 800b188:	f7ff ba9f 	b.w	800a6ca <_dtoa_r+0xda>
 800b18c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f47f aa77 	bne.w	800a682 <_dtoa_r+0x92>
 800b194:	4b07      	ldr	r3, [pc, #28]	; (800b1b4 <_dtoa_r+0xbc4>)
 800b196:	f7ff ba98 	b.w	800a6ca <_dtoa_r+0xda>
 800b19a:	9b06      	ldr	r3, [sp, #24]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	dcb6      	bgt.n	800b10e <_dtoa_r+0xb1e>
 800b1a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	f73f aeb5 	bgt.w	800af12 <_dtoa_r+0x922>
 800b1a8:	e7b1      	b.n	800b10e <_dtoa_r+0xb1e>
 800b1aa:	bf00      	nop
 800b1ac:	0800f049 	.word	0x0800f049
 800b1b0:	0800f330 	.word	0x0800f330
 800b1b4:	0800efcd 	.word	0x0800efcd

0800b1b8 <_free_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	2900      	cmp	r1, #0
 800b1be:	d040      	beq.n	800b242 <_free_r+0x8a>
 800b1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1c4:	1f0c      	subs	r4, r1, #4
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	bfb8      	it	lt
 800b1ca:	18e4      	addlt	r4, r4, r3
 800b1cc:	f000 f8e4 	bl	800b398 <__malloc_lock>
 800b1d0:	4a1c      	ldr	r2, [pc, #112]	; (800b244 <_free_r+0x8c>)
 800b1d2:	6813      	ldr	r3, [r2, #0]
 800b1d4:	b933      	cbnz	r3, 800b1e4 <_free_r+0x2c>
 800b1d6:	6063      	str	r3, [r4, #4]
 800b1d8:	6014      	str	r4, [r2, #0]
 800b1da:	4628      	mov	r0, r5
 800b1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1e0:	f000 b8e0 	b.w	800b3a4 <__malloc_unlock>
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	d908      	bls.n	800b1fa <_free_r+0x42>
 800b1e8:	6820      	ldr	r0, [r4, #0]
 800b1ea:	1821      	adds	r1, r4, r0
 800b1ec:	428b      	cmp	r3, r1
 800b1ee:	bf01      	itttt	eq
 800b1f0:	6819      	ldreq	r1, [r3, #0]
 800b1f2:	685b      	ldreq	r3, [r3, #4]
 800b1f4:	1809      	addeq	r1, r1, r0
 800b1f6:	6021      	streq	r1, [r4, #0]
 800b1f8:	e7ed      	b.n	800b1d6 <_free_r+0x1e>
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	b10b      	cbz	r3, 800b204 <_free_r+0x4c>
 800b200:	42a3      	cmp	r3, r4
 800b202:	d9fa      	bls.n	800b1fa <_free_r+0x42>
 800b204:	6811      	ldr	r1, [r2, #0]
 800b206:	1850      	adds	r0, r2, r1
 800b208:	42a0      	cmp	r0, r4
 800b20a:	d10b      	bne.n	800b224 <_free_r+0x6c>
 800b20c:	6820      	ldr	r0, [r4, #0]
 800b20e:	4401      	add	r1, r0
 800b210:	1850      	adds	r0, r2, r1
 800b212:	4283      	cmp	r3, r0
 800b214:	6011      	str	r1, [r2, #0]
 800b216:	d1e0      	bne.n	800b1da <_free_r+0x22>
 800b218:	6818      	ldr	r0, [r3, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	4408      	add	r0, r1
 800b21e:	6010      	str	r0, [r2, #0]
 800b220:	6053      	str	r3, [r2, #4]
 800b222:	e7da      	b.n	800b1da <_free_r+0x22>
 800b224:	d902      	bls.n	800b22c <_free_r+0x74>
 800b226:	230c      	movs	r3, #12
 800b228:	602b      	str	r3, [r5, #0]
 800b22a:	e7d6      	b.n	800b1da <_free_r+0x22>
 800b22c:	6820      	ldr	r0, [r4, #0]
 800b22e:	1821      	adds	r1, r4, r0
 800b230:	428b      	cmp	r3, r1
 800b232:	bf01      	itttt	eq
 800b234:	6819      	ldreq	r1, [r3, #0]
 800b236:	685b      	ldreq	r3, [r3, #4]
 800b238:	1809      	addeq	r1, r1, r0
 800b23a:	6021      	streq	r1, [r4, #0]
 800b23c:	6063      	str	r3, [r4, #4]
 800b23e:	6054      	str	r4, [r2, #4]
 800b240:	e7cb      	b.n	800b1da <_free_r+0x22>
 800b242:	bd38      	pop	{r3, r4, r5, pc}
 800b244:	200015b4 	.word	0x200015b4

0800b248 <malloc>:
 800b248:	4b02      	ldr	r3, [pc, #8]	; (800b254 <malloc+0xc>)
 800b24a:	4601      	mov	r1, r0
 800b24c:	6818      	ldr	r0, [r3, #0]
 800b24e:	f000 b823 	b.w	800b298 <_malloc_r>
 800b252:	bf00      	nop
 800b254:	20000310 	.word	0x20000310

0800b258 <sbrk_aligned>:
 800b258:	b570      	push	{r4, r5, r6, lr}
 800b25a:	4e0e      	ldr	r6, [pc, #56]	; (800b294 <sbrk_aligned+0x3c>)
 800b25c:	460c      	mov	r4, r1
 800b25e:	6831      	ldr	r1, [r6, #0]
 800b260:	4605      	mov	r5, r0
 800b262:	b911      	cbnz	r1, 800b26a <sbrk_aligned+0x12>
 800b264:	f002 fba6 	bl	800d9b4 <_sbrk_r>
 800b268:	6030      	str	r0, [r6, #0]
 800b26a:	4621      	mov	r1, r4
 800b26c:	4628      	mov	r0, r5
 800b26e:	f002 fba1 	bl	800d9b4 <_sbrk_r>
 800b272:	1c43      	adds	r3, r0, #1
 800b274:	d00a      	beq.n	800b28c <sbrk_aligned+0x34>
 800b276:	1cc4      	adds	r4, r0, #3
 800b278:	f024 0403 	bic.w	r4, r4, #3
 800b27c:	42a0      	cmp	r0, r4
 800b27e:	d007      	beq.n	800b290 <sbrk_aligned+0x38>
 800b280:	1a21      	subs	r1, r4, r0
 800b282:	4628      	mov	r0, r5
 800b284:	f002 fb96 	bl	800d9b4 <_sbrk_r>
 800b288:	3001      	adds	r0, #1
 800b28a:	d101      	bne.n	800b290 <sbrk_aligned+0x38>
 800b28c:	f04f 34ff 	mov.w	r4, #4294967295
 800b290:	4620      	mov	r0, r4
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	200015b8 	.word	0x200015b8

0800b298 <_malloc_r>:
 800b298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b29c:	1ccd      	adds	r5, r1, #3
 800b29e:	f025 0503 	bic.w	r5, r5, #3
 800b2a2:	3508      	adds	r5, #8
 800b2a4:	2d0c      	cmp	r5, #12
 800b2a6:	bf38      	it	cc
 800b2a8:	250c      	movcc	r5, #12
 800b2aa:	2d00      	cmp	r5, #0
 800b2ac:	4607      	mov	r7, r0
 800b2ae:	db01      	blt.n	800b2b4 <_malloc_r+0x1c>
 800b2b0:	42a9      	cmp	r1, r5
 800b2b2:	d905      	bls.n	800b2c0 <_malloc_r+0x28>
 800b2b4:	230c      	movs	r3, #12
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	603b      	str	r3, [r7, #0]
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b394 <_malloc_r+0xfc>
 800b2c4:	f000 f868 	bl	800b398 <__malloc_lock>
 800b2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2cc:	461c      	mov	r4, r3
 800b2ce:	bb5c      	cbnz	r4, 800b328 <_malloc_r+0x90>
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f7ff ffc0 	bl	800b258 <sbrk_aligned>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	4604      	mov	r4, r0
 800b2dc:	d155      	bne.n	800b38a <_malloc_r+0xf2>
 800b2de:	f8d8 4000 	ldr.w	r4, [r8]
 800b2e2:	4626      	mov	r6, r4
 800b2e4:	2e00      	cmp	r6, #0
 800b2e6:	d145      	bne.n	800b374 <_malloc_r+0xdc>
 800b2e8:	2c00      	cmp	r4, #0
 800b2ea:	d048      	beq.n	800b37e <_malloc_r+0xe6>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	eb04 0903 	add.w	r9, r4, r3
 800b2f6:	f002 fb5d 	bl	800d9b4 <_sbrk_r>
 800b2fa:	4581      	cmp	r9, r0
 800b2fc:	d13f      	bne.n	800b37e <_malloc_r+0xe6>
 800b2fe:	6821      	ldr	r1, [r4, #0]
 800b300:	4638      	mov	r0, r7
 800b302:	1a6d      	subs	r5, r5, r1
 800b304:	4629      	mov	r1, r5
 800b306:	f7ff ffa7 	bl	800b258 <sbrk_aligned>
 800b30a:	3001      	adds	r0, #1
 800b30c:	d037      	beq.n	800b37e <_malloc_r+0xe6>
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	442b      	add	r3, r5
 800b312:	6023      	str	r3, [r4, #0]
 800b314:	f8d8 3000 	ldr.w	r3, [r8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d038      	beq.n	800b38e <_malloc_r+0xf6>
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	42a2      	cmp	r2, r4
 800b320:	d12b      	bne.n	800b37a <_malloc_r+0xe2>
 800b322:	2200      	movs	r2, #0
 800b324:	605a      	str	r2, [r3, #4]
 800b326:	e00f      	b.n	800b348 <_malloc_r+0xb0>
 800b328:	6822      	ldr	r2, [r4, #0]
 800b32a:	1b52      	subs	r2, r2, r5
 800b32c:	d41f      	bmi.n	800b36e <_malloc_r+0xd6>
 800b32e:	2a0b      	cmp	r2, #11
 800b330:	d917      	bls.n	800b362 <_malloc_r+0xca>
 800b332:	1961      	adds	r1, r4, r5
 800b334:	42a3      	cmp	r3, r4
 800b336:	6025      	str	r5, [r4, #0]
 800b338:	bf18      	it	ne
 800b33a:	6059      	strne	r1, [r3, #4]
 800b33c:	6863      	ldr	r3, [r4, #4]
 800b33e:	bf08      	it	eq
 800b340:	f8c8 1000 	streq.w	r1, [r8]
 800b344:	5162      	str	r2, [r4, r5]
 800b346:	604b      	str	r3, [r1, #4]
 800b348:	4638      	mov	r0, r7
 800b34a:	f104 060b 	add.w	r6, r4, #11
 800b34e:	f000 f829 	bl	800b3a4 <__malloc_unlock>
 800b352:	f026 0607 	bic.w	r6, r6, #7
 800b356:	1d23      	adds	r3, r4, #4
 800b358:	1af2      	subs	r2, r6, r3
 800b35a:	d0ae      	beq.n	800b2ba <_malloc_r+0x22>
 800b35c:	1b9b      	subs	r3, r3, r6
 800b35e:	50a3      	str	r3, [r4, r2]
 800b360:	e7ab      	b.n	800b2ba <_malloc_r+0x22>
 800b362:	42a3      	cmp	r3, r4
 800b364:	6862      	ldr	r2, [r4, #4]
 800b366:	d1dd      	bne.n	800b324 <_malloc_r+0x8c>
 800b368:	f8c8 2000 	str.w	r2, [r8]
 800b36c:	e7ec      	b.n	800b348 <_malloc_r+0xb0>
 800b36e:	4623      	mov	r3, r4
 800b370:	6864      	ldr	r4, [r4, #4]
 800b372:	e7ac      	b.n	800b2ce <_malloc_r+0x36>
 800b374:	4634      	mov	r4, r6
 800b376:	6876      	ldr	r6, [r6, #4]
 800b378:	e7b4      	b.n	800b2e4 <_malloc_r+0x4c>
 800b37a:	4613      	mov	r3, r2
 800b37c:	e7cc      	b.n	800b318 <_malloc_r+0x80>
 800b37e:	230c      	movs	r3, #12
 800b380:	4638      	mov	r0, r7
 800b382:	603b      	str	r3, [r7, #0]
 800b384:	f000 f80e 	bl	800b3a4 <__malloc_unlock>
 800b388:	e797      	b.n	800b2ba <_malloc_r+0x22>
 800b38a:	6025      	str	r5, [r4, #0]
 800b38c:	e7dc      	b.n	800b348 <_malloc_r+0xb0>
 800b38e:	605b      	str	r3, [r3, #4]
 800b390:	deff      	udf	#255	; 0xff
 800b392:	bf00      	nop
 800b394:	200015b4 	.word	0x200015b4

0800b398 <__malloc_lock>:
 800b398:	4801      	ldr	r0, [pc, #4]	; (800b3a0 <__malloc_lock+0x8>)
 800b39a:	f7ff b85e 	b.w	800a45a <__retarget_lock_acquire_recursive>
 800b39e:	bf00      	nop
 800b3a0:	200015b0 	.word	0x200015b0

0800b3a4 <__malloc_unlock>:
 800b3a4:	4801      	ldr	r0, [pc, #4]	; (800b3ac <__malloc_unlock+0x8>)
 800b3a6:	f7ff b859 	b.w	800a45c <__retarget_lock_release_recursive>
 800b3aa:	bf00      	nop
 800b3ac:	200015b0 	.word	0x200015b0

0800b3b0 <_Balloc>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	69c6      	ldr	r6, [r0, #28]
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	b976      	cbnz	r6, 800b3d8 <_Balloc+0x28>
 800b3ba:	2010      	movs	r0, #16
 800b3bc:	f7ff ff44 	bl	800b248 <malloc>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	61e0      	str	r0, [r4, #28]
 800b3c4:	b920      	cbnz	r0, 800b3d0 <_Balloc+0x20>
 800b3c6:	216b      	movs	r1, #107	; 0x6b
 800b3c8:	4b17      	ldr	r3, [pc, #92]	; (800b428 <_Balloc+0x78>)
 800b3ca:	4818      	ldr	r0, [pc, #96]	; (800b42c <_Balloc+0x7c>)
 800b3cc:	f7ff f868 	bl	800a4a0 <__assert_func>
 800b3d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3d4:	6006      	str	r6, [r0, #0]
 800b3d6:	60c6      	str	r6, [r0, #12]
 800b3d8:	69e6      	ldr	r6, [r4, #28]
 800b3da:	68f3      	ldr	r3, [r6, #12]
 800b3dc:	b183      	cbz	r3, 800b400 <_Balloc+0x50>
 800b3de:	69e3      	ldr	r3, [r4, #28]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3e6:	b9b8      	cbnz	r0, 800b418 <_Balloc+0x68>
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b3ee:	1d72      	adds	r2, r6, #5
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	0092      	lsls	r2, r2, #2
 800b3f4:	f002 fafb 	bl	800d9ee <_calloc_r>
 800b3f8:	b160      	cbz	r0, 800b414 <_Balloc+0x64>
 800b3fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3fe:	e00e      	b.n	800b41e <_Balloc+0x6e>
 800b400:	2221      	movs	r2, #33	; 0x21
 800b402:	2104      	movs	r1, #4
 800b404:	4620      	mov	r0, r4
 800b406:	f002 faf2 	bl	800d9ee <_calloc_r>
 800b40a:	69e3      	ldr	r3, [r4, #28]
 800b40c:	60f0      	str	r0, [r6, #12]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e4      	bne.n	800b3de <_Balloc+0x2e>
 800b414:	2000      	movs	r0, #0
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	6802      	ldr	r2, [r0, #0]
 800b41a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b41e:	2300      	movs	r3, #0
 800b420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b424:	e7f7      	b.n	800b416 <_Balloc+0x66>
 800b426:	bf00      	nop
 800b428:	0800efda 	.word	0x0800efda
 800b42c:	0800f05a 	.word	0x0800f05a

0800b430 <_Bfree>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	69c6      	ldr	r6, [r0, #28]
 800b434:	4605      	mov	r5, r0
 800b436:	460c      	mov	r4, r1
 800b438:	b976      	cbnz	r6, 800b458 <_Bfree+0x28>
 800b43a:	2010      	movs	r0, #16
 800b43c:	f7ff ff04 	bl	800b248 <malloc>
 800b440:	4602      	mov	r2, r0
 800b442:	61e8      	str	r0, [r5, #28]
 800b444:	b920      	cbnz	r0, 800b450 <_Bfree+0x20>
 800b446:	218f      	movs	r1, #143	; 0x8f
 800b448:	4b08      	ldr	r3, [pc, #32]	; (800b46c <_Bfree+0x3c>)
 800b44a:	4809      	ldr	r0, [pc, #36]	; (800b470 <_Bfree+0x40>)
 800b44c:	f7ff f828 	bl	800a4a0 <__assert_func>
 800b450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b454:	6006      	str	r6, [r0, #0]
 800b456:	60c6      	str	r6, [r0, #12]
 800b458:	b13c      	cbz	r4, 800b46a <_Bfree+0x3a>
 800b45a:	69eb      	ldr	r3, [r5, #28]
 800b45c:	6862      	ldr	r2, [r4, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b464:	6021      	str	r1, [r4, #0]
 800b466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b46a:	bd70      	pop	{r4, r5, r6, pc}
 800b46c:	0800efda 	.word	0x0800efda
 800b470:	0800f05a 	.word	0x0800f05a

0800b474 <__multadd>:
 800b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b478:	4607      	mov	r7, r0
 800b47a:	460c      	mov	r4, r1
 800b47c:	461e      	mov	r6, r3
 800b47e:	2000      	movs	r0, #0
 800b480:	690d      	ldr	r5, [r1, #16]
 800b482:	f101 0c14 	add.w	ip, r1, #20
 800b486:	f8dc 3000 	ldr.w	r3, [ip]
 800b48a:	3001      	adds	r0, #1
 800b48c:	b299      	uxth	r1, r3
 800b48e:	fb02 6101 	mla	r1, r2, r1, r6
 800b492:	0c1e      	lsrs	r6, r3, #16
 800b494:	0c0b      	lsrs	r3, r1, #16
 800b496:	fb02 3306 	mla	r3, r2, r6, r3
 800b49a:	b289      	uxth	r1, r1
 800b49c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4a0:	4285      	cmp	r5, r0
 800b4a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4a6:	f84c 1b04 	str.w	r1, [ip], #4
 800b4aa:	dcec      	bgt.n	800b486 <__multadd+0x12>
 800b4ac:	b30e      	cbz	r6, 800b4f2 <__multadd+0x7e>
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	42ab      	cmp	r3, r5
 800b4b2:	dc19      	bgt.n	800b4e8 <__multadd+0x74>
 800b4b4:	6861      	ldr	r1, [r4, #4]
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	3101      	adds	r1, #1
 800b4ba:	f7ff ff79 	bl	800b3b0 <_Balloc>
 800b4be:	4680      	mov	r8, r0
 800b4c0:	b928      	cbnz	r0, 800b4ce <__multadd+0x5a>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	21ba      	movs	r1, #186	; 0xba
 800b4c6:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <__multadd+0x84>)
 800b4c8:	480c      	ldr	r0, [pc, #48]	; (800b4fc <__multadd+0x88>)
 800b4ca:	f7fe ffe9 	bl	800a4a0 <__assert_func>
 800b4ce:	6922      	ldr	r2, [r4, #16]
 800b4d0:	f104 010c 	add.w	r1, r4, #12
 800b4d4:	3202      	adds	r2, #2
 800b4d6:	0092      	lsls	r2, r2, #2
 800b4d8:	300c      	adds	r0, #12
 800b4da:	f7fe ffce 	bl	800a47a <memcpy>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	f7ff ffa5 	bl	800b430 <_Bfree>
 800b4e6:	4644      	mov	r4, r8
 800b4e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4ec:	3501      	adds	r5, #1
 800b4ee:	615e      	str	r6, [r3, #20]
 800b4f0:	6125      	str	r5, [r4, #16]
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f8:	0800f049 	.word	0x0800f049
 800b4fc:	0800f05a 	.word	0x0800f05a

0800b500 <__s2b>:
 800b500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b504:	4615      	mov	r5, r2
 800b506:	2209      	movs	r2, #9
 800b508:	461f      	mov	r7, r3
 800b50a:	3308      	adds	r3, #8
 800b50c:	460c      	mov	r4, r1
 800b50e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b512:	4606      	mov	r6, r0
 800b514:	2201      	movs	r2, #1
 800b516:	2100      	movs	r1, #0
 800b518:	429a      	cmp	r2, r3
 800b51a:	db09      	blt.n	800b530 <__s2b+0x30>
 800b51c:	4630      	mov	r0, r6
 800b51e:	f7ff ff47 	bl	800b3b0 <_Balloc>
 800b522:	b940      	cbnz	r0, 800b536 <__s2b+0x36>
 800b524:	4602      	mov	r2, r0
 800b526:	21d3      	movs	r1, #211	; 0xd3
 800b528:	4b18      	ldr	r3, [pc, #96]	; (800b58c <__s2b+0x8c>)
 800b52a:	4819      	ldr	r0, [pc, #100]	; (800b590 <__s2b+0x90>)
 800b52c:	f7fe ffb8 	bl	800a4a0 <__assert_func>
 800b530:	0052      	lsls	r2, r2, #1
 800b532:	3101      	adds	r1, #1
 800b534:	e7f0      	b.n	800b518 <__s2b+0x18>
 800b536:	9b08      	ldr	r3, [sp, #32]
 800b538:	2d09      	cmp	r5, #9
 800b53a:	6143      	str	r3, [r0, #20]
 800b53c:	f04f 0301 	mov.w	r3, #1
 800b540:	6103      	str	r3, [r0, #16]
 800b542:	dd16      	ble.n	800b572 <__s2b+0x72>
 800b544:	f104 0909 	add.w	r9, r4, #9
 800b548:	46c8      	mov	r8, r9
 800b54a:	442c      	add	r4, r5
 800b54c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b550:	4601      	mov	r1, r0
 800b552:	220a      	movs	r2, #10
 800b554:	4630      	mov	r0, r6
 800b556:	3b30      	subs	r3, #48	; 0x30
 800b558:	f7ff ff8c 	bl	800b474 <__multadd>
 800b55c:	45a0      	cmp	r8, r4
 800b55e:	d1f5      	bne.n	800b54c <__s2b+0x4c>
 800b560:	f1a5 0408 	sub.w	r4, r5, #8
 800b564:	444c      	add	r4, r9
 800b566:	1b2d      	subs	r5, r5, r4
 800b568:	1963      	adds	r3, r4, r5
 800b56a:	42bb      	cmp	r3, r7
 800b56c:	db04      	blt.n	800b578 <__s2b+0x78>
 800b56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b572:	2509      	movs	r5, #9
 800b574:	340a      	adds	r4, #10
 800b576:	e7f6      	b.n	800b566 <__s2b+0x66>
 800b578:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b57c:	4601      	mov	r1, r0
 800b57e:	220a      	movs	r2, #10
 800b580:	4630      	mov	r0, r6
 800b582:	3b30      	subs	r3, #48	; 0x30
 800b584:	f7ff ff76 	bl	800b474 <__multadd>
 800b588:	e7ee      	b.n	800b568 <__s2b+0x68>
 800b58a:	bf00      	nop
 800b58c:	0800f049 	.word	0x0800f049
 800b590:	0800f05a 	.word	0x0800f05a

0800b594 <__hi0bits>:
 800b594:	0c02      	lsrs	r2, r0, #16
 800b596:	0412      	lsls	r2, r2, #16
 800b598:	4603      	mov	r3, r0
 800b59a:	b9ca      	cbnz	r2, 800b5d0 <__hi0bits+0x3c>
 800b59c:	0403      	lsls	r3, r0, #16
 800b59e:	2010      	movs	r0, #16
 800b5a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b5a4:	bf04      	itt	eq
 800b5a6:	021b      	lsleq	r3, r3, #8
 800b5a8:	3008      	addeq	r0, #8
 800b5aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b5ae:	bf04      	itt	eq
 800b5b0:	011b      	lsleq	r3, r3, #4
 800b5b2:	3004      	addeq	r0, #4
 800b5b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b5b8:	bf04      	itt	eq
 800b5ba:	009b      	lsleq	r3, r3, #2
 800b5bc:	3002      	addeq	r0, #2
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	db05      	blt.n	800b5ce <__hi0bits+0x3a>
 800b5c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b5c6:	f100 0001 	add.w	r0, r0, #1
 800b5ca:	bf08      	it	eq
 800b5cc:	2020      	moveq	r0, #32
 800b5ce:	4770      	bx	lr
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	e7e5      	b.n	800b5a0 <__hi0bits+0xc>

0800b5d4 <__lo0bits>:
 800b5d4:	6803      	ldr	r3, [r0, #0]
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	f013 0007 	ands.w	r0, r3, #7
 800b5dc:	d00b      	beq.n	800b5f6 <__lo0bits+0x22>
 800b5de:	07d9      	lsls	r1, r3, #31
 800b5e0:	d421      	bmi.n	800b626 <__lo0bits+0x52>
 800b5e2:	0798      	lsls	r0, r3, #30
 800b5e4:	bf49      	itett	mi
 800b5e6:	085b      	lsrmi	r3, r3, #1
 800b5e8:	089b      	lsrpl	r3, r3, #2
 800b5ea:	2001      	movmi	r0, #1
 800b5ec:	6013      	strmi	r3, [r2, #0]
 800b5ee:	bf5c      	itt	pl
 800b5f0:	2002      	movpl	r0, #2
 800b5f2:	6013      	strpl	r3, [r2, #0]
 800b5f4:	4770      	bx	lr
 800b5f6:	b299      	uxth	r1, r3
 800b5f8:	b909      	cbnz	r1, 800b5fe <__lo0bits+0x2a>
 800b5fa:	2010      	movs	r0, #16
 800b5fc:	0c1b      	lsrs	r3, r3, #16
 800b5fe:	b2d9      	uxtb	r1, r3
 800b600:	b909      	cbnz	r1, 800b606 <__lo0bits+0x32>
 800b602:	3008      	adds	r0, #8
 800b604:	0a1b      	lsrs	r3, r3, #8
 800b606:	0719      	lsls	r1, r3, #28
 800b608:	bf04      	itt	eq
 800b60a:	091b      	lsreq	r3, r3, #4
 800b60c:	3004      	addeq	r0, #4
 800b60e:	0799      	lsls	r1, r3, #30
 800b610:	bf04      	itt	eq
 800b612:	089b      	lsreq	r3, r3, #2
 800b614:	3002      	addeq	r0, #2
 800b616:	07d9      	lsls	r1, r3, #31
 800b618:	d403      	bmi.n	800b622 <__lo0bits+0x4e>
 800b61a:	085b      	lsrs	r3, r3, #1
 800b61c:	f100 0001 	add.w	r0, r0, #1
 800b620:	d003      	beq.n	800b62a <__lo0bits+0x56>
 800b622:	6013      	str	r3, [r2, #0]
 800b624:	4770      	bx	lr
 800b626:	2000      	movs	r0, #0
 800b628:	4770      	bx	lr
 800b62a:	2020      	movs	r0, #32
 800b62c:	4770      	bx	lr
	...

0800b630 <__i2b>:
 800b630:	b510      	push	{r4, lr}
 800b632:	460c      	mov	r4, r1
 800b634:	2101      	movs	r1, #1
 800b636:	f7ff febb 	bl	800b3b0 <_Balloc>
 800b63a:	4602      	mov	r2, r0
 800b63c:	b928      	cbnz	r0, 800b64a <__i2b+0x1a>
 800b63e:	f240 1145 	movw	r1, #325	; 0x145
 800b642:	4b04      	ldr	r3, [pc, #16]	; (800b654 <__i2b+0x24>)
 800b644:	4804      	ldr	r0, [pc, #16]	; (800b658 <__i2b+0x28>)
 800b646:	f7fe ff2b 	bl	800a4a0 <__assert_func>
 800b64a:	2301      	movs	r3, #1
 800b64c:	6144      	str	r4, [r0, #20]
 800b64e:	6103      	str	r3, [r0, #16]
 800b650:	bd10      	pop	{r4, pc}
 800b652:	bf00      	nop
 800b654:	0800f049 	.word	0x0800f049
 800b658:	0800f05a 	.word	0x0800f05a

0800b65c <__multiply>:
 800b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b660:	4691      	mov	r9, r2
 800b662:	690a      	ldr	r2, [r1, #16]
 800b664:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b668:	460c      	mov	r4, r1
 800b66a:	429a      	cmp	r2, r3
 800b66c:	bfbe      	ittt	lt
 800b66e:	460b      	movlt	r3, r1
 800b670:	464c      	movlt	r4, r9
 800b672:	4699      	movlt	r9, r3
 800b674:	6927      	ldr	r7, [r4, #16]
 800b676:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b67a:	68a3      	ldr	r3, [r4, #8]
 800b67c:	6861      	ldr	r1, [r4, #4]
 800b67e:	eb07 060a 	add.w	r6, r7, sl
 800b682:	42b3      	cmp	r3, r6
 800b684:	b085      	sub	sp, #20
 800b686:	bfb8      	it	lt
 800b688:	3101      	addlt	r1, #1
 800b68a:	f7ff fe91 	bl	800b3b0 <_Balloc>
 800b68e:	b930      	cbnz	r0, 800b69e <__multiply+0x42>
 800b690:	4602      	mov	r2, r0
 800b692:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b696:	4b43      	ldr	r3, [pc, #268]	; (800b7a4 <__multiply+0x148>)
 800b698:	4843      	ldr	r0, [pc, #268]	; (800b7a8 <__multiply+0x14c>)
 800b69a:	f7fe ff01 	bl	800a4a0 <__assert_func>
 800b69e:	f100 0514 	add.w	r5, r0, #20
 800b6a2:	462b      	mov	r3, r5
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6aa:	4543      	cmp	r3, r8
 800b6ac:	d321      	bcc.n	800b6f2 <__multiply+0x96>
 800b6ae:	f104 0314 	add.w	r3, r4, #20
 800b6b2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b6b6:	f109 0314 	add.w	r3, r9, #20
 800b6ba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b6be:	9202      	str	r2, [sp, #8]
 800b6c0:	1b3a      	subs	r2, r7, r4
 800b6c2:	3a15      	subs	r2, #21
 800b6c4:	f022 0203 	bic.w	r2, r2, #3
 800b6c8:	3204      	adds	r2, #4
 800b6ca:	f104 0115 	add.w	r1, r4, #21
 800b6ce:	428f      	cmp	r7, r1
 800b6d0:	bf38      	it	cc
 800b6d2:	2204      	movcc	r2, #4
 800b6d4:	9201      	str	r2, [sp, #4]
 800b6d6:	9a02      	ldr	r2, [sp, #8]
 800b6d8:	9303      	str	r3, [sp, #12]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d80c      	bhi.n	800b6f8 <__multiply+0x9c>
 800b6de:	2e00      	cmp	r6, #0
 800b6e0:	dd03      	ble.n	800b6ea <__multiply+0x8e>
 800b6e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d05a      	beq.n	800b7a0 <__multiply+0x144>
 800b6ea:	6106      	str	r6, [r0, #16]
 800b6ec:	b005      	add	sp, #20
 800b6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f2:	f843 2b04 	str.w	r2, [r3], #4
 800b6f6:	e7d8      	b.n	800b6aa <__multiply+0x4e>
 800b6f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800b6fc:	f1ba 0f00 	cmp.w	sl, #0
 800b700:	d023      	beq.n	800b74a <__multiply+0xee>
 800b702:	46a9      	mov	r9, r5
 800b704:	f04f 0c00 	mov.w	ip, #0
 800b708:	f104 0e14 	add.w	lr, r4, #20
 800b70c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b710:	f8d9 1000 	ldr.w	r1, [r9]
 800b714:	fa1f fb82 	uxth.w	fp, r2
 800b718:	b289      	uxth	r1, r1
 800b71a:	fb0a 110b 	mla	r1, sl, fp, r1
 800b71e:	4461      	add	r1, ip
 800b720:	f8d9 c000 	ldr.w	ip, [r9]
 800b724:	0c12      	lsrs	r2, r2, #16
 800b726:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b72a:	fb0a c202 	mla	r2, sl, r2, ip
 800b72e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b732:	b289      	uxth	r1, r1
 800b734:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b738:	4577      	cmp	r7, lr
 800b73a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b73e:	f849 1b04 	str.w	r1, [r9], #4
 800b742:	d8e3      	bhi.n	800b70c <__multiply+0xb0>
 800b744:	9a01      	ldr	r2, [sp, #4]
 800b746:	f845 c002 	str.w	ip, [r5, r2]
 800b74a:	9a03      	ldr	r2, [sp, #12]
 800b74c:	3304      	adds	r3, #4
 800b74e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b752:	f1b9 0f00 	cmp.w	r9, #0
 800b756:	d021      	beq.n	800b79c <__multiply+0x140>
 800b758:	46ae      	mov	lr, r5
 800b75a:	f04f 0a00 	mov.w	sl, #0
 800b75e:	6829      	ldr	r1, [r5, #0]
 800b760:	f104 0c14 	add.w	ip, r4, #20
 800b764:	f8bc b000 	ldrh.w	fp, [ip]
 800b768:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b76c:	b289      	uxth	r1, r1
 800b76e:	fb09 220b 	mla	r2, r9, fp, r2
 800b772:	4452      	add	r2, sl
 800b774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b778:	f84e 1b04 	str.w	r1, [lr], #4
 800b77c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b780:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b784:	f8be 1000 	ldrh.w	r1, [lr]
 800b788:	4567      	cmp	r7, ip
 800b78a:	fb09 110a 	mla	r1, r9, sl, r1
 800b78e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b792:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b796:	d8e5      	bhi.n	800b764 <__multiply+0x108>
 800b798:	9a01      	ldr	r2, [sp, #4]
 800b79a:	50a9      	str	r1, [r5, r2]
 800b79c:	3504      	adds	r5, #4
 800b79e:	e79a      	b.n	800b6d6 <__multiply+0x7a>
 800b7a0:	3e01      	subs	r6, #1
 800b7a2:	e79c      	b.n	800b6de <__multiply+0x82>
 800b7a4:	0800f049 	.word	0x0800f049
 800b7a8:	0800f05a 	.word	0x0800f05a

0800b7ac <__pow5mult>:
 800b7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b0:	4615      	mov	r5, r2
 800b7b2:	f012 0203 	ands.w	r2, r2, #3
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	460f      	mov	r7, r1
 800b7ba:	d007      	beq.n	800b7cc <__pow5mult+0x20>
 800b7bc:	4c25      	ldr	r4, [pc, #148]	; (800b854 <__pow5mult+0xa8>)
 800b7be:	3a01      	subs	r2, #1
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7c6:	f7ff fe55 	bl	800b474 <__multadd>
 800b7ca:	4607      	mov	r7, r0
 800b7cc:	10ad      	asrs	r5, r5, #2
 800b7ce:	d03d      	beq.n	800b84c <__pow5mult+0xa0>
 800b7d0:	69f4      	ldr	r4, [r6, #28]
 800b7d2:	b97c      	cbnz	r4, 800b7f4 <__pow5mult+0x48>
 800b7d4:	2010      	movs	r0, #16
 800b7d6:	f7ff fd37 	bl	800b248 <malloc>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	61f0      	str	r0, [r6, #28]
 800b7de:	b928      	cbnz	r0, 800b7ec <__pow5mult+0x40>
 800b7e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b7e4:	4b1c      	ldr	r3, [pc, #112]	; (800b858 <__pow5mult+0xac>)
 800b7e6:	481d      	ldr	r0, [pc, #116]	; (800b85c <__pow5mult+0xb0>)
 800b7e8:	f7fe fe5a 	bl	800a4a0 <__assert_func>
 800b7ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7f0:	6004      	str	r4, [r0, #0]
 800b7f2:	60c4      	str	r4, [r0, #12]
 800b7f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b7f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7fc:	b94c      	cbnz	r4, 800b812 <__pow5mult+0x66>
 800b7fe:	f240 2171 	movw	r1, #625	; 0x271
 800b802:	4630      	mov	r0, r6
 800b804:	f7ff ff14 	bl	800b630 <__i2b>
 800b808:	2300      	movs	r3, #0
 800b80a:	4604      	mov	r4, r0
 800b80c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b810:	6003      	str	r3, [r0, #0]
 800b812:	f04f 0900 	mov.w	r9, #0
 800b816:	07eb      	lsls	r3, r5, #31
 800b818:	d50a      	bpl.n	800b830 <__pow5mult+0x84>
 800b81a:	4639      	mov	r1, r7
 800b81c:	4622      	mov	r2, r4
 800b81e:	4630      	mov	r0, r6
 800b820:	f7ff ff1c 	bl	800b65c <__multiply>
 800b824:	4680      	mov	r8, r0
 800b826:	4639      	mov	r1, r7
 800b828:	4630      	mov	r0, r6
 800b82a:	f7ff fe01 	bl	800b430 <_Bfree>
 800b82e:	4647      	mov	r7, r8
 800b830:	106d      	asrs	r5, r5, #1
 800b832:	d00b      	beq.n	800b84c <__pow5mult+0xa0>
 800b834:	6820      	ldr	r0, [r4, #0]
 800b836:	b938      	cbnz	r0, 800b848 <__pow5mult+0x9c>
 800b838:	4622      	mov	r2, r4
 800b83a:	4621      	mov	r1, r4
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7ff ff0d 	bl	800b65c <__multiply>
 800b842:	6020      	str	r0, [r4, #0]
 800b844:	f8c0 9000 	str.w	r9, [r0]
 800b848:	4604      	mov	r4, r0
 800b84a:	e7e4      	b.n	800b816 <__pow5mult+0x6a>
 800b84c:	4638      	mov	r0, r7
 800b84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b852:	bf00      	nop
 800b854:	0800f1a8 	.word	0x0800f1a8
 800b858:	0800efda 	.word	0x0800efda
 800b85c:	0800f05a 	.word	0x0800f05a

0800b860 <__lshift>:
 800b860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b864:	460c      	mov	r4, r1
 800b866:	4607      	mov	r7, r0
 800b868:	4691      	mov	r9, r2
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	6849      	ldr	r1, [r1, #4]
 800b86e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b872:	68a3      	ldr	r3, [r4, #8]
 800b874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b878:	f108 0601 	add.w	r6, r8, #1
 800b87c:	42b3      	cmp	r3, r6
 800b87e:	db0b      	blt.n	800b898 <__lshift+0x38>
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff fd95 	bl	800b3b0 <_Balloc>
 800b886:	4605      	mov	r5, r0
 800b888:	b948      	cbnz	r0, 800b89e <__lshift+0x3e>
 800b88a:	4602      	mov	r2, r0
 800b88c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b890:	4b27      	ldr	r3, [pc, #156]	; (800b930 <__lshift+0xd0>)
 800b892:	4828      	ldr	r0, [pc, #160]	; (800b934 <__lshift+0xd4>)
 800b894:	f7fe fe04 	bl	800a4a0 <__assert_func>
 800b898:	3101      	adds	r1, #1
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	e7ee      	b.n	800b87c <__lshift+0x1c>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f100 0114 	add.w	r1, r0, #20
 800b8a4:	f100 0210 	add.w	r2, r0, #16
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	4553      	cmp	r3, sl
 800b8ac:	db33      	blt.n	800b916 <__lshift+0xb6>
 800b8ae:	6920      	ldr	r0, [r4, #16]
 800b8b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8b4:	f104 0314 	add.w	r3, r4, #20
 800b8b8:	f019 091f 	ands.w	r9, r9, #31
 800b8bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8c4:	d02b      	beq.n	800b91e <__lshift+0xbe>
 800b8c6:	468a      	mov	sl, r1
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f1c9 0e20 	rsb	lr, r9, #32
 800b8ce:	6818      	ldr	r0, [r3, #0]
 800b8d0:	fa00 f009 	lsl.w	r0, r0, r9
 800b8d4:	4310      	orrs	r0, r2
 800b8d6:	f84a 0b04 	str.w	r0, [sl], #4
 800b8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8de:	459c      	cmp	ip, r3
 800b8e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8e4:	d8f3      	bhi.n	800b8ce <__lshift+0x6e>
 800b8e6:	ebac 0304 	sub.w	r3, ip, r4
 800b8ea:	3b15      	subs	r3, #21
 800b8ec:	f023 0303 	bic.w	r3, r3, #3
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	f104 0015 	add.w	r0, r4, #21
 800b8f6:	4584      	cmp	ip, r0
 800b8f8:	bf38      	it	cc
 800b8fa:	2304      	movcc	r3, #4
 800b8fc:	50ca      	str	r2, [r1, r3]
 800b8fe:	b10a      	cbz	r2, 800b904 <__lshift+0xa4>
 800b900:	f108 0602 	add.w	r6, r8, #2
 800b904:	3e01      	subs	r6, #1
 800b906:	4638      	mov	r0, r7
 800b908:	4621      	mov	r1, r4
 800b90a:	612e      	str	r6, [r5, #16]
 800b90c:	f7ff fd90 	bl	800b430 <_Bfree>
 800b910:	4628      	mov	r0, r5
 800b912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b916:	f842 0f04 	str.w	r0, [r2, #4]!
 800b91a:	3301      	adds	r3, #1
 800b91c:	e7c5      	b.n	800b8aa <__lshift+0x4a>
 800b91e:	3904      	subs	r1, #4
 800b920:	f853 2b04 	ldr.w	r2, [r3], #4
 800b924:	459c      	cmp	ip, r3
 800b926:	f841 2f04 	str.w	r2, [r1, #4]!
 800b92a:	d8f9      	bhi.n	800b920 <__lshift+0xc0>
 800b92c:	e7ea      	b.n	800b904 <__lshift+0xa4>
 800b92e:	bf00      	nop
 800b930:	0800f049 	.word	0x0800f049
 800b934:	0800f05a 	.word	0x0800f05a

0800b938 <__mcmp>:
 800b938:	4603      	mov	r3, r0
 800b93a:	690a      	ldr	r2, [r1, #16]
 800b93c:	6900      	ldr	r0, [r0, #16]
 800b93e:	b530      	push	{r4, r5, lr}
 800b940:	1a80      	subs	r0, r0, r2
 800b942:	d10d      	bne.n	800b960 <__mcmp+0x28>
 800b944:	3314      	adds	r3, #20
 800b946:	3114      	adds	r1, #20
 800b948:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b94c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b950:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b954:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b958:	4295      	cmp	r5, r2
 800b95a:	d002      	beq.n	800b962 <__mcmp+0x2a>
 800b95c:	d304      	bcc.n	800b968 <__mcmp+0x30>
 800b95e:	2001      	movs	r0, #1
 800b960:	bd30      	pop	{r4, r5, pc}
 800b962:	42a3      	cmp	r3, r4
 800b964:	d3f4      	bcc.n	800b950 <__mcmp+0x18>
 800b966:	e7fb      	b.n	800b960 <__mcmp+0x28>
 800b968:	f04f 30ff 	mov.w	r0, #4294967295
 800b96c:	e7f8      	b.n	800b960 <__mcmp+0x28>
	...

0800b970 <__mdiff>:
 800b970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b974:	460d      	mov	r5, r1
 800b976:	4607      	mov	r7, r0
 800b978:	4611      	mov	r1, r2
 800b97a:	4628      	mov	r0, r5
 800b97c:	4614      	mov	r4, r2
 800b97e:	f7ff ffdb 	bl	800b938 <__mcmp>
 800b982:	1e06      	subs	r6, r0, #0
 800b984:	d111      	bne.n	800b9aa <__mdiff+0x3a>
 800b986:	4631      	mov	r1, r6
 800b988:	4638      	mov	r0, r7
 800b98a:	f7ff fd11 	bl	800b3b0 <_Balloc>
 800b98e:	4602      	mov	r2, r0
 800b990:	b928      	cbnz	r0, 800b99e <__mdiff+0x2e>
 800b992:	f240 2137 	movw	r1, #567	; 0x237
 800b996:	4b3a      	ldr	r3, [pc, #232]	; (800ba80 <__mdiff+0x110>)
 800b998:	483a      	ldr	r0, [pc, #232]	; (800ba84 <__mdiff+0x114>)
 800b99a:	f7fe fd81 	bl	800a4a0 <__assert_func>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9aa:	bfa4      	itt	ge
 800b9ac:	4623      	movge	r3, r4
 800b9ae:	462c      	movge	r4, r5
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	6861      	ldr	r1, [r4, #4]
 800b9b4:	bfa6      	itte	ge
 800b9b6:	461d      	movge	r5, r3
 800b9b8:	2600      	movge	r6, #0
 800b9ba:	2601      	movlt	r6, #1
 800b9bc:	f7ff fcf8 	bl	800b3b0 <_Balloc>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	b918      	cbnz	r0, 800b9cc <__mdiff+0x5c>
 800b9c4:	f240 2145 	movw	r1, #581	; 0x245
 800b9c8:	4b2d      	ldr	r3, [pc, #180]	; (800ba80 <__mdiff+0x110>)
 800b9ca:	e7e5      	b.n	800b998 <__mdiff+0x28>
 800b9cc:	f102 0814 	add.w	r8, r2, #20
 800b9d0:	46c2      	mov	sl, r8
 800b9d2:	f04f 0c00 	mov.w	ip, #0
 800b9d6:	6927      	ldr	r7, [r4, #16]
 800b9d8:	60c6      	str	r6, [r0, #12]
 800b9da:	692e      	ldr	r6, [r5, #16]
 800b9dc:	f104 0014 	add.w	r0, r4, #20
 800b9e0:	f105 0914 	add.w	r9, r5, #20
 800b9e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b9e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b9ec:	3410      	adds	r4, #16
 800b9ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b9f2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9f6:	fa1f f18b 	uxth.w	r1, fp
 800b9fa:	4461      	add	r1, ip
 800b9fc:	fa1f fc83 	uxth.w	ip, r3
 800ba00:	0c1b      	lsrs	r3, r3, #16
 800ba02:	eba1 010c 	sub.w	r1, r1, ip
 800ba06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba0a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ba0e:	b289      	uxth	r1, r1
 800ba10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ba14:	454e      	cmp	r6, r9
 800ba16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ba1a:	f84a 1b04 	str.w	r1, [sl], #4
 800ba1e:	d8e6      	bhi.n	800b9ee <__mdiff+0x7e>
 800ba20:	1b73      	subs	r3, r6, r5
 800ba22:	3b15      	subs	r3, #21
 800ba24:	f023 0303 	bic.w	r3, r3, #3
 800ba28:	3515      	adds	r5, #21
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	42ae      	cmp	r6, r5
 800ba2e:	bf38      	it	cc
 800ba30:	2304      	movcc	r3, #4
 800ba32:	4418      	add	r0, r3
 800ba34:	4443      	add	r3, r8
 800ba36:	461e      	mov	r6, r3
 800ba38:	4605      	mov	r5, r0
 800ba3a:	4575      	cmp	r5, lr
 800ba3c:	d30e      	bcc.n	800ba5c <__mdiff+0xec>
 800ba3e:	f10e 0103 	add.w	r1, lr, #3
 800ba42:	1a09      	subs	r1, r1, r0
 800ba44:	f021 0103 	bic.w	r1, r1, #3
 800ba48:	3803      	subs	r0, #3
 800ba4a:	4586      	cmp	lr, r0
 800ba4c:	bf38      	it	cc
 800ba4e:	2100      	movcc	r1, #0
 800ba50:	440b      	add	r3, r1
 800ba52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba56:	b189      	cbz	r1, 800ba7c <__mdiff+0x10c>
 800ba58:	6117      	str	r7, [r2, #16]
 800ba5a:	e7a3      	b.n	800b9a4 <__mdiff+0x34>
 800ba5c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ba60:	fa1f f188 	uxth.w	r1, r8
 800ba64:	4461      	add	r1, ip
 800ba66:	140c      	asrs	r4, r1, #16
 800ba68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba6c:	b289      	uxth	r1, r1
 800ba6e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ba72:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ba76:	f846 1b04 	str.w	r1, [r6], #4
 800ba7a:	e7de      	b.n	800ba3a <__mdiff+0xca>
 800ba7c:	3f01      	subs	r7, #1
 800ba7e:	e7e8      	b.n	800ba52 <__mdiff+0xe2>
 800ba80:	0800f049 	.word	0x0800f049
 800ba84:	0800f05a 	.word	0x0800f05a

0800ba88 <__ulp>:
 800ba88:	4b0e      	ldr	r3, [pc, #56]	; (800bac4 <__ulp+0x3c>)
 800ba8a:	400b      	ands	r3, r1
 800ba8c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dc08      	bgt.n	800baa6 <__ulp+0x1e>
 800ba94:	425b      	negs	r3, r3
 800ba96:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ba9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba9e:	da04      	bge.n	800baaa <__ulp+0x22>
 800baa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800baa4:	4113      	asrs	r3, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	e008      	b.n	800babc <__ulp+0x34>
 800baaa:	f1a2 0314 	sub.w	r3, r2, #20
 800baae:	2b1e      	cmp	r3, #30
 800bab0:	bfd6      	itet	le
 800bab2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bab6:	2201      	movgt	r2, #1
 800bab8:	40da      	lsrle	r2, r3
 800baba:	2300      	movs	r3, #0
 800babc:	4619      	mov	r1, r3
 800babe:	4610      	mov	r0, r2
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	7ff00000 	.word	0x7ff00000

0800bac8 <__b2d>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	6905      	ldr	r5, [r0, #16]
 800bacc:	f100 0714 	add.w	r7, r0, #20
 800bad0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bad4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bad8:	1f2e      	subs	r6, r5, #4
 800bada:	4620      	mov	r0, r4
 800badc:	f7ff fd5a 	bl	800b594 <__hi0bits>
 800bae0:	f1c0 0220 	rsb	r2, r0, #32
 800bae4:	280a      	cmp	r0, #10
 800bae6:	4603      	mov	r3, r0
 800bae8:	f8df c068 	ldr.w	ip, [pc, #104]	; 800bb54 <__b2d+0x8c>
 800baec:	600a      	str	r2, [r1, #0]
 800baee:	dc12      	bgt.n	800bb16 <__b2d+0x4e>
 800baf0:	f1c0 0e0b 	rsb	lr, r0, #11
 800baf4:	fa24 f20e 	lsr.w	r2, r4, lr
 800baf8:	42b7      	cmp	r7, r6
 800bafa:	ea42 010c 	orr.w	r1, r2, ip
 800bafe:	bf2c      	ite	cs
 800bb00:	2200      	movcs	r2, #0
 800bb02:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800bb06:	3315      	adds	r3, #21
 800bb08:	fa04 f303 	lsl.w	r3, r4, r3
 800bb0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb10:	431a      	orrs	r2, r3
 800bb12:	4610      	mov	r0, r2
 800bb14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb16:	42b7      	cmp	r7, r6
 800bb18:	bf2e      	itee	cs
 800bb1a:	2200      	movcs	r2, #0
 800bb1c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800bb20:	f1a5 0608 	subcc.w	r6, r5, #8
 800bb24:	3b0b      	subs	r3, #11
 800bb26:	d012      	beq.n	800bb4e <__b2d+0x86>
 800bb28:	f1c3 0520 	rsb	r5, r3, #32
 800bb2c:	fa22 f105 	lsr.w	r1, r2, r5
 800bb30:	409c      	lsls	r4, r3
 800bb32:	430c      	orrs	r4, r1
 800bb34:	42be      	cmp	r6, r7
 800bb36:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800bb3a:	bf94      	ite	ls
 800bb3c:	2400      	movls	r4, #0
 800bb3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bb42:	409a      	lsls	r2, r3
 800bb44:	40ec      	lsrs	r4, r5
 800bb46:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bb4a:	4322      	orrs	r2, r4
 800bb4c:	e7e1      	b.n	800bb12 <__b2d+0x4a>
 800bb4e:	ea44 010c 	orr.w	r1, r4, ip
 800bb52:	e7de      	b.n	800bb12 <__b2d+0x4a>
 800bb54:	3ff00000 	.word	0x3ff00000

0800bb58 <__d2b>:
 800bb58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	4617      	mov	r7, r2
 800bb5e:	461c      	mov	r4, r3
 800bb60:	9e08      	ldr	r6, [sp, #32]
 800bb62:	f7ff fc25 	bl	800b3b0 <_Balloc>
 800bb66:	4605      	mov	r5, r0
 800bb68:	b930      	cbnz	r0, 800bb78 <__d2b+0x20>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	f240 310f 	movw	r1, #783	; 0x30f
 800bb70:	4b22      	ldr	r3, [pc, #136]	; (800bbfc <__d2b+0xa4>)
 800bb72:	4823      	ldr	r0, [pc, #140]	; (800bc00 <__d2b+0xa8>)
 800bb74:	f7fe fc94 	bl	800a4a0 <__assert_func>
 800bb78:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bb7c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bb80:	bb24      	cbnz	r4, 800bbcc <__d2b+0x74>
 800bb82:	2f00      	cmp	r7, #0
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	d026      	beq.n	800bbd6 <__d2b+0x7e>
 800bb88:	4668      	mov	r0, sp
 800bb8a:	9700      	str	r7, [sp, #0]
 800bb8c:	f7ff fd22 	bl	800b5d4 <__lo0bits>
 800bb90:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb94:	b1e8      	cbz	r0, 800bbd2 <__d2b+0x7a>
 800bb96:	f1c0 0320 	rsb	r3, r0, #32
 800bb9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb9e:	430b      	orrs	r3, r1
 800bba0:	40c2      	lsrs	r2, r0
 800bba2:	616b      	str	r3, [r5, #20]
 800bba4:	9201      	str	r2, [sp, #4]
 800bba6:	9b01      	ldr	r3, [sp, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	bf14      	ite	ne
 800bbac:	2102      	movne	r1, #2
 800bbae:	2101      	moveq	r1, #1
 800bbb0:	61ab      	str	r3, [r5, #24]
 800bbb2:	6129      	str	r1, [r5, #16]
 800bbb4:	b1bc      	cbz	r4, 800bbe6 <__d2b+0x8e>
 800bbb6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bbba:	4404      	add	r4, r0
 800bbbc:	6034      	str	r4, [r6, #0]
 800bbbe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc4:	6018      	str	r0, [r3, #0]
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	b003      	add	sp, #12
 800bbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbd0:	e7d7      	b.n	800bb82 <__d2b+0x2a>
 800bbd2:	6169      	str	r1, [r5, #20]
 800bbd4:	e7e7      	b.n	800bba6 <__d2b+0x4e>
 800bbd6:	a801      	add	r0, sp, #4
 800bbd8:	f7ff fcfc 	bl	800b5d4 <__lo0bits>
 800bbdc:	9b01      	ldr	r3, [sp, #4]
 800bbde:	2101      	movs	r1, #1
 800bbe0:	616b      	str	r3, [r5, #20]
 800bbe2:	3020      	adds	r0, #32
 800bbe4:	e7e5      	b.n	800bbb2 <__d2b+0x5a>
 800bbe6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbea:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800bbee:	6030      	str	r0, [r6, #0]
 800bbf0:	6918      	ldr	r0, [r3, #16]
 800bbf2:	f7ff fccf 	bl	800b594 <__hi0bits>
 800bbf6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bbfa:	e7e2      	b.n	800bbc2 <__d2b+0x6a>
 800bbfc:	0800f049 	.word	0x0800f049
 800bc00:	0800f05a 	.word	0x0800f05a

0800bc04 <__ratio>:
 800bc04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc08:	4688      	mov	r8, r1
 800bc0a:	4669      	mov	r1, sp
 800bc0c:	4681      	mov	r9, r0
 800bc0e:	f7ff ff5b 	bl	800bac8 <__b2d>
 800bc12:	460f      	mov	r7, r1
 800bc14:	4604      	mov	r4, r0
 800bc16:	460d      	mov	r5, r1
 800bc18:	4640      	mov	r0, r8
 800bc1a:	a901      	add	r1, sp, #4
 800bc1c:	f7ff ff54 	bl	800bac8 <__b2d>
 800bc20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bc28:	468b      	mov	fp, r1
 800bc2a:	eba3 0c02 	sub.w	ip, r3, r2
 800bc2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc32:	1a9b      	subs	r3, r3, r2
 800bc34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	bfd5      	itete	le
 800bc3c:	460a      	movle	r2, r1
 800bc3e:	462a      	movgt	r2, r5
 800bc40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc44:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bc48:	bfd8      	it	le
 800bc4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bc4e:	465b      	mov	r3, fp
 800bc50:	4602      	mov	r2, r0
 800bc52:	4639      	mov	r1, r7
 800bc54:	4620      	mov	r0, r4
 800bc56:	f7f4 fe89 	bl	800096c <__aeabi_ddiv>
 800bc5a:	b003      	add	sp, #12
 800bc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc60 <__copybits>:
 800bc60:	3901      	subs	r1, #1
 800bc62:	b570      	push	{r4, r5, r6, lr}
 800bc64:	1149      	asrs	r1, r1, #5
 800bc66:	6914      	ldr	r4, [r2, #16]
 800bc68:	3101      	adds	r1, #1
 800bc6a:	f102 0314 	add.w	r3, r2, #20
 800bc6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc76:	1f05      	subs	r5, r0, #4
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	d30c      	bcc.n	800bc96 <__copybits+0x36>
 800bc7c:	1aa3      	subs	r3, r4, r2
 800bc7e:	3b11      	subs	r3, #17
 800bc80:	f023 0303 	bic.w	r3, r3, #3
 800bc84:	3211      	adds	r2, #17
 800bc86:	42a2      	cmp	r2, r4
 800bc88:	bf88      	it	hi
 800bc8a:	2300      	movhi	r3, #0
 800bc8c:	4418      	add	r0, r3
 800bc8e:	2300      	movs	r3, #0
 800bc90:	4288      	cmp	r0, r1
 800bc92:	d305      	bcc.n	800bca0 <__copybits+0x40>
 800bc94:	bd70      	pop	{r4, r5, r6, pc}
 800bc96:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc9a:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc9e:	e7eb      	b.n	800bc78 <__copybits+0x18>
 800bca0:	f840 3b04 	str.w	r3, [r0], #4
 800bca4:	e7f4      	b.n	800bc90 <__copybits+0x30>

0800bca6 <__any_on>:
 800bca6:	f100 0214 	add.w	r2, r0, #20
 800bcaa:	6900      	ldr	r0, [r0, #16]
 800bcac:	114b      	asrs	r3, r1, #5
 800bcae:	4298      	cmp	r0, r3
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	db11      	blt.n	800bcd8 <__any_on+0x32>
 800bcb4:	dd0a      	ble.n	800bccc <__any_on+0x26>
 800bcb6:	f011 011f 	ands.w	r1, r1, #31
 800bcba:	d007      	beq.n	800bccc <__any_on+0x26>
 800bcbc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bcc0:	fa24 f001 	lsr.w	r0, r4, r1
 800bcc4:	fa00 f101 	lsl.w	r1, r0, r1
 800bcc8:	428c      	cmp	r4, r1
 800bcca:	d10b      	bne.n	800bce4 <__any_on+0x3e>
 800bccc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d803      	bhi.n	800bcdc <__any_on+0x36>
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	bd10      	pop	{r4, pc}
 800bcd8:	4603      	mov	r3, r0
 800bcda:	e7f7      	b.n	800bccc <__any_on+0x26>
 800bcdc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bce0:	2900      	cmp	r1, #0
 800bce2:	d0f5      	beq.n	800bcd0 <__any_on+0x2a>
 800bce4:	2001      	movs	r0, #1
 800bce6:	e7f6      	b.n	800bcd6 <__any_on+0x30>

0800bce8 <sulp>:
 800bce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcec:	460f      	mov	r7, r1
 800bcee:	4690      	mov	r8, r2
 800bcf0:	f7ff feca 	bl	800ba88 <__ulp>
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	460d      	mov	r5, r1
 800bcf8:	f1b8 0f00 	cmp.w	r8, #0
 800bcfc:	d011      	beq.n	800bd22 <sulp+0x3a>
 800bcfe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800bd02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dd0b      	ble.n	800bd22 <sulp+0x3a>
 800bd0a:	2400      	movs	r4, #0
 800bd0c:	051b      	lsls	r3, r3, #20
 800bd0e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bd12:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bd16:	4622      	mov	r2, r4
 800bd18:	462b      	mov	r3, r5
 800bd1a:	f7f4 fcfd 	bl	8000718 <__aeabi_dmul>
 800bd1e:	4604      	mov	r4, r0
 800bd20:	460d      	mov	r5, r1
 800bd22:	4620      	mov	r0, r4
 800bd24:	4629      	mov	r1, r5
 800bd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd2a:	0000      	movs	r0, r0
 800bd2c:	0000      	movs	r0, r0
	...

0800bd30 <_strtod_l>:
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	b09f      	sub	sp, #124	; 0x7c
 800bd36:	9217      	str	r2, [sp, #92]	; 0x5c
 800bd38:	2200      	movs	r2, #0
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	921a      	str	r2, [sp, #104]	; 0x68
 800bd3e:	460d      	mov	r5, r1
 800bd40:	f04f 0800 	mov.w	r8, #0
 800bd44:	f04f 0900 	mov.w	r9, #0
 800bd48:	460a      	mov	r2, r1
 800bd4a:	9219      	str	r2, [sp, #100]	; 0x64
 800bd4c:	7811      	ldrb	r1, [r2, #0]
 800bd4e:	292b      	cmp	r1, #43	; 0x2b
 800bd50:	d04a      	beq.n	800bde8 <_strtod_l+0xb8>
 800bd52:	d838      	bhi.n	800bdc6 <_strtod_l+0x96>
 800bd54:	290d      	cmp	r1, #13
 800bd56:	d832      	bhi.n	800bdbe <_strtod_l+0x8e>
 800bd58:	2908      	cmp	r1, #8
 800bd5a:	d832      	bhi.n	800bdc2 <_strtod_l+0x92>
 800bd5c:	2900      	cmp	r1, #0
 800bd5e:	d03b      	beq.n	800bdd8 <_strtod_l+0xa8>
 800bd60:	2200      	movs	r2, #0
 800bd62:	920e      	str	r2, [sp, #56]	; 0x38
 800bd64:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800bd66:	7832      	ldrb	r2, [r6, #0]
 800bd68:	2a30      	cmp	r2, #48	; 0x30
 800bd6a:	f040 80b2 	bne.w	800bed2 <_strtod_l+0x1a2>
 800bd6e:	7872      	ldrb	r2, [r6, #1]
 800bd70:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bd74:	2a58      	cmp	r2, #88	; 0x58
 800bd76:	d16e      	bne.n	800be56 <_strtod_l+0x126>
 800bd78:	9302      	str	r3, [sp, #8]
 800bd7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	ab1a      	add	r3, sp, #104	; 0x68
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	4a8c      	ldr	r2, [pc, #560]	; (800bfb8 <_strtod_l+0x288>)
 800bd86:	ab1b      	add	r3, sp, #108	; 0x6c
 800bd88:	a919      	add	r1, sp, #100	; 0x64
 800bd8a:	f001 fead 	bl	800dae8 <__gethex>
 800bd8e:	f010 070f 	ands.w	r7, r0, #15
 800bd92:	4605      	mov	r5, r0
 800bd94:	d005      	beq.n	800bda2 <_strtod_l+0x72>
 800bd96:	2f06      	cmp	r7, #6
 800bd98:	d128      	bne.n	800bdec <_strtod_l+0xbc>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	3601      	adds	r6, #1
 800bd9e:	9619      	str	r6, [sp, #100]	; 0x64
 800bda0:	930e      	str	r3, [sp, #56]	; 0x38
 800bda2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f040 85a0 	bne.w	800c8ea <_strtod_l+0xbba>
 800bdaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdac:	b1cb      	cbz	r3, 800bde2 <_strtod_l+0xb2>
 800bdae:	4642      	mov	r2, r8
 800bdb0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	b01f      	add	sp, #124	; 0x7c
 800bdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbe:	2920      	cmp	r1, #32
 800bdc0:	d1ce      	bne.n	800bd60 <_strtod_l+0x30>
 800bdc2:	3201      	adds	r2, #1
 800bdc4:	e7c1      	b.n	800bd4a <_strtod_l+0x1a>
 800bdc6:	292d      	cmp	r1, #45	; 0x2d
 800bdc8:	d1ca      	bne.n	800bd60 <_strtod_l+0x30>
 800bdca:	2101      	movs	r1, #1
 800bdcc:	910e      	str	r1, [sp, #56]	; 0x38
 800bdce:	1c51      	adds	r1, r2, #1
 800bdd0:	9119      	str	r1, [sp, #100]	; 0x64
 800bdd2:	7852      	ldrb	r2, [r2, #1]
 800bdd4:	2a00      	cmp	r2, #0
 800bdd6:	d1c5      	bne.n	800bd64 <_strtod_l+0x34>
 800bdd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdda:	9519      	str	r5, [sp, #100]	; 0x64
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f040 8582 	bne.w	800c8e6 <_strtod_l+0xbb6>
 800bde2:	4642      	mov	r2, r8
 800bde4:	464b      	mov	r3, r9
 800bde6:	e7e5      	b.n	800bdb4 <_strtod_l+0x84>
 800bde8:	2100      	movs	r1, #0
 800bdea:	e7ef      	b.n	800bdcc <_strtod_l+0x9c>
 800bdec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bdee:	b13a      	cbz	r2, 800be00 <_strtod_l+0xd0>
 800bdf0:	2135      	movs	r1, #53	; 0x35
 800bdf2:	a81c      	add	r0, sp, #112	; 0x70
 800bdf4:	f7ff ff34 	bl	800bc60 <__copybits>
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bdfc:	f7ff fb18 	bl	800b430 <_Bfree>
 800be00:	3f01      	subs	r7, #1
 800be02:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800be04:	2f04      	cmp	r7, #4
 800be06:	d806      	bhi.n	800be16 <_strtod_l+0xe6>
 800be08:	e8df f007 	tbb	[pc, r7]
 800be0c:	201d0314 	.word	0x201d0314
 800be10:	14          	.byte	0x14
 800be11:	00          	.byte	0x00
 800be12:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800be16:	05e9      	lsls	r1, r5, #23
 800be18:	bf48      	it	mi
 800be1a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800be1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be22:	0d1b      	lsrs	r3, r3, #20
 800be24:	051b      	lsls	r3, r3, #20
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1bb      	bne.n	800bda2 <_strtod_l+0x72>
 800be2a:	f7fe faeb 	bl	800a404 <__errno>
 800be2e:	2322      	movs	r3, #34	; 0x22
 800be30:	6003      	str	r3, [r0, #0]
 800be32:	e7b6      	b.n	800bda2 <_strtod_l+0x72>
 800be34:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be38:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800be3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be40:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800be44:	e7e7      	b.n	800be16 <_strtod_l+0xe6>
 800be46:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800bfbc <_strtod_l+0x28c>
 800be4a:	e7e4      	b.n	800be16 <_strtod_l+0xe6>
 800be4c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800be50:	f04f 38ff 	mov.w	r8, #4294967295
 800be54:	e7df      	b.n	800be16 <_strtod_l+0xe6>
 800be56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800be58:	1c5a      	adds	r2, r3, #1
 800be5a:	9219      	str	r2, [sp, #100]	; 0x64
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	2b30      	cmp	r3, #48	; 0x30
 800be60:	d0f9      	beq.n	800be56 <_strtod_l+0x126>
 800be62:	2b00      	cmp	r3, #0
 800be64:	d09d      	beq.n	800bda2 <_strtod_l+0x72>
 800be66:	2301      	movs	r3, #1
 800be68:	f04f 0a00 	mov.w	sl, #0
 800be6c:	220a      	movs	r2, #10
 800be6e:	46d3      	mov	fp, sl
 800be70:	9305      	str	r3, [sp, #20]
 800be72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800be74:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800be78:	930b      	str	r3, [sp, #44]	; 0x2c
 800be7a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800be7c:	7806      	ldrb	r6, [r0, #0]
 800be7e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800be82:	b2d9      	uxtb	r1, r3
 800be84:	2909      	cmp	r1, #9
 800be86:	d926      	bls.n	800bed6 <_strtod_l+0x1a6>
 800be88:	2201      	movs	r2, #1
 800be8a:	494d      	ldr	r1, [pc, #308]	; (800bfc0 <_strtod_l+0x290>)
 800be8c:	f001 fd5e 	bl	800d94c <strncmp>
 800be90:	2800      	cmp	r0, #0
 800be92:	d030      	beq.n	800bef6 <_strtod_l+0x1c6>
 800be94:	2000      	movs	r0, #0
 800be96:	4632      	mov	r2, r6
 800be98:	4603      	mov	r3, r0
 800be9a:	465e      	mov	r6, fp
 800be9c:	9008      	str	r0, [sp, #32]
 800be9e:	2a65      	cmp	r2, #101	; 0x65
 800bea0:	d001      	beq.n	800bea6 <_strtod_l+0x176>
 800bea2:	2a45      	cmp	r2, #69	; 0x45
 800bea4:	d113      	bne.n	800bece <_strtod_l+0x19e>
 800bea6:	b91e      	cbnz	r6, 800beb0 <_strtod_l+0x180>
 800bea8:	9a05      	ldr	r2, [sp, #20]
 800beaa:	4302      	orrs	r2, r0
 800beac:	d094      	beq.n	800bdd8 <_strtod_l+0xa8>
 800beae:	2600      	movs	r6, #0
 800beb0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800beb2:	1c6a      	adds	r2, r5, #1
 800beb4:	9219      	str	r2, [sp, #100]	; 0x64
 800beb6:	786a      	ldrb	r2, [r5, #1]
 800beb8:	2a2b      	cmp	r2, #43	; 0x2b
 800beba:	d074      	beq.n	800bfa6 <_strtod_l+0x276>
 800bebc:	2a2d      	cmp	r2, #45	; 0x2d
 800bebe:	d078      	beq.n	800bfb2 <_strtod_l+0x282>
 800bec0:	f04f 0c00 	mov.w	ip, #0
 800bec4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bec8:	2909      	cmp	r1, #9
 800beca:	d97f      	bls.n	800bfcc <_strtod_l+0x29c>
 800becc:	9519      	str	r5, [sp, #100]	; 0x64
 800bece:	2700      	movs	r7, #0
 800bed0:	e09e      	b.n	800c010 <_strtod_l+0x2e0>
 800bed2:	2300      	movs	r3, #0
 800bed4:	e7c8      	b.n	800be68 <_strtod_l+0x138>
 800bed6:	f1bb 0f08 	cmp.w	fp, #8
 800beda:	bfd8      	it	le
 800bedc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800bede:	f100 0001 	add.w	r0, r0, #1
 800bee2:	bfd6      	itet	le
 800bee4:	fb02 3301 	mlale	r3, r2, r1, r3
 800bee8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800beec:	930a      	strle	r3, [sp, #40]	; 0x28
 800beee:	f10b 0b01 	add.w	fp, fp, #1
 800bef2:	9019      	str	r0, [sp, #100]	; 0x64
 800bef4:	e7c1      	b.n	800be7a <_strtod_l+0x14a>
 800bef6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bef8:	1c5a      	adds	r2, r3, #1
 800befa:	9219      	str	r2, [sp, #100]	; 0x64
 800befc:	785a      	ldrb	r2, [r3, #1]
 800befe:	f1bb 0f00 	cmp.w	fp, #0
 800bf02:	d037      	beq.n	800bf74 <_strtod_l+0x244>
 800bf04:	465e      	mov	r6, fp
 800bf06:	9008      	str	r0, [sp, #32]
 800bf08:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bf0c:	2b09      	cmp	r3, #9
 800bf0e:	d912      	bls.n	800bf36 <_strtod_l+0x206>
 800bf10:	2301      	movs	r3, #1
 800bf12:	e7c4      	b.n	800be9e <_strtod_l+0x16e>
 800bf14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bf16:	3001      	adds	r0, #1
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	9219      	str	r2, [sp, #100]	; 0x64
 800bf1c:	785a      	ldrb	r2, [r3, #1]
 800bf1e:	2a30      	cmp	r2, #48	; 0x30
 800bf20:	d0f8      	beq.n	800bf14 <_strtod_l+0x1e4>
 800bf22:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bf26:	2b08      	cmp	r3, #8
 800bf28:	f200 84e4 	bhi.w	800c8f4 <_strtod_l+0xbc4>
 800bf2c:	9008      	str	r0, [sp, #32]
 800bf2e:	2000      	movs	r0, #0
 800bf30:	4606      	mov	r6, r0
 800bf32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bf34:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf36:	3a30      	subs	r2, #48	; 0x30
 800bf38:	f100 0301 	add.w	r3, r0, #1
 800bf3c:	d014      	beq.n	800bf68 <_strtod_l+0x238>
 800bf3e:	9908      	ldr	r1, [sp, #32]
 800bf40:	eb00 0c06 	add.w	ip, r0, r6
 800bf44:	4419      	add	r1, r3
 800bf46:	9108      	str	r1, [sp, #32]
 800bf48:	4633      	mov	r3, r6
 800bf4a:	210a      	movs	r1, #10
 800bf4c:	4563      	cmp	r3, ip
 800bf4e:	d113      	bne.n	800bf78 <_strtod_l+0x248>
 800bf50:	1833      	adds	r3, r6, r0
 800bf52:	2b08      	cmp	r3, #8
 800bf54:	f106 0601 	add.w	r6, r6, #1
 800bf58:	4406      	add	r6, r0
 800bf5a:	dc1a      	bgt.n	800bf92 <_strtod_l+0x262>
 800bf5c:	230a      	movs	r3, #10
 800bf5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bf60:	fb03 2301 	mla	r3, r3, r1, r2
 800bf64:	930a      	str	r3, [sp, #40]	; 0x28
 800bf66:	2300      	movs	r3, #0
 800bf68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	1c51      	adds	r1, r2, #1
 800bf6e:	9119      	str	r1, [sp, #100]	; 0x64
 800bf70:	7852      	ldrb	r2, [r2, #1]
 800bf72:	e7c9      	b.n	800bf08 <_strtod_l+0x1d8>
 800bf74:	4658      	mov	r0, fp
 800bf76:	e7d2      	b.n	800bf1e <_strtod_l+0x1ee>
 800bf78:	2b08      	cmp	r3, #8
 800bf7a:	f103 0301 	add.w	r3, r3, #1
 800bf7e:	dc03      	bgt.n	800bf88 <_strtod_l+0x258>
 800bf80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bf82:	434f      	muls	r7, r1
 800bf84:	970a      	str	r7, [sp, #40]	; 0x28
 800bf86:	e7e1      	b.n	800bf4c <_strtod_l+0x21c>
 800bf88:	2b10      	cmp	r3, #16
 800bf8a:	bfd8      	it	le
 800bf8c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bf90:	e7dc      	b.n	800bf4c <_strtod_l+0x21c>
 800bf92:	2e10      	cmp	r6, #16
 800bf94:	bfdc      	itt	le
 800bf96:	230a      	movle	r3, #10
 800bf98:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bf9c:	e7e3      	b.n	800bf66 <_strtod_l+0x236>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	9308      	str	r3, [sp, #32]
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e780      	b.n	800bea8 <_strtod_l+0x178>
 800bfa6:	f04f 0c00 	mov.w	ip, #0
 800bfaa:	1caa      	adds	r2, r5, #2
 800bfac:	9219      	str	r2, [sp, #100]	; 0x64
 800bfae:	78aa      	ldrb	r2, [r5, #2]
 800bfb0:	e788      	b.n	800bec4 <_strtod_l+0x194>
 800bfb2:	f04f 0c01 	mov.w	ip, #1
 800bfb6:	e7f8      	b.n	800bfaa <_strtod_l+0x27a>
 800bfb8:	0800f1b8 	.word	0x0800f1b8
 800bfbc:	7ff00000 	.word	0x7ff00000
 800bfc0:	0800f1b4 	.word	0x0800f1b4
 800bfc4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bfc6:	1c51      	adds	r1, r2, #1
 800bfc8:	9119      	str	r1, [sp, #100]	; 0x64
 800bfca:	7852      	ldrb	r2, [r2, #1]
 800bfcc:	2a30      	cmp	r2, #48	; 0x30
 800bfce:	d0f9      	beq.n	800bfc4 <_strtod_l+0x294>
 800bfd0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bfd4:	2908      	cmp	r1, #8
 800bfd6:	f63f af7a 	bhi.w	800bece <_strtod_l+0x19e>
 800bfda:	3a30      	subs	r2, #48	; 0x30
 800bfdc:	9209      	str	r2, [sp, #36]	; 0x24
 800bfde:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bfe0:	920c      	str	r2, [sp, #48]	; 0x30
 800bfe2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bfe4:	1c57      	adds	r7, r2, #1
 800bfe6:	9719      	str	r7, [sp, #100]	; 0x64
 800bfe8:	7852      	ldrb	r2, [r2, #1]
 800bfea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bfee:	f1be 0f09 	cmp.w	lr, #9
 800bff2:	d938      	bls.n	800c066 <_strtod_l+0x336>
 800bff4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bff6:	1a7f      	subs	r7, r7, r1
 800bff8:	2f08      	cmp	r7, #8
 800bffa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bffe:	dc03      	bgt.n	800c008 <_strtod_l+0x2d8>
 800c000:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c002:	428f      	cmp	r7, r1
 800c004:	bfa8      	it	ge
 800c006:	460f      	movge	r7, r1
 800c008:	f1bc 0f00 	cmp.w	ip, #0
 800c00c:	d000      	beq.n	800c010 <_strtod_l+0x2e0>
 800c00e:	427f      	negs	r7, r7
 800c010:	2e00      	cmp	r6, #0
 800c012:	d14f      	bne.n	800c0b4 <_strtod_l+0x384>
 800c014:	9905      	ldr	r1, [sp, #20]
 800c016:	4301      	orrs	r1, r0
 800c018:	f47f aec3 	bne.w	800bda2 <_strtod_l+0x72>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f47f aedb 	bne.w	800bdd8 <_strtod_l+0xa8>
 800c022:	2a69      	cmp	r2, #105	; 0x69
 800c024:	d029      	beq.n	800c07a <_strtod_l+0x34a>
 800c026:	dc26      	bgt.n	800c076 <_strtod_l+0x346>
 800c028:	2a49      	cmp	r2, #73	; 0x49
 800c02a:	d026      	beq.n	800c07a <_strtod_l+0x34a>
 800c02c:	2a4e      	cmp	r2, #78	; 0x4e
 800c02e:	f47f aed3 	bne.w	800bdd8 <_strtod_l+0xa8>
 800c032:	499a      	ldr	r1, [pc, #616]	; (800c29c <_strtod_l+0x56c>)
 800c034:	a819      	add	r0, sp, #100	; 0x64
 800c036:	f001 ff99 	bl	800df6c <__match>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	f43f aecc 	beq.w	800bdd8 <_strtod_l+0xa8>
 800c040:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	2b28      	cmp	r3, #40	; 0x28
 800c046:	d12f      	bne.n	800c0a8 <_strtod_l+0x378>
 800c048:	4995      	ldr	r1, [pc, #596]	; (800c2a0 <_strtod_l+0x570>)
 800c04a:	aa1c      	add	r2, sp, #112	; 0x70
 800c04c:	a819      	add	r0, sp, #100	; 0x64
 800c04e:	f001 ffa1 	bl	800df94 <__hexnan>
 800c052:	2805      	cmp	r0, #5
 800c054:	d128      	bne.n	800c0a8 <_strtod_l+0x378>
 800c056:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c058:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800c05c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c060:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c064:	e69d      	b.n	800bda2 <_strtod_l+0x72>
 800c066:	210a      	movs	r1, #10
 800c068:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c06a:	fb01 2107 	mla	r1, r1, r7, r2
 800c06e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c072:	9209      	str	r2, [sp, #36]	; 0x24
 800c074:	e7b5      	b.n	800bfe2 <_strtod_l+0x2b2>
 800c076:	2a6e      	cmp	r2, #110	; 0x6e
 800c078:	e7d9      	b.n	800c02e <_strtod_l+0x2fe>
 800c07a:	498a      	ldr	r1, [pc, #552]	; (800c2a4 <_strtod_l+0x574>)
 800c07c:	a819      	add	r0, sp, #100	; 0x64
 800c07e:	f001 ff75 	bl	800df6c <__match>
 800c082:	2800      	cmp	r0, #0
 800c084:	f43f aea8 	beq.w	800bdd8 <_strtod_l+0xa8>
 800c088:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c08a:	4987      	ldr	r1, [pc, #540]	; (800c2a8 <_strtod_l+0x578>)
 800c08c:	3b01      	subs	r3, #1
 800c08e:	a819      	add	r0, sp, #100	; 0x64
 800c090:	9319      	str	r3, [sp, #100]	; 0x64
 800c092:	f001 ff6b 	bl	800df6c <__match>
 800c096:	b910      	cbnz	r0, 800c09e <_strtod_l+0x36e>
 800c098:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c09a:	3301      	adds	r3, #1
 800c09c:	9319      	str	r3, [sp, #100]	; 0x64
 800c09e:	f04f 0800 	mov.w	r8, #0
 800c0a2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800c2ac <_strtod_l+0x57c>
 800c0a6:	e67c      	b.n	800bda2 <_strtod_l+0x72>
 800c0a8:	4881      	ldr	r0, [pc, #516]	; (800c2b0 <_strtod_l+0x580>)
 800c0aa:	f001 fc93 	bl	800d9d4 <nan>
 800c0ae:	4680      	mov	r8, r0
 800c0b0:	4689      	mov	r9, r1
 800c0b2:	e676      	b.n	800bda2 <_strtod_l+0x72>
 800c0b4:	9b08      	ldr	r3, [sp, #32]
 800c0b6:	f1bb 0f00 	cmp.w	fp, #0
 800c0ba:	bf08      	it	eq
 800c0bc:	46b3      	moveq	fp, r6
 800c0be:	1afb      	subs	r3, r7, r3
 800c0c0:	2e10      	cmp	r6, #16
 800c0c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c0c4:	4635      	mov	r5, r6
 800c0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c0c8:	bfa8      	it	ge
 800c0ca:	2510      	movge	r5, #16
 800c0cc:	f7f4 faaa 	bl	8000624 <__aeabi_ui2d>
 800c0d0:	2e09      	cmp	r6, #9
 800c0d2:	4680      	mov	r8, r0
 800c0d4:	4689      	mov	r9, r1
 800c0d6:	dd13      	ble.n	800c100 <_strtod_l+0x3d0>
 800c0d8:	4b76      	ldr	r3, [pc, #472]	; (800c2b4 <_strtod_l+0x584>)
 800c0da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c0e2:	f7f4 fb19 	bl	8000718 <__aeabi_dmul>
 800c0e6:	4680      	mov	r8, r0
 800c0e8:	4650      	mov	r0, sl
 800c0ea:	4689      	mov	r9, r1
 800c0ec:	f7f4 fa9a 	bl	8000624 <__aeabi_ui2d>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4640      	mov	r0, r8
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	f7f4 f958 	bl	80003ac <__adddf3>
 800c0fc:	4680      	mov	r8, r0
 800c0fe:	4689      	mov	r9, r1
 800c100:	2e0f      	cmp	r6, #15
 800c102:	dc36      	bgt.n	800c172 <_strtod_l+0x442>
 800c104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c106:	2b00      	cmp	r3, #0
 800c108:	f43f ae4b 	beq.w	800bda2 <_strtod_l+0x72>
 800c10c:	dd22      	ble.n	800c154 <_strtod_l+0x424>
 800c10e:	2b16      	cmp	r3, #22
 800c110:	dc09      	bgt.n	800c126 <_strtod_l+0x3f6>
 800c112:	4968      	ldr	r1, [pc, #416]	; (800c2b4 <_strtod_l+0x584>)
 800c114:	4642      	mov	r2, r8
 800c116:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c11a:	464b      	mov	r3, r9
 800c11c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c120:	f7f4 fafa 	bl	8000718 <__aeabi_dmul>
 800c124:	e7c3      	b.n	800c0ae <_strtod_l+0x37e>
 800c126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c128:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c12c:	4293      	cmp	r3, r2
 800c12e:	db20      	blt.n	800c172 <_strtod_l+0x442>
 800c130:	4c60      	ldr	r4, [pc, #384]	; (800c2b4 <_strtod_l+0x584>)
 800c132:	f1c6 060f 	rsb	r6, r6, #15
 800c136:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c13a:	4642      	mov	r2, r8
 800c13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c140:	464b      	mov	r3, r9
 800c142:	f7f4 fae9 	bl	8000718 <__aeabi_dmul>
 800c146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c148:	1b9e      	subs	r6, r3, r6
 800c14a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c14e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c152:	e7e5      	b.n	800c120 <_strtod_l+0x3f0>
 800c154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c156:	3316      	adds	r3, #22
 800c158:	db0b      	blt.n	800c172 <_strtod_l+0x442>
 800c15a:	9b08      	ldr	r3, [sp, #32]
 800c15c:	4640      	mov	r0, r8
 800c15e:	1bdf      	subs	r7, r3, r7
 800c160:	4b54      	ldr	r3, [pc, #336]	; (800c2b4 <_strtod_l+0x584>)
 800c162:	4649      	mov	r1, r9
 800c164:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c16c:	f7f4 fbfe 	bl	800096c <__aeabi_ddiv>
 800c170:	e79d      	b.n	800c0ae <_strtod_l+0x37e>
 800c172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c174:	1b75      	subs	r5, r6, r5
 800c176:	441d      	add	r5, r3
 800c178:	2d00      	cmp	r5, #0
 800c17a:	dd70      	ble.n	800c25e <_strtod_l+0x52e>
 800c17c:	f015 030f 	ands.w	r3, r5, #15
 800c180:	d00a      	beq.n	800c198 <_strtod_l+0x468>
 800c182:	494c      	ldr	r1, [pc, #304]	; (800c2b4 <_strtod_l+0x584>)
 800c184:	4642      	mov	r2, r8
 800c186:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c18a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c18e:	464b      	mov	r3, r9
 800c190:	f7f4 fac2 	bl	8000718 <__aeabi_dmul>
 800c194:	4680      	mov	r8, r0
 800c196:	4689      	mov	r9, r1
 800c198:	f035 050f 	bics.w	r5, r5, #15
 800c19c:	d04d      	beq.n	800c23a <_strtod_l+0x50a>
 800c19e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c1a2:	dd22      	ble.n	800c1ea <_strtod_l+0x4ba>
 800c1a4:	2600      	movs	r6, #0
 800c1a6:	46b3      	mov	fp, r6
 800c1a8:	960b      	str	r6, [sp, #44]	; 0x2c
 800c1aa:	9608      	str	r6, [sp, #32]
 800c1ac:	2322      	movs	r3, #34	; 0x22
 800c1ae:	f04f 0800 	mov.w	r8, #0
 800c1b2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800c2ac <_strtod_l+0x57c>
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f43f adf1 	beq.w	800bda2 <_strtod_l+0x72>
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c1c4:	f7ff f934 	bl	800b430 <_Bfree>
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	9908      	ldr	r1, [sp, #32]
 800c1cc:	f7ff f930 	bl	800b430 <_Bfree>
 800c1d0:	4659      	mov	r1, fp
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7ff f92c 	bl	800b430 <_Bfree>
 800c1d8:	4620      	mov	r0, r4
 800c1da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1dc:	f7ff f928 	bl	800b430 <_Bfree>
 800c1e0:	4631      	mov	r1, r6
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f7ff f924 	bl	800b430 <_Bfree>
 800c1e8:	e5db      	b.n	800bda2 <_strtod_l+0x72>
 800c1ea:	4b33      	ldr	r3, [pc, #204]	; (800c2b8 <_strtod_l+0x588>)
 800c1ec:	4640      	mov	r0, r8
 800c1ee:	9305      	str	r3, [sp, #20]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4649      	mov	r1, r9
 800c1f4:	469a      	mov	sl, r3
 800c1f6:	112d      	asrs	r5, r5, #4
 800c1f8:	2d01      	cmp	r5, #1
 800c1fa:	dc21      	bgt.n	800c240 <_strtod_l+0x510>
 800c1fc:	b10b      	cbz	r3, 800c202 <_strtod_l+0x4d2>
 800c1fe:	4680      	mov	r8, r0
 800c200:	4689      	mov	r9, r1
 800c202:	492d      	ldr	r1, [pc, #180]	; (800c2b8 <_strtod_l+0x588>)
 800c204:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c208:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c20c:	4642      	mov	r2, r8
 800c20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c212:	464b      	mov	r3, r9
 800c214:	f7f4 fa80 	bl	8000718 <__aeabi_dmul>
 800c218:	4b24      	ldr	r3, [pc, #144]	; (800c2ac <_strtod_l+0x57c>)
 800c21a:	460a      	mov	r2, r1
 800c21c:	400b      	ands	r3, r1
 800c21e:	4927      	ldr	r1, [pc, #156]	; (800c2bc <_strtod_l+0x58c>)
 800c220:	4680      	mov	r8, r0
 800c222:	428b      	cmp	r3, r1
 800c224:	d8be      	bhi.n	800c1a4 <_strtod_l+0x474>
 800c226:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c22a:	428b      	cmp	r3, r1
 800c22c:	bf86      	itte	hi
 800c22e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c232:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800c2c0 <_strtod_l+0x590>
 800c236:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c23a:	2300      	movs	r3, #0
 800c23c:	9305      	str	r3, [sp, #20]
 800c23e:	e07b      	b.n	800c338 <_strtod_l+0x608>
 800c240:	07ea      	lsls	r2, r5, #31
 800c242:	d505      	bpl.n	800c250 <_strtod_l+0x520>
 800c244:	9b05      	ldr	r3, [sp, #20]
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	f7f4 fa65 	bl	8000718 <__aeabi_dmul>
 800c24e:	2301      	movs	r3, #1
 800c250:	9a05      	ldr	r2, [sp, #20]
 800c252:	f10a 0a01 	add.w	sl, sl, #1
 800c256:	3208      	adds	r2, #8
 800c258:	106d      	asrs	r5, r5, #1
 800c25a:	9205      	str	r2, [sp, #20]
 800c25c:	e7cc      	b.n	800c1f8 <_strtod_l+0x4c8>
 800c25e:	d0ec      	beq.n	800c23a <_strtod_l+0x50a>
 800c260:	426d      	negs	r5, r5
 800c262:	f015 020f 	ands.w	r2, r5, #15
 800c266:	d00a      	beq.n	800c27e <_strtod_l+0x54e>
 800c268:	4b12      	ldr	r3, [pc, #72]	; (800c2b4 <_strtod_l+0x584>)
 800c26a:	4640      	mov	r0, r8
 800c26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c270:	4649      	mov	r1, r9
 800c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c276:	f7f4 fb79 	bl	800096c <__aeabi_ddiv>
 800c27a:	4680      	mov	r8, r0
 800c27c:	4689      	mov	r9, r1
 800c27e:	112d      	asrs	r5, r5, #4
 800c280:	d0db      	beq.n	800c23a <_strtod_l+0x50a>
 800c282:	2d1f      	cmp	r5, #31
 800c284:	dd1e      	ble.n	800c2c4 <_strtod_l+0x594>
 800c286:	2600      	movs	r6, #0
 800c288:	46b3      	mov	fp, r6
 800c28a:	960b      	str	r6, [sp, #44]	; 0x2c
 800c28c:	9608      	str	r6, [sp, #32]
 800c28e:	2322      	movs	r3, #34	; 0x22
 800c290:	f04f 0800 	mov.w	r8, #0
 800c294:	f04f 0900 	mov.w	r9, #0
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	e78d      	b.n	800c1b8 <_strtod_l+0x488>
 800c29c:	0800ef67 	.word	0x0800ef67
 800c2a0:	0800f1cc 	.word	0x0800f1cc
 800c2a4:	0800ef5f 	.word	0x0800ef5f
 800c2a8:	0800efd0 	.word	0x0800efd0
 800c2ac:	7ff00000 	.word	0x7ff00000
 800c2b0:	0800efcc 	.word	0x0800efcc
 800c2b4:	0800f0e0 	.word	0x0800f0e0
 800c2b8:	0800f0b8 	.word	0x0800f0b8
 800c2bc:	7ca00000 	.word	0x7ca00000
 800c2c0:	7fefffff 	.word	0x7fefffff
 800c2c4:	f015 0310 	ands.w	r3, r5, #16
 800c2c8:	bf18      	it	ne
 800c2ca:	236a      	movne	r3, #106	; 0x6a
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	9305      	str	r3, [sp, #20]
 800c2d0:	4649      	mov	r1, r9
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800c5a0 <_strtod_l+0x870>
 800c2d8:	07ea      	lsls	r2, r5, #31
 800c2da:	d504      	bpl.n	800c2e6 <_strtod_l+0x5b6>
 800c2dc:	e9da 2300 	ldrd	r2, r3, [sl]
 800c2e0:	f7f4 fa1a 	bl	8000718 <__aeabi_dmul>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	106d      	asrs	r5, r5, #1
 800c2e8:	f10a 0a08 	add.w	sl, sl, #8
 800c2ec:	d1f4      	bne.n	800c2d8 <_strtod_l+0x5a8>
 800c2ee:	b10b      	cbz	r3, 800c2f4 <_strtod_l+0x5c4>
 800c2f0:	4680      	mov	r8, r0
 800c2f2:	4689      	mov	r9, r1
 800c2f4:	9b05      	ldr	r3, [sp, #20]
 800c2f6:	b1bb      	cbz	r3, 800c328 <_strtod_l+0x5f8>
 800c2f8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c2fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c300:	2b00      	cmp	r3, #0
 800c302:	4649      	mov	r1, r9
 800c304:	dd10      	ble.n	800c328 <_strtod_l+0x5f8>
 800c306:	2b1f      	cmp	r3, #31
 800c308:	f340 8128 	ble.w	800c55c <_strtod_l+0x82c>
 800c30c:	2b34      	cmp	r3, #52	; 0x34
 800c30e:	bfd8      	it	le
 800c310:	f04f 33ff 	movle.w	r3, #4294967295
 800c314:	f04f 0800 	mov.w	r8, #0
 800c318:	bfcf      	iteee	gt
 800c31a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c31e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c322:	4093      	lslle	r3, r2
 800c324:	ea03 0901 	andle.w	r9, r3, r1
 800c328:	2200      	movs	r2, #0
 800c32a:	2300      	movs	r3, #0
 800c32c:	4640      	mov	r0, r8
 800c32e:	4649      	mov	r1, r9
 800c330:	f7f4 fc5a 	bl	8000be8 <__aeabi_dcmpeq>
 800c334:	2800      	cmp	r0, #0
 800c336:	d1a6      	bne.n	800c286 <_strtod_l+0x556>
 800c338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c33a:	465a      	mov	r2, fp
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	4620      	mov	r0, r4
 800c340:	4633      	mov	r3, r6
 800c342:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c344:	f7ff f8dc 	bl	800b500 <__s2b>
 800c348:	900b      	str	r0, [sp, #44]	; 0x2c
 800c34a:	2800      	cmp	r0, #0
 800c34c:	f43f af2a 	beq.w	800c1a4 <_strtod_l+0x474>
 800c350:	2600      	movs	r6, #0
 800c352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c354:	9b08      	ldr	r3, [sp, #32]
 800c356:	2a00      	cmp	r2, #0
 800c358:	eba3 0307 	sub.w	r3, r3, r7
 800c35c:	bfa8      	it	ge
 800c35e:	2300      	movge	r3, #0
 800c360:	46b3      	mov	fp, r6
 800c362:	9312      	str	r3, [sp, #72]	; 0x48
 800c364:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c368:	9316      	str	r3, [sp, #88]	; 0x58
 800c36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c36c:	4620      	mov	r0, r4
 800c36e:	6859      	ldr	r1, [r3, #4]
 800c370:	f7ff f81e 	bl	800b3b0 <_Balloc>
 800c374:	9008      	str	r0, [sp, #32]
 800c376:	2800      	cmp	r0, #0
 800c378:	f43f af18 	beq.w	800c1ac <_strtod_l+0x47c>
 800c37c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c37e:	300c      	adds	r0, #12
 800c380:	691a      	ldr	r2, [r3, #16]
 800c382:	f103 010c 	add.w	r1, r3, #12
 800c386:	3202      	adds	r2, #2
 800c388:	0092      	lsls	r2, r2, #2
 800c38a:	f7fe f876 	bl	800a47a <memcpy>
 800c38e:	ab1c      	add	r3, sp, #112	; 0x70
 800c390:	9301      	str	r3, [sp, #4]
 800c392:	ab1b      	add	r3, sp, #108	; 0x6c
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	4642      	mov	r2, r8
 800c398:	464b      	mov	r3, r9
 800c39a:	4620      	mov	r0, r4
 800c39c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800c3a0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800c3a4:	f7ff fbd8 	bl	800bb58 <__d2b>
 800c3a8:	901a      	str	r0, [sp, #104]	; 0x68
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	f43f aefe 	beq.w	800c1ac <_strtod_l+0x47c>
 800c3b0:	2101      	movs	r1, #1
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f7ff f93c 	bl	800b630 <__i2b>
 800c3b8:	4683      	mov	fp, r0
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	f43f aef6 	beq.w	800c1ac <_strtod_l+0x47c>
 800c3c0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c3c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c3c4:	2f00      	cmp	r7, #0
 800c3c6:	bfab      	itete	ge
 800c3c8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800c3ca:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c3cc:	eb07 0a03 	addge.w	sl, r7, r3
 800c3d0:	1bdd      	sublt	r5, r3, r7
 800c3d2:	9b05      	ldr	r3, [sp, #20]
 800c3d4:	bfa8      	it	ge
 800c3d6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c3d8:	eba7 0703 	sub.w	r7, r7, r3
 800c3dc:	4417      	add	r7, r2
 800c3de:	4b71      	ldr	r3, [pc, #452]	; (800c5a4 <_strtod_l+0x874>)
 800c3e0:	f107 37ff 	add.w	r7, r7, #4294967295
 800c3e4:	bfb8      	it	lt
 800c3e6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800c3ea:	429f      	cmp	r7, r3
 800c3ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c3f0:	f280 80c7 	bge.w	800c582 <_strtod_l+0x852>
 800c3f4:	1bdb      	subs	r3, r3, r7
 800c3f6:	2b1f      	cmp	r3, #31
 800c3f8:	f04f 0101 	mov.w	r1, #1
 800c3fc:	eba2 0203 	sub.w	r2, r2, r3
 800c400:	f300 80b3 	bgt.w	800c56a <_strtod_l+0x83a>
 800c404:	fa01 f303 	lsl.w	r3, r1, r3
 800c408:	9313      	str	r3, [sp, #76]	; 0x4c
 800c40a:	2300      	movs	r3, #0
 800c40c:	9310      	str	r3, [sp, #64]	; 0x40
 800c40e:	eb0a 0702 	add.w	r7, sl, r2
 800c412:	9b05      	ldr	r3, [sp, #20]
 800c414:	45ba      	cmp	sl, r7
 800c416:	4415      	add	r5, r2
 800c418:	441d      	add	r5, r3
 800c41a:	4653      	mov	r3, sl
 800c41c:	bfa8      	it	ge
 800c41e:	463b      	movge	r3, r7
 800c420:	42ab      	cmp	r3, r5
 800c422:	bfa8      	it	ge
 800c424:	462b      	movge	r3, r5
 800c426:	2b00      	cmp	r3, #0
 800c428:	bfc2      	ittt	gt
 800c42a:	1aff      	subgt	r7, r7, r3
 800c42c:	1aed      	subgt	r5, r5, r3
 800c42e:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c432:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c434:	2b00      	cmp	r3, #0
 800c436:	dd17      	ble.n	800c468 <_strtod_l+0x738>
 800c438:	4659      	mov	r1, fp
 800c43a:	461a      	mov	r2, r3
 800c43c:	4620      	mov	r0, r4
 800c43e:	f7ff f9b5 	bl	800b7ac <__pow5mult>
 800c442:	4683      	mov	fp, r0
 800c444:	2800      	cmp	r0, #0
 800c446:	f43f aeb1 	beq.w	800c1ac <_strtod_l+0x47c>
 800c44a:	4601      	mov	r1, r0
 800c44c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c44e:	4620      	mov	r0, r4
 800c450:	f7ff f904 	bl	800b65c <__multiply>
 800c454:	900a      	str	r0, [sp, #40]	; 0x28
 800c456:	2800      	cmp	r0, #0
 800c458:	f43f aea8 	beq.w	800c1ac <_strtod_l+0x47c>
 800c45c:	4620      	mov	r0, r4
 800c45e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c460:	f7fe ffe6 	bl	800b430 <_Bfree>
 800c464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c466:	931a      	str	r3, [sp, #104]	; 0x68
 800c468:	2f00      	cmp	r7, #0
 800c46a:	f300 808f 	bgt.w	800c58c <_strtod_l+0x85c>
 800c46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c470:	2b00      	cmp	r3, #0
 800c472:	dd08      	ble.n	800c486 <_strtod_l+0x756>
 800c474:	4620      	mov	r0, r4
 800c476:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c478:	9908      	ldr	r1, [sp, #32]
 800c47a:	f7ff f997 	bl	800b7ac <__pow5mult>
 800c47e:	9008      	str	r0, [sp, #32]
 800c480:	2800      	cmp	r0, #0
 800c482:	f43f ae93 	beq.w	800c1ac <_strtod_l+0x47c>
 800c486:	2d00      	cmp	r5, #0
 800c488:	dd08      	ble.n	800c49c <_strtod_l+0x76c>
 800c48a:	462a      	mov	r2, r5
 800c48c:	4620      	mov	r0, r4
 800c48e:	9908      	ldr	r1, [sp, #32]
 800c490:	f7ff f9e6 	bl	800b860 <__lshift>
 800c494:	9008      	str	r0, [sp, #32]
 800c496:	2800      	cmp	r0, #0
 800c498:	f43f ae88 	beq.w	800c1ac <_strtod_l+0x47c>
 800c49c:	f1ba 0f00 	cmp.w	sl, #0
 800c4a0:	dd08      	ble.n	800c4b4 <_strtod_l+0x784>
 800c4a2:	4659      	mov	r1, fp
 800c4a4:	4652      	mov	r2, sl
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f7ff f9da 	bl	800b860 <__lshift>
 800c4ac:	4683      	mov	fp, r0
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	f43f ae7c 	beq.w	800c1ac <_strtod_l+0x47c>
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	9a08      	ldr	r2, [sp, #32]
 800c4b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c4ba:	f7ff fa59 	bl	800b970 <__mdiff>
 800c4be:	4606      	mov	r6, r0
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	f43f ae73 	beq.w	800c1ac <_strtod_l+0x47c>
 800c4c6:	2500      	movs	r5, #0
 800c4c8:	68c3      	ldr	r3, [r0, #12]
 800c4ca:	4659      	mov	r1, fp
 800c4cc:	60c5      	str	r5, [r0, #12]
 800c4ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c4d0:	f7ff fa32 	bl	800b938 <__mcmp>
 800c4d4:	42a8      	cmp	r0, r5
 800c4d6:	da6b      	bge.n	800c5b0 <_strtod_l+0x880>
 800c4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4da:	ea53 0308 	orrs.w	r3, r3, r8
 800c4de:	f040 808f 	bne.w	800c600 <_strtod_l+0x8d0>
 800c4e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f040 808a 	bne.w	800c600 <_strtod_l+0x8d0>
 800c4ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4f0:	0d1b      	lsrs	r3, r3, #20
 800c4f2:	051b      	lsls	r3, r3, #20
 800c4f4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c4f8:	f240 8082 	bls.w	800c600 <_strtod_l+0x8d0>
 800c4fc:	6973      	ldr	r3, [r6, #20]
 800c4fe:	b913      	cbnz	r3, 800c506 <_strtod_l+0x7d6>
 800c500:	6933      	ldr	r3, [r6, #16]
 800c502:	2b01      	cmp	r3, #1
 800c504:	dd7c      	ble.n	800c600 <_strtod_l+0x8d0>
 800c506:	4631      	mov	r1, r6
 800c508:	2201      	movs	r2, #1
 800c50a:	4620      	mov	r0, r4
 800c50c:	f7ff f9a8 	bl	800b860 <__lshift>
 800c510:	4659      	mov	r1, fp
 800c512:	4606      	mov	r6, r0
 800c514:	f7ff fa10 	bl	800b938 <__mcmp>
 800c518:	2800      	cmp	r0, #0
 800c51a:	dd71      	ble.n	800c600 <_strtod_l+0x8d0>
 800c51c:	9905      	ldr	r1, [sp, #20]
 800c51e:	464b      	mov	r3, r9
 800c520:	4a21      	ldr	r2, [pc, #132]	; (800c5a8 <_strtod_l+0x878>)
 800c522:	2900      	cmp	r1, #0
 800c524:	f000 808d 	beq.w	800c642 <_strtod_l+0x912>
 800c528:	ea02 0109 	and.w	r1, r2, r9
 800c52c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c530:	f300 8087 	bgt.w	800c642 <_strtod_l+0x912>
 800c534:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c538:	f77f aea9 	ble.w	800c28e <_strtod_l+0x55e>
 800c53c:	4640      	mov	r0, r8
 800c53e:	4649      	mov	r1, r9
 800c540:	4b1a      	ldr	r3, [pc, #104]	; (800c5ac <_strtod_l+0x87c>)
 800c542:	2200      	movs	r2, #0
 800c544:	f7f4 f8e8 	bl	8000718 <__aeabi_dmul>
 800c548:	4b17      	ldr	r3, [pc, #92]	; (800c5a8 <_strtod_l+0x878>)
 800c54a:	4680      	mov	r8, r0
 800c54c:	400b      	ands	r3, r1
 800c54e:	4689      	mov	r9, r1
 800c550:	2b00      	cmp	r3, #0
 800c552:	f47f ae35 	bne.w	800c1c0 <_strtod_l+0x490>
 800c556:	2322      	movs	r3, #34	; 0x22
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	e631      	b.n	800c1c0 <_strtod_l+0x490>
 800c55c:	f04f 32ff 	mov.w	r2, #4294967295
 800c560:	fa02 f303 	lsl.w	r3, r2, r3
 800c564:	ea03 0808 	and.w	r8, r3, r8
 800c568:	e6de      	b.n	800c328 <_strtod_l+0x5f8>
 800c56a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800c56e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800c572:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800c576:	37e2      	adds	r7, #226	; 0xe2
 800c578:	fa01 f307 	lsl.w	r3, r1, r7
 800c57c:	9310      	str	r3, [sp, #64]	; 0x40
 800c57e:	9113      	str	r1, [sp, #76]	; 0x4c
 800c580:	e745      	b.n	800c40e <_strtod_l+0x6de>
 800c582:	2300      	movs	r3, #0
 800c584:	9310      	str	r3, [sp, #64]	; 0x40
 800c586:	2301      	movs	r3, #1
 800c588:	9313      	str	r3, [sp, #76]	; 0x4c
 800c58a:	e740      	b.n	800c40e <_strtod_l+0x6de>
 800c58c:	463a      	mov	r2, r7
 800c58e:	4620      	mov	r0, r4
 800c590:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c592:	f7ff f965 	bl	800b860 <__lshift>
 800c596:	901a      	str	r0, [sp, #104]	; 0x68
 800c598:	2800      	cmp	r0, #0
 800c59a:	f47f af68 	bne.w	800c46e <_strtod_l+0x73e>
 800c59e:	e605      	b.n	800c1ac <_strtod_l+0x47c>
 800c5a0:	0800f1e0 	.word	0x0800f1e0
 800c5a4:	fffffc02 	.word	0xfffffc02
 800c5a8:	7ff00000 	.word	0x7ff00000
 800c5ac:	39500000 	.word	0x39500000
 800c5b0:	46ca      	mov	sl, r9
 800c5b2:	d165      	bne.n	800c680 <_strtod_l+0x950>
 800c5b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5ba:	b352      	cbz	r2, 800c612 <_strtod_l+0x8e2>
 800c5bc:	4a9e      	ldr	r2, [pc, #632]	; (800c838 <_strtod_l+0xb08>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d12a      	bne.n	800c618 <_strtod_l+0x8e8>
 800c5c2:	9b05      	ldr	r3, [sp, #20]
 800c5c4:	4641      	mov	r1, r8
 800c5c6:	b1fb      	cbz	r3, 800c608 <_strtod_l+0x8d8>
 800c5c8:	4b9c      	ldr	r3, [pc, #624]	; (800c83c <_strtod_l+0xb0c>)
 800c5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ce:	ea09 0303 	and.w	r3, r9, r3
 800c5d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c5d6:	d81a      	bhi.n	800c60e <_strtod_l+0x8de>
 800c5d8:	0d1b      	lsrs	r3, r3, #20
 800c5da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5de:	fa02 f303 	lsl.w	r3, r2, r3
 800c5e2:	4299      	cmp	r1, r3
 800c5e4:	d118      	bne.n	800c618 <_strtod_l+0x8e8>
 800c5e6:	4b96      	ldr	r3, [pc, #600]	; (800c840 <_strtod_l+0xb10>)
 800c5e8:	459a      	cmp	sl, r3
 800c5ea:	d102      	bne.n	800c5f2 <_strtod_l+0x8c2>
 800c5ec:	3101      	adds	r1, #1
 800c5ee:	f43f addd 	beq.w	800c1ac <_strtod_l+0x47c>
 800c5f2:	f04f 0800 	mov.w	r8, #0
 800c5f6:	4b91      	ldr	r3, [pc, #580]	; (800c83c <_strtod_l+0xb0c>)
 800c5f8:	ea0a 0303 	and.w	r3, sl, r3
 800c5fc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c600:	9b05      	ldr	r3, [sp, #20]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d19a      	bne.n	800c53c <_strtod_l+0x80c>
 800c606:	e5db      	b.n	800c1c0 <_strtod_l+0x490>
 800c608:	f04f 33ff 	mov.w	r3, #4294967295
 800c60c:	e7e9      	b.n	800c5e2 <_strtod_l+0x8b2>
 800c60e:	4613      	mov	r3, r2
 800c610:	e7e7      	b.n	800c5e2 <_strtod_l+0x8b2>
 800c612:	ea53 0308 	orrs.w	r3, r3, r8
 800c616:	d081      	beq.n	800c51c <_strtod_l+0x7ec>
 800c618:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c61a:	b1e3      	cbz	r3, 800c656 <_strtod_l+0x926>
 800c61c:	ea13 0f0a 	tst.w	r3, sl
 800c620:	d0ee      	beq.n	800c600 <_strtod_l+0x8d0>
 800c622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c624:	4640      	mov	r0, r8
 800c626:	4649      	mov	r1, r9
 800c628:	9a05      	ldr	r2, [sp, #20]
 800c62a:	b1c3      	cbz	r3, 800c65e <_strtod_l+0x92e>
 800c62c:	f7ff fb5c 	bl	800bce8 <sulp>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c636:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c638:	f7f3 feb8 	bl	80003ac <__adddf3>
 800c63c:	4680      	mov	r8, r0
 800c63e:	4689      	mov	r9, r1
 800c640:	e7de      	b.n	800c600 <_strtod_l+0x8d0>
 800c642:	4013      	ands	r3, r2
 800c644:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c648:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c64c:	f04f 38ff 	mov.w	r8, #4294967295
 800c650:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c654:	e7d4      	b.n	800c600 <_strtod_l+0x8d0>
 800c656:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c658:	ea13 0f08 	tst.w	r3, r8
 800c65c:	e7e0      	b.n	800c620 <_strtod_l+0x8f0>
 800c65e:	f7ff fb43 	bl	800bce8 <sulp>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c668:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c66a:	f7f3 fe9d 	bl	80003a8 <__aeabi_dsub>
 800c66e:	2200      	movs	r2, #0
 800c670:	2300      	movs	r3, #0
 800c672:	4680      	mov	r8, r0
 800c674:	4689      	mov	r9, r1
 800c676:	f7f4 fab7 	bl	8000be8 <__aeabi_dcmpeq>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d0c0      	beq.n	800c600 <_strtod_l+0x8d0>
 800c67e:	e606      	b.n	800c28e <_strtod_l+0x55e>
 800c680:	4659      	mov	r1, fp
 800c682:	4630      	mov	r0, r6
 800c684:	f7ff fabe 	bl	800bc04 <__ratio>
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c690:	2200      	movs	r2, #0
 800c692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c696:	f7f4 fabb 	bl	8000c10 <__aeabi_dcmple>
 800c69a:	2800      	cmp	r0, #0
 800c69c:	d06f      	beq.n	800c77e <_strtod_l+0xa4e>
 800c69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d17c      	bne.n	800c79e <_strtod_l+0xa6e>
 800c6a4:	f1b8 0f00 	cmp.w	r8, #0
 800c6a8:	d159      	bne.n	800c75e <_strtod_l+0xa2e>
 800c6aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d17b      	bne.n	800c7aa <_strtod_l+0xa7a>
 800c6b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	4b62      	ldr	r3, [pc, #392]	; (800c844 <_strtod_l+0xb14>)
 800c6ba:	f7f4 fa9f 	bl	8000bfc <__aeabi_dcmplt>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d15a      	bne.n	800c778 <_strtod_l+0xa48>
 800c6c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	4b5f      	ldr	r3, [pc, #380]	; (800c848 <_strtod_l+0xb18>)
 800c6ca:	f7f4 f825 	bl	8000718 <__aeabi_dmul>
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c6d6:	9506      	str	r5, [sp, #24]
 800c6d8:	9307      	str	r3, [sp, #28]
 800c6da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6de:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c6e2:	4b56      	ldr	r3, [pc, #344]	; (800c83c <_strtod_l+0xb0c>)
 800c6e4:	4a55      	ldr	r2, [pc, #340]	; (800c83c <_strtod_l+0xb0c>)
 800c6e6:	ea0a 0303 	and.w	r3, sl, r3
 800c6ea:	9313      	str	r3, [sp, #76]	; 0x4c
 800c6ec:	4b57      	ldr	r3, [pc, #348]	; (800c84c <_strtod_l+0xb1c>)
 800c6ee:	ea0a 0202 	and.w	r2, sl, r2
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	f040 80b0 	bne.w	800c858 <_strtod_l+0xb28>
 800c6f8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	4649      	mov	r1, r9
 800c700:	f7ff f9c2 	bl	800ba88 <__ulp>
 800c704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c708:	f7f4 f806 	bl	8000718 <__aeabi_dmul>
 800c70c:	4642      	mov	r2, r8
 800c70e:	464b      	mov	r3, r9
 800c710:	f7f3 fe4c 	bl	80003ac <__adddf3>
 800c714:	f8df a124 	ldr.w	sl, [pc, #292]	; 800c83c <_strtod_l+0xb0c>
 800c718:	4a4d      	ldr	r2, [pc, #308]	; (800c850 <_strtod_l+0xb20>)
 800c71a:	ea01 0a0a 	and.w	sl, r1, sl
 800c71e:	4592      	cmp	sl, r2
 800c720:	4680      	mov	r8, r0
 800c722:	d948      	bls.n	800c7b6 <_strtod_l+0xa86>
 800c724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c726:	4b46      	ldr	r3, [pc, #280]	; (800c840 <_strtod_l+0xb10>)
 800c728:	429a      	cmp	r2, r3
 800c72a:	d103      	bne.n	800c734 <_strtod_l+0xa04>
 800c72c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c72e:	3301      	adds	r3, #1
 800c730:	f43f ad3c 	beq.w	800c1ac <_strtod_l+0x47c>
 800c734:	f04f 38ff 	mov.w	r8, #4294967295
 800c738:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800c840 <_strtod_l+0xb10>
 800c73c:	4620      	mov	r0, r4
 800c73e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c740:	f7fe fe76 	bl	800b430 <_Bfree>
 800c744:	4620      	mov	r0, r4
 800c746:	9908      	ldr	r1, [sp, #32]
 800c748:	f7fe fe72 	bl	800b430 <_Bfree>
 800c74c:	4659      	mov	r1, fp
 800c74e:	4620      	mov	r0, r4
 800c750:	f7fe fe6e 	bl	800b430 <_Bfree>
 800c754:	4631      	mov	r1, r6
 800c756:	4620      	mov	r0, r4
 800c758:	f7fe fe6a 	bl	800b430 <_Bfree>
 800c75c:	e605      	b.n	800c36a <_strtod_l+0x63a>
 800c75e:	f1b8 0f01 	cmp.w	r8, #1
 800c762:	d103      	bne.n	800c76c <_strtod_l+0xa3c>
 800c764:	f1b9 0f00 	cmp.w	r9, #0
 800c768:	f43f ad91 	beq.w	800c28e <_strtod_l+0x55e>
 800c76c:	2200      	movs	r2, #0
 800c76e:	4b39      	ldr	r3, [pc, #228]	; (800c854 <_strtod_l+0xb24>)
 800c770:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c772:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c776:	e016      	b.n	800c7a6 <_strtod_l+0xa76>
 800c778:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c77a:	4f33      	ldr	r7, [pc, #204]	; (800c848 <_strtod_l+0xb18>)
 800c77c:	e7a9      	b.n	800c6d2 <_strtod_l+0x9a2>
 800c77e:	4b32      	ldr	r3, [pc, #200]	; (800c848 <_strtod_l+0xb18>)
 800c780:	2200      	movs	r2, #0
 800c782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c786:	f7f3 ffc7 	bl	8000718 <__aeabi_dmul>
 800c78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c78c:	4605      	mov	r5, r0
 800c78e:	460f      	mov	r7, r1
 800c790:	2b00      	cmp	r3, #0
 800c792:	d09e      	beq.n	800c6d2 <_strtod_l+0x9a2>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c79c:	e79d      	b.n	800c6da <_strtod_l+0x9aa>
 800c79e:	2200      	movs	r2, #0
 800c7a0:	4b28      	ldr	r3, [pc, #160]	; (800c844 <_strtod_l+0xb14>)
 800c7a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7a6:	4f27      	ldr	r7, [pc, #156]	; (800c844 <_strtod_l+0xb14>)
 800c7a8:	e797      	b.n	800c6da <_strtod_l+0x9aa>
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	4b29      	ldr	r3, [pc, #164]	; (800c854 <_strtod_l+0xb24>)
 800c7ae:	4645      	mov	r5, r8
 800c7b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c7b4:	e7f7      	b.n	800c7a6 <_strtod_l+0xa76>
 800c7b6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800c7ba:	9b05      	ldr	r3, [sp, #20]
 800c7bc:	46ca      	mov	sl, r9
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1bc      	bne.n	800c73c <_strtod_l+0xa0c>
 800c7c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c7c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c7c8:	0d1b      	lsrs	r3, r3, #20
 800c7ca:	051b      	lsls	r3, r3, #20
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d1b5      	bne.n	800c73c <_strtod_l+0xa0c>
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	f7f4 fc16 	bl	8001004 <__aeabi_d2lz>
 800c7d8:	f7f3 ff70 	bl	80006bc <__aeabi_l2d>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	4639      	mov	r1, r7
 800c7e4:	f7f3 fde0 	bl	80003a8 <__aeabi_dsub>
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800c7f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f6:	ea4a 0a08 	orr.w	sl, sl, r8
 800c7fa:	ea5a 0a03 	orrs.w	sl, sl, r3
 800c7fe:	d06c      	beq.n	800c8da <_strtod_l+0xbaa>
 800c800:	a309      	add	r3, pc, #36	; (adr r3, 800c828 <_strtod_l+0xaf8>)
 800c802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c806:	f7f4 f9f9 	bl	8000bfc <__aeabi_dcmplt>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	f47f acd8 	bne.w	800c1c0 <_strtod_l+0x490>
 800c810:	a307      	add	r3, pc, #28	; (adr r3, 800c830 <_strtod_l+0xb00>)
 800c812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c81a:	f7f4 fa0d 	bl	8000c38 <__aeabi_dcmpgt>
 800c81e:	2800      	cmp	r0, #0
 800c820:	d08c      	beq.n	800c73c <_strtod_l+0xa0c>
 800c822:	e4cd      	b.n	800c1c0 <_strtod_l+0x490>
 800c824:	f3af 8000 	nop.w
 800c828:	94a03595 	.word	0x94a03595
 800c82c:	3fdfffff 	.word	0x3fdfffff
 800c830:	35afe535 	.word	0x35afe535
 800c834:	3fe00000 	.word	0x3fe00000
 800c838:	000fffff 	.word	0x000fffff
 800c83c:	7ff00000 	.word	0x7ff00000
 800c840:	7fefffff 	.word	0x7fefffff
 800c844:	3ff00000 	.word	0x3ff00000
 800c848:	3fe00000 	.word	0x3fe00000
 800c84c:	7fe00000 	.word	0x7fe00000
 800c850:	7c9fffff 	.word	0x7c9fffff
 800c854:	bff00000 	.word	0xbff00000
 800c858:	9b05      	ldr	r3, [sp, #20]
 800c85a:	b333      	cbz	r3, 800c8aa <_strtod_l+0xb7a>
 800c85c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c85e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c862:	d822      	bhi.n	800c8aa <_strtod_l+0xb7a>
 800c864:	a328      	add	r3, pc, #160	; (adr r3, 800c908 <_strtod_l+0xbd8>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	4628      	mov	r0, r5
 800c86c:	4639      	mov	r1, r7
 800c86e:	f7f4 f9cf 	bl	8000c10 <__aeabi_dcmple>
 800c872:	b1a0      	cbz	r0, 800c89e <_strtod_l+0xb6e>
 800c874:	4639      	mov	r1, r7
 800c876:	4628      	mov	r0, r5
 800c878:	f7f4 fa26 	bl	8000cc8 <__aeabi_d2uiz>
 800c87c:	2801      	cmp	r0, #1
 800c87e:	bf38      	it	cc
 800c880:	2001      	movcc	r0, #1
 800c882:	f7f3 fecf 	bl	8000624 <__aeabi_ui2d>
 800c886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c888:	4605      	mov	r5, r0
 800c88a:	460f      	mov	r7, r1
 800c88c:	bb03      	cbnz	r3, 800c8d0 <_strtod_l+0xba0>
 800c88e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c892:	9014      	str	r0, [sp, #80]	; 0x50
 800c894:	9315      	str	r3, [sp, #84]	; 0x54
 800c896:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c89a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c89e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c8a2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c8a6:	1a9b      	subs	r3, r3, r2
 800c8a8:	9311      	str	r3, [sp, #68]	; 0x44
 800c8aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c8ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c8ae:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800c8b2:	f7ff f8e9 	bl	800ba88 <__ulp>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	4649      	mov	r1, r9
 800c8be:	f7f3 ff2b 	bl	8000718 <__aeabi_dmul>
 800c8c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8c6:	f7f3 fd71 	bl	80003ac <__adddf3>
 800c8ca:	4680      	mov	r8, r0
 800c8cc:	4689      	mov	r9, r1
 800c8ce:	e774      	b.n	800c7ba <_strtod_l+0xa8a>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c8d8:	e7dd      	b.n	800c896 <_strtod_l+0xb66>
 800c8da:	a30d      	add	r3, pc, #52	; (adr r3, 800c910 <_strtod_l+0xbe0>)
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	f7f4 f98c 	bl	8000bfc <__aeabi_dcmplt>
 800c8e4:	e79b      	b.n	800c81e <_strtod_l+0xaee>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	930e      	str	r3, [sp, #56]	; 0x38
 800c8ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c8ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c8ee:	6013      	str	r3, [r2, #0]
 800c8f0:	f7ff ba5b 	b.w	800bdaa <_strtod_l+0x7a>
 800c8f4:	2a65      	cmp	r2, #101	; 0x65
 800c8f6:	f43f ab52 	beq.w	800bf9e <_strtod_l+0x26e>
 800c8fa:	2a45      	cmp	r2, #69	; 0x45
 800c8fc:	f43f ab4f 	beq.w	800bf9e <_strtod_l+0x26e>
 800c900:	2301      	movs	r3, #1
 800c902:	f7ff bb87 	b.w	800c014 <_strtod_l+0x2e4>
 800c906:	bf00      	nop
 800c908:	ffc00000 	.word	0xffc00000
 800c90c:	41dfffff 	.word	0x41dfffff
 800c910:	94a03595 	.word	0x94a03595
 800c914:	3fcfffff 	.word	0x3fcfffff

0800c918 <_strtod_r>:
 800c918:	4b01      	ldr	r3, [pc, #4]	; (800c920 <_strtod_r+0x8>)
 800c91a:	f7ff ba09 	b.w	800bd30 <_strtod_l>
 800c91e:	bf00      	nop
 800c920:	20000314 	.word	0x20000314

0800c924 <_strtol_l.constprop.0>:
 800c924:	2b01      	cmp	r3, #1
 800c926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c92a:	4686      	mov	lr, r0
 800c92c:	4690      	mov	r8, r2
 800c92e:	d001      	beq.n	800c934 <_strtol_l.constprop.0+0x10>
 800c930:	2b24      	cmp	r3, #36	; 0x24
 800c932:	d906      	bls.n	800c942 <_strtol_l.constprop.0+0x1e>
 800c934:	f7fd fd66 	bl	800a404 <__errno>
 800c938:	2316      	movs	r3, #22
 800c93a:	6003      	str	r3, [r0, #0]
 800c93c:	2000      	movs	r0, #0
 800c93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c942:	460d      	mov	r5, r1
 800c944:	4835      	ldr	r0, [pc, #212]	; (800ca1c <_strtol_l.constprop.0+0xf8>)
 800c946:	462a      	mov	r2, r5
 800c948:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c94c:	5d06      	ldrb	r6, [r0, r4]
 800c94e:	f016 0608 	ands.w	r6, r6, #8
 800c952:	d1f8      	bne.n	800c946 <_strtol_l.constprop.0+0x22>
 800c954:	2c2d      	cmp	r4, #45	; 0x2d
 800c956:	d12e      	bne.n	800c9b6 <_strtol_l.constprop.0+0x92>
 800c958:	2601      	movs	r6, #1
 800c95a:	782c      	ldrb	r4, [r5, #0]
 800c95c:	1c95      	adds	r5, r2, #2
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d057      	beq.n	800ca12 <_strtol_l.constprop.0+0xee>
 800c962:	2b10      	cmp	r3, #16
 800c964:	d109      	bne.n	800c97a <_strtol_l.constprop.0+0x56>
 800c966:	2c30      	cmp	r4, #48	; 0x30
 800c968:	d107      	bne.n	800c97a <_strtol_l.constprop.0+0x56>
 800c96a:	782a      	ldrb	r2, [r5, #0]
 800c96c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c970:	2a58      	cmp	r2, #88	; 0x58
 800c972:	d149      	bne.n	800ca08 <_strtol_l.constprop.0+0xe4>
 800c974:	2310      	movs	r3, #16
 800c976:	786c      	ldrb	r4, [r5, #1]
 800c978:	3502      	adds	r5, #2
 800c97a:	2200      	movs	r2, #0
 800c97c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800c980:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c984:	fbbc f9f3 	udiv	r9, ip, r3
 800c988:	4610      	mov	r0, r2
 800c98a:	fb03 ca19 	mls	sl, r3, r9, ip
 800c98e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c992:	2f09      	cmp	r7, #9
 800c994:	d814      	bhi.n	800c9c0 <_strtol_l.constprop.0+0x9c>
 800c996:	463c      	mov	r4, r7
 800c998:	42a3      	cmp	r3, r4
 800c99a:	dd20      	ble.n	800c9de <_strtol_l.constprop.0+0xba>
 800c99c:	1c57      	adds	r7, r2, #1
 800c99e:	d007      	beq.n	800c9b0 <_strtol_l.constprop.0+0x8c>
 800c9a0:	4581      	cmp	r9, r0
 800c9a2:	d319      	bcc.n	800c9d8 <_strtol_l.constprop.0+0xb4>
 800c9a4:	d101      	bne.n	800c9aa <_strtol_l.constprop.0+0x86>
 800c9a6:	45a2      	cmp	sl, r4
 800c9a8:	db16      	blt.n	800c9d8 <_strtol_l.constprop.0+0xb4>
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	fb00 4003 	mla	r0, r0, r3, r4
 800c9b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9b4:	e7eb      	b.n	800c98e <_strtol_l.constprop.0+0x6a>
 800c9b6:	2c2b      	cmp	r4, #43	; 0x2b
 800c9b8:	bf04      	itt	eq
 800c9ba:	782c      	ldrbeq	r4, [r5, #0]
 800c9bc:	1c95      	addeq	r5, r2, #2
 800c9be:	e7ce      	b.n	800c95e <_strtol_l.constprop.0+0x3a>
 800c9c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c9c4:	2f19      	cmp	r7, #25
 800c9c6:	d801      	bhi.n	800c9cc <_strtol_l.constprop.0+0xa8>
 800c9c8:	3c37      	subs	r4, #55	; 0x37
 800c9ca:	e7e5      	b.n	800c998 <_strtol_l.constprop.0+0x74>
 800c9cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c9d0:	2f19      	cmp	r7, #25
 800c9d2:	d804      	bhi.n	800c9de <_strtol_l.constprop.0+0xba>
 800c9d4:	3c57      	subs	r4, #87	; 0x57
 800c9d6:	e7df      	b.n	800c998 <_strtol_l.constprop.0+0x74>
 800c9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9dc:	e7e8      	b.n	800c9b0 <_strtol_l.constprop.0+0x8c>
 800c9de:	1c53      	adds	r3, r2, #1
 800c9e0:	d108      	bne.n	800c9f4 <_strtol_l.constprop.0+0xd0>
 800c9e2:	2322      	movs	r3, #34	; 0x22
 800c9e4:	4660      	mov	r0, ip
 800c9e6:	f8ce 3000 	str.w	r3, [lr]
 800c9ea:	f1b8 0f00 	cmp.w	r8, #0
 800c9ee:	d0a6      	beq.n	800c93e <_strtol_l.constprop.0+0x1a>
 800c9f0:	1e69      	subs	r1, r5, #1
 800c9f2:	e006      	b.n	800ca02 <_strtol_l.constprop.0+0xde>
 800c9f4:	b106      	cbz	r6, 800c9f8 <_strtol_l.constprop.0+0xd4>
 800c9f6:	4240      	negs	r0, r0
 800c9f8:	f1b8 0f00 	cmp.w	r8, #0
 800c9fc:	d09f      	beq.n	800c93e <_strtol_l.constprop.0+0x1a>
 800c9fe:	2a00      	cmp	r2, #0
 800ca00:	d1f6      	bne.n	800c9f0 <_strtol_l.constprop.0+0xcc>
 800ca02:	f8c8 1000 	str.w	r1, [r8]
 800ca06:	e79a      	b.n	800c93e <_strtol_l.constprop.0+0x1a>
 800ca08:	2430      	movs	r4, #48	; 0x30
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1b5      	bne.n	800c97a <_strtol_l.constprop.0+0x56>
 800ca0e:	2308      	movs	r3, #8
 800ca10:	e7b3      	b.n	800c97a <_strtol_l.constprop.0+0x56>
 800ca12:	2c30      	cmp	r4, #48	; 0x30
 800ca14:	d0a9      	beq.n	800c96a <_strtol_l.constprop.0+0x46>
 800ca16:	230a      	movs	r3, #10
 800ca18:	e7af      	b.n	800c97a <_strtol_l.constprop.0+0x56>
 800ca1a:	bf00      	nop
 800ca1c:	0800f209 	.word	0x0800f209

0800ca20 <_strtol_r>:
 800ca20:	f7ff bf80 	b.w	800c924 <_strtol_l.constprop.0>

0800ca24 <__ssputs_r>:
 800ca24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca28:	461f      	mov	r7, r3
 800ca2a:	688e      	ldr	r6, [r1, #8]
 800ca2c:	4682      	mov	sl, r0
 800ca2e:	42be      	cmp	r6, r7
 800ca30:	460c      	mov	r4, r1
 800ca32:	4690      	mov	r8, r2
 800ca34:	680b      	ldr	r3, [r1, #0]
 800ca36:	d82c      	bhi.n	800ca92 <__ssputs_r+0x6e>
 800ca38:	898a      	ldrh	r2, [r1, #12]
 800ca3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca3e:	d026      	beq.n	800ca8e <__ssputs_r+0x6a>
 800ca40:	6965      	ldr	r5, [r4, #20]
 800ca42:	6909      	ldr	r1, [r1, #16]
 800ca44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca48:	eba3 0901 	sub.w	r9, r3, r1
 800ca4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca50:	1c7b      	adds	r3, r7, #1
 800ca52:	444b      	add	r3, r9
 800ca54:	106d      	asrs	r5, r5, #1
 800ca56:	429d      	cmp	r5, r3
 800ca58:	bf38      	it	cc
 800ca5a:	461d      	movcc	r5, r3
 800ca5c:	0553      	lsls	r3, r2, #21
 800ca5e:	d527      	bpl.n	800cab0 <__ssputs_r+0x8c>
 800ca60:	4629      	mov	r1, r5
 800ca62:	f7fe fc19 	bl	800b298 <_malloc_r>
 800ca66:	4606      	mov	r6, r0
 800ca68:	b360      	cbz	r0, 800cac4 <__ssputs_r+0xa0>
 800ca6a:	464a      	mov	r2, r9
 800ca6c:	6921      	ldr	r1, [r4, #16]
 800ca6e:	f7fd fd04 	bl	800a47a <memcpy>
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca7c:	81a3      	strh	r3, [r4, #12]
 800ca7e:	6126      	str	r6, [r4, #16]
 800ca80:	444e      	add	r6, r9
 800ca82:	6026      	str	r6, [r4, #0]
 800ca84:	463e      	mov	r6, r7
 800ca86:	6165      	str	r5, [r4, #20]
 800ca88:	eba5 0509 	sub.w	r5, r5, r9
 800ca8c:	60a5      	str	r5, [r4, #8]
 800ca8e:	42be      	cmp	r6, r7
 800ca90:	d900      	bls.n	800ca94 <__ssputs_r+0x70>
 800ca92:	463e      	mov	r6, r7
 800ca94:	4632      	mov	r2, r6
 800ca96:	4641      	mov	r1, r8
 800ca98:	6820      	ldr	r0, [r4, #0]
 800ca9a:	f000 ff3d 	bl	800d918 <memmove>
 800ca9e:	2000      	movs	r0, #0
 800caa0:	68a3      	ldr	r3, [r4, #8]
 800caa2:	1b9b      	subs	r3, r3, r6
 800caa4:	60a3      	str	r3, [r4, #8]
 800caa6:	6823      	ldr	r3, [r4, #0]
 800caa8:	4433      	add	r3, r6
 800caaa:	6023      	str	r3, [r4, #0]
 800caac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab0:	462a      	mov	r2, r5
 800cab2:	f001 fb1c 	bl	800e0ee <_realloc_r>
 800cab6:	4606      	mov	r6, r0
 800cab8:	2800      	cmp	r0, #0
 800caba:	d1e0      	bne.n	800ca7e <__ssputs_r+0x5a>
 800cabc:	4650      	mov	r0, sl
 800cabe:	6921      	ldr	r1, [r4, #16]
 800cac0:	f7fe fb7a 	bl	800b1b8 <_free_r>
 800cac4:	230c      	movs	r3, #12
 800cac6:	f8ca 3000 	str.w	r3, [sl]
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	f04f 30ff 	mov.w	r0, #4294967295
 800cad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cad4:	81a3      	strh	r3, [r4, #12]
 800cad6:	e7e9      	b.n	800caac <__ssputs_r+0x88>

0800cad8 <_svfiprintf_r>:
 800cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cadc:	4698      	mov	r8, r3
 800cade:	898b      	ldrh	r3, [r1, #12]
 800cae0:	4607      	mov	r7, r0
 800cae2:	061b      	lsls	r3, r3, #24
 800cae4:	460d      	mov	r5, r1
 800cae6:	4614      	mov	r4, r2
 800cae8:	b09d      	sub	sp, #116	; 0x74
 800caea:	d50e      	bpl.n	800cb0a <_svfiprintf_r+0x32>
 800caec:	690b      	ldr	r3, [r1, #16]
 800caee:	b963      	cbnz	r3, 800cb0a <_svfiprintf_r+0x32>
 800caf0:	2140      	movs	r1, #64	; 0x40
 800caf2:	f7fe fbd1 	bl	800b298 <_malloc_r>
 800caf6:	6028      	str	r0, [r5, #0]
 800caf8:	6128      	str	r0, [r5, #16]
 800cafa:	b920      	cbnz	r0, 800cb06 <_svfiprintf_r+0x2e>
 800cafc:	230c      	movs	r3, #12
 800cafe:	603b      	str	r3, [r7, #0]
 800cb00:	f04f 30ff 	mov.w	r0, #4294967295
 800cb04:	e0d0      	b.n	800cca8 <_svfiprintf_r+0x1d0>
 800cb06:	2340      	movs	r3, #64	; 0x40
 800cb08:	616b      	str	r3, [r5, #20]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb0e:	2320      	movs	r3, #32
 800cb10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb14:	2330      	movs	r3, #48	; 0x30
 800cb16:	f04f 0901 	mov.w	r9, #1
 800cb1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb1e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ccc0 <_svfiprintf_r+0x1e8>
 800cb22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb26:	4623      	mov	r3, r4
 800cb28:	469a      	mov	sl, r3
 800cb2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb2e:	b10a      	cbz	r2, 800cb34 <_svfiprintf_r+0x5c>
 800cb30:	2a25      	cmp	r2, #37	; 0x25
 800cb32:	d1f9      	bne.n	800cb28 <_svfiprintf_r+0x50>
 800cb34:	ebba 0b04 	subs.w	fp, sl, r4
 800cb38:	d00b      	beq.n	800cb52 <_svfiprintf_r+0x7a>
 800cb3a:	465b      	mov	r3, fp
 800cb3c:	4622      	mov	r2, r4
 800cb3e:	4629      	mov	r1, r5
 800cb40:	4638      	mov	r0, r7
 800cb42:	f7ff ff6f 	bl	800ca24 <__ssputs_r>
 800cb46:	3001      	adds	r0, #1
 800cb48:	f000 80a9 	beq.w	800cc9e <_svfiprintf_r+0x1c6>
 800cb4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb4e:	445a      	add	r2, fp
 800cb50:	9209      	str	r2, [sp, #36]	; 0x24
 800cb52:	f89a 3000 	ldrb.w	r3, [sl]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f000 80a1 	beq.w	800cc9e <_svfiprintf_r+0x1c6>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb66:	f10a 0a01 	add.w	sl, sl, #1
 800cb6a:	9304      	str	r3, [sp, #16]
 800cb6c:	9307      	str	r3, [sp, #28]
 800cb6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb72:	931a      	str	r3, [sp, #104]	; 0x68
 800cb74:	4654      	mov	r4, sl
 800cb76:	2205      	movs	r2, #5
 800cb78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb7c:	4850      	ldr	r0, [pc, #320]	; (800ccc0 <_svfiprintf_r+0x1e8>)
 800cb7e:	f7fd fc6e 	bl	800a45e <memchr>
 800cb82:	9a04      	ldr	r2, [sp, #16]
 800cb84:	b9d8      	cbnz	r0, 800cbbe <_svfiprintf_r+0xe6>
 800cb86:	06d0      	lsls	r0, r2, #27
 800cb88:	bf44      	itt	mi
 800cb8a:	2320      	movmi	r3, #32
 800cb8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb90:	0711      	lsls	r1, r2, #28
 800cb92:	bf44      	itt	mi
 800cb94:	232b      	movmi	r3, #43	; 0x2b
 800cb96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb9a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb9e:	2b2a      	cmp	r3, #42	; 0x2a
 800cba0:	d015      	beq.n	800cbce <_svfiprintf_r+0xf6>
 800cba2:	4654      	mov	r4, sl
 800cba4:	2000      	movs	r0, #0
 800cba6:	f04f 0c0a 	mov.w	ip, #10
 800cbaa:	9a07      	ldr	r2, [sp, #28]
 800cbac:	4621      	mov	r1, r4
 800cbae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbb2:	3b30      	subs	r3, #48	; 0x30
 800cbb4:	2b09      	cmp	r3, #9
 800cbb6:	d94d      	bls.n	800cc54 <_svfiprintf_r+0x17c>
 800cbb8:	b1b0      	cbz	r0, 800cbe8 <_svfiprintf_r+0x110>
 800cbba:	9207      	str	r2, [sp, #28]
 800cbbc:	e014      	b.n	800cbe8 <_svfiprintf_r+0x110>
 800cbbe:	eba0 0308 	sub.w	r3, r0, r8
 800cbc2:	fa09 f303 	lsl.w	r3, r9, r3
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	46a2      	mov	sl, r4
 800cbca:	9304      	str	r3, [sp, #16]
 800cbcc:	e7d2      	b.n	800cb74 <_svfiprintf_r+0x9c>
 800cbce:	9b03      	ldr	r3, [sp, #12]
 800cbd0:	1d19      	adds	r1, r3, #4
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	9103      	str	r1, [sp, #12]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	bfbb      	ittet	lt
 800cbda:	425b      	neglt	r3, r3
 800cbdc:	f042 0202 	orrlt.w	r2, r2, #2
 800cbe0:	9307      	strge	r3, [sp, #28]
 800cbe2:	9307      	strlt	r3, [sp, #28]
 800cbe4:	bfb8      	it	lt
 800cbe6:	9204      	strlt	r2, [sp, #16]
 800cbe8:	7823      	ldrb	r3, [r4, #0]
 800cbea:	2b2e      	cmp	r3, #46	; 0x2e
 800cbec:	d10c      	bne.n	800cc08 <_svfiprintf_r+0x130>
 800cbee:	7863      	ldrb	r3, [r4, #1]
 800cbf0:	2b2a      	cmp	r3, #42	; 0x2a
 800cbf2:	d134      	bne.n	800cc5e <_svfiprintf_r+0x186>
 800cbf4:	9b03      	ldr	r3, [sp, #12]
 800cbf6:	3402      	adds	r4, #2
 800cbf8:	1d1a      	adds	r2, r3, #4
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	9203      	str	r2, [sp, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	bfb8      	it	lt
 800cc02:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc06:	9305      	str	r3, [sp, #20]
 800cc08:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ccc4 <_svfiprintf_r+0x1ec>
 800cc0c:	2203      	movs	r2, #3
 800cc0e:	4650      	mov	r0, sl
 800cc10:	7821      	ldrb	r1, [r4, #0]
 800cc12:	f7fd fc24 	bl	800a45e <memchr>
 800cc16:	b138      	cbz	r0, 800cc28 <_svfiprintf_r+0x150>
 800cc18:	2240      	movs	r2, #64	; 0x40
 800cc1a:	9b04      	ldr	r3, [sp, #16]
 800cc1c:	eba0 000a 	sub.w	r0, r0, sl
 800cc20:	4082      	lsls	r2, r0
 800cc22:	4313      	orrs	r3, r2
 800cc24:	3401      	adds	r4, #1
 800cc26:	9304      	str	r3, [sp, #16]
 800cc28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc2c:	2206      	movs	r2, #6
 800cc2e:	4826      	ldr	r0, [pc, #152]	; (800ccc8 <_svfiprintf_r+0x1f0>)
 800cc30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc34:	f7fd fc13 	bl	800a45e <memchr>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d038      	beq.n	800ccae <_svfiprintf_r+0x1d6>
 800cc3c:	4b23      	ldr	r3, [pc, #140]	; (800cccc <_svfiprintf_r+0x1f4>)
 800cc3e:	bb1b      	cbnz	r3, 800cc88 <_svfiprintf_r+0x1b0>
 800cc40:	9b03      	ldr	r3, [sp, #12]
 800cc42:	3307      	adds	r3, #7
 800cc44:	f023 0307 	bic.w	r3, r3, #7
 800cc48:	3308      	adds	r3, #8
 800cc4a:	9303      	str	r3, [sp, #12]
 800cc4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc4e:	4433      	add	r3, r6
 800cc50:	9309      	str	r3, [sp, #36]	; 0x24
 800cc52:	e768      	b.n	800cb26 <_svfiprintf_r+0x4e>
 800cc54:	460c      	mov	r4, r1
 800cc56:	2001      	movs	r0, #1
 800cc58:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc5c:	e7a6      	b.n	800cbac <_svfiprintf_r+0xd4>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f04f 0c0a 	mov.w	ip, #10
 800cc64:	4619      	mov	r1, r3
 800cc66:	3401      	adds	r4, #1
 800cc68:	9305      	str	r3, [sp, #20]
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc70:	3a30      	subs	r2, #48	; 0x30
 800cc72:	2a09      	cmp	r2, #9
 800cc74:	d903      	bls.n	800cc7e <_svfiprintf_r+0x1a6>
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d0c6      	beq.n	800cc08 <_svfiprintf_r+0x130>
 800cc7a:	9105      	str	r1, [sp, #20]
 800cc7c:	e7c4      	b.n	800cc08 <_svfiprintf_r+0x130>
 800cc7e:	4604      	mov	r4, r0
 800cc80:	2301      	movs	r3, #1
 800cc82:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc86:	e7f0      	b.n	800cc6a <_svfiprintf_r+0x192>
 800cc88:	ab03      	add	r3, sp, #12
 800cc8a:	9300      	str	r3, [sp, #0]
 800cc8c:	462a      	mov	r2, r5
 800cc8e:	4638      	mov	r0, r7
 800cc90:	4b0f      	ldr	r3, [pc, #60]	; (800ccd0 <_svfiprintf_r+0x1f8>)
 800cc92:	a904      	add	r1, sp, #16
 800cc94:	f7fc faec 	bl	8009270 <_printf_float>
 800cc98:	1c42      	adds	r2, r0, #1
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	d1d6      	bne.n	800cc4c <_svfiprintf_r+0x174>
 800cc9e:	89ab      	ldrh	r3, [r5, #12]
 800cca0:	065b      	lsls	r3, r3, #25
 800cca2:	f53f af2d 	bmi.w	800cb00 <_svfiprintf_r+0x28>
 800cca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cca8:	b01d      	add	sp, #116	; 0x74
 800ccaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccae:	ab03      	add	r3, sp, #12
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	462a      	mov	r2, r5
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	4b06      	ldr	r3, [pc, #24]	; (800ccd0 <_svfiprintf_r+0x1f8>)
 800ccb8:	a904      	add	r1, sp, #16
 800ccba:	f7fc fd79 	bl	80097b0 <_printf_i>
 800ccbe:	e7eb      	b.n	800cc98 <_svfiprintf_r+0x1c0>
 800ccc0:	0800f309 	.word	0x0800f309
 800ccc4:	0800f30f 	.word	0x0800f30f
 800ccc8:	0800f313 	.word	0x0800f313
 800cccc:	08009271 	.word	0x08009271
 800ccd0:	0800ca25 	.word	0x0800ca25

0800ccd4 <_sungetc_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	1c4b      	adds	r3, r1, #1
 800ccd8:	4614      	mov	r4, r2
 800ccda:	d103      	bne.n	800cce4 <_sungetc_r+0x10>
 800ccdc:	f04f 35ff 	mov.w	r5, #4294967295
 800cce0:	4628      	mov	r0, r5
 800cce2:	bd38      	pop	{r3, r4, r5, pc}
 800cce4:	8993      	ldrh	r3, [r2, #12]
 800cce6:	b2cd      	uxtb	r5, r1
 800cce8:	f023 0320 	bic.w	r3, r3, #32
 800ccec:	8193      	strh	r3, [r2, #12]
 800ccee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccf0:	6852      	ldr	r2, [r2, #4]
 800ccf2:	b18b      	cbz	r3, 800cd18 <_sungetc_r+0x44>
 800ccf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	dd08      	ble.n	800cd0c <_sungetc_r+0x38>
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	1e5a      	subs	r2, r3, #1
 800ccfe:	6022      	str	r2, [r4, #0]
 800cd00:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cd04:	6863      	ldr	r3, [r4, #4]
 800cd06:	3301      	adds	r3, #1
 800cd08:	6063      	str	r3, [r4, #4]
 800cd0a:	e7e9      	b.n	800cce0 <_sungetc_r+0xc>
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	f000 fdcb 	bl	800d8a8 <__submore>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d0f1      	beq.n	800ccfa <_sungetc_r+0x26>
 800cd16:	e7e1      	b.n	800ccdc <_sungetc_r+0x8>
 800cd18:	6921      	ldr	r1, [r4, #16]
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	b151      	cbz	r1, 800cd34 <_sungetc_r+0x60>
 800cd1e:	4299      	cmp	r1, r3
 800cd20:	d208      	bcs.n	800cd34 <_sungetc_r+0x60>
 800cd22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cd26:	42a9      	cmp	r1, r5
 800cd28:	d104      	bne.n	800cd34 <_sungetc_r+0x60>
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	3201      	adds	r2, #1
 800cd2e:	6023      	str	r3, [r4, #0]
 800cd30:	6062      	str	r2, [r4, #4]
 800cd32:	e7d5      	b.n	800cce0 <_sungetc_r+0xc>
 800cd34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cd38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd3c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd3e:	2303      	movs	r3, #3
 800cd40:	63a3      	str	r3, [r4, #56]	; 0x38
 800cd42:	4623      	mov	r3, r4
 800cd44:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cd48:	6023      	str	r3, [r4, #0]
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e7dc      	b.n	800cd08 <_sungetc_r+0x34>

0800cd4e <__ssrefill_r>:
 800cd4e:	b510      	push	{r4, lr}
 800cd50:	460c      	mov	r4, r1
 800cd52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cd54:	b169      	cbz	r1, 800cd72 <__ssrefill_r+0x24>
 800cd56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd5a:	4299      	cmp	r1, r3
 800cd5c:	d001      	beq.n	800cd62 <__ssrefill_r+0x14>
 800cd5e:	f7fe fa2b 	bl	800b1b8 <_free_r>
 800cd62:	2000      	movs	r0, #0
 800cd64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd66:	6360      	str	r0, [r4, #52]	; 0x34
 800cd68:	6063      	str	r3, [r4, #4]
 800cd6a:	b113      	cbz	r3, 800cd72 <__ssrefill_r+0x24>
 800cd6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cd6e:	6023      	str	r3, [r4, #0]
 800cd70:	bd10      	pop	{r4, pc}
 800cd72:	6923      	ldr	r3, [r4, #16]
 800cd74:	f04f 30ff 	mov.w	r0, #4294967295
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	6063      	str	r3, [r4, #4]
 800cd7e:	89a3      	ldrh	r3, [r4, #12]
 800cd80:	f043 0320 	orr.w	r3, r3, #32
 800cd84:	81a3      	strh	r3, [r4, #12]
 800cd86:	e7f3      	b.n	800cd70 <__ssrefill_r+0x22>

0800cd88 <__ssvfiscanf_r>:
 800cd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	2100      	movs	r1, #0
 800cd90:	4606      	mov	r6, r0
 800cd92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cd96:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cd9a:	49a6      	ldr	r1, [pc, #664]	; (800d034 <__ssvfiscanf_r+0x2ac>)
 800cd9c:	f10d 0804 	add.w	r8, sp, #4
 800cda0:	91a0      	str	r1, [sp, #640]	; 0x280
 800cda2:	49a5      	ldr	r1, [pc, #660]	; (800d038 <__ssvfiscanf_r+0x2b0>)
 800cda4:	4fa5      	ldr	r7, [pc, #660]	; (800d03c <__ssvfiscanf_r+0x2b4>)
 800cda6:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d040 <__ssvfiscanf_r+0x2b8>
 800cdaa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cdae:	91a1      	str	r1, [sp, #644]	; 0x284
 800cdb0:	9300      	str	r3, [sp, #0]
 800cdb2:	7813      	ldrb	r3, [r2, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f000 815a 	beq.w	800d06e <__ssvfiscanf_r+0x2e6>
 800cdba:	5cf9      	ldrb	r1, [r7, r3]
 800cdbc:	1c55      	adds	r5, r2, #1
 800cdbe:	f011 0108 	ands.w	r1, r1, #8
 800cdc2:	d019      	beq.n	800cdf8 <__ssvfiscanf_r+0x70>
 800cdc4:	6863      	ldr	r3, [r4, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	dd0f      	ble.n	800cdea <__ssvfiscanf_r+0x62>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	781a      	ldrb	r2, [r3, #0]
 800cdce:	5cba      	ldrb	r2, [r7, r2]
 800cdd0:	0712      	lsls	r2, r2, #28
 800cdd2:	d401      	bmi.n	800cdd8 <__ssvfiscanf_r+0x50>
 800cdd4:	462a      	mov	r2, r5
 800cdd6:	e7ec      	b.n	800cdb2 <__ssvfiscanf_r+0x2a>
 800cdd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cdda:	3301      	adds	r3, #1
 800cddc:	3201      	adds	r2, #1
 800cdde:	9245      	str	r2, [sp, #276]	; 0x114
 800cde0:	6862      	ldr	r2, [r4, #4]
 800cde2:	6023      	str	r3, [r4, #0]
 800cde4:	3a01      	subs	r2, #1
 800cde6:	6062      	str	r2, [r4, #4]
 800cde8:	e7ec      	b.n	800cdc4 <__ssvfiscanf_r+0x3c>
 800cdea:	4621      	mov	r1, r4
 800cdec:	4630      	mov	r0, r6
 800cdee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cdf0:	4798      	blx	r3
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d0e9      	beq.n	800cdca <__ssvfiscanf_r+0x42>
 800cdf6:	e7ed      	b.n	800cdd4 <__ssvfiscanf_r+0x4c>
 800cdf8:	2b25      	cmp	r3, #37	; 0x25
 800cdfa:	d012      	beq.n	800ce22 <__ssvfiscanf_r+0x9a>
 800cdfc:	469a      	mov	sl, r3
 800cdfe:	6863      	ldr	r3, [r4, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f340 8092 	ble.w	800cf2a <__ssvfiscanf_r+0x1a2>
 800ce06:	6822      	ldr	r2, [r4, #0]
 800ce08:	7813      	ldrb	r3, [r2, #0]
 800ce0a:	4553      	cmp	r3, sl
 800ce0c:	f040 812f 	bne.w	800d06e <__ssvfiscanf_r+0x2e6>
 800ce10:	6863      	ldr	r3, [r4, #4]
 800ce12:	3201      	adds	r2, #1
 800ce14:	3b01      	subs	r3, #1
 800ce16:	6063      	str	r3, [r4, #4]
 800ce18:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ce1a:	6022      	str	r2, [r4, #0]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	9345      	str	r3, [sp, #276]	; 0x114
 800ce20:	e7d8      	b.n	800cdd4 <__ssvfiscanf_r+0x4c>
 800ce22:	9141      	str	r1, [sp, #260]	; 0x104
 800ce24:	9143      	str	r1, [sp, #268]	; 0x10c
 800ce26:	7853      	ldrb	r3, [r2, #1]
 800ce28:	2b2a      	cmp	r3, #42	; 0x2a
 800ce2a:	bf04      	itt	eq
 800ce2c:	2310      	moveq	r3, #16
 800ce2e:	1c95      	addeq	r5, r2, #2
 800ce30:	f04f 020a 	mov.w	r2, #10
 800ce34:	bf08      	it	eq
 800ce36:	9341      	streq	r3, [sp, #260]	; 0x104
 800ce38:	46aa      	mov	sl, r5
 800ce3a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ce3e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ce42:	2b09      	cmp	r3, #9
 800ce44:	d91c      	bls.n	800ce80 <__ssvfiscanf_r+0xf8>
 800ce46:	2203      	movs	r2, #3
 800ce48:	487d      	ldr	r0, [pc, #500]	; (800d040 <__ssvfiscanf_r+0x2b8>)
 800ce4a:	f7fd fb08 	bl	800a45e <memchr>
 800ce4e:	b138      	cbz	r0, 800ce60 <__ssvfiscanf_r+0xd8>
 800ce50:	2301      	movs	r3, #1
 800ce52:	4655      	mov	r5, sl
 800ce54:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ce56:	eba0 0009 	sub.w	r0, r0, r9
 800ce5a:	4083      	lsls	r3, r0
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	9341      	str	r3, [sp, #260]	; 0x104
 800ce60:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ce64:	2b78      	cmp	r3, #120	; 0x78
 800ce66:	d806      	bhi.n	800ce76 <__ssvfiscanf_r+0xee>
 800ce68:	2b57      	cmp	r3, #87	; 0x57
 800ce6a:	d810      	bhi.n	800ce8e <__ssvfiscanf_r+0x106>
 800ce6c:	2b25      	cmp	r3, #37	; 0x25
 800ce6e:	d0c5      	beq.n	800cdfc <__ssvfiscanf_r+0x74>
 800ce70:	d856      	bhi.n	800cf20 <__ssvfiscanf_r+0x198>
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d064      	beq.n	800cf40 <__ssvfiscanf_r+0x1b8>
 800ce76:	2303      	movs	r3, #3
 800ce78:	9347      	str	r3, [sp, #284]	; 0x11c
 800ce7a:	230a      	movs	r3, #10
 800ce7c:	9342      	str	r3, [sp, #264]	; 0x108
 800ce7e:	e075      	b.n	800cf6c <__ssvfiscanf_r+0x1e4>
 800ce80:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ce82:	4655      	mov	r5, sl
 800ce84:	fb02 1103 	mla	r1, r2, r3, r1
 800ce88:	3930      	subs	r1, #48	; 0x30
 800ce8a:	9143      	str	r1, [sp, #268]	; 0x10c
 800ce8c:	e7d4      	b.n	800ce38 <__ssvfiscanf_r+0xb0>
 800ce8e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ce92:	2a20      	cmp	r2, #32
 800ce94:	d8ef      	bhi.n	800ce76 <__ssvfiscanf_r+0xee>
 800ce96:	a101      	add	r1, pc, #4	; (adr r1, 800ce9c <__ssvfiscanf_r+0x114>)
 800ce98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ce9c:	0800cf4f 	.word	0x0800cf4f
 800cea0:	0800ce77 	.word	0x0800ce77
 800cea4:	0800ce77 	.word	0x0800ce77
 800cea8:	0800cfad 	.word	0x0800cfad
 800ceac:	0800ce77 	.word	0x0800ce77
 800ceb0:	0800ce77 	.word	0x0800ce77
 800ceb4:	0800ce77 	.word	0x0800ce77
 800ceb8:	0800ce77 	.word	0x0800ce77
 800cebc:	0800ce77 	.word	0x0800ce77
 800cec0:	0800ce77 	.word	0x0800ce77
 800cec4:	0800ce77 	.word	0x0800ce77
 800cec8:	0800cfc3 	.word	0x0800cfc3
 800cecc:	0800cfa9 	.word	0x0800cfa9
 800ced0:	0800cf27 	.word	0x0800cf27
 800ced4:	0800cf27 	.word	0x0800cf27
 800ced8:	0800cf27 	.word	0x0800cf27
 800cedc:	0800ce77 	.word	0x0800ce77
 800cee0:	0800cf65 	.word	0x0800cf65
 800cee4:	0800ce77 	.word	0x0800ce77
 800cee8:	0800ce77 	.word	0x0800ce77
 800ceec:	0800ce77 	.word	0x0800ce77
 800cef0:	0800ce77 	.word	0x0800ce77
 800cef4:	0800cfd3 	.word	0x0800cfd3
 800cef8:	0800cfa1 	.word	0x0800cfa1
 800cefc:	0800cf47 	.word	0x0800cf47
 800cf00:	0800ce77 	.word	0x0800ce77
 800cf04:	0800ce77 	.word	0x0800ce77
 800cf08:	0800cfcf 	.word	0x0800cfcf
 800cf0c:	0800ce77 	.word	0x0800ce77
 800cf10:	0800cfa9 	.word	0x0800cfa9
 800cf14:	0800ce77 	.word	0x0800ce77
 800cf18:	0800ce77 	.word	0x0800ce77
 800cf1c:	0800cf4f 	.word	0x0800cf4f
 800cf20:	3b45      	subs	r3, #69	; 0x45
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d8a7      	bhi.n	800ce76 <__ssvfiscanf_r+0xee>
 800cf26:	2305      	movs	r3, #5
 800cf28:	e01f      	b.n	800cf6a <__ssvfiscanf_r+0x1e2>
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cf30:	4798      	blx	r3
 800cf32:	2800      	cmp	r0, #0
 800cf34:	f43f af67 	beq.w	800ce06 <__ssvfiscanf_r+0x7e>
 800cf38:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	f040 808d 	bne.w	800d05a <__ssvfiscanf_r+0x2d2>
 800cf40:	f04f 30ff 	mov.w	r0, #4294967295
 800cf44:	e08f      	b.n	800d066 <__ssvfiscanf_r+0x2de>
 800cf46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cf48:	f042 0220 	orr.w	r2, r2, #32
 800cf4c:	9241      	str	r2, [sp, #260]	; 0x104
 800cf4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cf50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf54:	9241      	str	r2, [sp, #260]	; 0x104
 800cf56:	2210      	movs	r2, #16
 800cf58:	2b6f      	cmp	r3, #111	; 0x6f
 800cf5a:	bf34      	ite	cc
 800cf5c:	2303      	movcc	r3, #3
 800cf5e:	2304      	movcs	r3, #4
 800cf60:	9242      	str	r2, [sp, #264]	; 0x108
 800cf62:	e002      	b.n	800cf6a <__ssvfiscanf_r+0x1e2>
 800cf64:	2300      	movs	r3, #0
 800cf66:	9342      	str	r3, [sp, #264]	; 0x108
 800cf68:	2303      	movs	r3, #3
 800cf6a:	9347      	str	r3, [sp, #284]	; 0x11c
 800cf6c:	6863      	ldr	r3, [r4, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	dd3d      	ble.n	800cfee <__ssvfiscanf_r+0x266>
 800cf72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cf74:	0659      	lsls	r1, r3, #25
 800cf76:	d404      	bmi.n	800cf82 <__ssvfiscanf_r+0x1fa>
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	781a      	ldrb	r2, [r3, #0]
 800cf7c:	5cba      	ldrb	r2, [r7, r2]
 800cf7e:	0712      	lsls	r2, r2, #28
 800cf80:	d43c      	bmi.n	800cffc <__ssvfiscanf_r+0x274>
 800cf82:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cf84:	2b02      	cmp	r3, #2
 800cf86:	dc4b      	bgt.n	800d020 <__ssvfiscanf_r+0x298>
 800cf88:	466b      	mov	r3, sp
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	a941      	add	r1, sp, #260	; 0x104
 800cf90:	f000 f9b4 	bl	800d2fc <_scanf_chars>
 800cf94:	2801      	cmp	r0, #1
 800cf96:	d06a      	beq.n	800d06e <__ssvfiscanf_r+0x2e6>
 800cf98:	2802      	cmp	r0, #2
 800cf9a:	f47f af1b 	bne.w	800cdd4 <__ssvfiscanf_r+0x4c>
 800cf9e:	e7cb      	b.n	800cf38 <__ssvfiscanf_r+0x1b0>
 800cfa0:	2308      	movs	r3, #8
 800cfa2:	9342      	str	r3, [sp, #264]	; 0x108
 800cfa4:	2304      	movs	r3, #4
 800cfa6:	e7e0      	b.n	800cf6a <__ssvfiscanf_r+0x1e2>
 800cfa8:	220a      	movs	r2, #10
 800cfaa:	e7d5      	b.n	800cf58 <__ssvfiscanf_r+0x1d0>
 800cfac:	4629      	mov	r1, r5
 800cfae:	4640      	mov	r0, r8
 800cfb0:	f000 fc41 	bl	800d836 <__sccl>
 800cfb4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfbc:	9341      	str	r3, [sp, #260]	; 0x104
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e7d3      	b.n	800cf6a <__ssvfiscanf_r+0x1e2>
 800cfc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cfc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfc8:	9341      	str	r3, [sp, #260]	; 0x104
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e7cd      	b.n	800cf6a <__ssvfiscanf_r+0x1e2>
 800cfce:	2302      	movs	r3, #2
 800cfd0:	e7cb      	b.n	800cf6a <__ssvfiscanf_r+0x1e2>
 800cfd2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cfd4:	06c3      	lsls	r3, r0, #27
 800cfd6:	f53f aefd 	bmi.w	800cdd4 <__ssvfiscanf_r+0x4c>
 800cfda:	9b00      	ldr	r3, [sp, #0]
 800cfdc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cfde:	1d19      	adds	r1, r3, #4
 800cfe0:	9100      	str	r1, [sp, #0]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	07c0      	lsls	r0, r0, #31
 800cfe6:	bf4c      	ite	mi
 800cfe8:	801a      	strhmi	r2, [r3, #0]
 800cfea:	601a      	strpl	r2, [r3, #0]
 800cfec:	e6f2      	b.n	800cdd4 <__ssvfiscanf_r+0x4c>
 800cfee:	4621      	mov	r1, r4
 800cff0:	4630      	mov	r0, r6
 800cff2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cff4:	4798      	blx	r3
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d0bb      	beq.n	800cf72 <__ssvfiscanf_r+0x1ea>
 800cffa:	e79d      	b.n	800cf38 <__ssvfiscanf_r+0x1b0>
 800cffc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cffe:	3201      	adds	r2, #1
 800d000:	9245      	str	r2, [sp, #276]	; 0x114
 800d002:	6862      	ldr	r2, [r4, #4]
 800d004:	3a01      	subs	r2, #1
 800d006:	2a00      	cmp	r2, #0
 800d008:	6062      	str	r2, [r4, #4]
 800d00a:	dd02      	ble.n	800d012 <__ssvfiscanf_r+0x28a>
 800d00c:	3301      	adds	r3, #1
 800d00e:	6023      	str	r3, [r4, #0]
 800d010:	e7b2      	b.n	800cf78 <__ssvfiscanf_r+0x1f0>
 800d012:	4621      	mov	r1, r4
 800d014:	4630      	mov	r0, r6
 800d016:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d018:	4798      	blx	r3
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d0ac      	beq.n	800cf78 <__ssvfiscanf_r+0x1f0>
 800d01e:	e78b      	b.n	800cf38 <__ssvfiscanf_r+0x1b0>
 800d020:	2b04      	cmp	r3, #4
 800d022:	dc0f      	bgt.n	800d044 <__ssvfiscanf_r+0x2bc>
 800d024:	466b      	mov	r3, sp
 800d026:	4622      	mov	r2, r4
 800d028:	4630      	mov	r0, r6
 800d02a:	a941      	add	r1, sp, #260	; 0x104
 800d02c:	f000 f9c0 	bl	800d3b0 <_scanf_i>
 800d030:	e7b0      	b.n	800cf94 <__ssvfiscanf_r+0x20c>
 800d032:	bf00      	nop
 800d034:	0800ccd5 	.word	0x0800ccd5
 800d038:	0800cd4f 	.word	0x0800cd4f
 800d03c:	0800f209 	.word	0x0800f209
 800d040:	0800f30f 	.word	0x0800f30f
 800d044:	4b0b      	ldr	r3, [pc, #44]	; (800d074 <__ssvfiscanf_r+0x2ec>)
 800d046:	2b00      	cmp	r3, #0
 800d048:	f43f aec4 	beq.w	800cdd4 <__ssvfiscanf_r+0x4c>
 800d04c:	466b      	mov	r3, sp
 800d04e:	4622      	mov	r2, r4
 800d050:	4630      	mov	r0, r6
 800d052:	a941      	add	r1, sp, #260	; 0x104
 800d054:	f7fc fcce 	bl	80099f4 <_scanf_float>
 800d058:	e79c      	b.n	800cf94 <__ssvfiscanf_r+0x20c>
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d060:	bf18      	it	ne
 800d062:	f04f 30ff 	movne.w	r0, #4294967295
 800d066:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d070:	e7f9      	b.n	800d066 <__ssvfiscanf_r+0x2de>
 800d072:	bf00      	nop
 800d074:	080099f5 	.word	0x080099f5

0800d078 <__sfputc_r>:
 800d078:	6893      	ldr	r3, [r2, #8]
 800d07a:	b410      	push	{r4}
 800d07c:	3b01      	subs	r3, #1
 800d07e:	2b00      	cmp	r3, #0
 800d080:	6093      	str	r3, [r2, #8]
 800d082:	da07      	bge.n	800d094 <__sfputc_r+0x1c>
 800d084:	6994      	ldr	r4, [r2, #24]
 800d086:	42a3      	cmp	r3, r4
 800d088:	db01      	blt.n	800d08e <__sfputc_r+0x16>
 800d08a:	290a      	cmp	r1, #10
 800d08c:	d102      	bne.n	800d094 <__sfputc_r+0x1c>
 800d08e:	bc10      	pop	{r4}
 800d090:	f7fd b8be 	b.w	800a210 <__swbuf_r>
 800d094:	6813      	ldr	r3, [r2, #0]
 800d096:	1c58      	adds	r0, r3, #1
 800d098:	6010      	str	r0, [r2, #0]
 800d09a:	7019      	strb	r1, [r3, #0]
 800d09c:	4608      	mov	r0, r1
 800d09e:	bc10      	pop	{r4}
 800d0a0:	4770      	bx	lr

0800d0a2 <__sfputs_r>:
 800d0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	460f      	mov	r7, r1
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	18d5      	adds	r5, r2, r3
 800d0ac:	42ac      	cmp	r4, r5
 800d0ae:	d101      	bne.n	800d0b4 <__sfputs_r+0x12>
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	e007      	b.n	800d0c4 <__sfputs_r+0x22>
 800d0b4:	463a      	mov	r2, r7
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0bc:	f7ff ffdc 	bl	800d078 <__sfputc_r>
 800d0c0:	1c43      	adds	r3, r0, #1
 800d0c2:	d1f3      	bne.n	800d0ac <__sfputs_r+0xa>
 800d0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0c8 <_vfiprintf_r>:
 800d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	460d      	mov	r5, r1
 800d0ce:	4614      	mov	r4, r2
 800d0d0:	4698      	mov	r8, r3
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	b09d      	sub	sp, #116	; 0x74
 800d0d6:	b118      	cbz	r0, 800d0e0 <_vfiprintf_r+0x18>
 800d0d8:	6a03      	ldr	r3, [r0, #32]
 800d0da:	b90b      	cbnz	r3, 800d0e0 <_vfiprintf_r+0x18>
 800d0dc:	f7fc ff24 	bl	8009f28 <__sinit>
 800d0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0e2:	07d9      	lsls	r1, r3, #31
 800d0e4:	d405      	bmi.n	800d0f2 <_vfiprintf_r+0x2a>
 800d0e6:	89ab      	ldrh	r3, [r5, #12]
 800d0e8:	059a      	lsls	r2, r3, #22
 800d0ea:	d402      	bmi.n	800d0f2 <_vfiprintf_r+0x2a>
 800d0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0ee:	f7fd f9b4 	bl	800a45a <__retarget_lock_acquire_recursive>
 800d0f2:	89ab      	ldrh	r3, [r5, #12]
 800d0f4:	071b      	lsls	r3, r3, #28
 800d0f6:	d501      	bpl.n	800d0fc <_vfiprintf_r+0x34>
 800d0f8:	692b      	ldr	r3, [r5, #16]
 800d0fa:	b99b      	cbnz	r3, 800d124 <_vfiprintf_r+0x5c>
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	4630      	mov	r0, r6
 800d100:	f7fd f8c4 	bl	800a28c <__swsetup_r>
 800d104:	b170      	cbz	r0, 800d124 <_vfiprintf_r+0x5c>
 800d106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d108:	07dc      	lsls	r4, r3, #31
 800d10a:	d504      	bpl.n	800d116 <_vfiprintf_r+0x4e>
 800d10c:	f04f 30ff 	mov.w	r0, #4294967295
 800d110:	b01d      	add	sp, #116	; 0x74
 800d112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d116:	89ab      	ldrh	r3, [r5, #12]
 800d118:	0598      	lsls	r0, r3, #22
 800d11a:	d4f7      	bmi.n	800d10c <_vfiprintf_r+0x44>
 800d11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d11e:	f7fd f99d 	bl	800a45c <__retarget_lock_release_recursive>
 800d122:	e7f3      	b.n	800d10c <_vfiprintf_r+0x44>
 800d124:	2300      	movs	r3, #0
 800d126:	9309      	str	r3, [sp, #36]	; 0x24
 800d128:	2320      	movs	r3, #32
 800d12a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d12e:	2330      	movs	r3, #48	; 0x30
 800d130:	f04f 0901 	mov.w	r9, #1
 800d134:	f8cd 800c 	str.w	r8, [sp, #12]
 800d138:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d2e8 <_vfiprintf_r+0x220>
 800d13c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d140:	4623      	mov	r3, r4
 800d142:	469a      	mov	sl, r3
 800d144:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d148:	b10a      	cbz	r2, 800d14e <_vfiprintf_r+0x86>
 800d14a:	2a25      	cmp	r2, #37	; 0x25
 800d14c:	d1f9      	bne.n	800d142 <_vfiprintf_r+0x7a>
 800d14e:	ebba 0b04 	subs.w	fp, sl, r4
 800d152:	d00b      	beq.n	800d16c <_vfiprintf_r+0xa4>
 800d154:	465b      	mov	r3, fp
 800d156:	4622      	mov	r2, r4
 800d158:	4629      	mov	r1, r5
 800d15a:	4630      	mov	r0, r6
 800d15c:	f7ff ffa1 	bl	800d0a2 <__sfputs_r>
 800d160:	3001      	adds	r0, #1
 800d162:	f000 80a9 	beq.w	800d2b8 <_vfiprintf_r+0x1f0>
 800d166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d168:	445a      	add	r2, fp
 800d16a:	9209      	str	r2, [sp, #36]	; 0x24
 800d16c:	f89a 3000 	ldrb.w	r3, [sl]
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 80a1 	beq.w	800d2b8 <_vfiprintf_r+0x1f0>
 800d176:	2300      	movs	r3, #0
 800d178:	f04f 32ff 	mov.w	r2, #4294967295
 800d17c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d180:	f10a 0a01 	add.w	sl, sl, #1
 800d184:	9304      	str	r3, [sp, #16]
 800d186:	9307      	str	r3, [sp, #28]
 800d188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d18c:	931a      	str	r3, [sp, #104]	; 0x68
 800d18e:	4654      	mov	r4, sl
 800d190:	2205      	movs	r2, #5
 800d192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d196:	4854      	ldr	r0, [pc, #336]	; (800d2e8 <_vfiprintf_r+0x220>)
 800d198:	f7fd f961 	bl	800a45e <memchr>
 800d19c:	9a04      	ldr	r2, [sp, #16]
 800d19e:	b9d8      	cbnz	r0, 800d1d8 <_vfiprintf_r+0x110>
 800d1a0:	06d1      	lsls	r1, r2, #27
 800d1a2:	bf44      	itt	mi
 800d1a4:	2320      	movmi	r3, #32
 800d1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1aa:	0713      	lsls	r3, r2, #28
 800d1ac:	bf44      	itt	mi
 800d1ae:	232b      	movmi	r3, #43	; 0x2b
 800d1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ba:	d015      	beq.n	800d1e8 <_vfiprintf_r+0x120>
 800d1bc:	4654      	mov	r4, sl
 800d1be:	2000      	movs	r0, #0
 800d1c0:	f04f 0c0a 	mov.w	ip, #10
 800d1c4:	9a07      	ldr	r2, [sp, #28]
 800d1c6:	4621      	mov	r1, r4
 800d1c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1cc:	3b30      	subs	r3, #48	; 0x30
 800d1ce:	2b09      	cmp	r3, #9
 800d1d0:	d94d      	bls.n	800d26e <_vfiprintf_r+0x1a6>
 800d1d2:	b1b0      	cbz	r0, 800d202 <_vfiprintf_r+0x13a>
 800d1d4:	9207      	str	r2, [sp, #28]
 800d1d6:	e014      	b.n	800d202 <_vfiprintf_r+0x13a>
 800d1d8:	eba0 0308 	sub.w	r3, r0, r8
 800d1dc:	fa09 f303 	lsl.w	r3, r9, r3
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	46a2      	mov	sl, r4
 800d1e4:	9304      	str	r3, [sp, #16]
 800d1e6:	e7d2      	b.n	800d18e <_vfiprintf_r+0xc6>
 800d1e8:	9b03      	ldr	r3, [sp, #12]
 800d1ea:	1d19      	adds	r1, r3, #4
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	9103      	str	r1, [sp, #12]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	bfbb      	ittet	lt
 800d1f4:	425b      	neglt	r3, r3
 800d1f6:	f042 0202 	orrlt.w	r2, r2, #2
 800d1fa:	9307      	strge	r3, [sp, #28]
 800d1fc:	9307      	strlt	r3, [sp, #28]
 800d1fe:	bfb8      	it	lt
 800d200:	9204      	strlt	r2, [sp, #16]
 800d202:	7823      	ldrb	r3, [r4, #0]
 800d204:	2b2e      	cmp	r3, #46	; 0x2e
 800d206:	d10c      	bne.n	800d222 <_vfiprintf_r+0x15a>
 800d208:	7863      	ldrb	r3, [r4, #1]
 800d20a:	2b2a      	cmp	r3, #42	; 0x2a
 800d20c:	d134      	bne.n	800d278 <_vfiprintf_r+0x1b0>
 800d20e:	9b03      	ldr	r3, [sp, #12]
 800d210:	3402      	adds	r4, #2
 800d212:	1d1a      	adds	r2, r3, #4
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	9203      	str	r2, [sp, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bfb8      	it	lt
 800d21c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d220:	9305      	str	r3, [sp, #20]
 800d222:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d2ec <_vfiprintf_r+0x224>
 800d226:	2203      	movs	r2, #3
 800d228:	4650      	mov	r0, sl
 800d22a:	7821      	ldrb	r1, [r4, #0]
 800d22c:	f7fd f917 	bl	800a45e <memchr>
 800d230:	b138      	cbz	r0, 800d242 <_vfiprintf_r+0x17a>
 800d232:	2240      	movs	r2, #64	; 0x40
 800d234:	9b04      	ldr	r3, [sp, #16]
 800d236:	eba0 000a 	sub.w	r0, r0, sl
 800d23a:	4082      	lsls	r2, r0
 800d23c:	4313      	orrs	r3, r2
 800d23e:	3401      	adds	r4, #1
 800d240:	9304      	str	r3, [sp, #16]
 800d242:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d246:	2206      	movs	r2, #6
 800d248:	4829      	ldr	r0, [pc, #164]	; (800d2f0 <_vfiprintf_r+0x228>)
 800d24a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d24e:	f7fd f906 	bl	800a45e <memchr>
 800d252:	2800      	cmp	r0, #0
 800d254:	d03f      	beq.n	800d2d6 <_vfiprintf_r+0x20e>
 800d256:	4b27      	ldr	r3, [pc, #156]	; (800d2f4 <_vfiprintf_r+0x22c>)
 800d258:	bb1b      	cbnz	r3, 800d2a2 <_vfiprintf_r+0x1da>
 800d25a:	9b03      	ldr	r3, [sp, #12]
 800d25c:	3307      	adds	r3, #7
 800d25e:	f023 0307 	bic.w	r3, r3, #7
 800d262:	3308      	adds	r3, #8
 800d264:	9303      	str	r3, [sp, #12]
 800d266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d268:	443b      	add	r3, r7
 800d26a:	9309      	str	r3, [sp, #36]	; 0x24
 800d26c:	e768      	b.n	800d140 <_vfiprintf_r+0x78>
 800d26e:	460c      	mov	r4, r1
 800d270:	2001      	movs	r0, #1
 800d272:	fb0c 3202 	mla	r2, ip, r2, r3
 800d276:	e7a6      	b.n	800d1c6 <_vfiprintf_r+0xfe>
 800d278:	2300      	movs	r3, #0
 800d27a:	f04f 0c0a 	mov.w	ip, #10
 800d27e:	4619      	mov	r1, r3
 800d280:	3401      	adds	r4, #1
 800d282:	9305      	str	r3, [sp, #20]
 800d284:	4620      	mov	r0, r4
 800d286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d28a:	3a30      	subs	r2, #48	; 0x30
 800d28c:	2a09      	cmp	r2, #9
 800d28e:	d903      	bls.n	800d298 <_vfiprintf_r+0x1d0>
 800d290:	2b00      	cmp	r3, #0
 800d292:	d0c6      	beq.n	800d222 <_vfiprintf_r+0x15a>
 800d294:	9105      	str	r1, [sp, #20]
 800d296:	e7c4      	b.n	800d222 <_vfiprintf_r+0x15a>
 800d298:	4604      	mov	r4, r0
 800d29a:	2301      	movs	r3, #1
 800d29c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2a0:	e7f0      	b.n	800d284 <_vfiprintf_r+0x1bc>
 800d2a2:	ab03      	add	r3, sp, #12
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	462a      	mov	r2, r5
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	4b13      	ldr	r3, [pc, #76]	; (800d2f8 <_vfiprintf_r+0x230>)
 800d2ac:	a904      	add	r1, sp, #16
 800d2ae:	f7fb ffdf 	bl	8009270 <_printf_float>
 800d2b2:	4607      	mov	r7, r0
 800d2b4:	1c78      	adds	r0, r7, #1
 800d2b6:	d1d6      	bne.n	800d266 <_vfiprintf_r+0x19e>
 800d2b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2ba:	07d9      	lsls	r1, r3, #31
 800d2bc:	d405      	bmi.n	800d2ca <_vfiprintf_r+0x202>
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	059a      	lsls	r2, r3, #22
 800d2c2:	d402      	bmi.n	800d2ca <_vfiprintf_r+0x202>
 800d2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2c6:	f7fd f8c9 	bl	800a45c <__retarget_lock_release_recursive>
 800d2ca:	89ab      	ldrh	r3, [r5, #12]
 800d2cc:	065b      	lsls	r3, r3, #25
 800d2ce:	f53f af1d 	bmi.w	800d10c <_vfiprintf_r+0x44>
 800d2d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2d4:	e71c      	b.n	800d110 <_vfiprintf_r+0x48>
 800d2d6:	ab03      	add	r3, sp, #12
 800d2d8:	9300      	str	r3, [sp, #0]
 800d2da:	462a      	mov	r2, r5
 800d2dc:	4630      	mov	r0, r6
 800d2de:	4b06      	ldr	r3, [pc, #24]	; (800d2f8 <_vfiprintf_r+0x230>)
 800d2e0:	a904      	add	r1, sp, #16
 800d2e2:	f7fc fa65 	bl	80097b0 <_printf_i>
 800d2e6:	e7e4      	b.n	800d2b2 <_vfiprintf_r+0x1ea>
 800d2e8:	0800f309 	.word	0x0800f309
 800d2ec:	0800f30f 	.word	0x0800f30f
 800d2f0:	0800f313 	.word	0x0800f313
 800d2f4:	08009271 	.word	0x08009271
 800d2f8:	0800d0a3 	.word	0x0800d0a3

0800d2fc <_scanf_chars>:
 800d2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d300:	4615      	mov	r5, r2
 800d302:	688a      	ldr	r2, [r1, #8]
 800d304:	4680      	mov	r8, r0
 800d306:	460c      	mov	r4, r1
 800d308:	b932      	cbnz	r2, 800d318 <_scanf_chars+0x1c>
 800d30a:	698a      	ldr	r2, [r1, #24]
 800d30c:	2a00      	cmp	r2, #0
 800d30e:	bf0c      	ite	eq
 800d310:	2201      	moveq	r2, #1
 800d312:	f04f 32ff 	movne.w	r2, #4294967295
 800d316:	608a      	str	r2, [r1, #8]
 800d318:	2700      	movs	r7, #0
 800d31a:	6822      	ldr	r2, [r4, #0]
 800d31c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d3ac <_scanf_chars+0xb0>
 800d320:	06d1      	lsls	r1, r2, #27
 800d322:	bf5f      	itttt	pl
 800d324:	681a      	ldrpl	r2, [r3, #0]
 800d326:	1d11      	addpl	r1, r2, #4
 800d328:	6019      	strpl	r1, [r3, #0]
 800d32a:	6816      	ldrpl	r6, [r2, #0]
 800d32c:	69a0      	ldr	r0, [r4, #24]
 800d32e:	b188      	cbz	r0, 800d354 <_scanf_chars+0x58>
 800d330:	2801      	cmp	r0, #1
 800d332:	d107      	bne.n	800d344 <_scanf_chars+0x48>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	781a      	ldrb	r2, [r3, #0]
 800d338:	6963      	ldr	r3, [r4, #20]
 800d33a:	5c9b      	ldrb	r3, [r3, r2]
 800d33c:	b953      	cbnz	r3, 800d354 <_scanf_chars+0x58>
 800d33e:	2f00      	cmp	r7, #0
 800d340:	d031      	beq.n	800d3a6 <_scanf_chars+0xaa>
 800d342:	e022      	b.n	800d38a <_scanf_chars+0x8e>
 800d344:	2802      	cmp	r0, #2
 800d346:	d120      	bne.n	800d38a <_scanf_chars+0x8e>
 800d348:	682b      	ldr	r3, [r5, #0]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d350:	071b      	lsls	r3, r3, #28
 800d352:	d41a      	bmi.n	800d38a <_scanf_chars+0x8e>
 800d354:	6823      	ldr	r3, [r4, #0]
 800d356:	3701      	adds	r7, #1
 800d358:	06da      	lsls	r2, r3, #27
 800d35a:	bf5e      	ittt	pl
 800d35c:	682b      	ldrpl	r3, [r5, #0]
 800d35e:	781b      	ldrbpl	r3, [r3, #0]
 800d360:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d364:	682a      	ldr	r2, [r5, #0]
 800d366:	686b      	ldr	r3, [r5, #4]
 800d368:	3201      	adds	r2, #1
 800d36a:	602a      	str	r2, [r5, #0]
 800d36c:	68a2      	ldr	r2, [r4, #8]
 800d36e:	3b01      	subs	r3, #1
 800d370:	3a01      	subs	r2, #1
 800d372:	606b      	str	r3, [r5, #4]
 800d374:	60a2      	str	r2, [r4, #8]
 800d376:	b142      	cbz	r2, 800d38a <_scanf_chars+0x8e>
 800d378:	2b00      	cmp	r3, #0
 800d37a:	dcd7      	bgt.n	800d32c <_scanf_chars+0x30>
 800d37c:	4629      	mov	r1, r5
 800d37e:	4640      	mov	r0, r8
 800d380:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d384:	4798      	blx	r3
 800d386:	2800      	cmp	r0, #0
 800d388:	d0d0      	beq.n	800d32c <_scanf_chars+0x30>
 800d38a:	6823      	ldr	r3, [r4, #0]
 800d38c:	f013 0310 	ands.w	r3, r3, #16
 800d390:	d105      	bne.n	800d39e <_scanf_chars+0xa2>
 800d392:	68e2      	ldr	r2, [r4, #12]
 800d394:	3201      	adds	r2, #1
 800d396:	60e2      	str	r2, [r4, #12]
 800d398:	69a2      	ldr	r2, [r4, #24]
 800d39a:	b102      	cbz	r2, 800d39e <_scanf_chars+0xa2>
 800d39c:	7033      	strb	r3, [r6, #0]
 800d39e:	2000      	movs	r0, #0
 800d3a0:	6923      	ldr	r3, [r4, #16]
 800d3a2:	443b      	add	r3, r7
 800d3a4:	6123      	str	r3, [r4, #16]
 800d3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3aa:	bf00      	nop
 800d3ac:	0800f209 	.word	0x0800f209

0800d3b0 <_scanf_i>:
 800d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b4:	460c      	mov	r4, r1
 800d3b6:	4698      	mov	r8, r3
 800d3b8:	4b72      	ldr	r3, [pc, #456]	; (800d584 <_scanf_i+0x1d4>)
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	4682      	mov	sl, r0
 800d3be:	4616      	mov	r6, r2
 800d3c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3c4:	ab03      	add	r3, sp, #12
 800d3c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3ca:	4b6f      	ldr	r3, [pc, #444]	; (800d588 <_scanf_i+0x1d8>)
 800d3cc:	69a1      	ldr	r1, [r4, #24]
 800d3ce:	4a6f      	ldr	r2, [pc, #444]	; (800d58c <_scanf_i+0x1dc>)
 800d3d0:	4627      	mov	r7, r4
 800d3d2:	2903      	cmp	r1, #3
 800d3d4:	bf18      	it	ne
 800d3d6:	461a      	movne	r2, r3
 800d3d8:	68a3      	ldr	r3, [r4, #8]
 800d3da:	9201      	str	r2, [sp, #4]
 800d3dc:	1e5a      	subs	r2, r3, #1
 800d3de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d3e2:	bf81      	itttt	hi
 800d3e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d3e8:	eb03 0905 	addhi.w	r9, r3, r5
 800d3ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d3f0:	60a3      	strhi	r3, [r4, #8]
 800d3f2:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d3f6:	bf98      	it	ls
 800d3f8:	f04f 0900 	movls.w	r9, #0
 800d3fc:	463d      	mov	r5, r7
 800d3fe:	f04f 0b00 	mov.w	fp, #0
 800d402:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d406:	6023      	str	r3, [r4, #0]
 800d408:	6831      	ldr	r1, [r6, #0]
 800d40a:	ab03      	add	r3, sp, #12
 800d40c:	2202      	movs	r2, #2
 800d40e:	7809      	ldrb	r1, [r1, #0]
 800d410:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d414:	f7fd f823 	bl	800a45e <memchr>
 800d418:	b328      	cbz	r0, 800d466 <_scanf_i+0xb6>
 800d41a:	f1bb 0f01 	cmp.w	fp, #1
 800d41e:	d159      	bne.n	800d4d4 <_scanf_i+0x124>
 800d420:	6862      	ldr	r2, [r4, #4]
 800d422:	b92a      	cbnz	r2, 800d430 <_scanf_i+0x80>
 800d424:	2308      	movs	r3, #8
 800d426:	6822      	ldr	r2, [r4, #0]
 800d428:	6063      	str	r3, [r4, #4]
 800d42a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d42e:	6022      	str	r2, [r4, #0]
 800d430:	6822      	ldr	r2, [r4, #0]
 800d432:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d436:	6022      	str	r2, [r4, #0]
 800d438:	68a2      	ldr	r2, [r4, #8]
 800d43a:	1e51      	subs	r1, r2, #1
 800d43c:	60a1      	str	r1, [r4, #8]
 800d43e:	b192      	cbz	r2, 800d466 <_scanf_i+0xb6>
 800d440:	6832      	ldr	r2, [r6, #0]
 800d442:	1c51      	adds	r1, r2, #1
 800d444:	6031      	str	r1, [r6, #0]
 800d446:	7812      	ldrb	r2, [r2, #0]
 800d448:	f805 2b01 	strb.w	r2, [r5], #1
 800d44c:	6872      	ldr	r2, [r6, #4]
 800d44e:	3a01      	subs	r2, #1
 800d450:	2a00      	cmp	r2, #0
 800d452:	6072      	str	r2, [r6, #4]
 800d454:	dc07      	bgt.n	800d466 <_scanf_i+0xb6>
 800d456:	4631      	mov	r1, r6
 800d458:	4650      	mov	r0, sl
 800d45a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d45e:	4790      	blx	r2
 800d460:	2800      	cmp	r0, #0
 800d462:	f040 8085 	bne.w	800d570 <_scanf_i+0x1c0>
 800d466:	f10b 0b01 	add.w	fp, fp, #1
 800d46a:	f1bb 0f03 	cmp.w	fp, #3
 800d46e:	d1cb      	bne.n	800d408 <_scanf_i+0x58>
 800d470:	6863      	ldr	r3, [r4, #4]
 800d472:	b90b      	cbnz	r3, 800d478 <_scanf_i+0xc8>
 800d474:	230a      	movs	r3, #10
 800d476:	6063      	str	r3, [r4, #4]
 800d478:	6863      	ldr	r3, [r4, #4]
 800d47a:	4945      	ldr	r1, [pc, #276]	; (800d590 <_scanf_i+0x1e0>)
 800d47c:	6960      	ldr	r0, [r4, #20]
 800d47e:	1ac9      	subs	r1, r1, r3
 800d480:	f000 f9d9 	bl	800d836 <__sccl>
 800d484:	f04f 0b00 	mov.w	fp, #0
 800d488:	68a3      	ldr	r3, [r4, #8]
 800d48a:	6822      	ldr	r2, [r4, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d03d      	beq.n	800d50c <_scanf_i+0x15c>
 800d490:	6831      	ldr	r1, [r6, #0]
 800d492:	6960      	ldr	r0, [r4, #20]
 800d494:	f891 c000 	ldrb.w	ip, [r1]
 800d498:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d035      	beq.n	800d50c <_scanf_i+0x15c>
 800d4a0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d4a4:	d124      	bne.n	800d4f0 <_scanf_i+0x140>
 800d4a6:	0510      	lsls	r0, r2, #20
 800d4a8:	d522      	bpl.n	800d4f0 <_scanf_i+0x140>
 800d4aa:	f10b 0b01 	add.w	fp, fp, #1
 800d4ae:	f1b9 0f00 	cmp.w	r9, #0
 800d4b2:	d003      	beq.n	800d4bc <_scanf_i+0x10c>
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	f109 39ff 	add.w	r9, r9, #4294967295
 800d4ba:	60a3      	str	r3, [r4, #8]
 800d4bc:	6873      	ldr	r3, [r6, #4]
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	6073      	str	r3, [r6, #4]
 800d4c4:	dd1b      	ble.n	800d4fe <_scanf_i+0x14e>
 800d4c6:	6833      	ldr	r3, [r6, #0]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	6033      	str	r3, [r6, #0]
 800d4cc:	68a3      	ldr	r3, [r4, #8]
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	60a3      	str	r3, [r4, #8]
 800d4d2:	e7d9      	b.n	800d488 <_scanf_i+0xd8>
 800d4d4:	f1bb 0f02 	cmp.w	fp, #2
 800d4d8:	d1ae      	bne.n	800d438 <_scanf_i+0x88>
 800d4da:	6822      	ldr	r2, [r4, #0]
 800d4dc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d4e0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d4e4:	d1bf      	bne.n	800d466 <_scanf_i+0xb6>
 800d4e6:	2310      	movs	r3, #16
 800d4e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4ec:	6063      	str	r3, [r4, #4]
 800d4ee:	e7a2      	b.n	800d436 <_scanf_i+0x86>
 800d4f0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d4f4:	6022      	str	r2, [r4, #0]
 800d4f6:	780b      	ldrb	r3, [r1, #0]
 800d4f8:	f805 3b01 	strb.w	r3, [r5], #1
 800d4fc:	e7de      	b.n	800d4bc <_scanf_i+0x10c>
 800d4fe:	4631      	mov	r1, r6
 800d500:	4650      	mov	r0, sl
 800d502:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d506:	4798      	blx	r3
 800d508:	2800      	cmp	r0, #0
 800d50a:	d0df      	beq.n	800d4cc <_scanf_i+0x11c>
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	05d9      	lsls	r1, r3, #23
 800d510:	d50d      	bpl.n	800d52e <_scanf_i+0x17e>
 800d512:	42bd      	cmp	r5, r7
 800d514:	d909      	bls.n	800d52a <_scanf_i+0x17a>
 800d516:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d51a:	4632      	mov	r2, r6
 800d51c:	4650      	mov	r0, sl
 800d51e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d522:	f105 39ff 	add.w	r9, r5, #4294967295
 800d526:	4798      	blx	r3
 800d528:	464d      	mov	r5, r9
 800d52a:	42bd      	cmp	r5, r7
 800d52c:	d028      	beq.n	800d580 <_scanf_i+0x1d0>
 800d52e:	6822      	ldr	r2, [r4, #0]
 800d530:	f012 0210 	ands.w	r2, r2, #16
 800d534:	d113      	bne.n	800d55e <_scanf_i+0x1ae>
 800d536:	702a      	strb	r2, [r5, #0]
 800d538:	4639      	mov	r1, r7
 800d53a:	6863      	ldr	r3, [r4, #4]
 800d53c:	4650      	mov	r0, sl
 800d53e:	9e01      	ldr	r6, [sp, #4]
 800d540:	47b0      	blx	r6
 800d542:	f8d8 3000 	ldr.w	r3, [r8]
 800d546:	6821      	ldr	r1, [r4, #0]
 800d548:	1d1a      	adds	r2, r3, #4
 800d54a:	f8c8 2000 	str.w	r2, [r8]
 800d54e:	f011 0f20 	tst.w	r1, #32
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	d00f      	beq.n	800d576 <_scanf_i+0x1c6>
 800d556:	6018      	str	r0, [r3, #0]
 800d558:	68e3      	ldr	r3, [r4, #12]
 800d55a:	3301      	adds	r3, #1
 800d55c:	60e3      	str	r3, [r4, #12]
 800d55e:	2000      	movs	r0, #0
 800d560:	6923      	ldr	r3, [r4, #16]
 800d562:	1bed      	subs	r5, r5, r7
 800d564:	445d      	add	r5, fp
 800d566:	442b      	add	r3, r5
 800d568:	6123      	str	r3, [r4, #16]
 800d56a:	b007      	add	sp, #28
 800d56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d570:	f04f 0b00 	mov.w	fp, #0
 800d574:	e7ca      	b.n	800d50c <_scanf_i+0x15c>
 800d576:	07ca      	lsls	r2, r1, #31
 800d578:	bf4c      	ite	mi
 800d57a:	8018      	strhmi	r0, [r3, #0]
 800d57c:	6018      	strpl	r0, [r3, #0]
 800d57e:	e7eb      	b.n	800d558 <_scanf_i+0x1a8>
 800d580:	2001      	movs	r0, #1
 800d582:	e7f2      	b.n	800d56a <_scanf_i+0x1ba>
 800d584:	0800eefc 	.word	0x0800eefc
 800d588:	0800e231 	.word	0x0800e231
 800d58c:	0800ca21 	.word	0x0800ca21
 800d590:	0800f32a 	.word	0x0800f32a

0800d594 <__sflush_r>:
 800d594:	898a      	ldrh	r2, [r1, #12]
 800d596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d598:	4605      	mov	r5, r0
 800d59a:	0710      	lsls	r0, r2, #28
 800d59c:	460c      	mov	r4, r1
 800d59e:	d457      	bmi.n	800d650 <__sflush_r+0xbc>
 800d5a0:	684b      	ldr	r3, [r1, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	dc04      	bgt.n	800d5b0 <__sflush_r+0x1c>
 800d5a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	dc01      	bgt.n	800d5b0 <__sflush_r+0x1c>
 800d5ac:	2000      	movs	r0, #0
 800d5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5b2:	2e00      	cmp	r6, #0
 800d5b4:	d0fa      	beq.n	800d5ac <__sflush_r+0x18>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5bc:	682f      	ldr	r7, [r5, #0]
 800d5be:	6a21      	ldr	r1, [r4, #32]
 800d5c0:	602b      	str	r3, [r5, #0]
 800d5c2:	d032      	beq.n	800d62a <__sflush_r+0x96>
 800d5c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5c6:	89a3      	ldrh	r3, [r4, #12]
 800d5c8:	075a      	lsls	r2, r3, #29
 800d5ca:	d505      	bpl.n	800d5d8 <__sflush_r+0x44>
 800d5cc:	6863      	ldr	r3, [r4, #4]
 800d5ce:	1ac0      	subs	r0, r0, r3
 800d5d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5d2:	b10b      	cbz	r3, 800d5d8 <__sflush_r+0x44>
 800d5d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5d6:	1ac0      	subs	r0, r0, r3
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4602      	mov	r2, r0
 800d5dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5de:	4628      	mov	r0, r5
 800d5e0:	6a21      	ldr	r1, [r4, #32]
 800d5e2:	47b0      	blx	r6
 800d5e4:	1c43      	adds	r3, r0, #1
 800d5e6:	89a3      	ldrh	r3, [r4, #12]
 800d5e8:	d106      	bne.n	800d5f8 <__sflush_r+0x64>
 800d5ea:	6829      	ldr	r1, [r5, #0]
 800d5ec:	291d      	cmp	r1, #29
 800d5ee:	d82b      	bhi.n	800d648 <__sflush_r+0xb4>
 800d5f0:	4a28      	ldr	r2, [pc, #160]	; (800d694 <__sflush_r+0x100>)
 800d5f2:	410a      	asrs	r2, r1
 800d5f4:	07d6      	lsls	r6, r2, #31
 800d5f6:	d427      	bmi.n	800d648 <__sflush_r+0xb4>
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	6062      	str	r2, [r4, #4]
 800d5fc:	6922      	ldr	r2, [r4, #16]
 800d5fe:	04d9      	lsls	r1, r3, #19
 800d600:	6022      	str	r2, [r4, #0]
 800d602:	d504      	bpl.n	800d60e <__sflush_r+0x7a>
 800d604:	1c42      	adds	r2, r0, #1
 800d606:	d101      	bne.n	800d60c <__sflush_r+0x78>
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	b903      	cbnz	r3, 800d60e <__sflush_r+0x7a>
 800d60c:	6560      	str	r0, [r4, #84]	; 0x54
 800d60e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d610:	602f      	str	r7, [r5, #0]
 800d612:	2900      	cmp	r1, #0
 800d614:	d0ca      	beq.n	800d5ac <__sflush_r+0x18>
 800d616:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d61a:	4299      	cmp	r1, r3
 800d61c:	d002      	beq.n	800d624 <__sflush_r+0x90>
 800d61e:	4628      	mov	r0, r5
 800d620:	f7fd fdca 	bl	800b1b8 <_free_r>
 800d624:	2000      	movs	r0, #0
 800d626:	6360      	str	r0, [r4, #52]	; 0x34
 800d628:	e7c1      	b.n	800d5ae <__sflush_r+0x1a>
 800d62a:	2301      	movs	r3, #1
 800d62c:	4628      	mov	r0, r5
 800d62e:	47b0      	blx	r6
 800d630:	1c41      	adds	r1, r0, #1
 800d632:	d1c8      	bne.n	800d5c6 <__sflush_r+0x32>
 800d634:	682b      	ldr	r3, [r5, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d0c5      	beq.n	800d5c6 <__sflush_r+0x32>
 800d63a:	2b1d      	cmp	r3, #29
 800d63c:	d001      	beq.n	800d642 <__sflush_r+0xae>
 800d63e:	2b16      	cmp	r3, #22
 800d640:	d101      	bne.n	800d646 <__sflush_r+0xb2>
 800d642:	602f      	str	r7, [r5, #0]
 800d644:	e7b2      	b.n	800d5ac <__sflush_r+0x18>
 800d646:	89a3      	ldrh	r3, [r4, #12]
 800d648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d64c:	81a3      	strh	r3, [r4, #12]
 800d64e:	e7ae      	b.n	800d5ae <__sflush_r+0x1a>
 800d650:	690f      	ldr	r7, [r1, #16]
 800d652:	2f00      	cmp	r7, #0
 800d654:	d0aa      	beq.n	800d5ac <__sflush_r+0x18>
 800d656:	0793      	lsls	r3, r2, #30
 800d658:	bf18      	it	ne
 800d65a:	2300      	movne	r3, #0
 800d65c:	680e      	ldr	r6, [r1, #0]
 800d65e:	bf08      	it	eq
 800d660:	694b      	ldreq	r3, [r1, #20]
 800d662:	1bf6      	subs	r6, r6, r7
 800d664:	600f      	str	r7, [r1, #0]
 800d666:	608b      	str	r3, [r1, #8]
 800d668:	2e00      	cmp	r6, #0
 800d66a:	dd9f      	ble.n	800d5ac <__sflush_r+0x18>
 800d66c:	4633      	mov	r3, r6
 800d66e:	463a      	mov	r2, r7
 800d670:	4628      	mov	r0, r5
 800d672:	6a21      	ldr	r1, [r4, #32]
 800d674:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d678:	47e0      	blx	ip
 800d67a:	2800      	cmp	r0, #0
 800d67c:	dc06      	bgt.n	800d68c <__sflush_r+0xf8>
 800d67e:	89a3      	ldrh	r3, [r4, #12]
 800d680:	f04f 30ff 	mov.w	r0, #4294967295
 800d684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d688:	81a3      	strh	r3, [r4, #12]
 800d68a:	e790      	b.n	800d5ae <__sflush_r+0x1a>
 800d68c:	4407      	add	r7, r0
 800d68e:	1a36      	subs	r6, r6, r0
 800d690:	e7ea      	b.n	800d668 <__sflush_r+0xd4>
 800d692:	bf00      	nop
 800d694:	dfbffffe 	.word	0xdfbffffe

0800d698 <_fflush_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	690b      	ldr	r3, [r1, #16]
 800d69c:	4605      	mov	r5, r0
 800d69e:	460c      	mov	r4, r1
 800d6a0:	b913      	cbnz	r3, 800d6a8 <_fflush_r+0x10>
 800d6a2:	2500      	movs	r5, #0
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	bd38      	pop	{r3, r4, r5, pc}
 800d6a8:	b118      	cbz	r0, 800d6b2 <_fflush_r+0x1a>
 800d6aa:	6a03      	ldr	r3, [r0, #32]
 800d6ac:	b90b      	cbnz	r3, 800d6b2 <_fflush_r+0x1a>
 800d6ae:	f7fc fc3b 	bl	8009f28 <__sinit>
 800d6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d0f3      	beq.n	800d6a2 <_fflush_r+0xa>
 800d6ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6bc:	07d0      	lsls	r0, r2, #31
 800d6be:	d404      	bmi.n	800d6ca <_fflush_r+0x32>
 800d6c0:	0599      	lsls	r1, r3, #22
 800d6c2:	d402      	bmi.n	800d6ca <_fflush_r+0x32>
 800d6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6c6:	f7fc fec8 	bl	800a45a <__retarget_lock_acquire_recursive>
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	f7ff ff61 	bl	800d594 <__sflush_r>
 800d6d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	07da      	lsls	r2, r3, #31
 800d6d8:	d4e4      	bmi.n	800d6a4 <_fflush_r+0xc>
 800d6da:	89a3      	ldrh	r3, [r4, #12]
 800d6dc:	059b      	lsls	r3, r3, #22
 800d6de:	d4e1      	bmi.n	800d6a4 <_fflush_r+0xc>
 800d6e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6e2:	f7fc febb 	bl	800a45c <__retarget_lock_release_recursive>
 800d6e6:	e7dd      	b.n	800d6a4 <_fflush_r+0xc>

0800d6e8 <fiprintf>:
 800d6e8:	b40e      	push	{r1, r2, r3}
 800d6ea:	b503      	push	{r0, r1, lr}
 800d6ec:	4601      	mov	r1, r0
 800d6ee:	ab03      	add	r3, sp, #12
 800d6f0:	4805      	ldr	r0, [pc, #20]	; (800d708 <fiprintf+0x20>)
 800d6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6f6:	6800      	ldr	r0, [r0, #0]
 800d6f8:	9301      	str	r3, [sp, #4]
 800d6fa:	f7ff fce5 	bl	800d0c8 <_vfiprintf_r>
 800d6fe:	b002      	add	sp, #8
 800d700:	f85d eb04 	ldr.w	lr, [sp], #4
 800d704:	b003      	add	sp, #12
 800d706:	4770      	bx	lr
 800d708:	20000310 	.word	0x20000310

0800d70c <__swhatbuf_r>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	460c      	mov	r4, r1
 800d710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d714:	4615      	mov	r5, r2
 800d716:	2900      	cmp	r1, #0
 800d718:	461e      	mov	r6, r3
 800d71a:	b096      	sub	sp, #88	; 0x58
 800d71c:	da0c      	bge.n	800d738 <__swhatbuf_r+0x2c>
 800d71e:	89a3      	ldrh	r3, [r4, #12]
 800d720:	2100      	movs	r1, #0
 800d722:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d726:	bf0c      	ite	eq
 800d728:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d72c:	2340      	movne	r3, #64	; 0x40
 800d72e:	2000      	movs	r0, #0
 800d730:	6031      	str	r1, [r6, #0]
 800d732:	602b      	str	r3, [r5, #0]
 800d734:	b016      	add	sp, #88	; 0x58
 800d736:	bd70      	pop	{r4, r5, r6, pc}
 800d738:	466a      	mov	r2, sp
 800d73a:	f000 f919 	bl	800d970 <_fstat_r>
 800d73e:	2800      	cmp	r0, #0
 800d740:	dbed      	blt.n	800d71e <__swhatbuf_r+0x12>
 800d742:	9901      	ldr	r1, [sp, #4]
 800d744:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d748:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d74c:	4259      	negs	r1, r3
 800d74e:	4159      	adcs	r1, r3
 800d750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d754:	e7eb      	b.n	800d72e <__swhatbuf_r+0x22>

0800d756 <__smakebuf_r>:
 800d756:	898b      	ldrh	r3, [r1, #12]
 800d758:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d75a:	079d      	lsls	r5, r3, #30
 800d75c:	4606      	mov	r6, r0
 800d75e:	460c      	mov	r4, r1
 800d760:	d507      	bpl.n	800d772 <__smakebuf_r+0x1c>
 800d762:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d766:	6023      	str	r3, [r4, #0]
 800d768:	6123      	str	r3, [r4, #16]
 800d76a:	2301      	movs	r3, #1
 800d76c:	6163      	str	r3, [r4, #20]
 800d76e:	b002      	add	sp, #8
 800d770:	bd70      	pop	{r4, r5, r6, pc}
 800d772:	466a      	mov	r2, sp
 800d774:	ab01      	add	r3, sp, #4
 800d776:	f7ff ffc9 	bl	800d70c <__swhatbuf_r>
 800d77a:	9900      	ldr	r1, [sp, #0]
 800d77c:	4605      	mov	r5, r0
 800d77e:	4630      	mov	r0, r6
 800d780:	f7fd fd8a 	bl	800b298 <_malloc_r>
 800d784:	b948      	cbnz	r0, 800d79a <__smakebuf_r+0x44>
 800d786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d78a:	059a      	lsls	r2, r3, #22
 800d78c:	d4ef      	bmi.n	800d76e <__smakebuf_r+0x18>
 800d78e:	f023 0303 	bic.w	r3, r3, #3
 800d792:	f043 0302 	orr.w	r3, r3, #2
 800d796:	81a3      	strh	r3, [r4, #12]
 800d798:	e7e3      	b.n	800d762 <__smakebuf_r+0xc>
 800d79a:	89a3      	ldrh	r3, [r4, #12]
 800d79c:	6020      	str	r0, [r4, #0]
 800d79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a2:	81a3      	strh	r3, [r4, #12]
 800d7a4:	9b00      	ldr	r3, [sp, #0]
 800d7a6:	6120      	str	r0, [r4, #16]
 800d7a8:	6163      	str	r3, [r4, #20]
 800d7aa:	9b01      	ldr	r3, [sp, #4]
 800d7ac:	b15b      	cbz	r3, 800d7c6 <__smakebuf_r+0x70>
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7b4:	f000 f8ee 	bl	800d994 <_isatty_r>
 800d7b8:	b128      	cbz	r0, 800d7c6 <__smakebuf_r+0x70>
 800d7ba:	89a3      	ldrh	r3, [r4, #12]
 800d7bc:	f023 0303 	bic.w	r3, r3, #3
 800d7c0:	f043 0301 	orr.w	r3, r3, #1
 800d7c4:	81a3      	strh	r3, [r4, #12]
 800d7c6:	89a3      	ldrh	r3, [r4, #12]
 800d7c8:	431d      	orrs	r5, r3
 800d7ca:	81a5      	strh	r5, [r4, #12]
 800d7cc:	e7cf      	b.n	800d76e <__smakebuf_r+0x18>

0800d7ce <_putc_r>:
 800d7ce:	b570      	push	{r4, r5, r6, lr}
 800d7d0:	460d      	mov	r5, r1
 800d7d2:	4614      	mov	r4, r2
 800d7d4:	4606      	mov	r6, r0
 800d7d6:	b118      	cbz	r0, 800d7e0 <_putc_r+0x12>
 800d7d8:	6a03      	ldr	r3, [r0, #32]
 800d7da:	b90b      	cbnz	r3, 800d7e0 <_putc_r+0x12>
 800d7dc:	f7fc fba4 	bl	8009f28 <__sinit>
 800d7e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7e2:	07d8      	lsls	r0, r3, #31
 800d7e4:	d405      	bmi.n	800d7f2 <_putc_r+0x24>
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	0599      	lsls	r1, r3, #22
 800d7ea:	d402      	bmi.n	800d7f2 <_putc_r+0x24>
 800d7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ee:	f7fc fe34 	bl	800a45a <__retarget_lock_acquire_recursive>
 800d7f2:	68a3      	ldr	r3, [r4, #8]
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	60a3      	str	r3, [r4, #8]
 800d7fa:	da05      	bge.n	800d808 <_putc_r+0x3a>
 800d7fc:	69a2      	ldr	r2, [r4, #24]
 800d7fe:	4293      	cmp	r3, r2
 800d800:	db12      	blt.n	800d828 <_putc_r+0x5a>
 800d802:	b2eb      	uxtb	r3, r5
 800d804:	2b0a      	cmp	r3, #10
 800d806:	d00f      	beq.n	800d828 <_putc_r+0x5a>
 800d808:	6823      	ldr	r3, [r4, #0]
 800d80a:	1c5a      	adds	r2, r3, #1
 800d80c:	6022      	str	r2, [r4, #0]
 800d80e:	701d      	strb	r5, [r3, #0]
 800d810:	b2ed      	uxtb	r5, r5
 800d812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d814:	07da      	lsls	r2, r3, #31
 800d816:	d405      	bmi.n	800d824 <_putc_r+0x56>
 800d818:	89a3      	ldrh	r3, [r4, #12]
 800d81a:	059b      	lsls	r3, r3, #22
 800d81c:	d402      	bmi.n	800d824 <_putc_r+0x56>
 800d81e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d820:	f7fc fe1c 	bl	800a45c <__retarget_lock_release_recursive>
 800d824:	4628      	mov	r0, r5
 800d826:	bd70      	pop	{r4, r5, r6, pc}
 800d828:	4629      	mov	r1, r5
 800d82a:	4622      	mov	r2, r4
 800d82c:	4630      	mov	r0, r6
 800d82e:	f7fc fcef 	bl	800a210 <__swbuf_r>
 800d832:	4605      	mov	r5, r0
 800d834:	e7ed      	b.n	800d812 <_putc_r+0x44>

0800d836 <__sccl>:
 800d836:	b570      	push	{r4, r5, r6, lr}
 800d838:	780b      	ldrb	r3, [r1, #0]
 800d83a:	4604      	mov	r4, r0
 800d83c:	2b5e      	cmp	r3, #94	; 0x5e
 800d83e:	bf0b      	itete	eq
 800d840:	784b      	ldrbeq	r3, [r1, #1]
 800d842:	1c4a      	addne	r2, r1, #1
 800d844:	1c8a      	addeq	r2, r1, #2
 800d846:	2100      	movne	r1, #0
 800d848:	bf08      	it	eq
 800d84a:	2101      	moveq	r1, #1
 800d84c:	3801      	subs	r0, #1
 800d84e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d852:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d856:	42a8      	cmp	r0, r5
 800d858:	d1fb      	bne.n	800d852 <__sccl+0x1c>
 800d85a:	b90b      	cbnz	r3, 800d860 <__sccl+0x2a>
 800d85c:	1e50      	subs	r0, r2, #1
 800d85e:	bd70      	pop	{r4, r5, r6, pc}
 800d860:	f081 0101 	eor.w	r1, r1, #1
 800d864:	4610      	mov	r0, r2
 800d866:	54e1      	strb	r1, [r4, r3]
 800d868:	4602      	mov	r2, r0
 800d86a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d86e:	2d2d      	cmp	r5, #45	; 0x2d
 800d870:	d005      	beq.n	800d87e <__sccl+0x48>
 800d872:	2d5d      	cmp	r5, #93	; 0x5d
 800d874:	d016      	beq.n	800d8a4 <__sccl+0x6e>
 800d876:	2d00      	cmp	r5, #0
 800d878:	d0f1      	beq.n	800d85e <__sccl+0x28>
 800d87a:	462b      	mov	r3, r5
 800d87c:	e7f2      	b.n	800d864 <__sccl+0x2e>
 800d87e:	7846      	ldrb	r6, [r0, #1]
 800d880:	2e5d      	cmp	r6, #93	; 0x5d
 800d882:	d0fa      	beq.n	800d87a <__sccl+0x44>
 800d884:	42b3      	cmp	r3, r6
 800d886:	dcf8      	bgt.n	800d87a <__sccl+0x44>
 800d888:	461a      	mov	r2, r3
 800d88a:	3002      	adds	r0, #2
 800d88c:	3201      	adds	r2, #1
 800d88e:	4296      	cmp	r6, r2
 800d890:	54a1      	strb	r1, [r4, r2]
 800d892:	dcfb      	bgt.n	800d88c <__sccl+0x56>
 800d894:	1af2      	subs	r2, r6, r3
 800d896:	3a01      	subs	r2, #1
 800d898:	42b3      	cmp	r3, r6
 800d89a:	bfa8      	it	ge
 800d89c:	2200      	movge	r2, #0
 800d89e:	1c5d      	adds	r5, r3, #1
 800d8a0:	18ab      	adds	r3, r5, r2
 800d8a2:	e7e1      	b.n	800d868 <__sccl+0x32>
 800d8a4:	4610      	mov	r0, r2
 800d8a6:	e7da      	b.n	800d85e <__sccl+0x28>

0800d8a8 <__submore>:
 800d8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ac:	460c      	mov	r4, r1
 800d8ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d8b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8b4:	4299      	cmp	r1, r3
 800d8b6:	d11b      	bne.n	800d8f0 <__submore+0x48>
 800d8b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d8bc:	f7fd fcec 	bl	800b298 <_malloc_r>
 800d8c0:	b918      	cbnz	r0, 800d8ca <__submore+0x22>
 800d8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ce:	63a3      	str	r3, [r4, #56]	; 0x38
 800d8d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d8d4:	6360      	str	r0, [r4, #52]	; 0x34
 800d8d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d8da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d8de:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d8e2:	7043      	strb	r3, [r0, #1]
 800d8e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d8e8:	7003      	strb	r3, [r0, #0]
 800d8ea:	6020      	str	r0, [r4, #0]
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	e7ea      	b.n	800d8c6 <__submore+0x1e>
 800d8f0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d8f2:	0077      	lsls	r7, r6, #1
 800d8f4:	463a      	mov	r2, r7
 800d8f6:	f000 fbfa 	bl	800e0ee <_realloc_r>
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d0e0      	beq.n	800d8c2 <__submore+0x1a>
 800d900:	eb00 0806 	add.w	r8, r0, r6
 800d904:	4601      	mov	r1, r0
 800d906:	4632      	mov	r2, r6
 800d908:	4640      	mov	r0, r8
 800d90a:	f7fc fdb6 	bl	800a47a <memcpy>
 800d90e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d912:	f8c4 8000 	str.w	r8, [r4]
 800d916:	e7e9      	b.n	800d8ec <__submore+0x44>

0800d918 <memmove>:
 800d918:	4288      	cmp	r0, r1
 800d91a:	b510      	push	{r4, lr}
 800d91c:	eb01 0402 	add.w	r4, r1, r2
 800d920:	d902      	bls.n	800d928 <memmove+0x10>
 800d922:	4284      	cmp	r4, r0
 800d924:	4623      	mov	r3, r4
 800d926:	d807      	bhi.n	800d938 <memmove+0x20>
 800d928:	1e43      	subs	r3, r0, #1
 800d92a:	42a1      	cmp	r1, r4
 800d92c:	d008      	beq.n	800d940 <memmove+0x28>
 800d92e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d932:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d936:	e7f8      	b.n	800d92a <memmove+0x12>
 800d938:	4601      	mov	r1, r0
 800d93a:	4402      	add	r2, r0
 800d93c:	428a      	cmp	r2, r1
 800d93e:	d100      	bne.n	800d942 <memmove+0x2a>
 800d940:	bd10      	pop	{r4, pc}
 800d942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d94a:	e7f7      	b.n	800d93c <memmove+0x24>

0800d94c <strncmp>:
 800d94c:	b510      	push	{r4, lr}
 800d94e:	b16a      	cbz	r2, 800d96c <strncmp+0x20>
 800d950:	3901      	subs	r1, #1
 800d952:	1884      	adds	r4, r0, r2
 800d954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d958:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d103      	bne.n	800d968 <strncmp+0x1c>
 800d960:	42a0      	cmp	r0, r4
 800d962:	d001      	beq.n	800d968 <strncmp+0x1c>
 800d964:	2a00      	cmp	r2, #0
 800d966:	d1f5      	bne.n	800d954 <strncmp+0x8>
 800d968:	1ad0      	subs	r0, r2, r3
 800d96a:	bd10      	pop	{r4, pc}
 800d96c:	4610      	mov	r0, r2
 800d96e:	e7fc      	b.n	800d96a <strncmp+0x1e>

0800d970 <_fstat_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	2300      	movs	r3, #0
 800d974:	4d06      	ldr	r5, [pc, #24]	; (800d990 <_fstat_r+0x20>)
 800d976:	4604      	mov	r4, r0
 800d978:	4608      	mov	r0, r1
 800d97a:	4611      	mov	r1, r2
 800d97c:	602b      	str	r3, [r5, #0]
 800d97e:	f7f4 f91a 	bl	8001bb6 <_fstat>
 800d982:	1c43      	adds	r3, r0, #1
 800d984:	d102      	bne.n	800d98c <_fstat_r+0x1c>
 800d986:	682b      	ldr	r3, [r5, #0]
 800d988:	b103      	cbz	r3, 800d98c <_fstat_r+0x1c>
 800d98a:	6023      	str	r3, [r4, #0]
 800d98c:	bd38      	pop	{r3, r4, r5, pc}
 800d98e:	bf00      	nop
 800d990:	200015ac 	.word	0x200015ac

0800d994 <_isatty_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	2300      	movs	r3, #0
 800d998:	4d05      	ldr	r5, [pc, #20]	; (800d9b0 <_isatty_r+0x1c>)
 800d99a:	4604      	mov	r4, r0
 800d99c:	4608      	mov	r0, r1
 800d99e:	602b      	str	r3, [r5, #0]
 800d9a0:	f7f4 f918 	bl	8001bd4 <_isatty>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	d102      	bne.n	800d9ae <_isatty_r+0x1a>
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	b103      	cbz	r3, 800d9ae <_isatty_r+0x1a>
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	bd38      	pop	{r3, r4, r5, pc}
 800d9b0:	200015ac 	.word	0x200015ac

0800d9b4 <_sbrk_r>:
 800d9b4:	b538      	push	{r3, r4, r5, lr}
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	4d05      	ldr	r5, [pc, #20]	; (800d9d0 <_sbrk_r+0x1c>)
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	4608      	mov	r0, r1
 800d9be:	602b      	str	r3, [r5, #0]
 800d9c0:	f7f4 f91e 	bl	8001c00 <_sbrk>
 800d9c4:	1c43      	adds	r3, r0, #1
 800d9c6:	d102      	bne.n	800d9ce <_sbrk_r+0x1a>
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	b103      	cbz	r3, 800d9ce <_sbrk_r+0x1a>
 800d9cc:	6023      	str	r3, [r4, #0]
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	200015ac 	.word	0x200015ac

0800d9d4 <nan>:
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	4901      	ldr	r1, [pc, #4]	; (800d9dc <nan+0x8>)
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	7ff80000 	.word	0x7ff80000

0800d9e0 <abort>:
 800d9e0:	2006      	movs	r0, #6
 800d9e2:	b508      	push	{r3, lr}
 800d9e4:	f000 fc5c 	bl	800e2a0 <raise>
 800d9e8:	2001      	movs	r0, #1
 800d9ea:	f7f4 f8b2 	bl	8001b52 <_exit>

0800d9ee <_calloc_r>:
 800d9ee:	b570      	push	{r4, r5, r6, lr}
 800d9f0:	fba1 5402 	umull	r5, r4, r1, r2
 800d9f4:	b934      	cbnz	r4, 800da04 <_calloc_r+0x16>
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	f7fd fc4e 	bl	800b298 <_malloc_r>
 800d9fc:	4606      	mov	r6, r0
 800d9fe:	b928      	cbnz	r0, 800da0c <_calloc_r+0x1e>
 800da00:	4630      	mov	r0, r6
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	220c      	movs	r2, #12
 800da06:	2600      	movs	r6, #0
 800da08:	6002      	str	r2, [r0, #0]
 800da0a:	e7f9      	b.n	800da00 <_calloc_r+0x12>
 800da0c:	462a      	mov	r2, r5
 800da0e:	4621      	mov	r1, r4
 800da10:	f7fc fc94 	bl	800a33c <memset>
 800da14:	e7f4      	b.n	800da00 <_calloc_r+0x12>

0800da16 <rshift>:
 800da16:	6903      	ldr	r3, [r0, #16]
 800da18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da1c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da20:	f100 0414 	add.w	r4, r0, #20
 800da24:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da28:	dd46      	ble.n	800dab8 <rshift+0xa2>
 800da2a:	f011 011f 	ands.w	r1, r1, #31
 800da2e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da32:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da36:	d10c      	bne.n	800da52 <rshift+0x3c>
 800da38:	4629      	mov	r1, r5
 800da3a:	f100 0710 	add.w	r7, r0, #16
 800da3e:	42b1      	cmp	r1, r6
 800da40:	d335      	bcc.n	800daae <rshift+0x98>
 800da42:	1a9b      	subs	r3, r3, r2
 800da44:	009b      	lsls	r3, r3, #2
 800da46:	1eea      	subs	r2, r5, #3
 800da48:	4296      	cmp	r6, r2
 800da4a:	bf38      	it	cc
 800da4c:	2300      	movcc	r3, #0
 800da4e:	4423      	add	r3, r4
 800da50:	e015      	b.n	800da7e <rshift+0x68>
 800da52:	46a1      	mov	r9, r4
 800da54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da58:	f1c1 0820 	rsb	r8, r1, #32
 800da5c:	40cf      	lsrs	r7, r1
 800da5e:	f105 0e04 	add.w	lr, r5, #4
 800da62:	4576      	cmp	r6, lr
 800da64:	46f4      	mov	ip, lr
 800da66:	d816      	bhi.n	800da96 <rshift+0x80>
 800da68:	1a9a      	subs	r2, r3, r2
 800da6a:	0092      	lsls	r2, r2, #2
 800da6c:	3a04      	subs	r2, #4
 800da6e:	3501      	adds	r5, #1
 800da70:	42ae      	cmp	r6, r5
 800da72:	bf38      	it	cc
 800da74:	2200      	movcc	r2, #0
 800da76:	18a3      	adds	r3, r4, r2
 800da78:	50a7      	str	r7, [r4, r2]
 800da7a:	b107      	cbz	r7, 800da7e <rshift+0x68>
 800da7c:	3304      	adds	r3, #4
 800da7e:	42a3      	cmp	r3, r4
 800da80:	eba3 0204 	sub.w	r2, r3, r4
 800da84:	bf08      	it	eq
 800da86:	2300      	moveq	r3, #0
 800da88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da8c:	6102      	str	r2, [r0, #16]
 800da8e:	bf08      	it	eq
 800da90:	6143      	streq	r3, [r0, #20]
 800da92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da96:	f8dc c000 	ldr.w	ip, [ip]
 800da9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800da9e:	ea4c 0707 	orr.w	r7, ip, r7
 800daa2:	f849 7b04 	str.w	r7, [r9], #4
 800daa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800daaa:	40cf      	lsrs	r7, r1
 800daac:	e7d9      	b.n	800da62 <rshift+0x4c>
 800daae:	f851 cb04 	ldr.w	ip, [r1], #4
 800dab2:	f847 cf04 	str.w	ip, [r7, #4]!
 800dab6:	e7c2      	b.n	800da3e <rshift+0x28>
 800dab8:	4623      	mov	r3, r4
 800daba:	e7e0      	b.n	800da7e <rshift+0x68>

0800dabc <__hexdig_fun>:
 800dabc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dac0:	2b09      	cmp	r3, #9
 800dac2:	d802      	bhi.n	800daca <__hexdig_fun+0xe>
 800dac4:	3820      	subs	r0, #32
 800dac6:	b2c0      	uxtb	r0, r0
 800dac8:	4770      	bx	lr
 800daca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dace:	2b05      	cmp	r3, #5
 800dad0:	d801      	bhi.n	800dad6 <__hexdig_fun+0x1a>
 800dad2:	3847      	subs	r0, #71	; 0x47
 800dad4:	e7f7      	b.n	800dac6 <__hexdig_fun+0xa>
 800dad6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dada:	2b05      	cmp	r3, #5
 800dadc:	d801      	bhi.n	800dae2 <__hexdig_fun+0x26>
 800dade:	3827      	subs	r0, #39	; 0x27
 800dae0:	e7f1      	b.n	800dac6 <__hexdig_fun+0xa>
 800dae2:	2000      	movs	r0, #0
 800dae4:	4770      	bx	lr
	...

0800dae8 <__gethex>:
 800dae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daec:	4681      	mov	r9, r0
 800daee:	468a      	mov	sl, r1
 800daf0:	4617      	mov	r7, r2
 800daf2:	680a      	ldr	r2, [r1, #0]
 800daf4:	b085      	sub	sp, #20
 800daf6:	f102 0b02 	add.w	fp, r2, #2
 800dafa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dafe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800db02:	9302      	str	r3, [sp, #8]
 800db04:	32fe      	adds	r2, #254	; 0xfe
 800db06:	eb02 030b 	add.w	r3, r2, fp
 800db0a:	46d8      	mov	r8, fp
 800db0c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800db10:	9301      	str	r3, [sp, #4]
 800db12:	2830      	cmp	r0, #48	; 0x30
 800db14:	d0f7      	beq.n	800db06 <__gethex+0x1e>
 800db16:	f7ff ffd1 	bl	800dabc <__hexdig_fun>
 800db1a:	4604      	mov	r4, r0
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d138      	bne.n	800db92 <__gethex+0xaa>
 800db20:	2201      	movs	r2, #1
 800db22:	4640      	mov	r0, r8
 800db24:	49a7      	ldr	r1, [pc, #668]	; (800ddc4 <__gethex+0x2dc>)
 800db26:	f7ff ff11 	bl	800d94c <strncmp>
 800db2a:	4606      	mov	r6, r0
 800db2c:	2800      	cmp	r0, #0
 800db2e:	d169      	bne.n	800dc04 <__gethex+0x11c>
 800db30:	f898 0001 	ldrb.w	r0, [r8, #1]
 800db34:	465d      	mov	r5, fp
 800db36:	f7ff ffc1 	bl	800dabc <__hexdig_fun>
 800db3a:	2800      	cmp	r0, #0
 800db3c:	d064      	beq.n	800dc08 <__gethex+0x120>
 800db3e:	465a      	mov	r2, fp
 800db40:	7810      	ldrb	r0, [r2, #0]
 800db42:	4690      	mov	r8, r2
 800db44:	2830      	cmp	r0, #48	; 0x30
 800db46:	f102 0201 	add.w	r2, r2, #1
 800db4a:	d0f9      	beq.n	800db40 <__gethex+0x58>
 800db4c:	f7ff ffb6 	bl	800dabc <__hexdig_fun>
 800db50:	2301      	movs	r3, #1
 800db52:	fab0 f480 	clz	r4, r0
 800db56:	465e      	mov	r6, fp
 800db58:	0964      	lsrs	r4, r4, #5
 800db5a:	9301      	str	r3, [sp, #4]
 800db5c:	4642      	mov	r2, r8
 800db5e:	4615      	mov	r5, r2
 800db60:	7828      	ldrb	r0, [r5, #0]
 800db62:	3201      	adds	r2, #1
 800db64:	f7ff ffaa 	bl	800dabc <__hexdig_fun>
 800db68:	2800      	cmp	r0, #0
 800db6a:	d1f8      	bne.n	800db5e <__gethex+0x76>
 800db6c:	2201      	movs	r2, #1
 800db6e:	4628      	mov	r0, r5
 800db70:	4994      	ldr	r1, [pc, #592]	; (800ddc4 <__gethex+0x2dc>)
 800db72:	f7ff feeb 	bl	800d94c <strncmp>
 800db76:	b978      	cbnz	r0, 800db98 <__gethex+0xb0>
 800db78:	b946      	cbnz	r6, 800db8c <__gethex+0xa4>
 800db7a:	1c6e      	adds	r6, r5, #1
 800db7c:	4632      	mov	r2, r6
 800db7e:	4615      	mov	r5, r2
 800db80:	7828      	ldrb	r0, [r5, #0]
 800db82:	3201      	adds	r2, #1
 800db84:	f7ff ff9a 	bl	800dabc <__hexdig_fun>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d1f8      	bne.n	800db7e <__gethex+0x96>
 800db8c:	1b73      	subs	r3, r6, r5
 800db8e:	009e      	lsls	r6, r3, #2
 800db90:	e004      	b.n	800db9c <__gethex+0xb4>
 800db92:	2400      	movs	r4, #0
 800db94:	4626      	mov	r6, r4
 800db96:	e7e1      	b.n	800db5c <__gethex+0x74>
 800db98:	2e00      	cmp	r6, #0
 800db9a:	d1f7      	bne.n	800db8c <__gethex+0xa4>
 800db9c:	782b      	ldrb	r3, [r5, #0]
 800db9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dba2:	2b50      	cmp	r3, #80	; 0x50
 800dba4:	d13d      	bne.n	800dc22 <__gethex+0x13a>
 800dba6:	786b      	ldrb	r3, [r5, #1]
 800dba8:	2b2b      	cmp	r3, #43	; 0x2b
 800dbaa:	d02f      	beq.n	800dc0c <__gethex+0x124>
 800dbac:	2b2d      	cmp	r3, #45	; 0x2d
 800dbae:	d031      	beq.n	800dc14 <__gethex+0x12c>
 800dbb0:	f04f 0b00 	mov.w	fp, #0
 800dbb4:	1c69      	adds	r1, r5, #1
 800dbb6:	7808      	ldrb	r0, [r1, #0]
 800dbb8:	f7ff ff80 	bl	800dabc <__hexdig_fun>
 800dbbc:	1e42      	subs	r2, r0, #1
 800dbbe:	b2d2      	uxtb	r2, r2
 800dbc0:	2a18      	cmp	r2, #24
 800dbc2:	d82e      	bhi.n	800dc22 <__gethex+0x13a>
 800dbc4:	f1a0 0210 	sub.w	r2, r0, #16
 800dbc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dbcc:	f7ff ff76 	bl	800dabc <__hexdig_fun>
 800dbd0:	f100 3cff 	add.w	ip, r0, #4294967295
 800dbd4:	fa5f fc8c 	uxtb.w	ip, ip
 800dbd8:	f1bc 0f18 	cmp.w	ip, #24
 800dbdc:	d91d      	bls.n	800dc1a <__gethex+0x132>
 800dbde:	f1bb 0f00 	cmp.w	fp, #0
 800dbe2:	d000      	beq.n	800dbe6 <__gethex+0xfe>
 800dbe4:	4252      	negs	r2, r2
 800dbe6:	4416      	add	r6, r2
 800dbe8:	f8ca 1000 	str.w	r1, [sl]
 800dbec:	b1dc      	cbz	r4, 800dc26 <__gethex+0x13e>
 800dbee:	9b01      	ldr	r3, [sp, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	bf14      	ite	ne
 800dbf4:	f04f 0800 	movne.w	r8, #0
 800dbf8:	f04f 0806 	moveq.w	r8, #6
 800dbfc:	4640      	mov	r0, r8
 800dbfe:	b005      	add	sp, #20
 800dc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc04:	4645      	mov	r5, r8
 800dc06:	4626      	mov	r6, r4
 800dc08:	2401      	movs	r4, #1
 800dc0a:	e7c7      	b.n	800db9c <__gethex+0xb4>
 800dc0c:	f04f 0b00 	mov.w	fp, #0
 800dc10:	1ca9      	adds	r1, r5, #2
 800dc12:	e7d0      	b.n	800dbb6 <__gethex+0xce>
 800dc14:	f04f 0b01 	mov.w	fp, #1
 800dc18:	e7fa      	b.n	800dc10 <__gethex+0x128>
 800dc1a:	230a      	movs	r3, #10
 800dc1c:	fb03 0002 	mla	r0, r3, r2, r0
 800dc20:	e7d0      	b.n	800dbc4 <__gethex+0xdc>
 800dc22:	4629      	mov	r1, r5
 800dc24:	e7e0      	b.n	800dbe8 <__gethex+0x100>
 800dc26:	4621      	mov	r1, r4
 800dc28:	eba5 0308 	sub.w	r3, r5, r8
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	2b07      	cmp	r3, #7
 800dc30:	dc0a      	bgt.n	800dc48 <__gethex+0x160>
 800dc32:	4648      	mov	r0, r9
 800dc34:	f7fd fbbc 	bl	800b3b0 <_Balloc>
 800dc38:	4604      	mov	r4, r0
 800dc3a:	b940      	cbnz	r0, 800dc4e <__gethex+0x166>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	21e4      	movs	r1, #228	; 0xe4
 800dc40:	4b61      	ldr	r3, [pc, #388]	; (800ddc8 <__gethex+0x2e0>)
 800dc42:	4862      	ldr	r0, [pc, #392]	; (800ddcc <__gethex+0x2e4>)
 800dc44:	f7fc fc2c 	bl	800a4a0 <__assert_func>
 800dc48:	3101      	adds	r1, #1
 800dc4a:	105b      	asrs	r3, r3, #1
 800dc4c:	e7ef      	b.n	800dc2e <__gethex+0x146>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	469b      	mov	fp, r3
 800dc52:	f100 0a14 	add.w	sl, r0, #20
 800dc56:	f8cd a004 	str.w	sl, [sp, #4]
 800dc5a:	45a8      	cmp	r8, r5
 800dc5c:	d344      	bcc.n	800dce8 <__gethex+0x200>
 800dc5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dc62:	4658      	mov	r0, fp
 800dc64:	f848 bb04 	str.w	fp, [r8], #4
 800dc68:	eba8 080a 	sub.w	r8, r8, sl
 800dc6c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800dc70:	6122      	str	r2, [r4, #16]
 800dc72:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800dc76:	f7fd fc8d 	bl	800b594 <__hi0bits>
 800dc7a:	683d      	ldr	r5, [r7, #0]
 800dc7c:	eba8 0800 	sub.w	r8, r8, r0
 800dc80:	45a8      	cmp	r8, r5
 800dc82:	dd59      	ble.n	800dd38 <__gethex+0x250>
 800dc84:	eba8 0805 	sub.w	r8, r8, r5
 800dc88:	4641      	mov	r1, r8
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f7fe f80b 	bl	800bca6 <__any_on>
 800dc90:	4683      	mov	fp, r0
 800dc92:	b1b8      	cbz	r0, 800dcc4 <__gethex+0x1dc>
 800dc94:	f04f 0b01 	mov.w	fp, #1
 800dc98:	f108 33ff 	add.w	r3, r8, #4294967295
 800dc9c:	1159      	asrs	r1, r3, #5
 800dc9e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dca2:	f003 021f 	and.w	r2, r3, #31
 800dca6:	fa0b f202 	lsl.w	r2, fp, r2
 800dcaa:	420a      	tst	r2, r1
 800dcac:	d00a      	beq.n	800dcc4 <__gethex+0x1dc>
 800dcae:	455b      	cmp	r3, fp
 800dcb0:	dd06      	ble.n	800dcc0 <__gethex+0x1d8>
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	f1a8 0102 	sub.w	r1, r8, #2
 800dcb8:	f7fd fff5 	bl	800bca6 <__any_on>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	d138      	bne.n	800dd32 <__gethex+0x24a>
 800dcc0:	f04f 0b02 	mov.w	fp, #2
 800dcc4:	4641      	mov	r1, r8
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f7ff fea5 	bl	800da16 <rshift>
 800dccc:	4446      	add	r6, r8
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	42b3      	cmp	r3, r6
 800dcd2:	da41      	bge.n	800dd58 <__gethex+0x270>
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	4648      	mov	r0, r9
 800dcd8:	f7fd fbaa 	bl	800b430 <_Bfree>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dce0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800dce4:	6013      	str	r3, [r2, #0]
 800dce6:	e789      	b.n	800dbfc <__gethex+0x114>
 800dce8:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800dcec:	2a2e      	cmp	r2, #46	; 0x2e
 800dcee:	d014      	beq.n	800dd1a <__gethex+0x232>
 800dcf0:	2b20      	cmp	r3, #32
 800dcf2:	d106      	bne.n	800dd02 <__gethex+0x21a>
 800dcf4:	9b01      	ldr	r3, [sp, #4]
 800dcf6:	f843 bb04 	str.w	fp, [r3], #4
 800dcfa:	f04f 0b00 	mov.w	fp, #0
 800dcfe:	9301      	str	r3, [sp, #4]
 800dd00:	465b      	mov	r3, fp
 800dd02:	7828      	ldrb	r0, [r5, #0]
 800dd04:	9303      	str	r3, [sp, #12]
 800dd06:	f7ff fed9 	bl	800dabc <__hexdig_fun>
 800dd0a:	9b03      	ldr	r3, [sp, #12]
 800dd0c:	f000 000f 	and.w	r0, r0, #15
 800dd10:	4098      	lsls	r0, r3
 800dd12:	ea4b 0b00 	orr.w	fp, fp, r0
 800dd16:	3304      	adds	r3, #4
 800dd18:	e79f      	b.n	800dc5a <__gethex+0x172>
 800dd1a:	45a8      	cmp	r8, r5
 800dd1c:	d8e8      	bhi.n	800dcf0 <__gethex+0x208>
 800dd1e:	2201      	movs	r2, #1
 800dd20:	4628      	mov	r0, r5
 800dd22:	4928      	ldr	r1, [pc, #160]	; (800ddc4 <__gethex+0x2dc>)
 800dd24:	9303      	str	r3, [sp, #12]
 800dd26:	f7ff fe11 	bl	800d94c <strncmp>
 800dd2a:	9b03      	ldr	r3, [sp, #12]
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	d1df      	bne.n	800dcf0 <__gethex+0x208>
 800dd30:	e793      	b.n	800dc5a <__gethex+0x172>
 800dd32:	f04f 0b03 	mov.w	fp, #3
 800dd36:	e7c5      	b.n	800dcc4 <__gethex+0x1dc>
 800dd38:	da0b      	bge.n	800dd52 <__gethex+0x26a>
 800dd3a:	eba5 0808 	sub.w	r8, r5, r8
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4642      	mov	r2, r8
 800dd42:	4648      	mov	r0, r9
 800dd44:	f7fd fd8c 	bl	800b860 <__lshift>
 800dd48:	4604      	mov	r4, r0
 800dd4a:	eba6 0608 	sub.w	r6, r6, r8
 800dd4e:	f100 0a14 	add.w	sl, r0, #20
 800dd52:	f04f 0b00 	mov.w	fp, #0
 800dd56:	e7ba      	b.n	800dcce <__gethex+0x1e6>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	42b3      	cmp	r3, r6
 800dd5c:	dd74      	ble.n	800de48 <__gethex+0x360>
 800dd5e:	1b9e      	subs	r6, r3, r6
 800dd60:	42b5      	cmp	r5, r6
 800dd62:	dc35      	bgt.n	800ddd0 <__gethex+0x2e8>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d023      	beq.n	800ddb2 <__gethex+0x2ca>
 800dd6a:	2b03      	cmp	r3, #3
 800dd6c:	d025      	beq.n	800ddba <__gethex+0x2d2>
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d115      	bne.n	800dd9e <__gethex+0x2b6>
 800dd72:	42b5      	cmp	r5, r6
 800dd74:	d113      	bne.n	800dd9e <__gethex+0x2b6>
 800dd76:	2d01      	cmp	r5, #1
 800dd78:	d10b      	bne.n	800dd92 <__gethex+0x2aa>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	9a02      	ldr	r2, [sp, #8]
 800dd7e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800dd82:	6013      	str	r3, [r2, #0]
 800dd84:	2301      	movs	r3, #1
 800dd86:	6123      	str	r3, [r4, #16]
 800dd88:	f8ca 3000 	str.w	r3, [sl]
 800dd8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd8e:	601c      	str	r4, [r3, #0]
 800dd90:	e734      	b.n	800dbfc <__gethex+0x114>
 800dd92:	4620      	mov	r0, r4
 800dd94:	1e69      	subs	r1, r5, #1
 800dd96:	f7fd ff86 	bl	800bca6 <__any_on>
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	d1ed      	bne.n	800dd7a <__gethex+0x292>
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4648      	mov	r0, r9
 800dda2:	f7fd fb45 	bl	800b430 <_Bfree>
 800dda6:	2300      	movs	r3, #0
 800dda8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddaa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ddae:	6013      	str	r3, [r2, #0]
 800ddb0:	e724      	b.n	800dbfc <__gethex+0x114>
 800ddb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d1f2      	bne.n	800dd9e <__gethex+0x2b6>
 800ddb8:	e7df      	b.n	800dd7a <__gethex+0x292>
 800ddba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1dc      	bne.n	800dd7a <__gethex+0x292>
 800ddc0:	e7ed      	b.n	800dd9e <__gethex+0x2b6>
 800ddc2:	bf00      	nop
 800ddc4:	0800f1b4 	.word	0x0800f1b4
 800ddc8:	0800f049 	.word	0x0800f049
 800ddcc:	0800f33d 	.word	0x0800f33d
 800ddd0:	f106 38ff 	add.w	r8, r6, #4294967295
 800ddd4:	f1bb 0f00 	cmp.w	fp, #0
 800ddd8:	d133      	bne.n	800de42 <__gethex+0x35a>
 800ddda:	f1b8 0f00 	cmp.w	r8, #0
 800ddde:	d004      	beq.n	800ddea <__gethex+0x302>
 800dde0:	4641      	mov	r1, r8
 800dde2:	4620      	mov	r0, r4
 800dde4:	f7fd ff5f 	bl	800bca6 <__any_on>
 800dde8:	4683      	mov	fp, r0
 800ddea:	2301      	movs	r3, #1
 800ddec:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ddf0:	f008 081f 	and.w	r8, r8, #31
 800ddf4:	fa03 f308 	lsl.w	r3, r3, r8
 800ddf8:	f04f 0802 	mov.w	r8, #2
 800ddfc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800de00:	4631      	mov	r1, r6
 800de02:	4213      	tst	r3, r2
 800de04:	4620      	mov	r0, r4
 800de06:	bf18      	it	ne
 800de08:	f04b 0b02 	orrne.w	fp, fp, #2
 800de0c:	1bad      	subs	r5, r5, r6
 800de0e:	f7ff fe02 	bl	800da16 <rshift>
 800de12:	687e      	ldr	r6, [r7, #4]
 800de14:	f1bb 0f00 	cmp.w	fp, #0
 800de18:	d04a      	beq.n	800deb0 <__gethex+0x3c8>
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2b02      	cmp	r3, #2
 800de1e:	d016      	beq.n	800de4e <__gethex+0x366>
 800de20:	2b03      	cmp	r3, #3
 800de22:	d018      	beq.n	800de56 <__gethex+0x36e>
 800de24:	2b01      	cmp	r3, #1
 800de26:	d109      	bne.n	800de3c <__gethex+0x354>
 800de28:	f01b 0f02 	tst.w	fp, #2
 800de2c:	d006      	beq.n	800de3c <__gethex+0x354>
 800de2e:	f8da 3000 	ldr.w	r3, [sl]
 800de32:	ea4b 0b03 	orr.w	fp, fp, r3
 800de36:	f01b 0f01 	tst.w	fp, #1
 800de3a:	d10f      	bne.n	800de5c <__gethex+0x374>
 800de3c:	f048 0810 	orr.w	r8, r8, #16
 800de40:	e036      	b.n	800deb0 <__gethex+0x3c8>
 800de42:	f04f 0b01 	mov.w	fp, #1
 800de46:	e7d0      	b.n	800ddea <__gethex+0x302>
 800de48:	f04f 0801 	mov.w	r8, #1
 800de4c:	e7e2      	b.n	800de14 <__gethex+0x32c>
 800de4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de50:	f1c3 0301 	rsb	r3, r3, #1
 800de54:	930f      	str	r3, [sp, #60]	; 0x3c
 800de56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d0ef      	beq.n	800de3c <__gethex+0x354>
 800de5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800de60:	f104 0214 	add.w	r2, r4, #20
 800de64:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	2300      	movs	r3, #0
 800de6c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800de70:	4694      	mov	ip, r2
 800de72:	f852 1b04 	ldr.w	r1, [r2], #4
 800de76:	f1b1 3fff 	cmp.w	r1, #4294967295
 800de7a:	d01e      	beq.n	800deba <__gethex+0x3d2>
 800de7c:	3101      	adds	r1, #1
 800de7e:	f8cc 1000 	str.w	r1, [ip]
 800de82:	f1b8 0f02 	cmp.w	r8, #2
 800de86:	f104 0214 	add.w	r2, r4, #20
 800de8a:	d13d      	bne.n	800df08 <__gethex+0x420>
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	3b01      	subs	r3, #1
 800de90:	42ab      	cmp	r3, r5
 800de92:	d10b      	bne.n	800deac <__gethex+0x3c4>
 800de94:	2301      	movs	r3, #1
 800de96:	1169      	asrs	r1, r5, #5
 800de98:	f005 051f 	and.w	r5, r5, #31
 800de9c:	fa03 f505 	lsl.w	r5, r3, r5
 800dea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dea4:	421d      	tst	r5, r3
 800dea6:	bf18      	it	ne
 800dea8:	f04f 0801 	movne.w	r8, #1
 800deac:	f048 0820 	orr.w	r8, r8, #32
 800deb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800deb2:	601c      	str	r4, [r3, #0]
 800deb4:	9b02      	ldr	r3, [sp, #8]
 800deb6:	601e      	str	r6, [r3, #0]
 800deb8:	e6a0      	b.n	800dbfc <__gethex+0x114>
 800deba:	4290      	cmp	r0, r2
 800debc:	f842 3c04 	str.w	r3, [r2, #-4]
 800dec0:	d8d6      	bhi.n	800de70 <__gethex+0x388>
 800dec2:	68a2      	ldr	r2, [r4, #8]
 800dec4:	4593      	cmp	fp, r2
 800dec6:	db17      	blt.n	800def8 <__gethex+0x410>
 800dec8:	6861      	ldr	r1, [r4, #4]
 800deca:	4648      	mov	r0, r9
 800decc:	3101      	adds	r1, #1
 800dece:	f7fd fa6f 	bl	800b3b0 <_Balloc>
 800ded2:	4682      	mov	sl, r0
 800ded4:	b918      	cbnz	r0, 800dede <__gethex+0x3f6>
 800ded6:	4602      	mov	r2, r0
 800ded8:	2184      	movs	r1, #132	; 0x84
 800deda:	4b1a      	ldr	r3, [pc, #104]	; (800df44 <__gethex+0x45c>)
 800dedc:	e6b1      	b.n	800dc42 <__gethex+0x15a>
 800dede:	6922      	ldr	r2, [r4, #16]
 800dee0:	f104 010c 	add.w	r1, r4, #12
 800dee4:	3202      	adds	r2, #2
 800dee6:	0092      	lsls	r2, r2, #2
 800dee8:	300c      	adds	r0, #12
 800deea:	f7fc fac6 	bl	800a47a <memcpy>
 800deee:	4621      	mov	r1, r4
 800def0:	4648      	mov	r0, r9
 800def2:	f7fd fa9d 	bl	800b430 <_Bfree>
 800def6:	4654      	mov	r4, sl
 800def8:	6922      	ldr	r2, [r4, #16]
 800defa:	1c51      	adds	r1, r2, #1
 800defc:	6121      	str	r1, [r4, #16]
 800defe:	2101      	movs	r1, #1
 800df00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800df04:	6151      	str	r1, [r2, #20]
 800df06:	e7bc      	b.n	800de82 <__gethex+0x39a>
 800df08:	6921      	ldr	r1, [r4, #16]
 800df0a:	4559      	cmp	r1, fp
 800df0c:	dd0b      	ble.n	800df26 <__gethex+0x43e>
 800df0e:	2101      	movs	r1, #1
 800df10:	4620      	mov	r0, r4
 800df12:	f7ff fd80 	bl	800da16 <rshift>
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	3601      	adds	r6, #1
 800df1a:	42b3      	cmp	r3, r6
 800df1c:	f6ff aeda 	blt.w	800dcd4 <__gethex+0x1ec>
 800df20:	f04f 0801 	mov.w	r8, #1
 800df24:	e7c2      	b.n	800deac <__gethex+0x3c4>
 800df26:	f015 051f 	ands.w	r5, r5, #31
 800df2a:	d0f9      	beq.n	800df20 <__gethex+0x438>
 800df2c:	9b01      	ldr	r3, [sp, #4]
 800df2e:	f1c5 0520 	rsb	r5, r5, #32
 800df32:	441a      	add	r2, r3
 800df34:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800df38:	f7fd fb2c 	bl	800b594 <__hi0bits>
 800df3c:	42a8      	cmp	r0, r5
 800df3e:	dbe6      	blt.n	800df0e <__gethex+0x426>
 800df40:	e7ee      	b.n	800df20 <__gethex+0x438>
 800df42:	bf00      	nop
 800df44:	0800f049 	.word	0x0800f049

0800df48 <L_shift>:
 800df48:	f1c2 0208 	rsb	r2, r2, #8
 800df4c:	0092      	lsls	r2, r2, #2
 800df4e:	b570      	push	{r4, r5, r6, lr}
 800df50:	f1c2 0620 	rsb	r6, r2, #32
 800df54:	6843      	ldr	r3, [r0, #4]
 800df56:	6804      	ldr	r4, [r0, #0]
 800df58:	fa03 f506 	lsl.w	r5, r3, r6
 800df5c:	432c      	orrs	r4, r5
 800df5e:	40d3      	lsrs	r3, r2
 800df60:	6004      	str	r4, [r0, #0]
 800df62:	f840 3f04 	str.w	r3, [r0, #4]!
 800df66:	4288      	cmp	r0, r1
 800df68:	d3f4      	bcc.n	800df54 <L_shift+0xc>
 800df6a:	bd70      	pop	{r4, r5, r6, pc}

0800df6c <__match>:
 800df6c:	b530      	push	{r4, r5, lr}
 800df6e:	6803      	ldr	r3, [r0, #0]
 800df70:	3301      	adds	r3, #1
 800df72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df76:	b914      	cbnz	r4, 800df7e <__match+0x12>
 800df78:	6003      	str	r3, [r0, #0]
 800df7a:	2001      	movs	r0, #1
 800df7c:	bd30      	pop	{r4, r5, pc}
 800df7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800df86:	2d19      	cmp	r5, #25
 800df88:	bf98      	it	ls
 800df8a:	3220      	addls	r2, #32
 800df8c:	42a2      	cmp	r2, r4
 800df8e:	d0f0      	beq.n	800df72 <__match+0x6>
 800df90:	2000      	movs	r0, #0
 800df92:	e7f3      	b.n	800df7c <__match+0x10>

0800df94 <__hexnan>:
 800df94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df98:	2500      	movs	r5, #0
 800df9a:	680b      	ldr	r3, [r1, #0]
 800df9c:	4682      	mov	sl, r0
 800df9e:	115e      	asrs	r6, r3, #5
 800dfa0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dfa4:	f013 031f 	ands.w	r3, r3, #31
 800dfa8:	bf18      	it	ne
 800dfaa:	3604      	addne	r6, #4
 800dfac:	1f37      	subs	r7, r6, #4
 800dfae:	4690      	mov	r8, r2
 800dfb0:	46b9      	mov	r9, r7
 800dfb2:	463c      	mov	r4, r7
 800dfb4:	46ab      	mov	fp, r5
 800dfb6:	b087      	sub	sp, #28
 800dfb8:	6801      	ldr	r1, [r0, #0]
 800dfba:	9301      	str	r3, [sp, #4]
 800dfbc:	f846 5c04 	str.w	r5, [r6, #-4]
 800dfc0:	9502      	str	r5, [sp, #8]
 800dfc2:	784a      	ldrb	r2, [r1, #1]
 800dfc4:	1c4b      	adds	r3, r1, #1
 800dfc6:	9303      	str	r3, [sp, #12]
 800dfc8:	b342      	cbz	r2, 800e01c <__hexnan+0x88>
 800dfca:	4610      	mov	r0, r2
 800dfcc:	9105      	str	r1, [sp, #20]
 800dfce:	9204      	str	r2, [sp, #16]
 800dfd0:	f7ff fd74 	bl	800dabc <__hexdig_fun>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d14f      	bne.n	800e078 <__hexnan+0xe4>
 800dfd8:	9a04      	ldr	r2, [sp, #16]
 800dfda:	9905      	ldr	r1, [sp, #20]
 800dfdc:	2a20      	cmp	r2, #32
 800dfde:	d818      	bhi.n	800e012 <__hexnan+0x7e>
 800dfe0:	9b02      	ldr	r3, [sp, #8]
 800dfe2:	459b      	cmp	fp, r3
 800dfe4:	dd13      	ble.n	800e00e <__hexnan+0x7a>
 800dfe6:	454c      	cmp	r4, r9
 800dfe8:	d206      	bcs.n	800dff8 <__hexnan+0x64>
 800dfea:	2d07      	cmp	r5, #7
 800dfec:	dc04      	bgt.n	800dff8 <__hexnan+0x64>
 800dfee:	462a      	mov	r2, r5
 800dff0:	4649      	mov	r1, r9
 800dff2:	4620      	mov	r0, r4
 800dff4:	f7ff ffa8 	bl	800df48 <L_shift>
 800dff8:	4544      	cmp	r4, r8
 800dffa:	d950      	bls.n	800e09e <__hexnan+0x10a>
 800dffc:	2300      	movs	r3, #0
 800dffe:	f1a4 0904 	sub.w	r9, r4, #4
 800e002:	f844 3c04 	str.w	r3, [r4, #-4]
 800e006:	461d      	mov	r5, r3
 800e008:	464c      	mov	r4, r9
 800e00a:	f8cd b008 	str.w	fp, [sp, #8]
 800e00e:	9903      	ldr	r1, [sp, #12]
 800e010:	e7d7      	b.n	800dfc2 <__hexnan+0x2e>
 800e012:	2a29      	cmp	r2, #41	; 0x29
 800e014:	d155      	bne.n	800e0c2 <__hexnan+0x12e>
 800e016:	3102      	adds	r1, #2
 800e018:	f8ca 1000 	str.w	r1, [sl]
 800e01c:	f1bb 0f00 	cmp.w	fp, #0
 800e020:	d04f      	beq.n	800e0c2 <__hexnan+0x12e>
 800e022:	454c      	cmp	r4, r9
 800e024:	d206      	bcs.n	800e034 <__hexnan+0xa0>
 800e026:	2d07      	cmp	r5, #7
 800e028:	dc04      	bgt.n	800e034 <__hexnan+0xa0>
 800e02a:	462a      	mov	r2, r5
 800e02c:	4649      	mov	r1, r9
 800e02e:	4620      	mov	r0, r4
 800e030:	f7ff ff8a 	bl	800df48 <L_shift>
 800e034:	4544      	cmp	r4, r8
 800e036:	d934      	bls.n	800e0a2 <__hexnan+0x10e>
 800e038:	4623      	mov	r3, r4
 800e03a:	f1a8 0204 	sub.w	r2, r8, #4
 800e03e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e042:	429f      	cmp	r7, r3
 800e044:	f842 1f04 	str.w	r1, [r2, #4]!
 800e048:	d2f9      	bcs.n	800e03e <__hexnan+0xaa>
 800e04a:	1b3b      	subs	r3, r7, r4
 800e04c:	f023 0303 	bic.w	r3, r3, #3
 800e050:	3304      	adds	r3, #4
 800e052:	3e03      	subs	r6, #3
 800e054:	3401      	adds	r4, #1
 800e056:	42a6      	cmp	r6, r4
 800e058:	bf38      	it	cc
 800e05a:	2304      	movcc	r3, #4
 800e05c:	2200      	movs	r2, #0
 800e05e:	4443      	add	r3, r8
 800e060:	f843 2b04 	str.w	r2, [r3], #4
 800e064:	429f      	cmp	r7, r3
 800e066:	d2fb      	bcs.n	800e060 <__hexnan+0xcc>
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	b91b      	cbnz	r3, 800e074 <__hexnan+0xe0>
 800e06c:	4547      	cmp	r7, r8
 800e06e:	d126      	bne.n	800e0be <__hexnan+0x12a>
 800e070:	2301      	movs	r3, #1
 800e072:	603b      	str	r3, [r7, #0]
 800e074:	2005      	movs	r0, #5
 800e076:	e025      	b.n	800e0c4 <__hexnan+0x130>
 800e078:	3501      	adds	r5, #1
 800e07a:	2d08      	cmp	r5, #8
 800e07c:	f10b 0b01 	add.w	fp, fp, #1
 800e080:	dd06      	ble.n	800e090 <__hexnan+0xfc>
 800e082:	4544      	cmp	r4, r8
 800e084:	d9c3      	bls.n	800e00e <__hexnan+0x7a>
 800e086:	2300      	movs	r3, #0
 800e088:	2501      	movs	r5, #1
 800e08a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e08e:	3c04      	subs	r4, #4
 800e090:	6822      	ldr	r2, [r4, #0]
 800e092:	f000 000f 	and.w	r0, r0, #15
 800e096:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e09a:	6020      	str	r0, [r4, #0]
 800e09c:	e7b7      	b.n	800e00e <__hexnan+0x7a>
 800e09e:	2508      	movs	r5, #8
 800e0a0:	e7b5      	b.n	800e00e <__hexnan+0x7a>
 800e0a2:	9b01      	ldr	r3, [sp, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d0df      	beq.n	800e068 <__hexnan+0xd4>
 800e0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ac:	f1c3 0320 	rsb	r3, r3, #32
 800e0b0:	40da      	lsrs	r2, r3
 800e0b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e0bc:	e7d4      	b.n	800e068 <__hexnan+0xd4>
 800e0be:	3f04      	subs	r7, #4
 800e0c0:	e7d2      	b.n	800e068 <__hexnan+0xd4>
 800e0c2:	2004      	movs	r0, #4
 800e0c4:	b007      	add	sp, #28
 800e0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0ca <__ascii_mbtowc>:
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	b901      	cbnz	r1, 800e0d0 <__ascii_mbtowc+0x6>
 800e0ce:	a901      	add	r1, sp, #4
 800e0d0:	b142      	cbz	r2, 800e0e4 <__ascii_mbtowc+0x1a>
 800e0d2:	b14b      	cbz	r3, 800e0e8 <__ascii_mbtowc+0x1e>
 800e0d4:	7813      	ldrb	r3, [r2, #0]
 800e0d6:	600b      	str	r3, [r1, #0]
 800e0d8:	7812      	ldrb	r2, [r2, #0]
 800e0da:	1e10      	subs	r0, r2, #0
 800e0dc:	bf18      	it	ne
 800e0de:	2001      	movne	r0, #1
 800e0e0:	b002      	add	sp, #8
 800e0e2:	4770      	bx	lr
 800e0e4:	4610      	mov	r0, r2
 800e0e6:	e7fb      	b.n	800e0e0 <__ascii_mbtowc+0x16>
 800e0e8:	f06f 0001 	mvn.w	r0, #1
 800e0ec:	e7f8      	b.n	800e0e0 <__ascii_mbtowc+0x16>

0800e0ee <_realloc_r>:
 800e0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f2:	4680      	mov	r8, r0
 800e0f4:	4614      	mov	r4, r2
 800e0f6:	460e      	mov	r6, r1
 800e0f8:	b921      	cbnz	r1, 800e104 <_realloc_r+0x16>
 800e0fa:	4611      	mov	r1, r2
 800e0fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e100:	f7fd b8ca 	b.w	800b298 <_malloc_r>
 800e104:	b92a      	cbnz	r2, 800e112 <_realloc_r+0x24>
 800e106:	f7fd f857 	bl	800b1b8 <_free_r>
 800e10a:	4625      	mov	r5, r4
 800e10c:	4628      	mov	r0, r5
 800e10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e112:	f000 f8e1 	bl	800e2d8 <_malloc_usable_size_r>
 800e116:	4284      	cmp	r4, r0
 800e118:	4607      	mov	r7, r0
 800e11a:	d802      	bhi.n	800e122 <_realloc_r+0x34>
 800e11c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e120:	d812      	bhi.n	800e148 <_realloc_r+0x5a>
 800e122:	4621      	mov	r1, r4
 800e124:	4640      	mov	r0, r8
 800e126:	f7fd f8b7 	bl	800b298 <_malloc_r>
 800e12a:	4605      	mov	r5, r0
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d0ed      	beq.n	800e10c <_realloc_r+0x1e>
 800e130:	42bc      	cmp	r4, r7
 800e132:	4622      	mov	r2, r4
 800e134:	4631      	mov	r1, r6
 800e136:	bf28      	it	cs
 800e138:	463a      	movcs	r2, r7
 800e13a:	f7fc f99e 	bl	800a47a <memcpy>
 800e13e:	4631      	mov	r1, r6
 800e140:	4640      	mov	r0, r8
 800e142:	f7fd f839 	bl	800b1b8 <_free_r>
 800e146:	e7e1      	b.n	800e10c <_realloc_r+0x1e>
 800e148:	4635      	mov	r5, r6
 800e14a:	e7df      	b.n	800e10c <_realloc_r+0x1e>

0800e14c <_strtoul_l.constprop.0>:
 800e14c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e150:	4686      	mov	lr, r0
 800e152:	460d      	mov	r5, r1
 800e154:	4f35      	ldr	r7, [pc, #212]	; (800e22c <_strtoul_l.constprop.0+0xe0>)
 800e156:	4628      	mov	r0, r5
 800e158:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e15c:	5d3e      	ldrb	r6, [r7, r4]
 800e15e:	f016 0608 	ands.w	r6, r6, #8
 800e162:	d1f8      	bne.n	800e156 <_strtoul_l.constprop.0+0xa>
 800e164:	2c2d      	cmp	r4, #45	; 0x2d
 800e166:	d130      	bne.n	800e1ca <_strtoul_l.constprop.0+0x7e>
 800e168:	2601      	movs	r6, #1
 800e16a:	782c      	ldrb	r4, [r5, #0]
 800e16c:	1c85      	adds	r5, r0, #2
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d057      	beq.n	800e222 <_strtoul_l.constprop.0+0xd6>
 800e172:	2b10      	cmp	r3, #16
 800e174:	d109      	bne.n	800e18a <_strtoul_l.constprop.0+0x3e>
 800e176:	2c30      	cmp	r4, #48	; 0x30
 800e178:	d107      	bne.n	800e18a <_strtoul_l.constprop.0+0x3e>
 800e17a:	7828      	ldrb	r0, [r5, #0]
 800e17c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e180:	2858      	cmp	r0, #88	; 0x58
 800e182:	d149      	bne.n	800e218 <_strtoul_l.constprop.0+0xcc>
 800e184:	2310      	movs	r3, #16
 800e186:	786c      	ldrb	r4, [r5, #1]
 800e188:	3502      	adds	r5, #2
 800e18a:	f04f 38ff 	mov.w	r8, #4294967295
 800e18e:	fbb8 f8f3 	udiv	r8, r8, r3
 800e192:	2700      	movs	r7, #0
 800e194:	fb03 f908 	mul.w	r9, r3, r8
 800e198:	4638      	mov	r0, r7
 800e19a:	ea6f 0909 	mvn.w	r9, r9
 800e19e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e1a2:	f1bc 0f09 	cmp.w	ip, #9
 800e1a6:	d815      	bhi.n	800e1d4 <_strtoul_l.constprop.0+0x88>
 800e1a8:	4664      	mov	r4, ip
 800e1aa:	42a3      	cmp	r3, r4
 800e1ac:	dd23      	ble.n	800e1f6 <_strtoul_l.constprop.0+0xaa>
 800e1ae:	f1b7 3fff 	cmp.w	r7, #4294967295
 800e1b2:	d007      	beq.n	800e1c4 <_strtoul_l.constprop.0+0x78>
 800e1b4:	4580      	cmp	r8, r0
 800e1b6:	d31b      	bcc.n	800e1f0 <_strtoul_l.constprop.0+0xa4>
 800e1b8:	d101      	bne.n	800e1be <_strtoul_l.constprop.0+0x72>
 800e1ba:	45a1      	cmp	r9, r4
 800e1bc:	db18      	blt.n	800e1f0 <_strtoul_l.constprop.0+0xa4>
 800e1be:	2701      	movs	r7, #1
 800e1c0:	fb00 4003 	mla	r0, r0, r3, r4
 800e1c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1c8:	e7e9      	b.n	800e19e <_strtoul_l.constprop.0+0x52>
 800e1ca:	2c2b      	cmp	r4, #43	; 0x2b
 800e1cc:	bf04      	itt	eq
 800e1ce:	782c      	ldrbeq	r4, [r5, #0]
 800e1d0:	1c85      	addeq	r5, r0, #2
 800e1d2:	e7cc      	b.n	800e16e <_strtoul_l.constprop.0+0x22>
 800e1d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e1d8:	f1bc 0f19 	cmp.w	ip, #25
 800e1dc:	d801      	bhi.n	800e1e2 <_strtoul_l.constprop.0+0x96>
 800e1de:	3c37      	subs	r4, #55	; 0x37
 800e1e0:	e7e3      	b.n	800e1aa <_strtoul_l.constprop.0+0x5e>
 800e1e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e1e6:	f1bc 0f19 	cmp.w	ip, #25
 800e1ea:	d804      	bhi.n	800e1f6 <_strtoul_l.constprop.0+0xaa>
 800e1ec:	3c57      	subs	r4, #87	; 0x57
 800e1ee:	e7dc      	b.n	800e1aa <_strtoul_l.constprop.0+0x5e>
 800e1f0:	f04f 37ff 	mov.w	r7, #4294967295
 800e1f4:	e7e6      	b.n	800e1c4 <_strtoul_l.constprop.0+0x78>
 800e1f6:	1c7b      	adds	r3, r7, #1
 800e1f8:	d106      	bne.n	800e208 <_strtoul_l.constprop.0+0xbc>
 800e1fa:	2322      	movs	r3, #34	; 0x22
 800e1fc:	4638      	mov	r0, r7
 800e1fe:	f8ce 3000 	str.w	r3, [lr]
 800e202:	b932      	cbnz	r2, 800e212 <_strtoul_l.constprop.0+0xc6>
 800e204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e208:	b106      	cbz	r6, 800e20c <_strtoul_l.constprop.0+0xc0>
 800e20a:	4240      	negs	r0, r0
 800e20c:	2a00      	cmp	r2, #0
 800e20e:	d0f9      	beq.n	800e204 <_strtoul_l.constprop.0+0xb8>
 800e210:	b107      	cbz	r7, 800e214 <_strtoul_l.constprop.0+0xc8>
 800e212:	1e69      	subs	r1, r5, #1
 800e214:	6011      	str	r1, [r2, #0]
 800e216:	e7f5      	b.n	800e204 <_strtoul_l.constprop.0+0xb8>
 800e218:	2430      	movs	r4, #48	; 0x30
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d1b5      	bne.n	800e18a <_strtoul_l.constprop.0+0x3e>
 800e21e:	2308      	movs	r3, #8
 800e220:	e7b3      	b.n	800e18a <_strtoul_l.constprop.0+0x3e>
 800e222:	2c30      	cmp	r4, #48	; 0x30
 800e224:	d0a9      	beq.n	800e17a <_strtoul_l.constprop.0+0x2e>
 800e226:	230a      	movs	r3, #10
 800e228:	e7af      	b.n	800e18a <_strtoul_l.constprop.0+0x3e>
 800e22a:	bf00      	nop
 800e22c:	0800f209 	.word	0x0800f209

0800e230 <_strtoul_r>:
 800e230:	f7ff bf8c 	b.w	800e14c <_strtoul_l.constprop.0>

0800e234 <__ascii_wctomb>:
 800e234:	4603      	mov	r3, r0
 800e236:	4608      	mov	r0, r1
 800e238:	b141      	cbz	r1, 800e24c <__ascii_wctomb+0x18>
 800e23a:	2aff      	cmp	r2, #255	; 0xff
 800e23c:	d904      	bls.n	800e248 <__ascii_wctomb+0x14>
 800e23e:	228a      	movs	r2, #138	; 0x8a
 800e240:	f04f 30ff 	mov.w	r0, #4294967295
 800e244:	601a      	str	r2, [r3, #0]
 800e246:	4770      	bx	lr
 800e248:	2001      	movs	r0, #1
 800e24a:	700a      	strb	r2, [r1, #0]
 800e24c:	4770      	bx	lr

0800e24e <_raise_r>:
 800e24e:	291f      	cmp	r1, #31
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	4604      	mov	r4, r0
 800e254:	460d      	mov	r5, r1
 800e256:	d904      	bls.n	800e262 <_raise_r+0x14>
 800e258:	2316      	movs	r3, #22
 800e25a:	6003      	str	r3, [r0, #0]
 800e25c:	f04f 30ff 	mov.w	r0, #4294967295
 800e260:	bd38      	pop	{r3, r4, r5, pc}
 800e262:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e264:	b112      	cbz	r2, 800e26c <_raise_r+0x1e>
 800e266:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e26a:	b94b      	cbnz	r3, 800e280 <_raise_r+0x32>
 800e26c:	4620      	mov	r0, r4
 800e26e:	f000 f831 	bl	800e2d4 <_getpid_r>
 800e272:	462a      	mov	r2, r5
 800e274:	4601      	mov	r1, r0
 800e276:	4620      	mov	r0, r4
 800e278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e27c:	f000 b818 	b.w	800e2b0 <_kill_r>
 800e280:	2b01      	cmp	r3, #1
 800e282:	d00a      	beq.n	800e29a <_raise_r+0x4c>
 800e284:	1c59      	adds	r1, r3, #1
 800e286:	d103      	bne.n	800e290 <_raise_r+0x42>
 800e288:	2316      	movs	r3, #22
 800e28a:	6003      	str	r3, [r0, #0]
 800e28c:	2001      	movs	r0, #1
 800e28e:	e7e7      	b.n	800e260 <_raise_r+0x12>
 800e290:	2400      	movs	r4, #0
 800e292:	4628      	mov	r0, r5
 800e294:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e298:	4798      	blx	r3
 800e29a:	2000      	movs	r0, #0
 800e29c:	e7e0      	b.n	800e260 <_raise_r+0x12>
	...

0800e2a0 <raise>:
 800e2a0:	4b02      	ldr	r3, [pc, #8]	; (800e2ac <raise+0xc>)
 800e2a2:	4601      	mov	r1, r0
 800e2a4:	6818      	ldr	r0, [r3, #0]
 800e2a6:	f7ff bfd2 	b.w	800e24e <_raise_r>
 800e2aa:	bf00      	nop
 800e2ac:	20000310 	.word	0x20000310

0800e2b0 <_kill_r>:
 800e2b0:	b538      	push	{r3, r4, r5, lr}
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	4d06      	ldr	r5, [pc, #24]	; (800e2d0 <_kill_r+0x20>)
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	4608      	mov	r0, r1
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	602b      	str	r3, [r5, #0]
 800e2be:	f7f3 fc38 	bl	8001b32 <_kill>
 800e2c2:	1c43      	adds	r3, r0, #1
 800e2c4:	d102      	bne.n	800e2cc <_kill_r+0x1c>
 800e2c6:	682b      	ldr	r3, [r5, #0]
 800e2c8:	b103      	cbz	r3, 800e2cc <_kill_r+0x1c>
 800e2ca:	6023      	str	r3, [r4, #0]
 800e2cc:	bd38      	pop	{r3, r4, r5, pc}
 800e2ce:	bf00      	nop
 800e2d0:	200015ac 	.word	0x200015ac

0800e2d4 <_getpid_r>:
 800e2d4:	f7f3 bc26 	b.w	8001b24 <_getpid>

0800e2d8 <_malloc_usable_size_r>:
 800e2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2dc:	1f18      	subs	r0, r3, #4
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	bfbc      	itt	lt
 800e2e2:	580b      	ldrlt	r3, [r1, r0]
 800e2e4:	18c0      	addlt	r0, r0, r3
 800e2e6:	4770      	bx	lr

0800e2e8 <_init>:
 800e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ea:	bf00      	nop
 800e2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ee:	bc08      	pop	{r3}
 800e2f0:	469e      	mov	lr, r3
 800e2f2:	4770      	bx	lr

0800e2f4 <_fini>:
 800e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f6:	bf00      	nop
 800e2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2fa:	bc08      	pop	{r3}
 800e2fc:	469e      	mov	lr, r3
 800e2fe:	4770      	bx	lr
