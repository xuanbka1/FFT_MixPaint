
TRONSON_DRV8840.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4a0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b8  0800e688  0800e688  0001e688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f840  0800f840  00020480  2**0
                  CONTENTS
  4 .ARM          00000000  0800f840  0800f840  00020480  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f840  0800f840  00020480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f840  0800f840  0001f840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f844  0800f844  0001f844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000480  20000000  0800f848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001048  20000480  0800fcc8  00020480  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c8  0800fcc8  000214c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000204a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016566  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003869  00000000  00000000  00036a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000faf  00000000  00000000  0003b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001deff  00000000  00000000  0003c687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a8e4  00000000  00000000  0005a586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2d7b  00000000  00000000  00074e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d2c  00000000  00000000  00117be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0011e914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000480 	.word	0x20000480
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e670 	.word	0x0800e670

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000484 	.word	0x20000484
 8000224:	0800e670 	.word	0x0800e670

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028a:	2afd      	cmp	r2, #253	; 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	; 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	; 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_f2iz>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b8:	d30f      	bcc.n	80010da <__aeabi_f2iz+0x2a>
 80010ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c2:	d90d      	bls.n	80010e0 <__aeabi_f2iz+0x30>
 80010c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010cc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010d0:	fa23 f002 	lsr.w	r0, r3, r2
 80010d4:	bf18      	it	ne
 80010d6:	4240      	negne	r0, r0
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr
 80010e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e4:	d101      	bne.n	80010ea <__aeabi_f2iz+0x3a>
 80010e6:	0242      	lsls	r2, r0, #9
 80010e8:	d105      	bne.n	80010f6 <__aeabi_f2iz+0x46>
 80010ea:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ee:	bf08      	it	eq
 80010f0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2uiz>:
 80010fc:	0042      	lsls	r2, r0, #1
 80010fe:	d20e      	bcs.n	800111e <__aeabi_f2uiz+0x22>
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30b      	bcc.n	800111e <__aeabi_f2uiz+0x22>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d409      	bmi.n	8001124 <__aeabi_f2uiz+0x28>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2uiz+0x32>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d102      	bne.n	8001134 <__aeabi_f2uiz+0x38>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	4770      	bx	lr
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
 8001140:	460c      	mov	r4, r1
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fd57 	bl	8000bfc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff facd 	bl	8000718 <__aeabi_dmul>
 800117e:	f7ff fda3 	bl	8000cc8 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff fa4e 	bl	8000624 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff fac4 	bl	8000718 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7ff f906 	bl	80003a8 <__aeabi_dsub>
 800119c:	f7ff fd94 	bl	8000cc8 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <_DoInit+0x94>)
 80011b4:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2203      	movs	r2, #3
 80011ba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2203      	movs	r2, #3
 80011c0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <_DoInit+0x98>)
 80011c6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <_DoInit+0x9c>)
 80011cc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <_DoInit+0x98>)
 80011ec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	4a16      	ldr	r2, [pc, #88]	; (800124c <_DoInit+0xa0>)
 80011f2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2210      	movs	r2, #16
 80011f8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2200      	movs	r2, #0
 800120a:	675a      	str	r2, [r3, #116]	; 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	e00c      	b.n	800122c <_DoInit+0x80>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f1c3 030f 	rsb	r3, r3, #15
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <_DoInit+0xa4>)
 800121a:	5cd1      	ldrb	r1, [r2, r3]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	460a      	mov	r2, r1
 8001224:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	d9ef      	bls.n	8001212 <_DoInit+0x66>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	2000049c 	.word	0x2000049c
 8001244:	0800e688 	.word	0x0800e688
 8001248:	20000544 	.word	0x20000544
 800124c:	20000944 	.word	0x20000944
 8001250:	0800f3bc 	.word	0x0800f3bc

08001254 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	429a      	cmp	r2, r3
 8001276:	d905      	bls.n	8001284 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	3b01      	subs	r3, #1
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	e007      	b.n	8001294 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	69b9      	ldr	r1, [r7, #24]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	1acb      	subs	r3, r1, r3
 800128e:	4413      	add	r3, r2
 8001290:	3b01      	subs	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129e:	4293      	cmp	r3, r2
 80012a0:	bf28      	it	cs
 80012a2:	4613      	movcs	r3, r2
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80012a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4293      	cmp	r3, r2
 80012ac:	bf28      	it	cs
 80012ae:	4613      	movcs	r3, r2
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	4413      	add	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80012bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	6978      	ldr	r0, [r7, #20]
 80012c2:	f009 fa9c 	bl	800a7fe <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80012c6:	6a3a      	ldr	r2, [r7, #32]
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	4413      	add	r3, r2
 80012cc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	4413      	add	r3, r2
 80012d4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	4413      	add	r3, r2
 80012e4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d101      	bne.n	80012f4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1b4      	bne.n	800126a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001300:	6a3b      	ldr	r3, [r7, #32]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800130a:	b580      	push	{r7, lr}
 800130c:	b088      	sub	sp, #32
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	d90f      	bls.n	800134e <_WriteNoCheck+0x44>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	68b9      	ldr	r1, [r7, #8]
 800133c:	6938      	ldr	r0, [r7, #16]
 800133e:	f009 fa5e 	bl	800a7fe <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	441a      	add	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800134c:	e01d      	b.n	800138a <_WriteNoCheck+0x80>
    NumBytesAtOnce = Rem;
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	4413      	add	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	6938      	ldr	r0, [r7, #16]
 8001362:	f009 fa4c 	bl	800a7fe <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4413      	add	r3, r2
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4619      	mov	r1, r3
 800137e:	6938      	ldr	r0, [r7, #16]
 8001380:	f009 fa3d 	bl	800a7fe <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	60da      	str	r2, [r3, #12]
}
 800138a:	bf00      	nop
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8001392:	b480      	push	{r7}
 8001394:	b087      	sub	sp, #28
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d808      	bhi.n	80013c0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1ad2      	subs	r2, r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4413      	add	r3, r2
 80013ba:	3b01      	subs	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e004      	b.n	80013ca <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	3b01      	subs	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80013ca:	697b      	ldr	r3, [r7, #20]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
	...

080013d8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <SEGGER_RTT_WriteNoLock+0x9c>)
 80013f6:	4413      	add	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d029      	beq.n	8001456 <SEGGER_RTT_WriteNoLock+0x7e>
 8001402:	2b02      	cmp	r3, #2
 8001404:	d82e      	bhi.n	8001464 <SEGGER_RTT_WriteNoLock+0x8c>
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <SEGGER_RTT_WriteNoLock+0x38>
 800140a:	2b01      	cmp	r3, #1
 800140c:	d013      	beq.n	8001436 <SEGGER_RTT_WriteNoLock+0x5e>
 800140e:	e029      	b.n	8001464 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001410:	6978      	ldr	r0, [r7, #20]
 8001412:	f7ff ffbe 	bl	8001392 <_GetAvailWriteSpace>
 8001416:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	d202      	bcs.n	8001426 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8001424:	e021      	b.n	800146a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	69b9      	ldr	r1, [r7, #24]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff6b 	bl	800130a <_WriteNoCheck>
    break;
 8001434:	e019      	b.n	800146a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ffab 	bl	8001392 <_GetAvailWriteSpace>
 800143c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4293      	cmp	r3, r2
 8001444:	bf28      	it	cs
 8001446:	4613      	movcs	r3, r2
 8001448:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	69b9      	ldr	r1, [r7, #24]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff5b 	bl	800130a <_WriteNoCheck>
    break;
 8001454:	e009      	b.n	800146a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	69b9      	ldr	r1, [r7, #24]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff fefa 	bl	8001254 <_WriteBlocking>
 8001460:	61f8      	str	r0, [r7, #28]
    break;
 8001462:	e002      	b.n	800146a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    break;
 8001468:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800146a:	69fb      	ldr	r3, [r7, #28]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000049c 	.word	0x2000049c

08001478 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <SEGGER_RTT_Write+0x48>)
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <SEGGER_RTT_Write+0x1e>
 8001492:	f7ff fe8b 	bl	80011ac <_DoInit>
  SEGGER_RTT_LOCK();
 8001496:	f3ef 8311 	mrs	r3, BASEPRI
 800149a:	f04f 0120 	mov.w	r1, #32
 800149e:	f381 8811 	msr	BASEPRI, r1
 80014a2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f7ff ff95 	bl	80013d8 <SEGGER_RTT_WriteNoLock>
 80014ae:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80014b6:	697b      	ldr	r3, [r7, #20]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000049c 	.word	0x2000049c

080014c4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff ffce 	bl	8001478 <SEGGER_RTT_Write>
  return len;
 80014dc:	683b      	ldr	r3, [r7, #0]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PE9   ------> S_TIM1_CH1
*/
void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fc:	4b98      	ldr	r3, [pc, #608]	; (8001760 <MX_GPIO_Init+0x278>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a97      	ldr	r2, [pc, #604]	; (8001760 <MX_GPIO_Init+0x278>)
 8001502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b95      	ldr	r3, [pc, #596]	; (8001760 <MX_GPIO_Init+0x278>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001514:	4b92      	ldr	r3, [pc, #584]	; (8001760 <MX_GPIO_Init+0x278>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a91      	ldr	r2, [pc, #580]	; (8001760 <MX_GPIO_Init+0x278>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b8f      	ldr	r3, [pc, #572]	; (8001760 <MX_GPIO_Init+0x278>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b8c      	ldr	r3, [pc, #560]	; (8001760 <MX_GPIO_Init+0x278>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a8b      	ldr	r2, [pc, #556]	; (8001760 <MX_GPIO_Init+0x278>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b89      	ldr	r3, [pc, #548]	; (8001760 <MX_GPIO_Init+0x278>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	4b86      	ldr	r3, [pc, #536]	; (8001760 <MX_GPIO_Init+0x278>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a85      	ldr	r2, [pc, #532]	; (8001760 <MX_GPIO_Init+0x278>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b83      	ldr	r3, [pc, #524]	; (8001760 <MX_GPIO_Init+0x278>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155c:	4b80      	ldr	r3, [pc, #512]	; (8001760 <MX_GPIO_Init+0x278>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a7f      	ldr	r2, [pc, #508]	; (8001760 <MX_GPIO_Init+0x278>)
 8001562:	f043 0320 	orr.w	r3, r3, #32
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b7d      	ldr	r3, [pc, #500]	; (8001760 <MX_GPIO_Init+0x278>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PUL3_Pin|EN3_Pin|DIR3_Pin|PUL2_Pin
 8001574:	2200      	movs	r2, #0
 8001576:	f647 51ff 	movw	r1, #32255	; 0x7dff
 800157a:	487a      	ldr	r0, [pc, #488]	; (8001764 <MX_GPIO_Init+0x27c>)
 800157c:	f004 ff5d 	bl	800643a <HAL_GPIO_WritePin>
                          |EN2_Pin|EN12_Pin|DIR12_Pin|PUL13_Pin
                          |EN13_Pin|DIR13_Pin|PUL14_Pin|ST2_Pin
                          |EN4_Pin|DIR4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR2_Pin|PUL1_Pin|EN1_Pin|DIR1_Pin
 8001580:	2200      	movs	r2, #0
 8001582:	f643 71f7 	movw	r1, #16375	; 0x3ff7
 8001586:	4878      	ldr	r0, [pc, #480]	; (8001768 <MX_GPIO_Init+0x280>)
 8001588:	f004 ff57 	bl	800643a <HAL_GPIO_WritePin>
                          |DIR10_Pin|PUL11_Pin|CK5_Pin|PUL15_Pin
                          |EN15_Pin|DIR15_Pin|PUL_ALL_16_Pin|DIR_ALL_16_Pin
                          |PUL17_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PUL9_Pin|EN9_Pin|DIR9_Pin|PUL10_Pin
 800158c:	2200      	movs	r2, #0
 800158e:	f641 11f8 	movw	r1, #6648	; 0x19f8
 8001592:	4876      	ldr	r0, [pc, #472]	; (800176c <MX_GPIO_Init+0x284>)
 8001594:	f004 ff51 	bl	800643a <HAL_GPIO_WritePin>
                          |EN10_Pin|PUL16_Pin|EN16_Pin|DIR16_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN11_Pin|DIR11_Pin|PUL12_Pin|ST1_Pin
 8001598:	2200      	movs	r2, #0
 800159a:	f242 31ff 	movw	r1, #9215	; 0x23ff
 800159e:	4874      	ldr	r0, [pc, #464]	; (8001770 <MX_GPIO_Init+0x288>)
 80015a0:	f004 ff4b 	bl	800643a <HAL_GPIO_WritePin>
                          |PUL6_Pin|EN6_Pin|DIR6_Pin|PUL5_Pin
                          |EN5_Pin|DIR5_Pin|PUL4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BUZZ_Pin|EN14_Pin|DIR14_Pin|EN17_Pin
 80015a4:	2200      	movs	r2, #0
 80015a6:	f24c 41ff 	movw	r1, #50431	; 0xc4ff
 80015aa:	4872      	ldr	r0, [pc, #456]	; (8001774 <MX_GPIO_Init+0x28c>)
 80015ac:	f004 ff45 	bl	800643a <HAL_GPIO_WritePin>
                          |DIR17_Pin|PUL8_Pin|EN8_Pin|DIR8_Pin
                          |PUL7_Pin|EN7_Pin|DIR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b6:	486d      	ldr	r0, [pc, #436]	; (800176c <MX_GPIO_Init+0x284>)
 80015b8:	f004 ff3f 	bl	800643a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PUL3_Pin|EN3_Pin|DIR3_Pin|PUL2_Pin
 80015bc:	237f      	movs	r3, #127	; 0x7f
 80015be:	617b      	str	r3, [r7, #20]
                          |EN2_Pin|EN4_Pin|DIR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2302      	movs	r3, #2
 80015ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4864      	ldr	r0, [pc, #400]	; (8001764 <MX_GPIO_Init+0x27c>)
 80015d4:	f004 fd86 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = DIR2_Pin|PUL1_Pin|EN1_Pin|DIR1_Pin
 80015d8:	f643 73f7 	movw	r3, #16375	; 0x3ff7
 80015dc:	617b      	str	r3, [r7, #20]
                          |DIR10_Pin|PUL11_Pin|CK5_Pin|PUL15_Pin
                          |EN15_Pin|DIR15_Pin|PUL_ALL_16_Pin|DIR_ALL_16_Pin
                          |PUL17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	485d      	ldr	r0, [pc, #372]	; (8001768 <MX_GPIO_Init+0x280>)
 80015f2:	f004 fd77 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CK4_Pin;
 80015f6:	2308      	movs	r3, #8
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CK4_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4857      	ldr	r0, [pc, #348]	; (8001768 <MX_GPIO_Init+0x280>)
 800160a:	f004 fd6b 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CK3_Pin|CK2_Pin|CK1_Pin;
 800160e:	2307      	movs	r3, #7
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4852      	ldr	r0, [pc, #328]	; (800176c <MX_GPIO_Init+0x284>)
 8001622:	f004 fd5f 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PUL9_Pin|EN9_Pin|DIR9_Pin|PUL10_Pin
 8001626:	f641 13f8 	movw	r3, #6648	; 0x19f8
 800162a:	617b      	str	r3, [r7, #20]
                          |EN10_Pin|PUL16_Pin|EN16_Pin|DIR16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	484b      	ldr	r0, [pc, #300]	; (800176c <MX_GPIO_Init+0x284>)
 8001640:	f004 fd50 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EN11_Pin|DIR11_Pin|PUL12_Pin|ST1_Pin
 8001644:	f242 33ff 	movw	r3, #9215	; 0x23ff
 8001648:	617b      	str	r3, [r7, #20]
                          |PUL6_Pin|EN6_Pin|DIR6_Pin|PUL5_Pin
                          |EN5_Pin|DIR5_Pin|PUL4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2302      	movs	r3, #2
 8001654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4844      	ldr	r0, [pc, #272]	; (8001770 <MX_GPIO_Init+0x288>)
 800165e:	f004 fd41 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN12_Pin|DIR12_Pin|PUL13_Pin|EN13_Pin
 8001662:	f44f 43fb 	mov.w	r3, #32128	; 0x7d80
 8001666:	617b      	str	r3, [r7, #20]
                          |DIR13_Pin|PUL14_Pin|ST2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	483a      	ldr	r0, [pc, #232]	; (8001764 <MX_GPIO_Init+0x27c>)
 800167c:	f004 fd32 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2302      	movs	r3, #2
 800168c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4833      	ldr	r0, [pc, #204]	; (8001764 <MX_GPIO_Init+0x27c>)
 8001696:	f004 fd25 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800169a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800169e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a0:	2303      	movs	r3, #3
 80016a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	482e      	ldr	r0, [pc, #184]	; (8001764 <MX_GPIO_Init+0x27c>)
 80016ac:	f004 fd1a 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	482a      	ldr	r0, [pc, #168]	; (8001770 <MX_GPIO_Init+0x288>)
 80016c6:	f004 fd0d 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d0:	2303      	movs	r3, #3
 80016d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	4825      	ldr	r0, [pc, #148]	; (8001770 <MX_GPIO_Init+0x288>)
 80016dc:	f004 fd02 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BUZZ_Pin|EN14_Pin|DIR14_Pin|EN17_Pin
 80016e0:	f24c 43ff 	movw	r3, #50431	; 0xc4ff
 80016e4:	617b      	str	r3, [r7, #20]
                          |DIR17_Pin|PUL8_Pin|EN8_Pin|DIR8_Pin
                          |PUL7_Pin|EN7_Pin|DIR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2302      	movs	r3, #2
 80016f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	481e      	ldr	r0, [pc, #120]	; (8001774 <MX_GPIO_Init+0x28c>)
 80016fa:	f004 fcf3 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80016fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001704:	2303      	movs	r3, #3
 8001706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4819      	ldr	r0, [pc, #100]	; (8001774 <MX_GPIO_Init+0x28c>)
 8001710:	f004 fce8 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_ALL_16_Pin;
 8001714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171e:	2301      	movs	r3, #1
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001722:	2301      	movs	r3, #1
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_ALL_16_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <MX_GPIO_Init+0x284>)
 800172e:	f004 fcd9 	bl	80060e4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM1_ENABLE();
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_GPIO_Init+0x290>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
 8001750:	4a09      	ldr	r2, [pc, #36]	; (8001778 <MX_GPIO_Init+0x290>)
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	6053      	str	r3, [r2, #4]

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	40011800 	.word	0x40011800
 8001768:	40011000 	.word	0x40011000
 800176c:	40010800 	.word	0x40010800
 8001770:	40010c00 	.word	0x40010c00
 8001774:	40011400 	.word	0x40011400
 8001778:	40010000 	.word	0x40010000

0800177c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MX_I2C2_Init+0x50>)
 8001782:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <MX_I2C2_Init+0x54>)
 8001784:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_I2C2_Init+0x50>)
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <MX_I2C2_Init+0x58>)
 800178a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_I2C2_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_I2C2_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_I2C2_Init+0x50>)
 800179a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <MX_I2C2_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_I2C2_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <MX_I2C2_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_I2C2_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_I2C2_Init+0x50>)
 80017ba:	f004 fe6f 	bl	800649c <HAL_I2C_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017c4:	f000 f928 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000954 	.word	0x20000954
 80017d0:	40005800 	.word	0x40005800
 80017d4:	000186a0 	.word	0x000186a0

080017d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a16      	ldr	r2, [pc, #88]	; (800184c <HAL_I2C_MspInit+0x74>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d124      	bne.n	8001842 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_I2C_MspInit+0x78>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_I2C_MspInit+0x78>)
 80017fe:	f043 0308 	orr.w	r3, r3, #8
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_I2C_MspInit+0x78>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001810:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001814:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001816:	2312      	movs	r3, #18
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	4619      	mov	r1, r3
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <HAL_I2C_MspInit+0x7c>)
 8001826:	f004 fc5d 	bl	80060e4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_I2C_MspInit+0x78>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_I2C_MspInit+0x78>)
 8001830:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_I2C_MspInit+0x78>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40005800 	.word	0x40005800
 8001850:	40021000 	.word	0x40021000
 8001854:	40010c00 	.word	0x40010c00

08001858 <HAL_UART_RxCpltCallback>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    //app PC //
    if(huart->Instance==huart1.Instance)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_UART_RxCpltCallback+0x2c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d102      	bne.n	8001872 <HAL_UART_RxCpltCallback+0x1a>
    {
    	uartAppHandle(&myApp);
 800186c:	4806      	ldr	r0, [pc, #24]	; (8001888 <HAL_UART_RxCpltCallback+0x30>)
 800186e:	f000 fdb3 	bl	80023d8 <uartAppHandle>
    }
    HAL_UART_Receive_IT(&huart1, &myApp.charRec,1); //app PC
 8001872:	2201      	movs	r2, #1
 8001874:	4904      	ldr	r1, [pc, #16]	; (8001888 <HAL_UART_RxCpltCallback+0x30>)
 8001876:	4803      	ldr	r0, [pc, #12]	; (8001884 <HAL_UART_RxCpltCallback+0x2c>)
 8001878:	f007 f889 	bl	800898e <HAL_UART_Receive_IT>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000b14 	.word	0x20000b14
 8001888:	20000004 	.word	0x20000004

0800188c <RemapPin_Init>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void RemapPin_Init(void) {
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

	// remap PA15 to free is GPIO //
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <RemapPin_Init+0x24>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <RemapPin_Init+0x24>)
 8001896:	f043 0305 	orr.w	r3, r3, #5
 800189a:	6193      	str	r3, [r2, #24]
	AFIO->MAPR   |= AFIO_MAPR_SWJ_CFG_1;    // To Free PA15
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <RemapPin_Init+0x28>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <RemapPin_Init+0x28>)
 80018a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018a6:	6053      	str	r3, [r2, #4]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018bc:	f004 f93c 	bl	8005b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c0:	f000 f842 	bl	8001948 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RemapPin_Init();
 80018c4:	f7ff ffe2 	bl	800188c <RemapPin_Init>
	//SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0 , SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c8:	f7ff fe0e 	bl	80014e8 <MX_GPIO_Init>
  MX_I2C2_Init();
 80018cc:	f7ff ff56 	bl	800177c <MX_I2C2_Init>
  MX_TIM4_Init();
 80018d0:	f000 fa82 	bl	8001dd8 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80018d4:	f000 fc42 	bl	800215c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80018d8:	f000 f9e4 	bl	8001ca4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018dc:	f000 fa30 	bl	8001d40 <MX_TIM3_Init>
  MX_TIM5_Init();
 80018e0:	f000 fac8 	bl	8001e74 <MX_TIM5_Init>
  MX_TIM6_Init();
 80018e4:	f000 fb14 	bl	8001f10 <MX_TIM6_Init>
  //MX_RTC_Init();
  MX_USART1_UART_Init();
 80018e8:	f000 fc0e 	bl	8002108 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, &myApp.charRec, 1);          //app PC
 80018ec:	2201      	movs	r2, #1
 80018ee:	4911      	ldr	r1, [pc, #68]	; (8001934 <main+0x7c>)
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <main+0x80>)
 80018f2:	f007 f84c 	bl	800898e <HAL_UART_Receive_IT>
	DISABLE_TIMER_ALARM;
 80018f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001900:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001904:	4013      	ands	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	printf(" USB Ready to LOG >>>> START>>>>> \r\n");
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <main+0x84>)
 800190a:	f008 fd81 	bl	800a410 <puts>
	printf("CPU_FREQ = %d Hz \r\n",HAL_RCC_GetSysClockFreq());
 800190e:	f006 f98b 	bl	8007c28 <HAL_RCC_GetSysClockFreq>
 8001912:	4603      	mov	r3, r0
 8001914:	4619      	mov	r1, r3
 8001916:	480a      	ldr	r0, [pc, #40]	; (8001940 <main+0x88>)
 8001918:	f008 fd0c 	bl	800a334 <iprintf>
	speaker_efect();
 800191c:	f003 f96e 	bl	8004bfc <speaker_efect>
	pump_init();
 8001920:	f002 ff8a 	bl	8004838 <pump_init>
	loadConfigInEeprom();
 8001924:	f003 fd44 	bl	80053b0 <loadConfigInEeprom>

	printf("load init is OK ...........\r\n");
 8001928:	4806      	ldr	r0, [pc, #24]	; (8001944 <main+0x8c>)
 800192a:	f008 fd71 	bl	800a410 <puts>

	while (1)
	{

      handleAppRequets();
 800192e:	f000 fd9b 	bl	8002468 <handleAppRequets>
 8001932:	e7fc      	b.n	800192e <main+0x76>
 8001934:	20000004 	.word	0x20000004
 8001938:	20000b14 	.word	0x20000b14
 800193c:	0800e694 	.word	0x0800e694
 8001940:	0800e6b8 	.word	0x0800e6b8
 8001944:	0800e6cc 	.word	0x0800e6cc

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b096      	sub	sp, #88	; 0x58
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001952:	2228      	movs	r2, #40	; 0x28
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f008 fec0 	bl	800a6dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800197c:	2305      	movs	r3, #5
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800198a:	2301      	movs	r3, #1
 800198c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198e:	2301      	movs	r3, #1
 8001990:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001992:	2302      	movs	r3, #2
 8001994:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800199c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 fdd2 	bl	8007550 <HAL_RCC_OscConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019b2:	f000 f831 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b6:	230f      	movs	r3, #15
 80019b8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ba:	2302      	movs	r3, #2
 80019bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	2102      	movs	r1, #2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f006 f83e 	bl	8007a54 <HAL_RCC_ClockConfig>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019de:	f000 f81b 	bl	8001a18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019e2:	2301      	movs	r3, #1
 80019e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ea:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4618      	mov	r0, r3
 80019f0:	f006 f9be 	bl	8007d70 <HAL_RCCEx_PeriphCLKConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80019fa:	f000 f80d 	bl	8001a18 <Error_Handler>
  }
}
 80019fe:	bf00      	nop
 8001a00:	3758      	adds	r7, #88	; 0x58
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
      }
   if (htim->Instance==TIM6)
      {
      //do something else here
      }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <Error_Handler+0x8>
	...

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_MspInit+0x40>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_MspInit+0x40>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6193      	str	r3, [r2, #24]
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_MspInit+0x40>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_MspInit+0x40>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_MspInit+0x40>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_MspInit+0x40>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40021000 	.word	0x40021000

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler+0x4>

08001a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aae:	f004 f889 	bl	8005bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //timer2Handle();
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM2_IRQHandler+0x10>)
 8001abe:	f006 fb11 	bl	80080e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200009ac 	.word	0x200009ac

08001acc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  pump_pwm_handle();
 8001ad0:	f003 fa6e 	bl	8004fb0 <pump_pwm_handle>


  //printf("irq timer 3 \r\n");

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM3_IRQHandler+0x14>)
 8001ad6:	f006 fb05 	bl	80080e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200009f4 	.word	0x200009f4

08001ae4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  pump_tron_handle();
 8001ae8:	f003 fa80 	bl	8004fec <pump_tron_handle>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <TIM4_IRQHandler+0x14>)
 8001aee:	f006 faf9 	bl	80080e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000a3c 	.word	0x20000a3c

08001afc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <USART1_IRQHandler+0x10>)
 8001b02:	f006 ff69 	bl	80089d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000b14 	.word	0x20000b14

08001b10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <USART3_IRQHandler+0x10>)
 8001b16:	f006 ff5f 	bl	80089d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000b5c 	.word	0x20000b5c

08001b24 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
   dongNapHandle();
 8001b28:	f003 fec0 	bl	80058ac <dongNapHandle>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <TIM5_IRQHandler+0x14>)
 8001b2e:	f006 fad9 	bl	80080e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000a84 	.word	0x20000a84

08001b3c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <TIM6_IRQHandler+0x10>)
 8001b42:	f006 facf 	bl	80080e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000acc 	.word	0x20000acc

08001b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <_kill>:

int _kill(int pid, int sig)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b68:	f008 fe0e 	bl	800a788 <__errno>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2216      	movs	r2, #22
 8001b70:	601a      	str	r2, [r3, #0]
  return -1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_exit>:

void _exit (int status)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b86:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffe7 	bl	8001b5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b90:	e7fe      	b.n	8001b90 <_exit+0x12>

08001b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e00a      	b.n	8001bba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	4601      	mov	r1, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	60ba      	str	r2, [r7, #8]
 8001bb0:	b2ca      	uxtb	r2, r1
 8001bb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	dbf0      	blt.n	8001ba4 <_read+0x12>
  }

  return len;
 8001bc2:	687b      	ldr	r3, [r7, #4]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf2:	605a      	str	r2, [r3, #4]
  return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <_isatty>:

int _isatty(int file)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f008 fd94 	bl	800a788 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20010000 	.word	0x20010000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	200009a8 	.word	0x200009a8
 8001c94:	200014c8 	.word	0x200014c8

08001c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	463b      	mov	r3, r7
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001cca:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001cce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001cd8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cea:	4814      	ldr	r0, [pc, #80]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001cec:	f006 f8f6 	bl	8007edc <HAL_TIM_Base_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001cf6:	f7ff fe8f 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4619      	mov	r1, r3
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001d08:	f006 faf4 	bl	80082f4 <HAL_TIM_ConfigClockSource>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d12:	f7ff fe81 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d1e:	463b      	mov	r3, r7
 8001d20:	4619      	mov	r1, r3
 8001d22:	4806      	ldr	r0, [pc, #24]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001d24:	f006 fce2 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d2e:	f7ff fe73 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200009ac 	.word	0x200009ac

08001d40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  // config timer ~ 10us. -> oldvalue = 49-50us
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	463b      	mov	r3, r7
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MX_TIM3_Init+0x90>)
 8001d5e:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <MX_TIM3_Init+0x94>)
 8001d60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_TIM3_Init+0x90>)
 8001d64:	2247      	movs	r2, #71	; 0x47
 8001d66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_TIM3_Init+0x90>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_TIM3_Init+0x90>)
 8001d70:	2209      	movs	r2, #9
 8001d72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_TIM3_Init+0x90>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_TIM3_Init+0x90>)
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d80:	4813      	ldr	r0, [pc, #76]	; (8001dd0 <MX_TIM3_Init+0x90>)
 8001d82:	f006 f8ab 	bl	8007edc <HAL_TIM_Base_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001d8c:	f7ff fe44 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <MX_TIM3_Init+0x90>)
 8001d9e:	f006 faa9 	bl	80082f4 <HAL_TIM_ConfigClockSource>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001da8:	f7ff fe36 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_TIM3_Init+0x90>)
 8001dba:	f006 fc97 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001dc4:	f7ff fe28 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200009f4 	.word	0x200009f4
 8001dd4:	40000400 	.word	0x40000400

08001dd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	463b      	mov	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <MX_TIM4_Init+0x94>)
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <MX_TIM4_Init+0x98>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <MX_TIM4_Init+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <MX_TIM4_Init+0x94>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 72*10-1;
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <MX_TIM4_Init+0x94>)
 8001e08:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001e0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <MX_TIM4_Init+0x94>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <MX_TIM4_Init+0x94>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e1a:	4814      	ldr	r0, [pc, #80]	; (8001e6c <MX_TIM4_Init+0x94>)
 8001e1c:	f006 f85e 	bl	8007edc <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001e26:	f7ff fdf7 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	4619      	mov	r1, r3
 8001e36:	480d      	ldr	r0, [pc, #52]	; (8001e6c <MX_TIM4_Init+0x94>)
 8001e38:	f006 fa5c 	bl	80082f4 <HAL_TIM_ConfigClockSource>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001e42:	f7ff fde9 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e4e:	463b      	mov	r3, r7
 8001e50:	4619      	mov	r1, r3
 8001e52:	4806      	ldr	r0, [pc, #24]	; (8001e6c <MX_TIM4_Init+0x94>)
 8001e54:	f006 fc4a 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001e5e:	f7ff fddb 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000a3c 	.word	0x20000a3c
 8001e70:	40000800 	.word	0x40000800

08001e74 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */
  // period = 3300 us - > 6 vòng / phút
  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	463b      	mov	r3, r7
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <MX_TIM5_Init+0x94>)
 8001e92:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <MX_TIM5_Init+0x98>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <MX_TIM5_Init+0x94>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <MX_TIM5_Init+0x94>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 72*400-1;
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <MX_TIM5_Init+0x94>)
 8001ea4:	f247 027f 	movw	r2, #28799	; 0x707f
 8001ea8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <MX_TIM5_Init+0x94>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <MX_TIM5_Init+0x94>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001eb6:	4814      	ldr	r0, [pc, #80]	; (8001f08 <MX_TIM5_Init+0x94>)
 8001eb8:	f006 f810 	bl	8007edc <HAL_TIM_Base_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001ec2:	f7ff fda9 	bl	8001a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480d      	ldr	r0, [pc, #52]	; (8001f08 <MX_TIM5_Init+0x94>)
 8001ed4:	f006 fa0e 	bl	80082f4 <HAL_TIM_ConfigClockSource>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001ede:	f7ff fd9b 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001eea:	463b      	mov	r3, r7
 8001eec:	4619      	mov	r1, r3
 8001eee:	4806      	ldr	r0, [pc, #24]	; (8001f08 <MX_TIM5_Init+0x94>)
 8001ef0:	f006 fbfc 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001efa:	f7ff fd8d 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000a84 	.word	0x20000a84
 8001f0c:	40000c00 	.word	0x40000c00

08001f10 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f16:	463b      	mov	r3, r7
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <MX_TIM6_Init+0x64>)
 8001f20:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <MX_TIM6_Init+0x68>)
 8001f22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <MX_TIM6_Init+0x64>)
 8001f26:	2247      	movs	r2, #71	; 0x47
 8001f28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_TIM6_Init+0x64>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <MX_TIM6_Init+0x64>)
 8001f32:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_TIM6_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f3e:	480d      	ldr	r0, [pc, #52]	; (8001f74 <MX_TIM6_Init+0x64>)
 8001f40:	f005 ffcc 	bl	8007edc <HAL_TIM_Base_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f4a:	f7ff fd65 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f56:	463b      	mov	r3, r7
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <MX_TIM6_Init+0x64>)
 8001f5c:	f006 fbc6 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f66:	f7ff fd57 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000acc 	.word	0x20000acc
 8001f78:	40001000 	.word	0x40001000

08001f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08e      	sub	sp, #56	; 0x38
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9a:	d114      	bne.n	8001fc6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	4a52      	ldr	r2, [pc, #328]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	61d3      	str	r3, [r2, #28]
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	623b      	str	r3, [r7, #32]
 8001fb2:	6a3b      	ldr	r3, [r7, #32]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	201c      	movs	r0, #28
 8001fba:	f003 ff1a 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fbe:	201c      	movs	r0, #28
 8001fc0:	f003 ff33 	bl	8005e2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001fc4:	e08d      	b.n	80020e2 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM3)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a49      	ldr	r2, [pc, #292]	; (80020f0 <HAL_TIM_Base_MspInit+0x174>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d114      	bne.n	8001ffa <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fd0:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	4a45      	ldr	r2, [pc, #276]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	61d3      	str	r3, [r2, #28]
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2102      	movs	r1, #2
 8001fec:	201d      	movs	r0, #29
 8001fee:	f003 ff00 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ff2:	201d      	movs	r0, #29
 8001ff4:	f003 ff19 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 8001ff8:	e073      	b.n	80020e2 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM4)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a3d      	ldr	r2, [pc, #244]	; (80020f4 <HAL_TIM_Base_MspInit+0x178>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d13b      	bne.n	800207c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	4a38      	ldr	r2, [pc, #224]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	61d3      	str	r3, [r2, #28]
 8002010:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800201c:	4b33      	ldr	r3, [pc, #204]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a32      	ldr	r2, [pc, #200]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8002022:	f043 0320 	orr.w	r3, r3, #32
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2302      	movs	r3, #2
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002046:	4619      	mov	r1, r3
 8002048:	482b      	ldr	r0, [pc, #172]	; (80020f8 <HAL_TIM_Base_MspInit+0x17c>)
 800204a:	f004 f84b 	bl	80060e4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 800204e:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_TIM_Base_MspInit+0x180>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
 8002054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002056:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
 800205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002062:	637b      	str	r3, [r7, #52]	; 0x34
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <HAL_TIM_Base_MspInit+0x180>)
 8002066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002068:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	201e      	movs	r0, #30
 8002070:	f003 febf 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002074:	201e      	movs	r0, #30
 8002076:	f003 fed8 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 800207a:	e032      	b.n	80020e2 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM5)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <HAL_TIM_Base_MspInit+0x184>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d114      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4a18      	ldr	r2, [pc, #96]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	61d3      	str	r3, [r2, #28]
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2032      	movs	r0, #50	; 0x32
 80020a4:	f003 fea5 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020a8:	2032      	movs	r0, #50	; 0x32
 80020aa:	f003 febe 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 80020ae:	e018      	b.n	80020e2 <HAL_TIM_Base_MspInit+0x166>
  else if(tim_baseHandle->Instance==TIM6)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a13      	ldr	r2, [pc, #76]	; (8002104 <HAL_TIM_Base_MspInit+0x188>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d113      	bne.n	80020e2 <HAL_TIM_Base_MspInit+0x166>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 80020c0:	f043 0310 	orr.w	r3, r3, #16
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_TIM_Base_MspInit+0x170>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	2036      	movs	r0, #54	; 0x36
 80020d8:	f003 fe8b 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80020dc:	2036      	movs	r0, #54	; 0x36
 80020de:	f003 fea4 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3738      	adds	r7, #56	; 0x38
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40000800 	.word	0x40000800
 80020f8:	40011400 	.word	0x40011400
 80020fc:	40010000 	.word	0x40010000
 8002100:	40000c00 	.word	0x40000c00
 8002104:	40001000 	.word	0x40001000

08002108 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <MX_USART1_UART_Init+0x50>)
 8002110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002140:	f006 fb52 	bl	80087e8 <HAL_UART_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800214a:	f7ff fc65 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000b14 	.word	0x20000b14
 8002158:	40013800 	.word	0x40013800

0800215c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_USART3_UART_Init+0x4c>)
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <MX_USART3_UART_Init+0x50>)
 8002164:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_USART3_UART_Init+0x4c>)
 8002168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800216c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_USART3_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_USART3_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <MX_USART3_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_USART3_UART_Init+0x4c>)
 8002182:	220c      	movs	r2, #12
 8002184:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <MX_USART3_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_USART3_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_USART3_UART_Init+0x4c>)
 8002194:	f006 fb28 	bl	80087e8 <HAL_UART_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800219e:	f7ff fc3b 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000b5c 	.word	0x20000b5c
 80021ac:	40004800 	.word	0x40004800

080021b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a49      	ldr	r2, [pc, #292]	; (80022f0 <HAL_UART_MspInit+0x140>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d13a      	bne.n	8002246 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d0:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <HAL_UART_MspInit+0x144>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a47      	ldr	r2, [pc, #284]	; (80022f4 <HAL_UART_MspInit+0x144>)
 80021d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b45      	ldr	r3, [pc, #276]	; (80022f4 <HAL_UART_MspInit+0x144>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	4b42      	ldr	r3, [pc, #264]	; (80022f4 <HAL_UART_MspInit+0x144>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a41      	ldr	r2, [pc, #260]	; (80022f4 <HAL_UART_MspInit+0x144>)
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_UART_MspInit+0x144>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	4619      	mov	r1, r3
 8002214:	4838      	ldr	r0, [pc, #224]	; (80022f8 <HAL_UART_MspInit+0x148>)
 8002216:	f003 ff65 	bl	80060e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800221a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	4619      	mov	r1, r3
 800222e:	4832      	ldr	r0, [pc, #200]	; (80022f8 <HAL_UART_MspInit+0x148>)
 8002230:	f003 ff58 	bl	80060e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2025      	movs	r0, #37	; 0x25
 800223a:	f003 fdda 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800223e:	2025      	movs	r0, #37	; 0x25
 8002240:	f003 fdf3 	bl	8005e2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002244:	e050      	b.n	80022e8 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <HAL_UART_MspInit+0x14c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d14b      	bne.n	80022e8 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_UART_MspInit+0x144>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_UART_MspInit+0x144>)
 8002256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225a:	61d3      	str	r3, [r2, #28]
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_UART_MspInit+0x144>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_UART_MspInit+0x144>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <HAL_UART_MspInit+0x144>)
 800226e:	f043 0320 	orr.w	r3, r3, #32
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_UART_MspInit+0x144>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	481a      	ldr	r0, [pc, #104]	; (8002300 <HAL_UART_MspInit+0x150>)
 8002296:	f003 ff25 	bl	80060e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800229a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4814      	ldr	r0, [pc, #80]	; (8002300 <HAL_UART_MspInit+0x150>)
 80022b0:	f003 ff18 	bl	80060e4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_UART_MspInit+0x154>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d2:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <HAL_UART_MspInit+0x154>)
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	2027      	movs	r0, #39	; 0x27
 80022de:	f003 fd88 	bl	8005df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022e2:	2027      	movs	r0, #39	; 0x27
 80022e4:	f003 fda1 	bl	8005e2a <HAL_NVIC_EnableIRQ>
}
 80022e8:	bf00      	nop
 80022ea:	3730      	adds	r7, #48	; 0x30
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40013800 	.word	0x40013800
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40010800 	.word	0x40010800
 80022fc:	40004800 	.word	0x40004800
 8002300:	40011400 	.word	0x40011400
 8002304:	40010000 	.word	0x40010000

08002308 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002308:	f7ff fcc6 	bl	8001c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800230c:	480b      	ldr	r0, [pc, #44]	; (800233c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800230e:	490c      	ldr	r1, [pc, #48]	; (8002340 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002310:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002324:	4c09      	ldr	r4, [pc, #36]	; (800234c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002332:	f008 fa2f 	bl	800a794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002336:	f7ff fabf 	bl	80018b8 <main>
  bx lr
 800233a:	4770      	bx	lr
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	20000480 	.word	0x20000480
  ldr r2, =_sidata
 8002344:	0800f848 	.word	0x0800f848
  ldr r2, =_sbss
 8002348:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 800234c:	200014c8 	.word	0x200014c8

08002350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC1_2_IRQHandler>
	...

08002354 <SendToApp>:



// @+data+#\n\r
void SendToApp(uint8_t selectCom,const char *fmt, ...)
{
 8002354:	b40e      	push	{r1, r2, r3}
 8002356:	b580      	push	{r7, lr}
 8002358:	b087      	sub	sp, #28
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
	static char buffer1[256];
	unsigned int len=0;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
	va_list args;
	va_start(args, fmt);
 8002364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002368:	613b      	str	r3, [r7, #16]
	vsnprintf(buffer1, sizeof(buffer1), fmt, args);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002372:	4816      	ldr	r0, [pc, #88]	; (80023cc <SendToApp+0x78>)
 8002374:	f008 f90e 	bl	800a594 <vsniprintf>
	va_end(args);
	len=strlen(buffer1);
 8002378:	4814      	ldr	r0, [pc, #80]	; (80023cc <SendToApp+0x78>)
 800237a:	f7fd ff55 	bl	8000228 <strlen>
 800237e:	6178      	str	r0, [r7, #20]

	char header[1];
	//header + data: @data
	header[0]=APP_FRAME_START;
 8002380:	2340      	movs	r3, #64	; 0x40
 8002382:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&UART_RS232,header,1,100);
 8002384:	f107 010c 	add.w	r1, r7, #12
 8002388:	2364      	movs	r3, #100	; 0x64
 800238a:	2201      	movs	r2, #1
 800238c:	4810      	ldr	r0, [pc, #64]	; (80023d0 <SendToApp+0x7c>)
 800238e:	f006 fa7b 	bl	8008888 <HAL_UART_Transmit>
	HAL_UART_Transmit(&UART_RS232,buffer1,len,100);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	b29a      	uxth	r2, r3
 8002396:	2364      	movs	r3, #100	; 0x64
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <SendToApp+0x78>)
 800239a:	480d      	ldr	r0, [pc, #52]	; (80023d0 <SendToApp+0x7c>)
 800239c:	f006 fa74 	bl	8008888 <HAL_UART_Transmit>

    // footer: #\n\r
	header[0]=APP_FRAME_STOP;
 80023a0:	2323      	movs	r3, #35	; 0x23
 80023a2:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&UART_RS232,header,1,100);
 80023a4:	f107 010c 	add.w	r1, r7, #12
 80023a8:	2364      	movs	r3, #100	; 0x64
 80023aa:	2201      	movs	r2, #1
 80023ac:	4808      	ldr	r0, [pc, #32]	; (80023d0 <SendToApp+0x7c>)
 80023ae:	f006 fa6b 	bl	8008888 <HAL_UART_Transmit>
	HAL_UART_Transmit(&UART_RS232,"\r\n",2,100);
 80023b2:	2364      	movs	r3, #100	; 0x64
 80023b4:	2202      	movs	r2, #2
 80023b6:	4907      	ldr	r1, [pc, #28]	; (80023d4 <SendToApp+0x80>)
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <SendToApp+0x7c>)
 80023ba:	f006 fa65 	bl	8008888 <HAL_UART_Transmit>
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023c8:	b003      	add	sp, #12
 80023ca:	4770      	bx	lr
 80023cc:	20000bbc 	.word	0x20000bbc
 80023d0:	20000b5c 	.word	0x20000b5c
 80023d4:	0800e6ec 	.word	0x0800e6ec

080023d8 <uartAppHandle>:

void uartAppHandle(App *myUart)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	//LOG("rx=%c",myUart->charRec );

	if(myUart->charRec==APP_FRAME_STOP)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b23      	cmp	r3, #35	; 0x23
 80023e6:	d105      	bne.n	80023f4 <uartAppHandle+0x1c>
	{
		myUart->enReadFrame=false;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	709a      	strb	r2, [r3, #2]
		myUart->dataDoneFrame=true;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	705a      	strb	r2, [r3, #1]
	}
	if(myUart->enReadFrame)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	789b      	ldrb	r3, [r3, #2]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00d      	beq.n	8002418 <uartAppHandle+0x40>
	{
		myUart->arrData[myUart->countCharRec]=myUart->charRec;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	889b      	ldrh	r3, [r3, #4]
 8002400:	4619      	mov	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	440b      	add	r3, r1
 800240a:	719a      	strb	r2, [r3, #6]
		myUart->countCharRec++;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	889b      	ldrh	r3, [r3, #4]
 8002410:	3301      	adds	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	809a      	strh	r2, [r3, #4]
	}

	if(myUart->charRec==APP_FRAME_START)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d102      	bne.n	8002426 <uartAppHandle+0x4e>
		myUart->enReadFrame=true;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	709a      	strb	r2, [r3, #2]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <uartAppClear>:

void uartAppClear(App *myUart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	myUart->charRec=0;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
	myUart->dataDoneFrame=false;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	705a      	strb	r2, [r3, #1]
	myUart->enReadFrame=false;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	709a      	strb	r2, [r3, #2]
	memset(myUart->arrData,0,sizeof(myUart->arrData));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3306      	adds	r3, #6
 800244e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f008 f941 	bl	800a6dc <memset>
	myUart->countCharRec=0;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	809a      	strh	r2, [r3, #4]
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <handleAppRequets>:
bool bomMauStart	 = false;
uint16_t countFinish = 0;
bool huyLenh 		 = false;
//-----------------------------------------------------------
void handleAppRequets()
{
 8002468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246a:	b0db      	sub	sp, #364	; 0x16c
 800246c:	af04      	add	r7, sp, #16
//			printf(" PIN A2 = 1 \r\n");
//		else
//			printf(" PIN A2 = 0 \r\n");


		testDongNap();
 800246e:	f001 fd95 	bl	8003f9c <testDongNap>
		checkSensor();
 8002472:	f001 fcaf 	bl	8003dd4 <checkSensor>
		CheckTimeNow();
 8002476:	f002 fe2f 	bl	80050d8 <CheckTimeNow>
		ledTask();
 800247a:	f001 fe27 	bl	80040cc <ledTask>
		AlarmTask();
 800247e:	f002 fdc1 	bl	8005004 <AlarmTask>

		if(getAlarm_RuaDauPhun())
 8002482:	f003 fa87 	bl	8005994 <getAlarm_RuaDauPhun>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00f      	beq.n	80024ac <handleAppRequets+0x44>
		{
			checkSensor();
 800248c:	f001 fca2 	bl	8003dd4 <checkSensor>
			printf(" hen gio rua dau phun ben app \r\n");
 8002490:	4867      	ldr	r0, [pc, #412]	; (8002630 <handleAppRequets+0x1c8>)
 8002492:	f007 ffbd 	bl	800a410 <puts>
			myApp.dataDoneFrame  = true;
 8002496:	4b67      	ldr	r3, [pc, #412]	; (8002634 <handleAppRequets+0x1cc>)
 8002498:	2201      	movs	r2, #1
 800249a:	705a      	strb	r2, [r3, #1]
			sprintf(myApp.arrData,"%s","RuaDauPhun");
 800249c:	4a66      	ldr	r2, [pc, #408]	; (8002638 <handleAppRequets+0x1d0>)
 800249e:	4967      	ldr	r1, [pc, #412]	; (800263c <handleAppRequets+0x1d4>)
 80024a0:	4867      	ldr	r0, [pc, #412]	; (8002640 <handleAppRequets+0x1d8>)
 80024a2:	f007 ffbd 	bl	800a420 <siprintf>
			//ruaDauPhun();
			//OpenDoor();

			setAlarm_RuaDauPhun(0);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f003 fa80 	bl	80059ac <setAlarm_RuaDauPhun>
		}
		//xử lý cảm biến khi pha màu
		if(sttSensor3 == 0 && sttSensor2==0) // thung sơn ok và nap da mo //
 80024ac:	4b65      	ldr	r3, [pc, #404]	; (8002644 <handleAppRequets+0x1dc>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	f083 0301 	eor.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 808c 	beq.w	80025d4 <handleAppRequets+0x16c>
 80024bc:	4b62      	ldr	r3, [pc, #392]	; (8002648 <handleAppRequets+0x1e0>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f083 0301 	eor.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8084 	beq.w	80025d4 <handleAppRequets+0x16c>
		{
			// bom mau //
			if(bomMauStart)  // enable by setting pump //
 80024cc:	4b5f      	ldr	r3, [pc, #380]	; (800264c <handleAppRequets+0x1e4>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05b      	beq.n	800258c <handleAppRequets+0x124>
			{
				// allPumpIsRun();  -- disable  no de ko chay //
				dangPhaMau=true;
 80024d4:	4b5e      	ldr	r3, [pc, #376]	; (8002650 <handleAppRequets+0x1e8>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]

				if(ruadauphun_state == true)
 80024da:	4b5e      	ldr	r3, [pc, #376]	; (8002654 <handleAppRequets+0x1ec>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <handleAppRequets+0x82>
					sendFrame("dangRuaDauPhun");
 80024e2:	485d      	ldr	r0, [pc, #372]	; (8002658 <handleAppRequets+0x1f0>)
 80024e4:	f002 fbb0 	bl	8004c48 <sendFrame>
 80024e8:	e002      	b.n	80024f0 <handleAppRequets+0x88>
				else
				    sendFrame("dangPhaMau");
 80024ea:	485c      	ldr	r0, [pc, #368]	; (800265c <handleAppRequets+0x1f4>)
 80024ec:	f002 fbac 	bl	8004c48 <sendFrame>
				//printf(" dang pha mau \n\r");

				uint8_t SleepAll = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
				for(uint8_t i = 0;  i <16 ; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
 80024fc:	e014      	b.n	8002528 <handleAppRequets+0xc0>
				{
					SleepAll += bomMau[i].sleep;
 80024fe:	f897 2156 	ldrb.w	r2, [r7, #342]	; 0x156
 8002502:	4957      	ldr	r1, [pc, #348]	; (8002660 <handleAppRequets+0x1f8>)
 8002504:	4613      	mov	r3, r2
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3301      	adds	r3, #1
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002518:	4413      	add	r3, r2
 800251a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
				for(uint8_t i = 0;  i <16 ; i++)
 800251e:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8002522:	3301      	adds	r3, #1
 8002524:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
 8002528:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d9e6      	bls.n	80024fe <handleAppRequets+0x96>
				}

				if(SleepAll == 0 && ruadauphun_state == false)
 8002530:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002534:	2b00      	cmp	r3, #0
 8002536:	d114      	bne.n	8002562 <handleAppRequets+0xfa>
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <handleAppRequets+0x1ec>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <handleAppRequets+0xfa>
				{
					printf(" tat ca bom sleep, pha mau ok \r\n");
 8002546:	4847      	ldr	r0, [pc, #284]	; (8002664 <handleAppRequets+0x1fc>)
 8002548:	f007 ff62 	bl	800a410 <puts>
		            bomMauStart = 0;
 800254c:	4b3f      	ldr	r3, [pc, #252]	; (800264c <handleAppRequets+0x1e4>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
		            speaker_efect();
 8002552:	f002 fb53 	bl	8004bfc <speaker_efect>
		            CloseDoor();
 8002556:	f001 feb7 	bl	80042c8 <CloseDoor>
		            sendFrame("phaMauXong");
 800255a:	4843      	ldr	r0, [pc, #268]	; (8002668 <handleAppRequets+0x200>)
 800255c:	f002 fb74 	bl	8004c48 <sendFrame>
 8002560:	e014      	b.n	800258c <handleAppRequets+0x124>
				}
				else
					if (SleepAll == 0 && ruadauphun_state == true) {
 8002562:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002566:	2b00      	cmp	r3, #0
 8002568:	d110      	bne.n	800258c <handleAppRequets+0x124>
 800256a:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <handleAppRequets+0x1ec>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00c      	beq.n	800258c <handleAppRequets+0x124>
					printf(" tat ca bom sleep, pha mau ok \r\n");
 8002572:	483c      	ldr	r0, [pc, #240]	; (8002664 <handleAppRequets+0x1fc>)
 8002574:	f007 ff4c 	bl	800a410 <puts>
					bomMauStart = 0;
 8002578:	4b34      	ldr	r3, [pc, #208]	; (800264c <handleAppRequets+0x1e4>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
					speaker_efect();
 800257e:	f002 fb3d 	bl	8004bfc <speaker_efect>
					CloseDoor();
 8002582:	f001 fea1 	bl	80042c8 <CloseDoor>
					sendFrame("RuaDauPhunXong");
 8002586:	4839      	ldr	r0, [pc, #228]	; (800266c <handleAppRequets+0x204>)
 8002588:	f002 fb5e 	bl	8004c48 <sendFrame>
				}
			}

			if(!bomMauStart && !dangPhaMau)
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <handleAppRequets+0x1e4>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	f083 0301 	eor.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d037      	beq.n	800260a <handleAppRequets+0x1a2>
 800259a:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <handleAppRequets+0x1e8>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	f083 0301 	eor.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d030      	beq.n	800260a <handleAppRequets+0x1a2>
			{
				if(ruadauphun_state == true)
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <handleAppRequets+0x1ec>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <handleAppRequets+0x156>
				{
					sendFrame("RuaDauPhunXong");
 80025b0:	482e      	ldr	r0, [pc, #184]	; (800266c <handleAppRequets+0x204>)
 80025b2:	f002 fb49 	bl	8004c48 <sendFrame>
					printf("log>>rau dau phung xong \n\r");
 80025b6:	482e      	ldr	r0, [pc, #184]	; (8002670 <handleAppRequets+0x208>)
 80025b8:	f007 febc 	bl	800a334 <iprintf>
 80025bc:	e002      	b.n	80025c4 <handleAppRequets+0x15c>
				}
				else
				   sendFrame("phaMauXong");
 80025be:	482a      	ldr	r0, [pc, #168]	; (8002668 <handleAppRequets+0x200>)
 80025c0:	f002 fb42 	bl	8004c48 <sendFrame>

				printf("log>>Pha mau xong00000000 \n\r");
 80025c4:	482b      	ldr	r0, [pc, #172]	; (8002674 <handleAppRequets+0x20c>)
 80025c6:	f007 feb5 	bl	800a334 <iprintf>

				speaker_efect();
 80025ca:	f002 fb17 	bl	8004bfc <speaker_efect>
				CloseDoor();
 80025ce:	f001 fe7b 	bl	80042c8 <CloseDoor>
			if(!bomMauStart && !dangPhaMau)
 80025d2:	e01a      	b.n	800260a <handleAppRequets+0x1a2>
			// rua dau phun //
		}

		else
		{
			allPumpIsSleep();
 80025d4:	f001 fbd6 	bl	8003d84 <allPumpIsSleep>
			if(bomMauStart && dangPhaMau)
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <handleAppRequets+0x1e4>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d015      	beq.n	800260c <handleAppRequets+0x1a4>
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <handleAppRequets+0x1e8>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d011      	beq.n	800260c <handleAppRequets+0x1a4>
			{
				bomMauStart=false;
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <handleAppRequets+0x1e4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
				dangPhaMau=false;
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <handleAppRequets+0x1e8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
				sendFrame("dungPhaMau");
 80025f4:	4820      	ldr	r0, [pc, #128]	; (8002678 <handleAppRequets+0x210>)
 80025f6:	f002 fb27 	bl	8004c48 <sendFrame>
				printf("log>>dungPhaMau \n\r");
 80025fa:	4820      	ldr	r0, [pc, #128]	; (800267c <handleAppRequets+0x214>)
 80025fc:	f007 fe9a 	bl	800a334 <iprintf>
				speaker_efect();
 8002600:	f002 fafc 	bl	8004bfc <speaker_efect>
				CloseDoor();
 8002604:	f001 fe60 	bl	80042c8 <CloseDoor>
 8002608:	e000      	b.n	800260c <handleAppRequets+0x1a4>
			if(!bomMauStart && !dangPhaMau)
 800260a:	bf00      	nop
		}

		/*
		 * Kiểm tra trạng thái bơm xong
		 */
		if(bomMauStart && huyLenh==false)
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <handleAppRequets+0x1e4>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d064      	beq.n	80026de <handleAppRequets+0x276>
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <handleAppRequets+0x218>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d05d      	beq.n	80026de <handleAppRequets+0x276>
		{
			countFinish=0;
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <handleAppRequets+0x21c>)
 8002624:	2200      	movs	r2, #0
 8002626:	801a      	strh	r2, [r3, #0]
			for(int i=0;i<16;i++)
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800262e:	e048      	b.n	80026c2 <handleAppRequets+0x25a>
 8002630:	0800e6f0 	.word	0x0800e6f0
 8002634:	20000004 	.word	0x20000004
 8002638:	0800e710 	.word	0x0800e710
 800263c:	0800e71c 	.word	0x0800e71c
 8002640:	2000000a 	.word	0x2000000a
 8002644:	20000ba9 	.word	0x20000ba9
 8002648:	20000ba7 	.word	0x20000ba7
 800264c:	20000bb4 	.word	0x20000bb4
 8002650:	20000bab 	.word	0x20000bab
 8002654:	20000bac 	.word	0x20000bac
 8002658:	0800e720 	.word	0x0800e720
 800265c:	0800e730 	.word	0x0800e730
 8002660:	20000ccc 	.word	0x20000ccc
 8002664:	0800e73c 	.word	0x0800e73c
 8002668:	0800e75c 	.word	0x0800e75c
 800266c:	0800e768 	.word	0x0800e768
 8002670:	0800e778 	.word	0x0800e778
 8002674:	0800e794 	.word	0x0800e794
 8002678:	0800e7b4 	.word	0x0800e7b4
 800267c:	0800e7c0 	.word	0x0800e7c0
 8002680:	20000bb8 	.word	0x20000bb8
 8002684:	20000bb6 	.word	0x20000bb6
				if(bomMau[i].mililit==0) countFinish++;
 8002688:	4993      	ldr	r1, [pc, #588]	; (80028d8 <handleAppRequets+0x470>)
 800268a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	3314      	adds	r3, #20
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe fcd3 	bl	800104c <__aeabi_fcmpeq>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <handleAppRequets+0x250>
 80026ac:	4b8b      	ldr	r3, [pc, #556]	; (80028dc <handleAppRequets+0x474>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b89      	ldr	r3, [pc, #548]	; (80028dc <handleAppRequets+0x474>)
 80026b6:	801a      	strh	r2, [r3, #0]
			for(int i=0;i<16;i++)
 80026b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026bc:	3301      	adds	r3, #1
 80026be:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026c2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026c6:	2b0f      	cmp	r3, #15
 80026c8:	ddde      	ble.n	8002688 <handleAppRequets+0x220>

			if(countFinish==16)
 80026ca:	4b84      	ldr	r3, [pc, #528]	; (80028dc <handleAppRequets+0x474>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d105      	bne.n	80026de <handleAppRequets+0x276>
			{
				sendFrame("phaMauXong");
 80026d2:	4883      	ldr	r0, [pc, #524]	; (80028e0 <handleAppRequets+0x478>)
 80026d4:	f002 fab8 	bl	8004c48 <sendFrame>
				bomMauStart=false;
 80026d8:	4b82      	ldr	r3, [pc, #520]	; (80028e4 <handleAppRequets+0x47c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
		}

		/*
		 * Xử lý các lệnh gửi từ app
		 */
		if(myApp.dataDoneFrame)
 80026de:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <handleAppRequets+0x480>)
 80026e0:	785b      	ldrb	r3, [r3, #1]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f001 82e2 	beq.w	8003cac <handleAppRequets+0x1844>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 80026e8:	4880      	ldr	r0, [pc, #512]	; (80028ec <handleAppRequets+0x484>)
 80026ea:	f005 fccd 	bl	8008088 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim3);
 80026ee:	4880      	ldr	r0, [pc, #512]	; (80028f0 <handleAppRequets+0x488>)
 80026f0:	f005 fcca 	bl	8008088 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim4);
 80026f4:	487f      	ldr	r0, [pc, #508]	; (80028f4 <handleAppRequets+0x48c>)
 80026f6:	f005 fcc7 	bl	8008088 <HAL_TIM_Base_Stop_IT>
			speaker_efect();
 80026fa:	f002 fa7f 	bl	8004bfc <speaker_efect>
			sendFrame("boardConfirm");
 80026fe:	487e      	ldr	r0, [pc, #504]	; (80028f8 <handleAppRequets+0x490>)
 8002700:	f002 faa2 	bl	8004c48 <sendFrame>

			// format -> @@Ton_xx_yyy##  56_8910
			if(strstr(myApp.arrData,"@Ton"))
 8002704:	497d      	ldr	r1, [pc, #500]	; (80028fc <handleAppRequets+0x494>)
 8002706:	487e      	ldr	r0, [pc, #504]	; (8002900 <handleAppRequets+0x498>)
 8002708:	f007 fff0 	bl	800a6ec <strstr>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d053      	beq.n	80027ba <handleAppRequets+0x352>
			{
				printf(" cai dat Ton \r\n");
 8002712:	487c      	ldr	r0, [pc, #496]	; (8002904 <handleAppRequets+0x49c>)
 8002714:	f007 fe7c 	bl	800a410 <puts>
				uint8_t index =  (myApp.arrData[5] - 0x30)*10 + (myApp.arrData[6] - 0x30);
 8002718:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <handleAppRequets+0x480>)
 800271a:	7adb      	ldrb	r3, [r3, #11]
 800271c:	3b30      	subs	r3, #48	; 0x30
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	4413      	add	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <handleAppRequets+0x480>)
 800272c:	7b1b      	ldrb	r3, [r3, #12]
 800272e:	4413      	add	r3, r2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3b30      	subs	r3, #48	; 0x30
 8002734:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				uint16_t value =  (myApp.arrData[8] - 0x30)*100 + (myApp.arrData[9] - 0x30)*10 +  (myApp.arrData[10] - 0x30);
 8002738:	4b6b      	ldr	r3, [pc, #428]	; (80028e8 <handleAppRequets+0x480>)
 800273a:	7b9b      	ldrb	r3, [r3, #14]
 800273c:	3b30      	subs	r3, #48	; 0x30
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4413      	add	r3, r2
 8002746:	461a      	mov	r2, r3
 8002748:	0091      	lsls	r1, r2, #2
 800274a:	461a      	mov	r2, r3
 800274c:	460b      	mov	r3, r1
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <handleAppRequets+0x480>)
 8002756:	7bdb      	ldrb	r3, [r3, #15]
 8002758:	3b30      	subs	r3, #48	; 0x30
 800275a:	b29b      	uxth	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	0089      	lsls	r1, r1, #2
 8002760:	440b      	add	r3, r1
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	b29b      	uxth	r3, r3
 8002766:	4413      	add	r3, r2
 8002768:	b29a      	uxth	r2, r3
 800276a:	4b5f      	ldr	r3, [pc, #380]	; (80028e8 <handleAppRequets+0x480>)
 800276c:	7c1b      	ldrb	r3, [r3, #16]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4413      	add	r3, r2
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b30      	subs	r3, #48	; 0x30
 8002776:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
				printf(" index[%d]_Ton=%d \r\n", index, value);
 800277a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800277e:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 8002782:	4619      	mov	r1, r3
 8002784:	4860      	ldr	r0, [pc, #384]	; (8002908 <handleAppRequets+0x4a0>)
 8002786:	f007 fdd5 	bl	800a334 <iprintf>
				eep_write_word(200+ index*2,value );
 800278a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800278e:	3364      	adds	r3, #100	; 0x64
 8002790:	b29b      	uxth	r3, r3
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f003 f915 	bl	80059cc <eep_write_word>
				bomMau[index].Ton = value;
 80027a2:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 80027a6:	494c      	ldr	r1, [pc, #304]	; (80028d8 <handleAppRequets+0x470>)
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3328      	adds	r3, #40	; 0x28
 80027b4:	f8b7 2124 	ldrh.w	r2, [r7, #292]	; 0x124
 80027b8:	801a      	strh	r2, [r3, #0]
			}

			/*
			 *Xử lý kết nối với app
			 */
			if(strstr(myApp.arrData,"appStart"))
 80027ba:	4954      	ldr	r1, [pc, #336]	; (800290c <handleAppRequets+0x4a4>)
 80027bc:	4850      	ldr	r0, [pc, #320]	; (8002900 <handleAppRequets+0x498>)
 80027be:	f007 ff95 	bl	800a6ec <strstr>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <handleAppRequets+0x370>
			{
				printf("appStart");
 80027c8:	4850      	ldr	r0, [pc, #320]	; (800290c <handleAppRequets+0x4a4>)
 80027ca:	f007 fdb3 	bl	800a334 <iprintf>
				myApp.appRequestReadData=true;
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <handleAppRequets+0x480>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
 80027d6:	e026      	b.n	8002826 <handleAppRequets+0x3be>
			}
			else if(strstr(myApp.arrData,"Ping com usb"))
 80027d8:	494d      	ldr	r1, [pc, #308]	; (8002910 <handleAppRequets+0x4a8>)
 80027da:	4849      	ldr	r0, [pc, #292]	; (8002900 <handleAppRequets+0x498>)
 80027dc:	f007 ff86 	bl	800a6ec <strstr>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00c      	beq.n	8002800 <handleAppRequets+0x398>
			{
				myApp.send(USB,"Com usb is open");  //== SendToApp becasue it is po
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <handleAppRequets+0x480>)
 80027e8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80027ec:	4949      	ldr	r1, [pc, #292]	; (8002914 <handleAppRequets+0x4ac>)
 80027ee:	2000      	movs	r0, #0
 80027f0:	4798      	blx	r3
				printf("Com usb ok");
 80027f2:	4849      	ldr	r0, [pc, #292]	; (8002918 <handleAppRequets+0x4b0>)
 80027f4:	f007 fd9e 	bl	800a334 <iprintf>
				connectIsOpen=true;
 80027f8:	4b48      	ldr	r3, [pc, #288]	; (800291c <handleAppRequets+0x4b4>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e012      	b.n	8002826 <handleAppRequets+0x3be>
				//led_stt3(ON);
			}
			else if(strstr(myApp.arrData,"appStop"))
 8002800:	4947      	ldr	r1, [pc, #284]	; (8002920 <handleAppRequets+0x4b8>)
 8002802:	483f      	ldr	r0, [pc, #252]	; (8002900 <handleAppRequets+0x498>)
 8002804:	f007 ff72 	bl	800a6ec <strstr>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <handleAppRequets+0x3be>
			{
				//myApp.send(USB,"Com usb ok");
				printf("Com usb Close");
 800280e:	4845      	ldr	r0, [pc, #276]	; (8002924 <handleAppRequets+0x4bc>)
 8002810:	f007 fd90 	bl	800a334 <iprintf>
				connectIsOpen=false;
 8002814:	4b41      	ldr	r3, [pc, #260]	; (800291c <handleAppRequets+0x4b4>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
				led_stt3(OFF);
 800281a:	2200      	movs	r2, #0
 800281c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002820:	4841      	ldr	r0, [pc, #260]	; (8002928 <handleAppRequets+0x4c0>)
 8002822:	f003 fe0a 	bl	800643a <HAL_GPIO_WritePin>
			}

			if(strstr(myApp.arrData,"timeNow"))
 8002826:	4941      	ldr	r1, [pc, #260]	; (800292c <handleAppRequets+0x4c4>)
 8002828:	4835      	ldr	r0, [pc, #212]	; (8002900 <handleAppRequets+0x498>)
 800282a:	f007 ff5f 	bl	800a6ec <strstr>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d040      	beq.n	80028b6 <handleAppRequets+0x44e>
			{
				char txtTime[20]="";
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800283a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
				trim(myApp.arrData, txtTime, "[", "]");
 8002848:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800284c:	4b38      	ldr	r3, [pc, #224]	; (8002930 <handleAppRequets+0x4c8>)
 800284e:	4a39      	ldr	r2, [pc, #228]	; (8002934 <handleAppRequets+0x4cc>)
 8002850:	482b      	ldr	r0, [pc, #172]	; (8002900 <handleAppRequets+0x498>)
 8002852:	f003 f913 	bl	8005a7c <trim>
			    sscanf(txtTime, "%d:%d:%d", &timeNow.gio, &timeNow.phut, &timeNow.giay);
 8002856:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <handleAppRequets+0x4d0>)
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	4b37      	ldr	r3, [pc, #220]	; (800293c <handleAppRequets+0x4d4>)
 8002860:	4a37      	ldr	r2, [pc, #220]	; (8002940 <handleAppRequets+0x4d8>)
 8002862:	4938      	ldr	r1, [pc, #224]	; (8002944 <handleAppRequets+0x4dc>)
 8002864:	f007 fdfc 	bl	800a460 <siscanf>

			    timeNow.time_in_sec = timeNow.gio*3600 + timeNow.phut*60 + timeNow.giay;
 8002868:	4b35      	ldr	r3, [pc, #212]	; (8002940 <handleAppRequets+0x4d8>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002872:	fb03 f202 	mul.w	r2, r3, r2
 8002876:	4b32      	ldr	r3, [pc, #200]	; (8002940 <handleAppRequets+0x4d8>)
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	4619      	mov	r1, r3
 800287c:	460b      	mov	r3, r1
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a5b      	subs	r3, r3, r1
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <handleAppRequets+0x4d8>)
 8002888:	7892      	ldrb	r2, [r2, #2]
 800288a:	4413      	add	r3, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <handleAppRequets+0x4d8>)
 8002890:	60da      	str	r2, [r3, #12]
			    printf("\r\n Sync-> time now: %d:%d:%d --> time_in_sec = %d \n\r",timeNow.gio,timeNow.phut,timeNow.giay, timeNow.time_in_sec);
 8002892:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <handleAppRequets+0x4d8>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4619      	mov	r1, r3
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <handleAppRequets+0x4d8>)
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	461a      	mov	r2, r3
 800289e:	4b28      	ldr	r3, [pc, #160]	; (8002940 <handleAppRequets+0x4d8>)
 80028a0:	789b      	ldrb	r3, [r3, #2]
 80028a2:	4618      	mov	r0, r3
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <handleAppRequets+0x4d8>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	4603      	mov	r3, r0
 80028ac:	4826      	ldr	r0, [pc, #152]	; (8002948 <handleAppRequets+0x4e0>)
 80028ae:	f007 fd41 	bl	800a334 <iprintf>

			    //HAL_TIM_Base_Start_IT(&htim2); //ngắt tạo delay 1s
			    //ENABLE_TIMER_ALARM;
			    //checkSensor();
			    UpdateStatus();  // update status for PC //
 80028b2:	f001 fc2d 	bl	8004110 <UpdateStatus>
			}



			if(strstr(myApp.arrData,"Alarm"))
 80028b6:	4925      	ldr	r1, [pc, #148]	; (800294c <handleAppRequets+0x4e4>)
 80028b8:	4811      	ldr	r0, [pc, #68]	; (8002900 <handleAppRequets+0x498>)
 80028ba:	f007 ff17 	bl	800a6ec <strstr>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 827d 	beq.w	8002dc0 <handleAppRequets+0x958>
			{
			    printf("Setting Alarm: %s \n\r", (const  char*)(myApp.arrData));
 80028c6:	490e      	ldr	r1, [pc, #56]	; (8002900 <handleAppRequets+0x498>)
 80028c8:	4821      	ldr	r0, [pc, #132]	; (8002950 <handleAppRequets+0x4e8>)
 80028ca:	f007 fd33 	bl	800a334 <iprintf>

				char alarmTxt[10][20];
				for(int i=0;i<10;i++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028d4:	e086      	b.n	80029e4 <handleAppRequets+0x57c>
 80028d6:	bf00      	nop
 80028d8:	20000ccc 	.word	0x20000ccc
 80028dc:	20000bb6 	.word	0x20000bb6
 80028e0:	0800e75c 	.word	0x0800e75c
 80028e4:	20000bb4 	.word	0x20000bb4
 80028e8:	20000004 	.word	0x20000004
 80028ec:	200009ac 	.word	0x200009ac
 80028f0:	200009f4 	.word	0x200009f4
 80028f4:	20000a3c 	.word	0x20000a3c
 80028f8:	0800e7d4 	.word	0x0800e7d4
 80028fc:	0800e7e4 	.word	0x0800e7e4
 8002900:	2000000a 	.word	0x2000000a
 8002904:	0800e7ec 	.word	0x0800e7ec
 8002908:	0800e7fc 	.word	0x0800e7fc
 800290c:	0800e814 	.word	0x0800e814
 8002910:	0800e820 	.word	0x0800e820
 8002914:	0800e830 	.word	0x0800e830
 8002918:	0800e840 	.word	0x0800e840
 800291c:	20000ba4 	.word	0x20000ba4
 8002920:	0800e84c 	.word	0x0800e84c
 8002924:	0800e854 	.word	0x0800e854
 8002928:	40011400 	.word	0x40011400
 800292c:	0800e864 	.word	0x0800e864
 8002930:	0800e86c 	.word	0x0800e86c
 8002934:	0800e870 	.word	0x0800e870
 8002938:	20001122 	.word	0x20001122
 800293c:	20001121 	.word	0x20001121
 8002940:	20001120 	.word	0x20001120
 8002944:	0800e874 	.word	0x0800e874
 8002948:	0800e880 	.word	0x0800e880
 800294c:	0800e8b8 	.word	0x0800e8b8
 8002950:	0800e8c0 	.word	0x0800e8c0
				{
					memset(alarmTxt[i], 0, 20);
 8002954:	1d39      	adds	r1, r7, #4
 8002956:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	2214      	movs	r2, #20
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f007 feb7 	bl	800a6dc <memset>
					timeAlarm[i].gio  = 0;
 800296e:	4980      	ldr	r1, [pc, #512]	; (8002b70 <handleAppRequets+0x708>)
 8002970:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
					timeAlarm[i].phut = 0;
 8002982:	497b      	ldr	r1, [pc, #492]	; (8002b70 <handleAppRequets+0x708>)
 8002984:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3301      	adds	r3, #1
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
					timeAlarm[i].time = 0;
 8002998:	4975      	ldr	r1, [pc, #468]	; (8002b70 <handleAppRequets+0x708>)
 800299a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3304      	adds	r3, #4
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
					timeAlarm[i].en   = 0;
 80029ae:	4970      	ldr	r1, [pc, #448]	; (8002b70 <handleAppRequets+0x708>)
 80029b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3303      	adds	r3, #3
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
					timeAlarm[i].countTime = 0;
 80029c4:	496a      	ldr	r1, [pc, #424]	; (8002b70 <handleAppRequets+0x708>)
 80029c6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3308      	adds	r3, #8
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
				for(int i=0;i<10;i++)
 80029da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029de:	3301      	adds	r3, #1
 80029e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80029e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029e8:	2b09      	cmp	r3, #9
 80029ea:	ddb3      	ble.n	8002954 <handleAppRequets+0x4ec>
				}
				trim(myApp.arrData, alarmTxt[0], "A1", "-");
 80029ec:	1d39      	adds	r1, r7, #4
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <handleAppRequets+0x70c>)
 80029f0:	4a61      	ldr	r2, [pc, #388]	; (8002b78 <handleAppRequets+0x710>)
 80029f2:	4862      	ldr	r0, [pc, #392]	; (8002b7c <handleAppRequets+0x714>)
 80029f4:	f003 f842 	bl	8005a7c <trim>
				trim(myApp.arrData, alarmTxt[1], "A2", "-");
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	f103 0114 	add.w	r1, r3, #20
 80029fe:	4b5d      	ldr	r3, [pc, #372]	; (8002b74 <handleAppRequets+0x70c>)
 8002a00:	4a5f      	ldr	r2, [pc, #380]	; (8002b80 <handleAppRequets+0x718>)
 8002a02:	485e      	ldr	r0, [pc, #376]	; (8002b7c <handleAppRequets+0x714>)
 8002a04:	f003 f83a 	bl	8005a7c <trim>
				trim(myApp.arrData, alarmTxt[2], "A3", "-");
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002a0e:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <handleAppRequets+0x70c>)
 8002a10:	4a5c      	ldr	r2, [pc, #368]	; (8002b84 <handleAppRequets+0x71c>)
 8002a12:	485a      	ldr	r0, [pc, #360]	; (8002b7c <handleAppRequets+0x714>)
 8002a14:	f003 f832 	bl	8005a7c <trim>
				trim(myApp.arrData, alarmTxt[3], "A4", "-");
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002a1e:	4b55      	ldr	r3, [pc, #340]	; (8002b74 <handleAppRequets+0x70c>)
 8002a20:	4a59      	ldr	r2, [pc, #356]	; (8002b88 <handleAppRequets+0x720>)
 8002a22:	4856      	ldr	r0, [pc, #344]	; (8002b7c <handleAppRequets+0x714>)
 8002a24:	f003 f82a 	bl	8005a7c <trim>
				trim(myApp.arrData, alarmTxt[4], "A5", "-");
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <handleAppRequets+0x70c>)
 8002a30:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <handleAppRequets+0x724>)
 8002a32:	4852      	ldr	r0, [pc, #328]	; (8002b7c <handleAppRequets+0x714>)
 8002a34:	f003 f822 	bl	8005a7c <trim>
				trim(myApp.arrData, alarmTxt[5], "A6", "-");
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <handleAppRequets+0x70c>)
 8002a40:	4a53      	ldr	r2, [pc, #332]	; (8002b90 <handleAppRequets+0x728>)
 8002a42:	484e      	ldr	r0, [pc, #312]	; (8002b7c <handleAppRequets+0x714>)
 8002a44:	f003 f81a 	bl	8005a7c <trim>
				trim(myApp.arrData, alarmTxt[6], "A7", "-");
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8002a4e:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <handleAppRequets+0x70c>)
 8002a50:	4a50      	ldr	r2, [pc, #320]	; (8002b94 <handleAppRequets+0x72c>)
 8002a52:	484a      	ldr	r0, [pc, #296]	; (8002b7c <handleAppRequets+0x714>)
 8002a54:	f003 f812 	bl	8005a7c <trim>
				trim(myApp.arrData, alarmTxt[7], "A8", "-");
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8002a5e:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <handleAppRequets+0x70c>)
 8002a60:	4a4d      	ldr	r2, [pc, #308]	; (8002b98 <handleAppRequets+0x730>)
 8002a62:	4846      	ldr	r0, [pc, #280]	; (8002b7c <handleAppRequets+0x714>)
 8002a64:	f003 f80a 	bl	8005a7c <trim>
				trim(myApp.arrData, alarmTxt[8], "A9", "-");
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <handleAppRequets+0x70c>)
 8002a70:	4a4a      	ldr	r2, [pc, #296]	; (8002b9c <handleAppRequets+0x734>)
 8002a72:	4842      	ldr	r0, [pc, #264]	; (8002b7c <handleAppRequets+0x714>)
 8002a74:	f003 f802 	bl	8005a7c <trim>
				trim(myApp.arrData, alarmTxt[9], "A10", "-");
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <handleAppRequets+0x70c>)
 8002a80:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <handleAppRequets+0x738>)
 8002a82:	483e      	ldr	r0, [pc, #248]	; (8002b7c <handleAppRequets+0x714>)
 8002a84:	f002 fffa 	bl	8005a7c <trim>

				for(int i=0;i<10;i++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002a8e:	e012      	b.n	8002ab6 <handleAppRequets+0x64e>
				{
					printf(alarmTxt[i]);
 8002a90:	1d39      	adds	r1, r7, #4
 8002a92:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f007 fc47 	bl	800a334 <iprintf>
					printf("\r\n");
 8002aa6:	483f      	ldr	r0, [pc, #252]	; (8002ba4 <handleAppRequets+0x73c>)
 8002aa8:	f007 fcb2 	bl	800a410 <puts>
				for(int i=0;i<10;i++)
 8002aac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002ab6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002aba:	2b09      	cmp	r3, #9
 8002abc:	dde8      	ble.n	8002a90 <handleAppRequets+0x628>
				}

				//hẹn giờ khuấy màu
				for(int i=0;i<10;i++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002ac4:	e04b      	b.n	8002b5e <handleAppRequets+0x6f6>
				{
					timeAlarm[i].addr.gio =100+8*i;
 8002ac6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3364      	adds	r3, #100	; 0x64
 8002ad2:	b298      	uxth	r0, r3
 8002ad4:	4926      	ldr	r1, [pc, #152]	; (8002b70 <handleAppRequets+0x708>)
 8002ad6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3310      	adds	r3, #16
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	801a      	strh	r2, [r3, #0]
					timeAlarm[i].addr.phut=100+8*i+2;
 8002aea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3366      	adds	r3, #102	; 0x66
 8002af6:	b298      	uxth	r0, r3
 8002af8:	491d      	ldr	r1, [pc, #116]	; (8002b70 <handleAppRequets+0x708>)
 8002afa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	3312      	adds	r3, #18
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	801a      	strh	r2, [r3, #0]
					timeAlarm[i].addr.time=100+8*i+4;
 8002b0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b12:	330d      	adds	r3, #13
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	b298      	uxth	r0, r3
 8002b1a:	4915      	ldr	r1, [pc, #84]	; (8002b70 <handleAppRequets+0x708>)
 8002b1c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	3316      	adds	r3, #22
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	801a      	strh	r2, [r3, #0]
					timeAlarm[i].addr.en  =100+8*i+6;
 8002b30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	336a      	adds	r3, #106	; 0x6a
 8002b3c:	b298      	uxth	r0, r3
 8002b3e:	490c      	ldr	r1, [pc, #48]	; (8002b70 <handleAppRequets+0x708>)
 8002b40:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3318      	adds	r3, #24
 8002b50:	4602      	mov	r2, r0
 8002b52:	801a      	strh	r2, [r3, #0]
				for(int i=0;i<10;i++)
 8002b54:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002b5e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b62:	2b09      	cmp	r3, #9
 8002b64:	ddaf      	ble.n	8002ac6 <handleAppRequets+0x65e>
				}
				for (int i = 0; i < 10; i++) {
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002b6c:	e123      	b.n	8002db6 <handleAppRequets+0x94e>
 8002b6e:	bf00      	nop
 8002b70:	2000113c 	.word	0x2000113c
 8002b74:	0800e8d8 	.word	0x0800e8d8
 8002b78:	0800e8dc 	.word	0x0800e8dc
 8002b7c:	2000000a 	.word	0x2000000a
 8002b80:	0800e8e0 	.word	0x0800e8e0
 8002b84:	0800e8e4 	.word	0x0800e8e4
 8002b88:	0800e8e8 	.word	0x0800e8e8
 8002b8c:	0800e8ec 	.word	0x0800e8ec
 8002b90:	0800e8f0 	.word	0x0800e8f0
 8002b94:	0800e8f4 	.word	0x0800e8f4
 8002b98:	0800e8f8 	.word	0x0800e8f8
 8002b9c:	0800e8fc 	.word	0x0800e8fc
 8002ba0:	0800e900 	.word	0x0800e900
 8002ba4:	0800e904 	.word	0x0800e904
				    char temp[20] = "";
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002bae:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
				    unsigned int tempTime = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				    sscanf(alarmTxt[i], "[%d,%d,%d,%d]", &timeAlarm[i].gio, &timeAlarm[i].phut, &tempTime, &timeAlarm[i].en);
 8002bc2:	1d39      	adds	r1, r7, #4
 8002bc4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	18c8      	adds	r0, r1, r3
 8002bd2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4aa7      	ldr	r2, [pc, #668]	; (8002e7c <handleAppRequets+0xa14>)
 8002be0:	1899      	adds	r1, r3, r2
 8002be2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4aa3      	ldr	r2, [pc, #652]	; (8002e7c <handleAppRequets+0xa14>)
 8002bf0:	4413      	add	r3, r2
 8002bf2:	1c5c      	adds	r4, r3, #1
 8002bf4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4a9e      	ldr	r2, [pc, #632]	; (8002e7c <handleAppRequets+0xa14>)
 8002c02:	4413      	add	r3, r2
 8002c04:	3303      	adds	r3, #3
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	4623      	mov	r3, r4
 8002c10:	460a      	mov	r2, r1
 8002c12:	499b      	ldr	r1, [pc, #620]	; (8002e80 <handleAppRequets+0xa18>)
 8002c14:	f007 fc24 	bl	800a460 <siscanf>
				    timeAlarm[i].time = tempTime;
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	b2d8      	uxtb	r0, r3
 8002c1e:	4997      	ldr	r1, [pc, #604]	; (8002e7c <handleAppRequets+0xa14>)
 8002c20:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4602      	mov	r2, r0
 8002c32:	701a      	strb	r2, [r3, #0]

				    timeAlarm[i].time_in_sec = timeAlarm[i].gio*3600 + timeAlarm[i].phut * 60;
 8002c34:	4991      	ldr	r1, [pc, #580]	; (8002e7c <handleAppRequets+0xa14>)
 8002c36:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c4c:	fb03 f102 	mul.w	r1, r3, r2
 8002c50:	488a      	ldr	r0, [pc, #552]	; (8002e7c <handleAppRequets+0xa14>)
 8002c52:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4403      	add	r3, r0
 8002c60:	3301      	adds	r3, #1
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	4618      	mov	r0, r3
 8002c72:	4982      	ldr	r1, [pc, #520]	; (8002e7c <handleAppRequets+0xa14>)
 8002c74:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	330c      	adds	r3, #12
 8002c84:	6018      	str	r0, [r3, #0]

					eep_write_word(timeAlarm[i].addr.gio , timeAlarm[i].gio);
 8002c86:	497d      	ldr	r1, [pc, #500]	; (8002e7c <handleAppRequets+0xa14>)
 8002c88:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3310      	adds	r3, #16
 8002c98:	8818      	ldrh	r0, [r3, #0]
 8002c9a:	4978      	ldr	r1, [pc, #480]	; (8002e7c <handleAppRequets+0xa14>)
 8002c9c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f002 fe8c 	bl	80059cc <eep_write_word>
					eep_write_word(timeAlarm[i].addr.phut, timeAlarm[i].phut);
 8002cb4:	4971      	ldr	r1, [pc, #452]	; (8002e7c <handleAppRequets+0xa14>)
 8002cb6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3312      	adds	r3, #18
 8002cc6:	8818      	ldrh	r0, [r3, #0]
 8002cc8:	496c      	ldr	r1, [pc, #432]	; (8002e7c <handleAppRequets+0xa14>)
 8002cca:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3301      	adds	r3, #1
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f002 fe74 	bl	80059cc <eep_write_word>
					eep_write_word(timeAlarm[i].addr.time, timeAlarm[i].time);
 8002ce4:	4965      	ldr	r1, [pc, #404]	; (8002e7c <handleAppRequets+0xa14>)
 8002ce6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3316      	adds	r3, #22
 8002cf6:	8818      	ldrh	r0, [r3, #0]
 8002cf8:	4960      	ldr	r1, [pc, #384]	; (8002e7c <handleAppRequets+0xa14>)
 8002cfa:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3304      	adds	r3, #4
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f002 fe5c 	bl	80059cc <eep_write_word>
					eep_write_word(timeAlarm[i].addr.en,   timeAlarm[i].en);
 8002d14:	4959      	ldr	r1, [pc, #356]	; (8002e7c <handleAppRequets+0xa14>)
 8002d16:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	3318      	adds	r3, #24
 8002d26:	8818      	ldrh	r0, [r3, #0]
 8002d28:	4954      	ldr	r1, [pc, #336]	; (8002e7c <handleAppRequets+0xa14>)
 8002d2a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3303      	adds	r3, #3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f002 fe44 	bl	80059cc <eep_write_word>

					printf("gio:%d phut:%d interval: %d state:%-> alarmStatus= %d \r\n", timeAlarm[i].gio, timeAlarm[i].phut, tempTime, timeAlarm[i].en,timeAlarm[i].time_in_sec );
 8002d44:	494d      	ldr	r1, [pc, #308]	; (8002e7c <handleAppRequets+0xa14>)
 8002d46:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	461d      	mov	r5, r3
 8002d58:	4948      	ldr	r1, [pc, #288]	; (8002e7c <handleAppRequets+0xa14>)
 8002d5a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3301      	adds	r3, #1
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	461e      	mov	r6, r3
 8002d6e:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8002d72:	4842      	ldr	r0, [pc, #264]	; (8002e7c <handleAppRequets+0xa14>)
 8002d74:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4403      	add	r3, r0
 8002d82:	3303      	adds	r3, #3
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461c      	mov	r4, r3
 8002d88:	483c      	ldr	r0, [pc, #240]	; (8002e7c <handleAppRequets+0xa14>)
 8002d8a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4403      	add	r3, r0
 8002d98:	330c      	adds	r3, #12
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	9400      	str	r4, [sp, #0]
 8002da0:	460b      	mov	r3, r1
 8002da2:	4632      	mov	r2, r6
 8002da4:	4629      	mov	r1, r5
 8002da6:	4837      	ldr	r0, [pc, #220]	; (8002e84 <handleAppRequets+0xa1c>)
 8002da8:	f007 fac4 	bl	800a334 <iprintf>
				for (int i = 0; i < 10; i++) {
 8002dac:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002db0:	3301      	adds	r3, #1
 8002db2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002db6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	f77f aef4 	ble.w	8002ba8 <handleAppRequets+0x740>

			}

			/* dong mo cua*/
			// sennsor1  ON -- sensot 2 OFF
			if(strstr(myApp.arrData,">CloseDoor"))
 8002dc0:	4931      	ldr	r1, [pc, #196]	; (8002e88 <handleAppRequets+0xa20>)
 8002dc2:	4832      	ldr	r0, [pc, #200]	; (8002e8c <handleAppRequets+0xa24>)
 8002dc4:	f007 fc92 	bl	800a6ec <strstr>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01e      	beq.n	8002e0c <handleAppRequets+0x9a4>
			{
				ruadauphun_state = false;
 8002dce:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <handleAppRequets+0xa28>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]

				HAL_Delay(2);
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	f002 ff11 	bl	8005bfc <HAL_Delay>
				checkSensor();
 8002dda:	f000 fffb 	bl	8003dd4 <checkSensor>
				HAL_Delay(2);
 8002dde:	2002      	movs	r0, #2
 8002de0:	f002 ff0c 	bl	8005bfc <HAL_Delay>

				printf("DongCua\n\r");
 8002de4:	482b      	ldr	r0, [pc, #172]	; (8002e94 <handleAppRequets+0xa2c>)
 8002de6:	f007 faa5 	bl	800a334 <iprintf>
                // check sensor -> if close -> return //
				if (sttSensor1 == 0 && sttSensor2 == 1)
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <handleAppRequets+0xa30>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	f083 0301 	eor.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <handleAppRequets+0x9a0>
 8002df8:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <handleAppRequets+0xa34>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <handleAppRequets+0x9a0>
				{
					printf(" close is ok -> action not valid \r\n");
 8002e00:	4827      	ldr	r0, [pc, #156]	; (8002ea0 <handleAppRequets+0xa38>)
 8002e02:	f007 fb05 	bl	800a410 <puts>
 8002e06:	e001      	b.n	8002e0c <handleAppRequets+0x9a4>

				}
				else

				CloseDoor();
 8002e08:	f001 fa5e 	bl	80042c8 <CloseDoor>
			}

			// sennsor1  OFF -- sensot 2 ON
			if (strstr(myApp.arrData, ">OpenDoor"))
 8002e0c:	4925      	ldr	r1, [pc, #148]	; (8002ea4 <handleAppRequets+0xa3c>)
 8002e0e:	481f      	ldr	r0, [pc, #124]	; (8002e8c <handleAppRequets+0xa24>)
 8002e10:	f007 fc6c 	bl	800a6ec <strstr>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01e      	beq.n	8002e58 <handleAppRequets+0x9f0>
			{
				printf("MoCua\n\r");
 8002e1a:	4823      	ldr	r0, [pc, #140]	; (8002ea8 <handleAppRequets+0xa40>)
 8002e1c:	f007 fa8a 	bl	800a334 <iprintf>
				ruadauphun_state = false;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <handleAppRequets+0xa28>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]

				HAL_Delay(2);
 8002e26:	2002      	movs	r0, #2
 8002e28:	f002 fee8 	bl	8005bfc <HAL_Delay>
				checkSensor();
 8002e2c:	f000 ffd2 	bl	8003dd4 <checkSensor>
				HAL_Delay(2);
 8002e30:	2002      	movs	r0, #2
 8002e32:	f002 fee3 	bl	8005bfc <HAL_Delay>

				// check sensor -> if close -> return //
				if (sttSensor1 == 1 && sttSensor2 == 0) {
 8002e36:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <handleAppRequets+0xa30>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <handleAppRequets+0x9ec>
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <handleAppRequets+0xa34>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	f083 0301 	eor.w	r3, r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <handleAppRequets+0x9ec>
					printf(" Open is ok -> action not valid \r\n");
 8002e4c:	4817      	ldr	r0, [pc, #92]	; (8002eac <handleAppRequets+0xa44>)
 8002e4e:	f007 fadf 	bl	800a410 <puts>
 8002e52:	e001      	b.n	8002e58 <handleAppRequets+0x9f0>

				} else

					OpenDoor();
 8002e54:	f001 f9c0 	bl	80041d8 <OpenDoor>

			/*
			 * Xử lý lệnh pha màu
			 */

			if(strstr(myApp.arrData,"dataColorPump"))
 8002e58:	4915      	ldr	r1, [pc, #84]	; (8002eb0 <handleAppRequets+0xa48>)
 8002e5a:	480c      	ldr	r0, [pc, #48]	; (8002e8c <handleAppRequets+0xa24>)
 8002e5c:	f007 fc46 	bl	800a6ec <strstr>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8265 	beq.w	8003332 <handleAppRequets+0xeca>
			{
				printf(">>>>>>>>>lenh set mau va so xung ColorPump\n\r");
 8002e68:	4812      	ldr	r0, [pc, #72]	; (8002eb4 <handleAppRequets+0xa4c>)
 8002e6a:	f007 fa63 	bl	800a334 <iprintf>

				//quan trọng
				huyLenh=false;
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <handleAppRequets+0xa50>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<16;i++)   // clear mililit, counter HighSpeed , counter low speed //
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002e7a:	e074      	b.n	8002f66 <handleAppRequets+0xafe>
 8002e7c:	2000113c 	.word	0x2000113c
 8002e80:	0800e908 	.word	0x0800e908
 8002e84:	0800e918 	.word	0x0800e918
 8002e88:	0800e954 	.word	0x0800e954
 8002e8c:	2000000a 	.word	0x2000000a
 8002e90:	20000bac 	.word	0x20000bac
 8002e94:	0800e960 	.word	0x0800e960
 8002e98:	20000ba5 	.word	0x20000ba5
 8002e9c:	20000ba7 	.word	0x20000ba7
 8002ea0:	0800e96c 	.word	0x0800e96c
 8002ea4:	0800e990 	.word	0x0800e990
 8002ea8:	0800e99c 	.word	0x0800e99c
 8002eac:	0800e9a4 	.word	0x0800e9a4
 8002eb0:	0800e9c8 	.word	0x0800e9c8
 8002eb4:	0800e9d8 	.word	0x0800e9d8
 8002eb8:	20000bb8 	.word	0x20000bb8
				{
					bomMau[i].mililit			= 0;
 8002ebc:	4967      	ldr	r1, [pc, #412]	; (800305c <handleAppRequets+0xbf4>)
 8002ebe:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3314      	adds	r3, #20
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
					bomMau[i].countHighSpeed	= 0;
 8002ed4:	4961      	ldr	r1, [pc, #388]	; (800305c <handleAppRequets+0xbf4>)
 8002ed6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
					bomMau[i].countLowSpeed		= 0;
 8002eea:	495c      	ldr	r1, [pc, #368]	; (800305c <handleAppRequets+0xbf4>)
 8002eec:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3310      	adds	r3, #16
 8002efc:	2200      	movs	r2, #0
 8002efe:	801a      	strh	r2, [r3, #0]
					bomMau[i].Counter_Ton       = 0;
 8002f00:	4956      	ldr	r1, [pc, #344]	; (800305c <handleAppRequets+0xbf4>)
 8002f02:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	332a      	adds	r3, #42	; 0x2a
 8002f12:	2200      	movs	r2, #0
 8002f14:	801a      	strh	r2, [r3, #0]
					bomMau[i].sleep = SLEEP;
 8002f16:	4951      	ldr	r1, [pc, #324]	; (800305c <handleAppRequets+0xbf4>)
 8002f18:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3301      	adds	r3, #1
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(bomMau[i].EN_Port, bomMau[i].EN_Pin, 1);
 8002f2c:	494b      	ldr	r1, [pc, #300]	; (800305c <handleAppRequets+0xbf4>)
 8002f2e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	333c      	adds	r3, #60	; 0x3c
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	4946      	ldr	r1, [pc, #280]	; (800305c <handleAppRequets+0xbf4>)
 8002f42:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3340      	adds	r3, #64	; 0x40
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	2201      	movs	r2, #1
 8002f56:	4619      	mov	r1, r3
 8002f58:	f003 fa6f 	bl	800643a <HAL_GPIO_WritePin>
				for(int i=0;i<16;i++)   // clear mililit, counter HighSpeed , counter low speed //
 8002f5c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002f60:	3301      	adds	r3, #1
 8002f62:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002f66:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	dda6      	ble.n	8002ebc <handleAppRequets+0xa54>
				}

				char txt[7][20];
				for(int i=0;i<5;i++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002f74:	e011      	b.n	8002f9a <handleAppRequets+0xb32>
					memset(txt[i],0,20);
 8002f76:	1d39      	adds	r1, r7, #4
 8002f78:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	2214      	movs	r2, #20
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f007 fba6 	bl	800a6dc <memset>
				for(int i=0;i<5;i++)
 8002f90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f94:	3301      	adds	r3, #1
 8002f96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002f9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	dde9      	ble.n	8002f76 <handleAppRequets+0xb0e>

				printf("data: %s \n\r", myApp.arrData);
 8002fa2:	492f      	ldr	r1, [pc, #188]	; (8003060 <handleAppRequets+0xbf8>)
 8002fa4:	482f      	ldr	r0, [pc, #188]	; (8003064 <handleAppRequets+0xbfc>)
 8002fa6:	f007 f9c5 	bl	800a334 <iprintf>

				trim(myApp.arrData, txt[0], "M1", "-");
 8002faa:	1d39      	adds	r1, r7, #4
 8002fac:	4b2e      	ldr	r3, [pc, #184]	; (8003068 <handleAppRequets+0xc00>)
 8002fae:	4a2f      	ldr	r2, [pc, #188]	; (800306c <handleAppRequets+0xc04>)
 8002fb0:	482b      	ldr	r0, [pc, #172]	; (8003060 <handleAppRequets+0xbf8>)
 8002fb2:	f002 fd63 	bl	8005a7c <trim>
				trim(myApp.arrData, txt[1], "M2", "-");
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	f103 0114 	add.w	r1, r3, #20
 8002fbc:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <handleAppRequets+0xc00>)
 8002fbe:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <handleAppRequets+0xc08>)
 8002fc0:	4827      	ldr	r0, [pc, #156]	; (8003060 <handleAppRequets+0xbf8>)
 8002fc2:	f002 fd5b 	bl	8005a7c <trim>
				trim(myApp.arrData, txt[2], "M3", "-");
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002fcc:	4b26      	ldr	r3, [pc, #152]	; (8003068 <handleAppRequets+0xc00>)
 8002fce:	4a29      	ldr	r2, [pc, #164]	; (8003074 <handleAppRequets+0xc0c>)
 8002fd0:	4823      	ldr	r0, [pc, #140]	; (8003060 <handleAppRequets+0xbf8>)
 8002fd2:	f002 fd53 	bl	8005a7c <trim>
				trim(myApp.arrData, txt[3], "M4", "-");
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <handleAppRequets+0xc00>)
 8002fde:	4a26      	ldr	r2, [pc, #152]	; (8003078 <handleAppRequets+0xc10>)
 8002fe0:	481f      	ldr	r0, [pc, #124]	; (8003060 <handleAppRequets+0xbf8>)
 8002fe2:	f002 fd4b 	bl	8005a7c <trim>
				trim(myApp.arrData, txt[4], "M5", "-");
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002fec:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <handleAppRequets+0xc00>)
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <handleAppRequets+0xc14>)
 8002ff0:	481b      	ldr	r0, [pc, #108]	; (8003060 <handleAppRequets+0xbf8>)
 8002ff2:	f002 fd43 	bl	8005a7c <trim>
				trim(myApp.arrData, txt[5], "M6", "-");
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <handleAppRequets+0xc00>)
 8002ffe:	4a20      	ldr	r2, [pc, #128]	; (8003080 <handleAppRequets+0xc18>)
 8003000:	4817      	ldr	r0, [pc, #92]	; (8003060 <handleAppRequets+0xbf8>)
 8003002:	f002 fd3b 	bl	8005a7c <trim>
				trim(myApp.arrData, txt[6], "M7", "-");
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <handleAppRequets+0xc00>)
 800300e:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <handleAppRequets+0xc1c>)
 8003010:	4813      	ldr	r0, [pc, #76]	; (8003060 <handleAppRequets+0xbf8>)
 8003012:	f002 fd33 	bl	8005a7c <trim>

				for (int i = 0; i < 7; i++)
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800301c:	e012      	b.n	8003044 <handleAppRequets+0xbdc>
				{
					printf("\r\n txt[%d] = %s", i, (const char*)txt[i]);
 800301e:	1d39      	adds	r1, r7, #4
 8003020:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	461a      	mov	r2, r3
 8003030:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8003034:	4814      	ldr	r0, [pc, #80]	; (8003088 <handleAppRequets+0xc20>)
 8003036:	f007 f97d 	bl	800a334 <iprintf>
				for (int i = 0; i < 7; i++)
 800303a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800303e:	3301      	adds	r3, #1
 8003040:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003044:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003048:	2b06      	cmp	r3, #6
 800304a:	dde8      	ble.n	800301e <handleAppRequets+0xbb6>
	                -2  số ống màu
	                -3  xung 1ml
	                -4  xung 0.1ml
	                -5  xung 0.01ml
	             */
					printf("\n\r");
 800304c:	480f      	ldr	r0, [pc, #60]	; (800308c <handleAppRequets+0xc24>)
 800304e:	f007 f971 	bl	800a334 <iprintf>

				    for (int i = 0; i < 7; i++)
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003058:	e106      	b.n	8003268 <handleAppRequets+0xe00>
 800305a:	bf00      	nop
 800305c:	20000ccc 	.word	0x20000ccc
 8003060:	2000000a 	.word	0x2000000a
 8003064:	0800ea08 	.word	0x0800ea08
 8003068:	0800e8d8 	.word	0x0800e8d8
 800306c:	0800ea14 	.word	0x0800ea14
 8003070:	0800ea18 	.word	0x0800ea18
 8003074:	0800ea1c 	.word	0x0800ea1c
 8003078:	0800ea20 	.word	0x0800ea20
 800307c:	0800ea24 	.word	0x0800ea24
 8003080:	0800ea28 	.word	0x0800ea28
 8003084:	0800ea2c 	.word	0x0800ea2c
 8003088:	0800ea30 	.word	0x0800ea30
 800308c:	0800ea40 	.word	0x0800ea40
					{
				    	HAL_Delay(5);
 8003090:	2005      	movs	r0, #5
 8003092:	f002 fdb3 	bl	8005bfc <HAL_Delay>
					    sscanf(txt[i], "[%f,%d,%d,%d,%d]", &num1, &num2, &num3, &num4, &num5);
 8003096:	1d39      	adds	r1, r7, #4
 8003098:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	18c8      	adds	r0, r1, r3
 80030a6:	4bad      	ldr	r3, [pc, #692]	; (800335c <handleAppRequets+0xef4>)
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	4bad      	ldr	r3, [pc, #692]	; (8003360 <handleAppRequets+0xef8>)
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	4bad      	ldr	r3, [pc, #692]	; (8003364 <handleAppRequets+0xefc>)
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	4bad      	ldr	r3, [pc, #692]	; (8003368 <handleAppRequets+0xf00>)
 80030b4:	4aad      	ldr	r2, [pc, #692]	; (800336c <handleAppRequets+0xf04>)
 80030b6:	49ae      	ldr	r1, [pc, #696]	; (8003370 <handleAppRequets+0xf08>)
 80030b8:	f007 f9d2 	bl	800a460 <siscanf>

					    //printf("num vale = %d \n\r", num2);
					    if (num2 > 0)
 80030bc:	4baa      	ldr	r3, [pc, #680]	; (8003368 <handleAppRequets+0xf00>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80c7 	beq.w	8003254 <handleAppRequets+0xdec>
					    {
					    	printf("\r\n Ong mau: %d ", num2);
 80030c6:	4ba8      	ldr	r3, [pc, #672]	; (8003368 <handleAppRequets+0xf00>)
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	4619      	mov	r1, r3
 80030cc:	48a9      	ldr	r0, [pc, #676]	; (8003374 <handleAppRequets+0xf0c>)
 80030ce:	f007 f931 	bl	800a334 <iprintf>

					    	uint8_t id = num2 - 1;
 80030d2:	4ba5      	ldr	r3, [pc, #660]	; (8003368 <handleAppRequets+0xf00>)
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123

					    	bomMau[id].mililit		=	0;
 80030de:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80030e2:	49a5      	ldr	r1, [pc, #660]	; (8003378 <handleAppRequets+0xf10>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3314      	adds	r3, #20
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
					    	bomMau[id].pulse1ml		=	0;
 80030f6:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80030fa:	499f      	ldr	r1, [pc, #636]	; (8003378 <handleAppRequets+0xf10>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	331c      	adds	r3, #28
 8003108:	2200      	movs	r2, #0
 800310a:	801a      	strh	r2, [r3, #0]
					    	bomMau[id].pulse01ml	=	0;
 800310c:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 8003110:	4999      	ldr	r1, [pc, #612]	; (8003378 <handleAppRequets+0xf10>)
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	331e      	adds	r3, #30
 800311e:	2200      	movs	r2, #0
 8003120:	801a      	strh	r2, [r3, #0]
					    	bomMau[id].pulse001ml	=	0;
 8003122:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 8003126:	4994      	ldr	r1, [pc, #592]	; (8003378 <handleAppRequets+0xf10>)
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3320      	adds	r3, #32
 8003134:	2200      	movs	r2, #0
 8003136:	801a      	strh	r2, [r3, #0]

					    	bomMau[id].mililit		=	num1;
 8003138:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 800313c:	4b8b      	ldr	r3, [pc, #556]	; (800336c <handleAppRequets+0xf04>)
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	488d      	ldr	r0, [pc, #564]	; (8003378 <handleAppRequets+0xf10>)
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4403      	add	r3, r0
 800314c:	3314      	adds	r3, #20
 800314e:	6019      	str	r1, [r3, #0]
					    	bomMau[id].pulse1ml		=	num3;
 8003150:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 8003154:	4b83      	ldr	r3, [pc, #524]	; (8003364 <handleAppRequets+0xefc>)
 8003156:	8818      	ldrh	r0, [r3, #0]
 8003158:	4987      	ldr	r1, [pc, #540]	; (8003378 <handleAppRequets+0xf10>)
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	331c      	adds	r3, #28
 8003166:	4602      	mov	r2, r0
 8003168:	801a      	strh	r2, [r3, #0]
					    	bomMau[id].pulse01ml	=	num4;
 800316a:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 800316e:	4b7c      	ldr	r3, [pc, #496]	; (8003360 <handleAppRequets+0xef8>)
 8003170:	8818      	ldrh	r0, [r3, #0]
 8003172:	4981      	ldr	r1, [pc, #516]	; (8003378 <handleAppRequets+0xf10>)
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	331e      	adds	r3, #30
 8003180:	4602      	mov	r2, r0
 8003182:	801a      	strh	r2, [r3, #0]
					    	bomMau[id].pulse001ml	=	num5;
 8003184:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 8003188:	4b74      	ldr	r3, [pc, #464]	; (800335c <handleAppRequets+0xef4>)
 800318a:	8818      	ldrh	r0, [r3, #0]
 800318c:	497a      	ldr	r1, [pc, #488]	; (8003378 <handleAppRequets+0xf10>)
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3320      	adds	r3, #32
 800319a:	4602      	mov	r2, r0
 800319c:	801a      	strh	r2, [r3, #0]

							bomMau[id].sleep=RUN;
 800319e:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80031a2:	4975      	ldr	r1, [pc, #468]	; (8003378 <handleAppRequets+0xf10>)
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3301      	adds	r3, #1
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
							calc_colorPulseOutput(&bomMau[id]);
 80031b4:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4a6d      	ldr	r2, [pc, #436]	; (8003378 <handleAppRequets+0xf10>)
 80031c2:	4413      	add	r3, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 fe7f 	bl	8004ec8 <calc_colorPulseOutput>
							//bomMauStart=true;
					    	printf("ml=%f,pulse1ml=%d,pulse01ml=%d,pulse001ml=%d \r\n",bomMau[id].mililit,bomMau[id].pulse1ml,bomMau[id].pulse01ml,bomMau[id].pulse001ml);
 80031ca:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80031ce:	496a      	ldr	r1, [pc, #424]	; (8003378 <handleAppRequets+0xf10>)
 80031d0:	4613      	mov	r3, r2
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	3314      	adds	r3, #20
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fa42 	bl	8000668 <__aeabi_f2d>
 80031e4:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80031e8:	4c63      	ldr	r4, [pc, #396]	; (8003378 <handleAppRequets+0xf10>)
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4423      	add	r3, r4
 80031f4:	331c      	adds	r3, #28
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	461d      	mov	r5, r3
 80031fa:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80031fe:	4c5e      	ldr	r4, [pc, #376]	; (8003378 <handleAppRequets+0xf10>)
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4423      	add	r3, r4
 800320a:	331e      	adds	r3, #30
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	461e      	mov	r6, r3
 8003210:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 8003214:	4c58      	ldr	r4, [pc, #352]	; (8003378 <handleAppRequets+0xf10>)
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4423      	add	r3, r4
 8003220:	3320      	adds	r3, #32
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	9302      	str	r3, [sp, #8]
 8003226:	9601      	str	r6, [sp, #4]
 8003228:	9500      	str	r5, [sp, #0]
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4853      	ldr	r0, [pc, #332]	; (800337c <handleAppRequets+0xf14>)
 8003230:	f007 f880 	bl	800a334 <iprintf>

							num1=0; num2=0; num3=0; num4=0; num5=0;
 8003234:	4b4d      	ldr	r3, [pc, #308]	; (800336c <handleAppRequets+0xf04>)
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	4b4a      	ldr	r3, [pc, #296]	; (8003368 <handleAppRequets+0xf00>)
 800323e:	2200      	movs	r2, #0
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	4b48      	ldr	r3, [pc, #288]	; (8003364 <handleAppRequets+0xefc>)
 8003244:	2200      	movs	r2, #0
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	4b45      	ldr	r3, [pc, #276]	; (8003360 <handleAppRequets+0xef8>)
 800324a:	2200      	movs	r2, #0
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	4b43      	ldr	r3, [pc, #268]	; (800335c <handleAppRequets+0xef4>)
 8003250:	2200      	movs	r2, #0
 8003252:	801a      	strh	r2, [r3, #0]
					    }
					    printf("state_i %d ", i);
 8003254:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8003258:	4849      	ldr	r0, [pc, #292]	; (8003380 <handleAppRequets+0xf18>)
 800325a:	f007 f86b 	bl	800a334 <iprintf>
				    for (int i = 0; i < 7; i++)
 800325e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003262:	3301      	adds	r3, #1
 8003264:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003268:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800326c:	2b06      	cmp	r3, #6
 800326e:	f77f af0f 	ble.w	8003090 <handleAppRequets+0xc28>
					}
				    HAL_Delay(5);
 8003272:	2005      	movs	r0, #5
 8003274:	f002 fcc2 	bl	8005bfc <HAL_Delay>
					printf("State pump:");
 8003278:	4842      	ldr	r0, [pc, #264]	; (8003384 <handleAppRequets+0xf1c>)
 800327a:	f007 f85b 	bl	800a334 <iprintf>
					for(uint8_t i = 0; i <16; i++)
 800327e:	2300      	movs	r3, #0
 8003280:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8003284:	e021      	b.n	80032ca <handleAppRequets+0xe62>
					{
						if(bomMau[i].sleep == RUN)
 8003286:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 800328a:	493b      	ldr	r1, [pc, #236]	; (8003378 <handleAppRequets+0xf10>)
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	3301      	adds	r3, #1
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <handleAppRequets+0xe48>
							printf("ong[%d]: %d  ", i+1, 1);
 800329e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032a2:	3301      	adds	r3, #1
 80032a4:	2201      	movs	r2, #1
 80032a6:	4619      	mov	r1, r3
 80032a8:	4837      	ldr	r0, [pc, #220]	; (8003388 <handleAppRequets+0xf20>)
 80032aa:	f007 f843 	bl	800a334 <iprintf>
 80032ae:	e007      	b.n	80032c0 <handleAppRequets+0xe58>
						else
							printf("ong[%d]: %d  ", i+1, 0);
 80032b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032b4:	3301      	adds	r3, #1
 80032b6:	2200      	movs	r2, #0
 80032b8:	4619      	mov	r1, r3
 80032ba:	4833      	ldr	r0, [pc, #204]	; (8003388 <handleAppRequets+0xf20>)
 80032bc:	f007 f83a 	bl	800a334 <iprintf>
					for(uint8_t i = 0; i <16; i++)
 80032c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032c4:	3301      	adds	r3, #1
 80032c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80032ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	d9d9      	bls.n	8003286 <handleAppRequets+0xe1e>

					}
					printf("\r\n");
 80032d2:	482e      	ldr	r0, [pc, #184]	; (800338c <handleAppRequets+0xf24>)
 80032d4:	f007 f89c 	bl	800a410 <puts>


				if(sttSensor3 == 1) // thung sơn chua co //
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <handleAppRequets+0xf28>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <handleAppRequets+0xea0>
				{
					bomMauStart = false;
 80032e0:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <handleAppRequets+0xf2c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
					sendFrame("choThungSonVao");
 80032e6:	482c      	ldr	r0, [pc, #176]	; (8003398 <handleAppRequets+0xf30>)
 80032e8:	f001 fcae 	bl	8004c48 <sendFrame>
					printf("choThungSonVao\n\r");
 80032ec:	482b      	ldr	r0, [pc, #172]	; (800339c <handleAppRequets+0xf34>)
 80032ee:	f007 f821 	bl	800a334 <iprintf>
					DISABLE_TIMER_PHA_MAU;
 80032f2:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <handleAppRequets+0xf38>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	492a      	ldr	r1, [pc, #168]	; (80033a0 <handleAppRequets+0xf38>)
 80032f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80032fc:	4013      	ands	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
					printf("Disable timer 3 \n\r");
 8003300:	4828      	ldr	r0, [pc, #160]	; (80033a4 <handleAppRequets+0xf3c>)
 8003302:	f007 f817 	bl	800a334 <iprintf>
 8003306:	e38d      	b.n	8003a24 <handleAppRequets+0x15bc>
				}
				else
				{
					//OpenDoor();
					bomMauStart = true;
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <handleAppRequets+0xf2c>)
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
					sendFrame("  OpenDoor-->>>");
 800330e:	4826      	ldr	r0, [pc, #152]	; (80033a8 <handleAppRequets+0xf40>)
 8003310:	f001 fc9a 	bl	8004c48 <sendFrame>
					printf("Thung Son OK -> bat dau pha mau\n\r");
 8003314:	4825      	ldr	r0, [pc, #148]	; (80033ac <handleAppRequets+0xf44>)
 8003316:	f007 f80d 	bl	800a334 <iprintf>

                    OpenDoor();
 800331a:	f000 ff5d 	bl	80041d8 <OpenDoor>

					ENABLE_TIMER_PHA_MAU;
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <handleAppRequets+0xf38>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <handleAppRequets+0xf38>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6013      	str	r3, [r2, #0]
					printf("Enable timer 3 \n\r");
 800332a:	4821      	ldr	r0, [pc, #132]	; (80033b0 <handleAppRequets+0xf48>)
 800332c:	f007 f802 	bl	800a334 <iprintf>
 8003330:	e378      	b.n	8003a24 <handleAppRequets+0x15bc>


			/*
			 * Dừng pha màu
			 */
			else if(strstr(myApp.arrData,"<stopPhaMau>"))
 8003332:	4920      	ldr	r1, [pc, #128]	; (80033b4 <handleAppRequets+0xf4c>)
 8003334:	4820      	ldr	r0, [pc, #128]	; (80033b8 <handleAppRequets+0xf50>)
 8003336:	f007 f9d9 	bl	800a6ec <strstr>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80ab 	beq.w	8003498 <handleAppRequets+0x1030>
			{
				ruadauphun_state = false;
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <handleAppRequets+0xf54>)
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
				printf("stopPhaMau--> Huy_Lenh\n\r");
 8003348:	481d      	ldr	r0, [pc, #116]	; (80033c0 <handleAppRequets+0xf58>)
 800334a:	f006 fff3 	bl	800a334 <iprintf>
				huyLenh=true;
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <handleAppRequets+0xf5c>)
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<16;i++)
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800335a:	e07f      	b.n	800345c <handleAppRequets+0xff4>
 800335c:	2000111e 	.word	0x2000111e
 8003360:	2000111c 	.word	0x2000111c
 8003364:	2000111a 	.word	0x2000111a
 8003368:	20001118 	.word	0x20001118
 800336c:	20001114 	.word	0x20001114
 8003370:	0800ea44 	.word	0x0800ea44
 8003374:	0800ea58 	.word	0x0800ea58
 8003378:	20000ccc 	.word	0x20000ccc
 800337c:	0800ea68 	.word	0x0800ea68
 8003380:	0800ea98 	.word	0x0800ea98
 8003384:	0800eaa4 	.word	0x0800eaa4
 8003388:	0800eab0 	.word	0x0800eab0
 800338c:	0800e904 	.word	0x0800e904
 8003390:	20000ba9 	.word	0x20000ba9
 8003394:	20000bb4 	.word	0x20000bb4
 8003398:	0800eac0 	.word	0x0800eac0
 800339c:	0800ead0 	.word	0x0800ead0
 80033a0:	40000400 	.word	0x40000400
 80033a4:	0800eae4 	.word	0x0800eae4
 80033a8:	0800eaf8 	.word	0x0800eaf8
 80033ac:	0800eb08 	.word	0x0800eb08
 80033b0:	0800eb2c 	.word	0x0800eb2c
 80033b4:	0800eb40 	.word	0x0800eb40
 80033b8:	2000000a 	.word	0x2000000a
 80033bc:	20000bac 	.word	0x20000bac
 80033c0:	0800eb50 	.word	0x0800eb50
 80033c4:	20000bb8 	.word	0x20000bb8
				{
					bomMau[i].mililit 			= 0;
 80033c8:	49af      	ldr	r1, [pc, #700]	; (8003688 <handleAppRequets+0x1220>)
 80033ca:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	3314      	adds	r3, #20
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
					bomMau[i].countHighSpeed 	= 0;
 80033e0:	49a9      	ldr	r1, [pc, #676]	; (8003688 <handleAppRequets+0x1220>)
 80033e2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	330c      	adds	r3, #12
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
					bomMau[i].countLowSpeed 	= 0;
 80033f6:	49a4      	ldr	r1, [pc, #656]	; (8003688 <handleAppRequets+0x1220>)
 80033f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	3310      	adds	r3, #16
 8003408:	2200      	movs	r2, #0
 800340a:	801a      	strh	r2, [r3, #0]
					calc_colorPulseOutput(&bomMau[i]);
 800340c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4a9b      	ldr	r2, [pc, #620]	; (8003688 <handleAppRequets+0x1220>)
 800341a:	4413      	add	r3, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f001 fd53 	bl	8004ec8 <calc_colorPulseOutput>
					out(bomMau[i].GPIOx,bomMau[i].GPIO_Pin,0);
 8003422:	4999      	ldr	r1, [pc, #612]	; (8003688 <handleAppRequets+0x1220>)
 8003424:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	332c      	adds	r3, #44	; 0x2c
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	4994      	ldr	r1, [pc, #592]	; (8003688 <handleAppRequets+0x1220>)
 8003438:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3330      	adds	r3, #48	; 0x30
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	2200      	movs	r2, #0
 800344c:	4619      	mov	r1, r3
 800344e:	f002 fff4 	bl	800643a <HAL_GPIO_WritePin>
				for(int i=0;i<16;i++)
 8003452:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003456:	3301      	adds	r3, #1
 8003458:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800345c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003460:	2b0f      	cmp	r3, #15
 8003462:	ddb1      	ble.n	80033c8 <handleAppRequets+0xf60>
				}
				allPumpIsSleep();
 8003464:	f000 fc8e 	bl	8003d84 <allPumpIsSleep>
				bomMauStart=false;
 8003468:	4b88      	ldr	r3, [pc, #544]	; (800368c <handleAppRequets+0x1224>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
				sendFrame("boardConfirm");
 800346e:	4888      	ldr	r0, [pc, #544]	; (8003690 <handleAppRequets+0x1228>)
 8003470:	f001 fbea 	bl	8004c48 <sendFrame>

				printf("stop timer 3\n\r");
 8003474:	4887      	ldr	r0, [pc, #540]	; (8003694 <handleAppRequets+0x122c>)
 8003476:	f006 ff5d 	bl	800a334 <iprintf>
				DISABLE_TIMER_PHA_MAU;
 800347a:	4b87      	ldr	r3, [pc, #540]	; (8003698 <handleAppRequets+0x1230>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4986      	ldr	r1, [pc, #536]	; (8003698 <handleAppRequets+0x1230>)
 8003480:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003484:	4013      	ands	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
				//HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);

				if(sttSensor1==1)
 8003488:	4b84      	ldr	r3, [pc, #528]	; (800369c <handleAppRequets+0x1234>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 82c9 	beq.w	8003a24 <handleAppRequets+0x15bc>
				{
					// cua dang dong -> return //
					CloseDoor();
 8003492:	f000 ff19 	bl	80042c8 <CloseDoor>
 8003496:	e2c5      	b.n	8003a24 <handleAppRequets+0x15bc>

			}
			/*
			 * Đọc cài đặt
			 */
			else if(strstr(myApp.arrData,">Bom"))
 8003498:	4981      	ldr	r1, [pc, #516]	; (80036a0 <handleAppRequets+0x1238>)
 800349a:	4882      	ldr	r0, [pc, #520]	; (80036a4 <handleAppRequets+0x123c>)
 800349c:	f007 f926 	bl	800a6ec <strstr>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8092 	beq.w	80035cc <handleAppRequets+0x1164>
			{
				printf("Bom\n\r");
 80034a8:	487f      	ldr	r0, [pc, #508]	; (80036a8 <handleAppRequets+0x1240>)
 80034aa:	f006 ff43 	bl	800a334 <iprintf>
				char txt[150]="";
 80034ae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80034b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	3304      	adds	r3, #4
 80034bc:	2292      	movs	r2, #146	; 0x92
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f007 f90b 	bl	800a6dc <memset>
				trim(myApp.arrData, txt, ">", "<");
 80034c6:	1d39      	adds	r1, r7, #4
 80034c8:	4b78      	ldr	r3, [pc, #480]	; (80036ac <handleAppRequets+0x1244>)
 80034ca:	4a79      	ldr	r2, [pc, #484]	; (80036b0 <handleAppRequets+0x1248>)
 80034cc:	4875      	ldr	r0, [pc, #468]	; (80036a4 <handleAppRequets+0x123c>)
 80034ce:	f002 fad5 	bl	8005a7c <trim>
			    //sscanf(txt, "%*[^[][%d],%*[^[][%d],%*[^[][%d]", &pulse_1ml, &pulse_01ml, &pulse_001ml);

			    sscanf(txt, "Bom[%d] 1ml[%d],01ml[%d],001ml[%d]", &pump_index, &pulse_1ml, &pulse_01ml, &pulse_001ml);
 80034d2:	1d38      	adds	r0, r7, #4
 80034d4:	4b77      	ldr	r3, [pc, #476]	; (80036b4 <handleAppRequets+0x124c>)
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	4b77      	ldr	r3, [pc, #476]	; (80036b8 <handleAppRequets+0x1250>)
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	4b77      	ldr	r3, [pc, #476]	; (80036bc <handleAppRequets+0x1254>)
 80034de:	4a78      	ldr	r2, [pc, #480]	; (80036c0 <handleAppRequets+0x1258>)
 80034e0:	4978      	ldr	r1, [pc, #480]	; (80036c4 <handleAppRequets+0x125c>)
 80034e2:	f006 ffbd 	bl	800a460 <siscanf>
			    bomMau[pump_index-1].pulse1ml=pulse_1ml;
 80034e6:	4b75      	ldr	r3, [pc, #468]	; (80036bc <handleAppRequets+0x1254>)
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	4b75      	ldr	r3, [pc, #468]	; (80036c0 <handleAppRequets+0x1258>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	b288      	uxth	r0, r1
 80034f2:	4965      	ldr	r1, [pc, #404]	; (8003688 <handleAppRequets+0x1220>)
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	331c      	adds	r3, #28
 8003500:	4602      	mov	r2, r0
 8003502:	801a      	strh	r2, [r3, #0]
			    bomMau[pump_index-1].pulse01ml=pulse_01ml;
 8003504:	4b6c      	ldr	r3, [pc, #432]	; (80036b8 <handleAppRequets+0x1250>)
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <handleAppRequets+0x1258>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	1e5a      	subs	r2, r3, #1
 800350e:	b288      	uxth	r0, r1
 8003510:	495d      	ldr	r1, [pc, #372]	; (8003688 <handleAppRequets+0x1220>)
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	331e      	adds	r3, #30
 800351e:	4602      	mov	r2, r0
 8003520:	801a      	strh	r2, [r3, #0]
			    bomMau[pump_index-1].pulse001ml=pulse_001ml;
 8003522:	4b64      	ldr	r3, [pc, #400]	; (80036b4 <handleAppRequets+0x124c>)
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	4b66      	ldr	r3, [pc, #408]	; (80036c0 <handleAppRequets+0x1258>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	1e5a      	subs	r2, r3, #1
 800352c:	b288      	uxth	r0, r1
 800352e:	4956      	ldr	r1, [pc, #344]	; (8003688 <handleAppRequets+0x1220>)
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3320      	adds	r3, #32
 800353c:	4602      	mov	r2, r0
 800353e:	801a      	strh	r2, [r3, #0]

			    printf("bom %d, pulse1ml=%d ,pulse01ml=%d,pulse001ml=%d\n\r",pump_index,pulse_1ml,pulse_01ml,pulse_001ml );
 8003540:	4b5f      	ldr	r3, [pc, #380]	; (80036c0 <handleAppRequets+0x1258>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	4b5d      	ldr	r3, [pc, #372]	; (80036bc <handleAppRequets+0x1254>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b5b      	ldr	r3, [pc, #364]	; (80036b8 <handleAppRequets+0x1250>)
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <handleAppRequets+0x124c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	460b      	mov	r3, r1
 8003556:	4601      	mov	r1, r0
 8003558:	485b      	ldr	r0, [pc, #364]	; (80036c8 <handleAppRequets+0x1260>)
 800355a:	f006 feeb 	bl	800a334 <iprintf>

			    eep_write_word(bomMau[pump_index-1].pulse1mlAddress,pulse_1ml);
 800355e:	4b58      	ldr	r3, [pc, #352]	; (80036c0 <handleAppRequets+0x1258>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	1e5a      	subs	r2, r3, #1
 8003564:	4948      	ldr	r1, [pc, #288]	; (8003688 <handleAppRequets+0x1220>)
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3322      	adds	r3, #34	; 0x22
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	4a51      	ldr	r2, [pc, #324]	; (80036bc <handleAppRequets+0x1254>)
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	b292      	uxth	r2, r2
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f002 fa25 	bl	80059cc <eep_write_word>
			    eep_write_word(bomMau[pump_index-1].pulse01mlAddress,pulse_01ml);
 8003582:	4b4f      	ldr	r3, [pc, #316]	; (80036c0 <handleAppRequets+0x1258>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	1e5a      	subs	r2, r3, #1
 8003588:	493f      	ldr	r1, [pc, #252]	; (8003688 <handleAppRequets+0x1220>)
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	3324      	adds	r3, #36	; 0x24
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	4a47      	ldr	r2, [pc, #284]	; (80036b8 <handleAppRequets+0x1250>)
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	b292      	uxth	r2, r2
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f002 fa13 	bl	80059cc <eep_write_word>
			    eep_write_word(bomMau[pump_index-1].pulse001mlAddress,pulse_001ml);
 80035a6:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <handleAppRequets+0x1258>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	1e5a      	subs	r2, r3, #1
 80035ac:	4936      	ldr	r1, [pc, #216]	; (8003688 <handleAppRequets+0x1220>)
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3326      	adds	r3, #38	; 0x26
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	4a3d      	ldr	r2, [pc, #244]	; (80036b4 <handleAppRequets+0x124c>)
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	b292      	uxth	r2, r2
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fa01 	bl	80059cc <eep_write_word>
 80035ca:	e22b      	b.n	8003a24 <handleAppRequets+0x15bc>


			}
			else if(strstr(myApp.arrData,">dongNap"))
 80035cc:	493f      	ldr	r1, [pc, #252]	; (80036cc <handleAppRequets+0x1264>)
 80035ce:	4835      	ldr	r0, [pc, #212]	; (80036a4 <handleAppRequets+0x123c>)
 80035d0:	f007 f88c 	bl	800a6ec <strstr>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <handleAppRequets+0x117a>
			{
				printf("dongNap\n\r");
 80035da:	483d      	ldr	r0, [pc, #244]	; (80036d0 <handleAppRequets+0x1268>)
 80035dc:	f006 feaa 	bl	800a334 <iprintf>
 80035e0:	e220      	b.n	8003a24 <handleAppRequets+0x15bc>
			}

			else if(strstr(myApp.arrData,">KDKM"))  // khoi dong khuay mau //
 80035e2:	493c      	ldr	r1, [pc, #240]	; (80036d4 <handleAppRequets+0x126c>)
 80035e4:	482f      	ldr	r0, [pc, #188]	; (80036a4 <handleAppRequets+0x123c>)
 80035e6:	f007 f881 	bl	800a6ec <strstr>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d079      	beq.n	80036e4 <handleAppRequets+0x127c>
			{
				printf("KDKM-khoi dong khuay mau!\n\r");
 80035f0:	4839      	ldr	r0, [pc, #228]	; (80036d8 <handleAppRequets+0x1270>)
 80035f2:	f006 fe9f 	bl	800a334 <iprintf>
			    int h, m, s;
				char txt[150]="";
 80035f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80035fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	3304      	adds	r3, #4
 8003604:	2292      	movs	r2, #146	; 0x92
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f007 f867 	bl	800a6dc <memset>
				trim(myApp.arrData, txt, ">", "<");
 800360e:	1d39      	adds	r1, r7, #4
 8003610:	4b26      	ldr	r3, [pc, #152]	; (80036ac <handleAppRequets+0x1244>)
 8003612:	4a27      	ldr	r2, [pc, #156]	; (80036b0 <handleAppRequets+0x1248>)
 8003614:	4823      	ldr	r0, [pc, #140]	; (80036a4 <handleAppRequets+0x123c>)
 8003616:	f002 fa31 	bl	8005a7c <trim>
			    sscanf(txt, "KDKM h[%d],m[%d],s[%d]", &h, &m, &s);
 800361a:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800361e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8003622:	1d38      	adds	r0, r7, #4
 8003624:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	460b      	mov	r3, r1
 800362c:	492b      	ldr	r1, [pc, #172]	; (80036dc <handleAppRequets+0x1274>)
 800362e:	f006 ff17 	bl	800a460 <siscanf>
			    //thoiGianKhoiDongKhuayMau=h*3600+m*60+s;
			    khuayMau.khoiDongKhuayMau.time.gio=h;
 8003632:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003636:	b2da      	uxtb	r2, r3
 8003638:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <handleAppRequets+0x1278>)
 800363a:	701a      	strb	r2, [r3, #0]
			    khuayMau.khoiDongKhuayMau.time.phut=m;
 800363c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <handleAppRequets+0x1278>)
 8003644:	705a      	strb	r2, [r3, #1]
			    khuayMau.khoiDongKhuayMau.time.giay=s;
 8003646:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800364a:	b2da      	uxtb	r2, r3
 800364c:	4b24      	ldr	r3, [pc, #144]	; (80036e0 <handleAppRequets+0x1278>)
 800364e:	709a      	strb	r2, [r3, #2]
			    eep_write_word(khuayMau.khoiDongKhuayMau.time.addr.gio, khuayMau.khoiDongKhuayMau.time.gio);
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <handleAppRequets+0x1278>)
 8003652:	8a1b      	ldrh	r3, [r3, #16]
 8003654:	4a22      	ldr	r2, [pc, #136]	; (80036e0 <handleAppRequets+0x1278>)
 8003656:	7812      	ldrb	r2, [r2, #0]
 8003658:	b292      	uxth	r2, r2
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f002 f9b5 	bl	80059cc <eep_write_word>
			    eep_write_word(khuayMau.khoiDongKhuayMau.time.addr.phut, khuayMau.khoiDongKhuayMau.time.phut);
 8003662:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <handleAppRequets+0x1278>)
 8003664:	8a5b      	ldrh	r3, [r3, #18]
 8003666:	4a1e      	ldr	r2, [pc, #120]	; (80036e0 <handleAppRequets+0x1278>)
 8003668:	7852      	ldrb	r2, [r2, #1]
 800366a:	b292      	uxth	r2, r2
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f002 f9ac 	bl	80059cc <eep_write_word>
			    eep_write_word(khuayMau.khoiDongKhuayMau.time.addr.giay, khuayMau.khoiDongKhuayMau.time.giay);
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <handleAppRequets+0x1278>)
 8003676:	8a9b      	ldrh	r3, [r3, #20]
 8003678:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <handleAppRequets+0x1278>)
 800367a:	7892      	ldrb	r2, [r2, #2]
 800367c:	b292      	uxth	r2, r2
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f002 f9a3 	bl	80059cc <eep_write_word>
 8003686:	e1cd      	b.n	8003a24 <handleAppRequets+0x15bc>
 8003688:	20000ccc 	.word	0x20000ccc
 800368c:	20000bb4 	.word	0x20000bb4
 8003690:	0800e7d4 	.word	0x0800e7d4
 8003694:	0800eb6c 	.word	0x0800eb6c
 8003698:	40000400 	.word	0x40000400
 800369c:	20000ba5 	.word	0x20000ba5
 80036a0:	0800eb7c 	.word	0x0800eb7c
 80036a4:	2000000a 	.word	0x2000000a
 80036a8:	0800eb84 	.word	0x0800eb84
 80036ac:	0800eb8c 	.word	0x0800eb8c
 80036b0:	0800eb90 	.word	0x0800eb90
 80036b4:	20000234 	.word	0x20000234
 80036b8:	20000230 	.word	0x20000230
 80036bc:	2000022c 	.word	0x2000022c
 80036c0:	20001111 	.word	0x20001111
 80036c4:	0800eb94 	.word	0x0800eb94
 80036c8:	0800ebb8 	.word	0x0800ebb8
 80036cc:	0800ebec 	.word	0x0800ebec
 80036d0:	0800ebf8 	.word	0x0800ebf8
 80036d4:	0800ec04 	.word	0x0800ec04
 80036d8:	0800ec0c 	.word	0x0800ec0c
 80036dc:	0800ec28 	.word	0x0800ec28
 80036e0:	2000023c 	.word	0x2000023c
			}
			else if(strstr(myApp.arrData,">TGKM"))  // tam dung khuay mau //
 80036e4:	499e      	ldr	r1, [pc, #632]	; (8003960 <handleAppRequets+0x14f8>)
 80036e6:	489f      	ldr	r0, [pc, #636]	; (8003964 <handleAppRequets+0x14fc>)
 80036e8:	f007 f800 	bl	800a6ec <strstr>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d03d      	beq.n	800376e <handleAppRequets+0x1306>
			{
				printf("TGKM\n\r");
 80036f2:	489d      	ldr	r0, [pc, #628]	; (8003968 <handleAppRequets+0x1500>)
 80036f4:	f006 fe1e 	bl	800a334 <iprintf>
			    int m, s;
				char txt[150]="";
 80036f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80036fc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	3304      	adds	r3, #4
 8003706:	2292      	movs	r2, #146	; 0x92
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f006 ffe6 	bl	800a6dc <memset>
				trim(myApp.arrData, txt, ">", "<");
 8003710:	1d39      	adds	r1, r7, #4
 8003712:	4b96      	ldr	r3, [pc, #600]	; (800396c <handleAppRequets+0x1504>)
 8003714:	4a96      	ldr	r2, [pc, #600]	; (8003970 <handleAppRequets+0x1508>)
 8003716:	4893      	ldr	r0, [pc, #588]	; (8003964 <handleAppRequets+0x14fc>)
 8003718:	f002 f9b0 	bl	8005a7c <trim>
			    sscanf(txt, "TGKM m[%d],s[%d]",&m, &s);
 800371c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003720:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8003724:	1d38      	adds	r0, r7, #4
 8003726:	4993      	ldr	r1, [pc, #588]	; (8003974 <handleAppRequets+0x150c>)
 8003728:	f006 fe9a 	bl	800a460 <siscanf>
			    khuayMau.khuayMau.time.phut=m;
 800372c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b91      	ldr	r3, [pc, #580]	; (8003978 <handleAppRequets+0x1510>)
 8003734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			    khuayMau.khuayMau.time.giay=s;
 8003738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4b8e      	ldr	r3, [pc, #568]	; (8003978 <handleAppRequets+0x1510>)
 8003740:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			    eep_write_word(khuayMau.khuayMau.time.addr.phut,khuayMau.khuayMau.time.phut);
 8003744:	4b8c      	ldr	r3, [pc, #560]	; (8003978 <handleAppRequets+0x1510>)
 8003746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003748:	4a8b      	ldr	r2, [pc, #556]	; (8003978 <handleAppRequets+0x1510>)
 800374a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800374e:	b292      	uxth	r2, r2
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f002 f93a 	bl	80059cc <eep_write_word>
			    eep_write_word(khuayMau.khuayMau.time.addr.giay,khuayMau.khuayMau.time.giay);
 8003758:	4b87      	ldr	r3, [pc, #540]	; (8003978 <handleAppRequets+0x1510>)
 800375a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800375c:	4a86      	ldr	r2, [pc, #536]	; (8003978 <handleAppRequets+0x1510>)
 800375e:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8003762:	b292      	uxth	r2, r2
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f002 f930 	bl	80059cc <eep_write_word>
 800376c:	e15a      	b.n	8003a24 <handleAppRequets+0x15bc>
			}

			/********************  khac phuc loi ************************************************/
			else if(strstr(myApp.arrData,"KhuayMau"))
 800376e:	4983      	ldr	r1, [pc, #524]	; (800397c <handleAppRequets+0x1514>)
 8003770:	487c      	ldr	r0, [pc, #496]	; (8003964 <handleAppRequets+0x14fc>)
 8003772:	f006 ffbb 	bl	800a6ec <strstr>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01f      	beq.n	80037bc <handleAppRequets+0x1354>
			{
				ruadauphun_state = false;
 800377c:	4b80      	ldr	r3, [pc, #512]	; (8003980 <handleAppRequets+0x1518>)
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
				printf("Khac phuc loi-->>KhuayMau\n\r");
 8003782:	4880      	ldr	r0, [pc, #512]	; (8003984 <handleAppRequets+0x151c>)
 8003784:	f006 fdd6 	bl	800a334 <iprintf>
				//write4Byte595_tron(DIS_TRON,1);
				bomTron.en=true;
 8003788:	4b7f      	ldr	r3, [pc, #508]	; (8003988 <handleAppRequets+0x1520>)
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
				khuayMau.khuayMau.en=true;
 800378e:	4b7a      	ldr	r3, [pc, #488]	; (8003978 <handleAppRequets+0x1510>)
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				khuayMau.countTimeKhuayMau= 0;
 8003796:	4b78      	ldr	r3, [pc, #480]	; (8003978 <handleAppRequets+0x1510>)
 8003798:	2200      	movs	r2, #0
 800379a:	651a      	str	r2, [r3, #80]	; 0x50
				//điều khiển khuấy màu trực tiếp

				HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 0);
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037a2:	487a      	ldr	r0, [pc, #488]	; (800398c <handleAppRequets+0x1524>)
 80037a4:	f002 fe49 	bl	800643a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037ae:	4878      	ldr	r0, [pc, #480]	; (8003990 <handleAppRequets+0x1528>)
 80037b0:	f002 fe43 	bl	800643a <HAL_GPIO_WritePin>
				HAL_TIM_Base_Start_IT(&htim4);
 80037b4:	4877      	ldr	r0, [pc, #476]	; (8003994 <handleAppRequets+0x152c>)
 80037b6:	f004 fc07 	bl	8007fc8 <HAL_TIM_Base_Start_IT>
 80037ba:	e133      	b.n	8003a24 <handleAppRequets+0x15bc>
			}
			else if(strstr(myApp.arrData,"DungKhuay"))
 80037bc:	4976      	ldr	r1, [pc, #472]	; (8003998 <handleAppRequets+0x1530>)
 80037be:	4869      	ldr	r0, [pc, #420]	; (8003964 <handleAppRequets+0x14fc>)
 80037c0:	f006 ff94 	bl	800a6ec <strstr>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d021      	beq.n	800380e <handleAppRequets+0x13a6>
			{
				ruadauphun_state = false;
 80037ca:	4b6d      	ldr	r3, [pc, #436]	; (8003980 <handleAppRequets+0x1518>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
				printf("Khac phuc loi-->> DungKhuay\n\r");
 80037d0:	4872      	ldr	r0, [pc, #456]	; (800399c <handleAppRequets+0x1534>)
 80037d2:	f006 fdaf 	bl	800a334 <iprintf>

				bomTron.en=false;
 80037d6:	4b6c      	ldr	r3, [pc, #432]	; (8003988 <handleAppRequets+0x1520>)
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
				khuayMau.khuayMau.en=false;
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <handleAppRequets+0x1510>)
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				HAL_TIM_Base_Stop(&htim4);
 80037e4:	486b      	ldr	r0, [pc, #428]	; (8003994 <handleAppRequets+0x152c>)
 80037e6:	f004 fbc8 	bl	8007f7a <HAL_TIM_Base_Stop>
				HAL_TIM_Base_Stop_IT(&htim4);
 80037ea:	486a      	ldr	r0, [pc, #424]	; (8003994 <handleAppRequets+0x152c>)
 80037ec:	f004 fc4c 	bl	8008088 <HAL_TIM_Base_Stop_IT>
				HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 1);
 80037f0:	2201      	movs	r2, #1
 80037f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037f6:	4865      	ldr	r0, [pc, #404]	; (800398c <handleAppRequets+0x1524>)
 80037f8:	f002 fe1f 	bl	800643a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003802:	4863      	ldr	r0, [pc, #396]	; (8003990 <handleAppRequets+0x1528>)
 8003804:	f002 fe19 	bl	800643a <HAL_GPIO_WritePin>
				//disable alarm //
				AlarmOff();
 8003808:	f001 fc6c 	bl	80050e4 <AlarmOff>
 800380c:	e10a      	b.n	8003a24 <handleAppRequets+0x15bc>

			}

			else if (strstr(myApp.arrData,"RuaDauPhun"))
 800380e:	4964      	ldr	r1, [pc, #400]	; (80039a0 <handleAppRequets+0x1538>)
 8003810:	4854      	ldr	r0, [pc, #336]	; (8003964 <handleAppRequets+0x14fc>)
 8003812:	f006 ff6b 	bl	800a6ec <strstr>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d014      	beq.n	8003846 <handleAppRequets+0x13de>
			{
				if (myApp.countCharRec < 20) {
 800381c:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <handleAppRequets+0x153c>)
 800381e:	889b      	ldrh	r3, [r3, #4]
 8003820:	2b13      	cmp	r3, #19
 8003822:	d805      	bhi.n	8003830 <handleAppRequets+0x13c8>
					ruaDauPhun();
 8003824:	f000 fd8e 	bl	8004344 <ruaDauPhun>
					ruadauphun_state = true;
 8003828:	4b55      	ldr	r3, [pc, #340]	; (8003980 <handleAppRequets+0x1518>)
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e0f9      	b.n	8003a24 <handleAppRequets+0x15bc>
				} else if (myApp.countCharRec > 100) {
 8003830:	4b5c      	ldr	r3, [pc, #368]	; (80039a4 <handleAppRequets+0x153c>)
 8003832:	889b      	ldrh	r3, [r3, #4]
 8003834:	2b64      	cmp	r3, #100	; 0x64
 8003836:	f240 80f5 	bls.w	8003a24 <handleAppRequets+0x15bc>
					ruaDauPhun_Mililit();
 800383a:	f000 fe5f 	bl	80044fc <ruaDauPhun_Mililit>
					ruadauphun_state = true;
 800383e:	4b50      	ldr	r3, [pc, #320]	; (8003980 <handleAppRequets+0x1518>)
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	e0ee      	b.n	8003a24 <handleAppRequets+0x15bc>
				}
			}


			// rua dau phun theo miliit //
			else if(strstr(myApp.arrData,"RuaDauPhun M1"))
 8003846:	4958      	ldr	r1, [pc, #352]	; (80039a8 <handleAppRequets+0x1540>)
 8003848:	4846      	ldr	r0, [pc, #280]	; (8003964 <handleAppRequets+0x14fc>)
 800384a:	f006 ff4f 	bl	800a6ec <strstr>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	f040 80e7 	bne.w	8003a24 <handleAppRequets+0x15bc>
			{
				//printf(" rua dau phun theo mililit da dat \n");

			}

			else if(strstr(myApp.arrData,"BatDauPhun"))
 8003856:	4955      	ldr	r1, [pc, #340]	; (80039ac <handleAppRequets+0x1544>)
 8003858:	4842      	ldr	r0, [pc, #264]	; (8003964 <handleAppRequets+0x14fc>)
 800385a:	f006 ff47 	bl	800a6ec <strstr>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	f040 80df 	bne.w	8003a24 <handleAppRequets+0x15bc>
			{

			}

			else if(strstr(myApp.arrData,"TatDauPhun"))
 8003866:	4952      	ldr	r1, [pc, #328]	; (80039b0 <handleAppRequets+0x1548>)
 8003868:	483e      	ldr	r0, [pc, #248]	; (8003964 <handleAppRequets+0x14fc>)
 800386a:	f006 ff3f 	bl	800a6ec <strstr>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	f040 80d7 	bne.w	8003a24 <handleAppRequets+0x15bc>
			{

			}

			else if(strstr(myApp.arrData,"tocDoKM"))
 8003876:	494f      	ldr	r1, [pc, #316]	; (80039b4 <handleAppRequets+0x154c>)
 8003878:	483a      	ldr	r0, [pc, #232]	; (8003964 <handleAppRequets+0x14fc>)
 800387a:	f006 ff37 	bl	800a6ec <strstr>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d044      	beq.n	800390e <handleAppRequets+0x14a6>
			{
				printf("KhacPhucLoi->>tocDoKM \r\n");
 8003884:	484c      	ldr	r0, [pc, #304]	; (80039b8 <handleAppRequets+0x1550>)
 8003886:	f006 fdc3 	bl	800a410 <puts>
				int value;
				sscanf(myApp.arrData, "tocDoKM[%d]", &value);
 800388a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800388e:	461a      	mov	r2, r3
 8003890:	494a      	ldr	r1, [pc, #296]	; (80039bc <handleAppRequets+0x1554>)
 8003892:	4834      	ldr	r0, [pc, #208]	; (8003964 <handleAppRequets+0x14fc>)
 8003894:	f006 fde4 	bl	800a460 <siscanf>
				khuayMau.tocDoKhuayMau.value=value;
 8003898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800389c:	b29a      	uxth	r2, r3
 800389e:	4b36      	ldr	r3, [pc, #216]	; (8003978 <handleAppRequets+0x1510>)
 80038a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

				if(khuayMau.tocDoKhuayMau.value==THAP) bomTron.slowLevel=khuayMau.levelThap.value;
 80038a4:	4b34      	ldr	r3, [pc, #208]	; (8003978 <handleAppRequets+0x1510>)
 80038a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d106      	bne.n	80038bc <handleAppRequets+0x1454>
 80038ae:	4b32      	ldr	r3, [pc, #200]	; (8003978 <handleAppRequets+0x1510>)
 80038b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4b34      	ldr	r3, [pc, #208]	; (8003988 <handleAppRequets+0x1520>)
 80038b8:	705a      	strb	r2, [r3, #1]
 80038ba:	e016      	b.n	80038ea <handleAppRequets+0x1482>
				else if(khuayMau.tocDoKhuayMau.value==TRUNGBINH) bomTron.slowLevel=khuayMau.levelTrungBinh.value;
 80038bc:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <handleAppRequets+0x1510>)
 80038be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d106      	bne.n	80038d4 <handleAppRequets+0x146c>
 80038c6:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <handleAppRequets+0x1510>)
 80038c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <handleAppRequets+0x1520>)
 80038d0:	705a      	strb	r2, [r3, #1]
 80038d2:	e00a      	b.n	80038ea <handleAppRequets+0x1482>
				else if(khuayMau.tocDoKhuayMau.value==CAO) bomTron.slowLevel=khuayMau.levelCao.value;
 80038d4:	4b28      	ldr	r3, [pc, #160]	; (8003978 <handleAppRequets+0x1510>)
 80038d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d105      	bne.n	80038ea <handleAppRequets+0x1482>
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <handleAppRequets+0x1510>)
 80038e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	4b28      	ldr	r3, [pc, #160]	; (8003988 <handleAppRequets+0x1520>)
 80038e8:	705a      	strb	r2, [r3, #1]

				eep_write_word(khuayMau.tocDoKhuayMau.address,khuayMau.tocDoKhuayMau.value);
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <handleAppRequets+0x1510>)
 80038ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038f0:	4a21      	ldr	r2, [pc, #132]	; (8003978 <handleAppRequets+0x1510>)
 80038f2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 f867 	bl	80059cc <eep_write_word>
				printf("\nkhuayMau.tocDoKhuayMau.value=%d \n",khuayMau.tocDoKhuayMau.value);
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <handleAppRequets+0x1510>)
 8003900:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003904:	4619      	mov	r1, r3
 8003906:	482e      	ldr	r0, [pc, #184]	; (80039c0 <handleAppRequets+0x1558>)
 8003908:	f006 fd14 	bl	800a334 <iprintf>
 800390c:	e08a      	b.n	8003a24 <handleAppRequets+0x15bc>
			}
			else if(strstr(myApp.arrData,"tocDoBomVeSinh"))
 800390e:	492d      	ldr	r1, [pc, #180]	; (80039c4 <handleAppRequets+0x155c>)
 8003910:	4814      	ldr	r0, [pc, #80]	; (8003964 <handleAppRequets+0x14fc>)
 8003912:	f006 feeb 	bl	800a6ec <strstr>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d05b      	beq.n	80039d4 <handleAppRequets+0x156c>
			{
				printf("KhacPhucLoi->> tocDoBomVeSinh\r\n");
 800391c:	482a      	ldr	r0, [pc, #168]	; (80039c8 <handleAppRequets+0x1560>)
 800391e:	f006 fd77 	bl	800a410 <puts>
				int value;
				sscanf(myApp.arrData, "tocDoBomVeSinh[%d]", &value);
 8003922:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003926:	461a      	mov	r2, r3
 8003928:	4928      	ldr	r1, [pc, #160]	; (80039cc <handleAppRequets+0x1564>)
 800392a:	480e      	ldr	r0, [pc, #56]	; (8003964 <handleAppRequets+0x14fc>)
 800392c:	f006 fd98 	bl	800a460 <siscanf>
				khuayMau.tocDoBomVeSinh.value=value;
 8003930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003934:	b29a      	uxth	r2, r3
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <handleAppRequets+0x1510>)
 8003938:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				eep_write_word(khuayMau.tocDoBomVeSinh.address,khuayMau.tocDoBomVeSinh.value);
 800393c:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <handleAppRequets+0x1510>)
 800393e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003942:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <handleAppRequets+0x1510>)
 8003944:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f002 f83e 	bl	80059cc <eep_write_word>

				printf("\nkhuayMau.tocDoBomVeSinh.value=%d \n",khuayMau.tocDoBomVeSinh.value);
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <handleAppRequets+0x1510>)
 8003952:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003956:	4619      	mov	r1, r3
 8003958:	481d      	ldr	r0, [pc, #116]	; (80039d0 <handleAppRequets+0x1568>)
 800395a:	f006 fceb 	bl	800a334 <iprintf>
 800395e:	e061      	b.n	8003a24 <handleAppRequets+0x15bc>
 8003960:	0800ec40 	.word	0x0800ec40
 8003964:	2000000a 	.word	0x2000000a
 8003968:	0800ec48 	.word	0x0800ec48
 800396c:	0800eb8c 	.word	0x0800eb8c
 8003970:	0800eb90 	.word	0x0800eb90
 8003974:	0800ec50 	.word	0x0800ec50
 8003978:	2000023c 	.word	0x2000023c
 800397c:	0800ec64 	.word	0x0800ec64
 8003980:	20000bac 	.word	0x20000bac
 8003984:	0800ec70 	.word	0x0800ec70
 8003988:	2000110c 	.word	0x2000110c
 800398c:	40010800 	.word	0x40010800
 8003990:	40011000 	.word	0x40011000
 8003994:	20000a3c 	.word	0x20000a3c
 8003998:	0800ec8c 	.word	0x0800ec8c
 800399c:	0800ec98 	.word	0x0800ec98
 80039a0:	0800e710 	.word	0x0800e710
 80039a4:	20000004 	.word	0x20000004
 80039a8:	0800ecb8 	.word	0x0800ecb8
 80039ac:	0800ecc8 	.word	0x0800ecc8
 80039b0:	0800ecd4 	.word	0x0800ecd4
 80039b4:	0800ece0 	.word	0x0800ece0
 80039b8:	0800ece8 	.word	0x0800ece8
 80039bc:	0800ed00 	.word	0x0800ed00
 80039c0:	0800ed0c 	.word	0x0800ed0c
 80039c4:	0800ed30 	.word	0x0800ed30
 80039c8:	0800ed40 	.word	0x0800ed40
 80039cc:	0800ed60 	.word	0x0800ed60
 80039d0:	0800ed74 	.word	0x0800ed74
			}

			else if(strstr(myApp.arrData,"luongMauPhunRa"))
 80039d4:	49b8      	ldr	r1, [pc, #736]	; (8003cb8 <handleAppRequets+0x1850>)
 80039d6:	48b9      	ldr	r0, [pc, #740]	; (8003cbc <handleAppRequets+0x1854>)
 80039d8:	f006 fe88 	bl	800a6ec <strstr>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d020      	beq.n	8003a24 <handleAppRequets+0x15bc>
			{
				printf("luongMauPhunRa\n\r");
 80039e2:	48b7      	ldr	r0, [pc, #732]	; (8003cc0 <handleAppRequets+0x1858>)
 80039e4:	f006 fca6 	bl	800a334 <iprintf>
				int value;
				sscanf(myApp.arrData, "luongMauPhunRa[%d]", &value);
 80039e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ec:	461a      	mov	r2, r3
 80039ee:	49b5      	ldr	r1, [pc, #724]	; (8003cc4 <handleAppRequets+0x185c>)
 80039f0:	48b2      	ldr	r0, [pc, #712]	; (8003cbc <handleAppRequets+0x1854>)
 80039f2:	f006 fd35 	bl	800a460 <siscanf>
				khuayMau.luongMauPhunRa.value=value;
 80039f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	4bb2      	ldr	r3, [pc, #712]	; (8003cc8 <handleAppRequets+0x1860>)
 80039fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				eep_write_word(khuayMau.luongMauPhunRa.address,khuayMau.luongMauPhunRa.value);
 8003a02:	4bb1      	ldr	r3, [pc, #708]	; (8003cc8 <handleAppRequets+0x1860>)
 8003a04:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003a08:	4aaf      	ldr	r2, [pc, #700]	; (8003cc8 <handleAppRequets+0x1860>)
 8003a0a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 ffdb 	bl	80059cc <eep_write_word>

				printf("\nkhuayMau.luongMauPhunRa.value=%d \r\n",khuayMau.luongMauPhunRa.value);
 8003a16:	4bac      	ldr	r3, [pc, #688]	; (8003cc8 <handleAppRequets+0x1860>)
 8003a18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	48ab      	ldr	r0, [pc, #684]	; (8003ccc <handleAppRequets+0x1864>)
 8003a20:	f006 fc88 	bl	800a334 <iprintf>
			}

			/*  cai dat thoi chu ki xung bom son */
			if(strstr(myApp.arrData,"Ton_Bommau"))
 8003a24:	49aa      	ldr	r1, [pc, #680]	; (8003cd0 <handleAppRequets+0x1868>)
 8003a26:	48a5      	ldr	r0, [pc, #660]	; (8003cbc <handleAppRequets+0x1854>)
 8003a28:	f006 fe60 	bl	800a6ec <strstr>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d01c      	beq.n	8003a6c <handleAppRequets+0x1604>
			{
				int Ton;
				sscanf(myApp.arrData, "Ton_Bommau[%d]", &Ton);
 8003a32:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a36:	461a      	mov	r2, r3
 8003a38:	49a6      	ldr	r1, [pc, #664]	; (8003cd4 <handleAppRequets+0x186c>)
 8003a3a:	48a0      	ldr	r0, [pc, #640]	; (8003cbc <handleAppRequets+0x1854>)
 8003a3c:	f006 fd10 	bl	800a460 <siscanf>

				printf("Setting Ton_Bommau: %d \r\n", Ton);
 8003a40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a44:	4619      	mov	r1, r3
 8003a46:	48a4      	ldr	r0, [pc, #656]	; (8003cd8 <handleAppRequets+0x1870>)
 8003a48:	f006 fc74 	bl	800a334 <iprintf>
				eep_write_word(doRongXungBomMau_addr,Ton);
 8003a4c:	4ba3      	ldr	r3, [pc, #652]	; (8003cdc <handleAppRequets+0x1874>)
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a54:	b292      	uxth	r2, r2
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 ffb7 	bl	80059cc <eep_write_word>

				TimerBomMau_SetFulseUs(Ton);
 8003a5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 ff2d 	bl	80058c4 <TimerBomMau_SetFulseUs>
 8003a6a:	e0bd      	b.n	8003be8 <handleAppRequets+0x1780>
			}

			/*  cai dat thoi chu kin xung tron son */
			else if(strstr(myApp.arrData,"Ton_TronSon"))
 8003a6c:	499c      	ldr	r1, [pc, #624]	; (8003ce0 <handleAppRequets+0x1878>)
 8003a6e:	4893      	ldr	r0, [pc, #588]	; (8003cbc <handleAppRequets+0x1854>)
 8003a70:	f006 fe3c 	bl	800a6ec <strstr>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d03a      	beq.n	8003af0 <handleAppRequets+0x1688>
			{

				HAL_TIM_Base_Stop_IT(&htim4);
 8003a7a:	489a      	ldr	r0, [pc, #616]	; (8003ce4 <handleAppRequets+0x187c>)
 8003a7c:	f004 fb04 	bl	8008088 <HAL_TIM_Base_Stop_IT>

				int Ton;
				sscanf(myApp.arrData, "Ton_TronSon[%d]", &Ton);
 8003a80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a84:	461a      	mov	r2, r3
 8003a86:	4998      	ldr	r1, [pc, #608]	; (8003ce8 <handleAppRequets+0x1880>)
 8003a88:	488c      	ldr	r0, [pc, #560]	; (8003cbc <handleAppRequets+0x1854>)
 8003a8a:	f006 fce9 	bl	800a460 <siscanf>

				printf("Setting Ton_TronSon: %d \n\r", Ton);
 8003a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a92:	4619      	mov	r1, r3
 8003a94:	4895      	ldr	r0, [pc, #596]	; (8003cec <handleAppRequets+0x1884>)
 8003a96:	f006 fc4d 	bl	800a334 <iprintf>

				khuayMau.doRongXung.value = Ton;
 8003a9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	4b89      	ldr	r3, [pc, #548]	; (8003cc8 <handleAppRequets+0x1860>)
 8003aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
				eep_write_word(khuayMau.doRongXung.address, khuayMau.doRongXung.value);
 8003aa6:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <handleAppRequets+0x1860>)
 8003aa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003aac:	4a86      	ldr	r2, [pc, #536]	; (8003cc8 <handleAppRequets+0x1860>)
 8003aae:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 ff89 	bl	80059cc <eep_write_word>
				bomTron.Tset = khuayMau.doRongXung.value / 10;
 8003aba:	4b83      	ldr	r3, [pc, #524]	; (8003cc8 <handleAppRequets+0x1860>)
 8003abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ac0:	4a8b      	ldr	r2, [pc, #556]	; (8003cf0 <handleAppRequets+0x1888>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	08db      	lsrs	r3, r3, #3
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	4b89      	ldr	r3, [pc, #548]	; (8003cf4 <handleAppRequets+0x188c>)
 8003ace:	711a      	strb	r2, [r3, #4]
				bomTron.countT = 0;
 8003ad0:	4b88      	ldr	r3, [pc, #544]	; (8003cf4 <handleAppRequets+0x188c>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	70da      	strb	r2, [r3, #3]
				printf("Tron son Ton=%d\n\r", Ton);
 8003ad6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ada:	4619      	mov	r1, r3
 8003adc:	4886      	ldr	r0, [pc, #536]	; (8003cf8 <handleAppRequets+0x1890>)
 8003ade:	f006 fc29 	bl	800a334 <iprintf>

				TimerKhuayMau_SetFulseUs((uint16_t)Ton);
 8003ae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 ff1f 	bl	800592c <TimerKhuayMau_SetFulseUs>
 8003aee:	e07b      	b.n	8003be8 <handleAppRequets+0x1780>
			}

			else if(strstr(myApp.arrData,"CaiDatTocDoTron"))
 8003af0:	4982      	ldr	r1, [pc, #520]	; (8003cfc <handleAppRequets+0x1894>)
 8003af2:	4872      	ldr	r0, [pc, #456]	; (8003cbc <handleAppRequets+0x1854>)
 8003af4:	f006 fdfa 	bl	800a6ec <strstr>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d074      	beq.n	8003be8 <handleAppRequets+0x1780>
			{
				printf("CaiDatTocDoTron \r\n");
 8003afe:	4880      	ldr	r0, [pc, #512]	; (8003d00 <handleAppRequets+0x1898>)
 8003b00:	f006 fc86 	bl	800a410 <puts>
			    sscanf(myApp.arrData, "CaiDatTocDoTron low[%d],avg[%d],high[%d]", &khuayMau.levelThap.value, &khuayMau.levelTrungBinh.value, &khuayMau.levelCao.value);
 8003b04:	4b7f      	ldr	r3, [pc, #508]	; (8003d04 <handleAppRequets+0x189c>)
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	4b7f      	ldr	r3, [pc, #508]	; (8003d08 <handleAppRequets+0x18a0>)
 8003b0a:	4a80      	ldr	r2, [pc, #512]	; (8003d0c <handleAppRequets+0x18a4>)
 8003b0c:	4980      	ldr	r1, [pc, #512]	; (8003d10 <handleAppRequets+0x18a8>)
 8003b0e:	486b      	ldr	r0, [pc, #428]	; (8003cbc <handleAppRequets+0x1854>)
 8003b10:	f006 fca6 	bl	800a460 <siscanf>

			    khuayMau.levelThap.value++;
 8003b14:	4b6c      	ldr	r3, [pc, #432]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	4b6a      	ldr	r3, [pc, #424]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			    khuayMau.levelTrungBinh.value++;
 8003b24:	4b68      	ldr	r3, [pc, #416]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	4b66      	ldr	r3, [pc, #408]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
			    khuayMau.levelCao.value++;
 8003b34:	4b64      	ldr	r3, [pc, #400]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	4b62      	ldr	r3, [pc, #392]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

				if(khuayMau.tocDoKhuayMau.value==THAP) bomTron.slowLevel=khuayMau.levelThap.value;
 8003b44:	4b60      	ldr	r3, [pc, #384]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d106      	bne.n	8003b5c <handleAppRequets+0x16f4>
 8003b4e:	4b5e      	ldr	r3, [pc, #376]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <handleAppRequets+0x188c>)
 8003b58:	705a      	strb	r2, [r3, #1]
 8003b5a:	e016      	b.n	8003b8a <handleAppRequets+0x1722>
				else if(khuayMau.tocDoKhuayMau.value==TRUNGBINH) bomTron.slowLevel=khuayMau.levelTrungBinh.value;
 8003b5c:	4b5a      	ldr	r3, [pc, #360]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d106      	bne.n	8003b74 <handleAppRequets+0x170c>
 8003b66:	4b58      	ldr	r3, [pc, #352]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <handleAppRequets+0x188c>)
 8003b70:	705a      	strb	r2, [r3, #1]
 8003b72:	e00a      	b.n	8003b8a <handleAppRequets+0x1722>
				else if(khuayMau.tocDoKhuayMau.value==CAO) bomTron.slowLevel=khuayMau.levelCao.value;
 8003b74:	4b54      	ldr	r3, [pc, #336]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d105      	bne.n	8003b8a <handleAppRequets+0x1722>
 8003b7e:	4b52      	ldr	r3, [pc, #328]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b5b      	ldr	r3, [pc, #364]	; (8003cf4 <handleAppRequets+0x188c>)
 8003b88:	705a      	strb	r2, [r3, #1]

				printf("levelThap %d, levelTrungBinh=%d ,levelCao=%d\n\r",khuayMau.levelThap.value,khuayMau.levelTrungBinh.value,khuayMau.levelCao.value);
 8003b8a:	4b4f      	ldr	r3, [pc, #316]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b90:	4619      	mov	r1, r3
 8003b92:	4b4d      	ldr	r3, [pc, #308]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b4b      	ldr	r3, [pc, #300]	; (8003cc8 <handleAppRequets+0x1860>)
 8003b9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8003ba0:	485c      	ldr	r0, [pc, #368]	; (8003d14 <handleAppRequets+0x18ac>)
 8003ba2:	f006 fbc7 	bl	800a334 <iprintf>

				khuayMau.levelThap.address		= 28;
 8003ba6:	4b48      	ldr	r3, [pc, #288]	; (8003cc8 <handleAppRequets+0x1860>)
 8003ba8:	221c      	movs	r2, #28
 8003baa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				khuayMau.levelTrungBinh.address	= 30;
 8003bae:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <handleAppRequets+0x1860>)
 8003bb0:	221e      	movs	r2, #30
 8003bb2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
				khuayMau.levelCao.address		= 32;
 8003bb6:	4b44      	ldr	r3, [pc, #272]	; (8003cc8 <handleAppRequets+0x1860>)
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

			    eep_write_word(28,khuayMau.levelThap.value);
 8003bbe:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <handleAppRequets+0x1860>)
 8003bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	201c      	movs	r0, #28
 8003bc8:	f001 ff00 	bl	80059cc <eep_write_word>
			    eep_write_word(30,khuayMau.levelTrungBinh.value);
 8003bcc:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <handleAppRequets+0x1860>)
 8003bce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	201e      	movs	r0, #30
 8003bd6:	f001 fef9 	bl	80059cc <eep_write_word>
			    eep_write_word(32,khuayMau.levelCao.value);
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <handleAppRequets+0x1860>)
 8003bdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8003be0:	4619      	mov	r1, r3
 8003be2:	2020      	movs	r0, #32
 8003be4:	f001 fef2 	bl	80059cc <eep_write_word>

			}


			if(strstr(myApp.arrData,"led1 on")) led_stt1(on);
 8003be8:	494b      	ldr	r1, [pc, #300]	; (8003d18 <handleAppRequets+0x18b0>)
 8003bea:	4834      	ldr	r0, [pc, #208]	; (8003cbc <handleAppRequets+0x1854>)
 8003bec:	f006 fd7e 	bl	800a6ec <strstr>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d006      	beq.n	8003c04 <handleAppRequets+0x179c>
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bfc:	4847      	ldr	r0, [pc, #284]	; (8003d1c <handleAppRequets+0x18b4>)
 8003bfe:	f002 fc1c 	bl	800643a <HAL_GPIO_WritePin>
 8003c02:	e044      	b.n	8003c8e <handleAppRequets+0x1826>
			else if(strstr(myApp.arrData,"led1 off")) led_stt1(off);
 8003c04:	4946      	ldr	r1, [pc, #280]	; (8003d20 <handleAppRequets+0x18b8>)
 8003c06:	482d      	ldr	r0, [pc, #180]	; (8003cbc <handleAppRequets+0x1854>)
 8003c08:	f006 fd70 	bl	800a6ec <strstr>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d006      	beq.n	8003c20 <handleAppRequets+0x17b8>
 8003c12:	2200      	movs	r2, #0
 8003c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c18:	4840      	ldr	r0, [pc, #256]	; (8003d1c <handleAppRequets+0x18b4>)
 8003c1a:	f002 fc0e 	bl	800643a <HAL_GPIO_WritePin>
 8003c1e:	e036      	b.n	8003c8e <handleAppRequets+0x1826>

			else if(strstr(myApp.arrData,"led2 on")) led_stt2(on);
 8003c20:	4940      	ldr	r1, [pc, #256]	; (8003d24 <handleAppRequets+0x18bc>)
 8003c22:	4826      	ldr	r0, [pc, #152]	; (8003cbc <handleAppRequets+0x1854>)
 8003c24:	f006 fd62 	bl	800a6ec <strstr>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d006      	beq.n	8003c3c <handleAppRequets+0x17d4>
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c34:	483c      	ldr	r0, [pc, #240]	; (8003d28 <handleAppRequets+0x18c0>)
 8003c36:	f002 fc00 	bl	800643a <HAL_GPIO_WritePin>
 8003c3a:	e028      	b.n	8003c8e <handleAppRequets+0x1826>
			else if(strstr(myApp.arrData,"led2 off")) led_stt2(off);
 8003c3c:	493b      	ldr	r1, [pc, #236]	; (8003d2c <handleAppRequets+0x18c4>)
 8003c3e:	481f      	ldr	r0, [pc, #124]	; (8003cbc <handleAppRequets+0x1854>)
 8003c40:	f006 fd54 	bl	800a6ec <strstr>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d006      	beq.n	8003c58 <handleAppRequets+0x17f0>
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c50:	4835      	ldr	r0, [pc, #212]	; (8003d28 <handleAppRequets+0x18c0>)
 8003c52:	f002 fbf2 	bl	800643a <HAL_GPIO_WritePin>
 8003c56:	e01a      	b.n	8003c8e <handleAppRequets+0x1826>

			else if(strstr(myApp.arrData,"led3 on")) led_stt3(on);
 8003c58:	4935      	ldr	r1, [pc, #212]	; (8003d30 <handleAppRequets+0x18c8>)
 8003c5a:	4818      	ldr	r0, [pc, #96]	; (8003cbc <handleAppRequets+0x1854>)
 8003c5c:	f006 fd46 	bl	800a6ec <strstr>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <handleAppRequets+0x180c>
 8003c66:	2201      	movs	r2, #1
 8003c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c6c:	4831      	ldr	r0, [pc, #196]	; (8003d34 <handleAppRequets+0x18cc>)
 8003c6e:	f002 fbe4 	bl	800643a <HAL_GPIO_WritePin>
 8003c72:	e00c      	b.n	8003c8e <handleAppRequets+0x1826>
			else if(strstr(myApp.arrData,"led3 off")) led_stt3(off);
 8003c74:	4930      	ldr	r1, [pc, #192]	; (8003d38 <handleAppRequets+0x18d0>)
 8003c76:	4811      	ldr	r0, [pc, #68]	; (8003cbc <handleAppRequets+0x1854>)
 8003c78:	f006 fd38 	bl	800a6ec <strstr>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <handleAppRequets+0x1826>
 8003c82:	2200      	movs	r2, #0
 8003c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c88:	482a      	ldr	r0, [pc, #168]	; (8003d34 <handleAppRequets+0x18cc>)
 8003c8a:	f002 fbd6 	bl	800643a <HAL_GPIO_WritePin>



			uartAppClear(&myApp);
 8003c8e:	482b      	ldr	r0, [pc, #172]	; (8003d3c <handleAppRequets+0x18d4>)
 8003c90:	f7fe fbce 	bl	8002430 <uartAppClear>
			HAL_Delay(50);
 8003c94:	2032      	movs	r0, #50	; 0x32
 8003c96:	f001 ffb1 	bl	8005bfc <HAL_Delay>

			HAL_TIM_Base_Start_IT(&htim2);
 8003c9a:	4829      	ldr	r0, [pc, #164]	; (8003d40 <handleAppRequets+0x18d8>)
 8003c9c:	f004 f994 	bl	8007fc8 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 8003ca0:	4828      	ldr	r0, [pc, #160]	; (8003d44 <handleAppRequets+0x18dc>)
 8003ca2:	f004 f991 	bl	8007fc8 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim4);
 8003ca6:	480f      	ldr	r0, [pc, #60]	; (8003ce4 <handleAppRequets+0x187c>)
 8003ca8:	f004 f98e 	bl	8007fc8 <HAL_TIM_Base_Start_IT>
		}
		//if(myApp.dataDoneFrame)

		HAL_Delay(1);
 8003cac:	2001      	movs	r0, #1
 8003cae:	f001 ffa5 	bl	8005bfc <HAL_Delay>
		testDongNap();
 8003cb2:	f7fe bbdc 	b.w	800246e <handleAppRequets+0x6>
 8003cb6:	bf00      	nop
 8003cb8:	0800ed98 	.word	0x0800ed98
 8003cbc:	2000000a 	.word	0x2000000a
 8003cc0:	0800eda8 	.word	0x0800eda8
 8003cc4:	0800edbc 	.word	0x0800edbc
 8003cc8:	2000023c 	.word	0x2000023c
 8003ccc:	0800edd0 	.word	0x0800edd0
 8003cd0:	0800edf8 	.word	0x0800edf8
 8003cd4:	0800ee04 	.word	0x0800ee04
 8003cd8:	0800ee14 	.word	0x0800ee14
 8003cdc:	200002ac 	.word	0x200002ac
 8003ce0:	0800ee30 	.word	0x0800ee30
 8003ce4:	20000a3c 	.word	0x20000a3c
 8003ce8:	0800ee3c 	.word	0x0800ee3c
 8003cec:	0800ee4c 	.word	0x0800ee4c
 8003cf0:	cccccccd 	.word	0xcccccccd
 8003cf4:	2000110c 	.word	0x2000110c
 8003cf8:	0800ee68 	.word	0x0800ee68
 8003cfc:	0800ee7c 	.word	0x0800ee7c
 8003d00:	0800ee8c 	.word	0x0800ee8c
 8003d04:	200002a2 	.word	0x200002a2
 8003d08:	2000029e 	.word	0x2000029e
 8003d0c:	2000029a 	.word	0x2000029a
 8003d10:	0800eea0 	.word	0x0800eea0
 8003d14:	0800eecc 	.word	0x0800eecc
 8003d18:	0800eefc 	.word	0x0800eefc
 8003d1c:	40010c00 	.word	0x40010c00
 8003d20:	0800ef04 	.word	0x0800ef04
 8003d24:	0800ef10 	.word	0x0800ef10
 8003d28:	40011800 	.word	0x40011800
 8003d2c:	0800ef18 	.word	0x0800ef18
 8003d30:	0800ef24 	.word	0x0800ef24
 8003d34:	40011400 	.word	0x40011400
 8003d38:	0800ef2c 	.word	0x0800ef2c
 8003d3c:	20000004 	.word	0x20000004
 8003d40:	200009ac 	.word	0x200009ac
 8003d44:	200009f4 	.word	0x200009f4

08003d48 <allPumpIsRun>:




void allPumpIsRun()
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
	for(int i=0;i<16;i++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	e00c      	b.n	8003d6e <allPumpIsRun+0x26>
	{
		bomMau[i].sleep=RUN;
 8003d54:	490a      	ldr	r1, [pc, #40]	; (8003d80 <allPumpIsRun+0x38>)
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3301      	adds	r3, #1
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<16;i++)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b0f      	cmp	r3, #15
 8003d72:	ddef      	ble.n	8003d54 <allPumpIsRun+0xc>
		//calc_colorPulseOutput(&bomMau[i]);
	}
	//check_dir_sleep_Colorpump();
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	20000ccc 	.word	0x20000ccc

08003d84 <allPumpIsSleep>:

void allPumpIsSleep()
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
	for(int i=0;i<16;i++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	e016      	b.n	8003dbe <allPumpIsSleep+0x3a>
	{
		bomMau[i].sleep=SLEEP;
 8003d90:	490f      	ldr	r1, [pc, #60]	; (8003dd0 <allPumpIsSleep+0x4c>)
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3301      	adds	r3, #1
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
		bomMau[i].Counter_Ton = 0;
 8003da4:	490a      	ldr	r1, [pc, #40]	; (8003dd0 <allPumpIsSleep+0x4c>)
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	332a      	adds	r3, #42	; 0x2a
 8003db4:	2200      	movs	r2, #0
 8003db6:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<16;i++)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b0f      	cmp	r3, #15
 8003dc2:	dde5      	ble.n	8003d90 <allPumpIsSleep+0xc>
	}
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	20000ccc 	.word	0x20000ccc

08003dd4 <checkSensor>:
	temp->pulse01ml=pulse01ml;
	temp->pulse001ml=pulse001ml;
}

static void checkSensor(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
	 */
	static uint32_t delay_sensor1 = 0;
	static uint32_t delay_sensor2 = 0 ;
	static uint32_t delay_sensor3 = 0;

	if (read_sensor1)
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4859      	ldr	r0, [pc, #356]	; (8003f40 <checkSensor+0x16c>)
 8003ddc:	f002 fb16 	bl	800640c <HAL_GPIO_ReadPin>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d017      	beq.n	8003e16 <checkSensor+0x42>
	{
		if(HAL_GetTick() - delay_sensor1 > 20)
 8003de6:	f001 feff 	bl	8005be8 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b55      	ldr	r3, [pc, #340]	; (8003f44 <checkSensor+0x170>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b14      	cmp	r3, #20
 8003df4:	d912      	bls.n	8003e1c <checkSensor+0x48>
		{
			delay_sensor1 = HAL_GetTick();
 8003df6:	f001 fef7 	bl	8005be8 <HAL_GetTick>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4a51      	ldr	r2, [pc, #324]	; (8003f44 <checkSensor+0x170>)
 8003dfe:	6013      	str	r3, [r2, #0]
			if (read_sensor1)
 8003e00:	2101      	movs	r1, #1
 8003e02:	484f      	ldr	r0, [pc, #316]	; (8003f40 <checkSensor+0x16c>)
 8003e04:	f002 fb02 	bl	800640c <HAL_GPIO_ReadPin>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d006      	beq.n	8003e1c <checkSensor+0x48>
				sttSensor1 = true;
 8003e0e:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <checkSensor+0x174>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	e002      	b.n	8003e1c <checkSensor+0x48>
		}
	}
	else
		sttSensor1 = false;
 8003e16:	4b4c      	ldr	r3, [pc, #304]	; (8003f48 <checkSensor+0x174>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]

	if (read_sensor2)
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4848      	ldr	r0, [pc, #288]	; (8003f40 <checkSensor+0x16c>)
 8003e20:	f002 faf4 	bl	800640c <HAL_GPIO_ReadPin>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d012      	beq.n	8003e50 <checkSensor+0x7c>
	{
		if (HAL_GetTick() - delay_sensor2 > 20)
 8003e2a:	f001 fedd 	bl	8005be8 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <checkSensor+0x178>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b14      	cmp	r3, #20
 8003e38:	d90d      	bls.n	8003e56 <checkSensor+0x82>
		{
			if (read_sensor2)
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	4840      	ldr	r0, [pc, #256]	; (8003f40 <checkSensor+0x16c>)
 8003e3e:	f002 fae5 	bl	800640c <HAL_GPIO_ReadPin>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d006      	beq.n	8003e56 <checkSensor+0x82>
				sttSensor2 = true;
 8003e48:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <checkSensor+0x17c>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e002      	b.n	8003e56 <checkSensor+0x82>
		}

	}
	else
		sttSensor2 = false;
 8003e50:	4b3f      	ldr	r3, [pc, #252]	; (8003f50 <checkSensor+0x17c>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]

	if (read_sensor3)
 8003e56:	2108      	movs	r1, #8
 8003e58:	483e      	ldr	r0, [pc, #248]	; (8003f54 <checkSensor+0x180>)
 8003e5a:	f002 fad7 	bl	800640c <HAL_GPIO_ReadPin>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d017      	beq.n	8003e94 <checkSensor+0xc0>
	{
		if (HAL_GetTick() - delay_sensor3 > 20)
 8003e64:	f001 fec0 	bl	8005be8 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <checkSensor+0x184>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b14      	cmp	r3, #20
 8003e72:	d912      	bls.n	8003e9a <checkSensor+0xc6>
		{
			delay_sensor3 = HAL_GetTick();
 8003e74:	f001 feb8 	bl	8005be8 <HAL_GetTick>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4a37      	ldr	r2, [pc, #220]	; (8003f58 <checkSensor+0x184>)
 8003e7c:	6013      	str	r3, [r2, #0]
			if (read_sensor3)
 8003e7e:	2108      	movs	r1, #8
 8003e80:	4834      	ldr	r0, [pc, #208]	; (8003f54 <checkSensor+0x180>)
 8003e82:	f002 fac3 	bl	800640c <HAL_GPIO_ReadPin>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <checkSensor+0xc6>
				sttSensor3 = true;
 8003e8c:	4b33      	ldr	r3, [pc, #204]	; (8003f5c <checkSensor+0x188>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e002      	b.n	8003e9a <checkSensor+0xc6>
		}
	}
	else
		sttSensor3 = false;
 8003e94:	4b31      	ldr	r3, [pc, #196]	; (8003f5c <checkSensor+0x188>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]

	// update status to app //
	if (sttSensor1 != sttSensorLast1)
 8003e9a:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <checkSensor+0x174>)
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	4b30      	ldr	r3, [pc, #192]	; (8003f60 <checkSensor+0x18c>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d014      	beq.n	8003ed0 <checkSensor+0xfc>
	{
		sttSensorLast1 = sttSensor1;
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <checkSensor+0x174>)
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	4b2d      	ldr	r3, [pc, #180]	; (8003f60 <checkSensor+0x18c>)
 8003eac:	701a      	strb	r2, [r3, #0]
		if (sttSensor1)
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <checkSensor+0x174>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d006      	beq.n	8003ec4 <checkSensor+0xf0>
		{
			sendFrame("sensor1 off\n\r");
 8003eb6:	482b      	ldr	r0, [pc, #172]	; (8003f64 <checkSensor+0x190>)
 8003eb8:	f000 fec6 	bl	8004c48 <sendFrame>
			printf("Sensor 1 off\n\r");
 8003ebc:	482a      	ldr	r0, [pc, #168]	; (8003f68 <checkSensor+0x194>)
 8003ebe:	f006 fa39 	bl	800a334 <iprintf>
 8003ec2:	e005      	b.n	8003ed0 <checkSensor+0xfc>
		}
		else  //// dong
		{
			printf("Sensor 1 on\n\r");
 8003ec4:	4829      	ldr	r0, [pc, #164]	; (8003f6c <checkSensor+0x198>)
 8003ec6:	f006 fa35 	bl	800a334 <iprintf>
			sendFrame("sensor1 on\n\r");
 8003eca:	4829      	ldr	r0, [pc, #164]	; (8003f70 <checkSensor+0x19c>)
 8003ecc:	f000 febc 	bl	8004c48 <sendFrame>

		}
	}
	if (sttSensor2 != sttSensorLast2)
 8003ed0:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <checkSensor+0x17c>)
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <checkSensor+0x1a0>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d014      	beq.n	8003f06 <checkSensor+0x132>
	{
		sttSensorLast2 = sttSensor2;
 8003edc:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <checkSensor+0x17c>)
 8003ede:	781a      	ldrb	r2, [r3, #0]
 8003ee0:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <checkSensor+0x1a0>)
 8003ee2:	701a      	strb	r2, [r3, #0]
		if (sttSensor2)
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <checkSensor+0x17c>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d006      	beq.n	8003efa <checkSensor+0x126>
		{
			sendFrame("sensor2 off\n\r");
 8003eec:	4822      	ldr	r0, [pc, #136]	; (8003f78 <checkSensor+0x1a4>)
 8003eee:	f000 feab 	bl	8004c48 <sendFrame>
			printf("Sensor 2 off\n\r");
 8003ef2:	4822      	ldr	r0, [pc, #136]	; (8003f7c <checkSensor+0x1a8>)
 8003ef4:	f006 fa1e 	bl	800a334 <iprintf>
 8003ef8:	e005      	b.n	8003f06 <checkSensor+0x132>
		}
		else
		{
			sendFrame("sensor2 on\n\r");
 8003efa:	4821      	ldr	r0, [pc, #132]	; (8003f80 <checkSensor+0x1ac>)
 8003efc:	f000 fea4 	bl	8004c48 <sendFrame>
			printf("Sensor 2 on\n\r");
 8003f00:	4820      	ldr	r0, [pc, #128]	; (8003f84 <checkSensor+0x1b0>)
 8003f02:	f006 fa17 	bl	800a334 <iprintf>

		}
	}
	if (sttSensor3 != sttSensorLast3)
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <checkSensor+0x188>)
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <checkSensor+0x1b4>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d014      	beq.n	8003f3c <checkSensor+0x168>
	{
		sttSensorLast3 = sttSensor3;
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <checkSensor+0x188>)
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <checkSensor+0x1b4>)
 8003f18:	701a      	strb	r2, [r3, #0]

		if (sttSensor3)
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <checkSensor+0x188>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <checkSensor+0x15c>
		{
			sendFrame("sensor3 off\n\r");
 8003f22:	481a      	ldr	r0, [pc, #104]	; (8003f8c <checkSensor+0x1b8>)
 8003f24:	f000 fe90 	bl	8004c48 <sendFrame>
			printf("Sensor 3 off\n\r");
 8003f28:	4819      	ldr	r0, [pc, #100]	; (8003f90 <checkSensor+0x1bc>)
 8003f2a:	f006 fa03 	bl	800a334 <iprintf>
		{
			printf("Sensor 3 on\n\r");
			sendFrame("sensor3 on\n\r");
		}
	}
}
 8003f2e:	e005      	b.n	8003f3c <checkSensor+0x168>
			printf("Sensor 3 on\n\r");
 8003f30:	4818      	ldr	r0, [pc, #96]	; (8003f94 <checkSensor+0x1c0>)
 8003f32:	f006 f9ff 	bl	800a334 <iprintf>
			sendFrame("sensor3 on\n\r");
 8003f36:	4818      	ldr	r0, [pc, #96]	; (8003f98 <checkSensor+0x1c4>)
 8003f38:	f000 fe86 	bl	8004c48 <sendFrame>
}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40010800 	.word	0x40010800
 8003f44:	20000cbc 	.word	0x20000cbc
 8003f48:	20000ba5 	.word	0x20000ba5
 8003f4c:	20000cc0 	.word	0x20000cc0
 8003f50:	20000ba7 	.word	0x20000ba7
 8003f54:	40011000 	.word	0x40011000
 8003f58:	20000cc4 	.word	0x20000cc4
 8003f5c:	20000ba9 	.word	0x20000ba9
 8003f60:	20000ba6 	.word	0x20000ba6
 8003f64:	0800ef38 	.word	0x0800ef38
 8003f68:	0800ef48 	.word	0x0800ef48
 8003f6c:	0800ef58 	.word	0x0800ef58
 8003f70:	0800ef68 	.word	0x0800ef68
 8003f74:	20000ba8 	.word	0x20000ba8
 8003f78:	0800ef78 	.word	0x0800ef78
 8003f7c:	0800ef88 	.word	0x0800ef88
 8003f80:	0800ef98 	.word	0x0800ef98
 8003f84:	0800efa8 	.word	0x0800efa8
 8003f88:	20000baa 	.word	0x20000baa
 8003f8c:	0800efb8 	.word	0x0800efb8
 8003f90:	0800efc8 	.word	0x0800efc8
 8003f94:	0800efd8 	.word	0x0800efd8
 8003f98:	0800efe8 	.word	0x0800efe8

08003f9c <testDongNap>:
 * mo sensor 2 on
 * dong sensor 2 off
 *
 * */
static void testDongNap(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - DoorTick > 100)
 8003fa0:	f001 fe22 	bl	8005be8 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <testDongNap+0x108>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b64      	cmp	r3, #100	; 0x64
 8003fae:	d977      	bls.n	80040a0 <testDongNap+0x104>
	{
		DoorTick = HAL_GetTick();
 8003fb0:	f001 fe1a 	bl	8005be8 <HAL_GetTick>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4a3b      	ldr	r2, [pc, #236]	; (80040a4 <testDongNap+0x108>)
 8003fb8:	6013      	str	r3, [r2, #0]
		if(DOOR_STATE == DOOR_START)
 8003fba:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <testDongNap+0x10c>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d12c      	bne.n	800401c <testDongNap+0x80>
		{
			if(sttSensor1 == 0 && sttSensor2 == 1)
 8003fc2:	4b3a      	ldr	r3, [pc, #232]	; (80040ac <testDongNap+0x110>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	f083 0301 	eor.w	r3, r3, #1
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00f      	beq.n	8003ff0 <testDongNap+0x54>
 8003fd0:	4b37      	ldr	r3, [pc, #220]	; (80040b0 <testDongNap+0x114>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <testDongNap+0x54>
			{
				printf("Close --> Opening \r\n");
 8003fd8:	4836      	ldr	r0, [pc, #216]	; (80040b4 <testDongNap+0x118>)
 8003fda:	f006 fa19 	bl	800a410 <puts>
				DOOR_STATE =  DOOR_CLOSE_OK;
 8003fde:	4b32      	ldr	r3, [pc, #200]	; (80040a8 <testDongNap+0x10c>)
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(DIR17_GPIO_Port, DIR17_Pin, DOOR_OPEN_DIR);
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4833      	ldr	r0, [pc, #204]	; (80040b8 <testDongNap+0x11c>)
 8003fea:	f002 fa26 	bl	800643a <HAL_GPIO_WritePin>
 8003fee:	e015      	b.n	800401c <testDongNap+0x80>
			}
			else if(sttSensor1 == 1 && sttSensor2 == 0)
 8003ff0:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <testDongNap+0x110>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d011      	beq.n	800401c <testDongNap+0x80>
 8003ff8:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <testDongNap+0x114>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	f083 0301 	eor.w	r3, r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <testDongNap+0x80>
			{
				printf("Open --> Closing \r\n");
 8004006:	482d      	ldr	r0, [pc, #180]	; (80040bc <testDongNap+0x120>)
 8004008:	f006 fa02 	bl	800a410 <puts>
				DOOR_STATE =  DOOR_OPEN_OK;
 800400c:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <testDongNap+0x10c>)
 800400e:	2203      	movs	r2, #3
 8004010:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(DIR17_GPIO_Port, DIR17_Pin, DOOR_CLOSE_DIR);
 8004012:	2201      	movs	r2, #1
 8004014:	2102      	movs	r1, #2
 8004016:	4828      	ldr	r0, [pc, #160]	; (80040b8 <testDongNap+0x11c>)
 8004018:	f002 fa0f 	bl	800643a <HAL_GPIO_WritePin>
			{
				//printf(".\r");
			}
		}

		switch (DOOR_STATE) {
 800401c:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <testDongNap+0x10c>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d01f      	beq.n	8004064 <testDongNap+0xc8>
 8004024:	2b04      	cmp	r3, #4
 8004026:	d136      	bne.n	8004096 <testDongNap+0xfa>

		case DOOR_CLOSE_OK:
			if (sttSensor1 == 1 && sttSensor2 == 0)
 8004028:	4b20      	ldr	r3, [pc, #128]	; (80040ac <testDongNap+0x110>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d034      	beq.n	800409a <testDongNap+0xfe>
 8004030:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <testDongNap+0x114>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	f083 0301 	eor.w	r3, r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02d      	beq.n	800409a <testDongNap+0xfe>
			{
				printf(" OPEN--> OK - sensor1 = 1 sensor2 =0 \r\n");
 800403e:	4820      	ldr	r0, [pc, #128]	; (80040c0 <testDongNap+0x124>)
 8004040:	f006 f9e6 	bl	800a410 <puts>
				DISABLE_TIMER_DOOR;
 8004044:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <testDongNap+0x128>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	491e      	ldr	r1, [pc, #120]	; (80040c4 <testDongNap+0x128>)
 800404a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800404e:	4013      	ands	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
				HAL_GPIO_WritePin(EN17_GPIO_Port, EN17_Pin, 1);
 8004052:	2201      	movs	r2, #1
 8004054:	2101      	movs	r1, #1
 8004056:	4818      	ldr	r0, [pc, #96]	; (80040b8 <testDongNap+0x11c>)
 8004058:	f002 f9ef 	bl	800643a <HAL_GPIO_WritePin>
				DOOR_STATE = DOOR_IDLE;
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <testDongNap+0x10c>)
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004062:	e01a      	b.n	800409a <testDongNap+0xfe>

			case DOOR_OPEN_OK:
			if(sttSensor1 == 0 && sttSensor2 == 1)
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <testDongNap+0x110>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	f083 0301 	eor.w	r3, r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d015      	beq.n	800409e <testDongNap+0x102>
 8004072:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <testDongNap+0x114>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d011      	beq.n	800409e <testDongNap+0x102>
			{
				printf(" CLOSE --> OK sensor1 = 1 sensor2 =0 \r\n");
 800407a:	4813      	ldr	r0, [pc, #76]	; (80040c8 <testDongNap+0x12c>)
 800407c:	f006 f9c8 	bl	800a410 <puts>
				//HAL_GPIO_WritePin(EN17_GPIO_Port, EN17_Pin, 1);
				DISABLE_TIMER_DOOR;
 8004080:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <testDongNap+0x128>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	490f      	ldr	r1, [pc, #60]	; (80040c4 <testDongNap+0x128>)
 8004086:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800408a:	4013      	ands	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
				DOOR_STATE = DOOR_IDLE;
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <testDongNap+0x10c>)
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
			}
				break;
 8004094:	e003      	b.n	800409e <testDongNap+0x102>

			default:
				break;
 8004096:	bf00      	nop
 8004098:	e002      	b.n	80040a0 <testDongNap+0x104>
			break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <testDongNap+0x104>
				break;
 800409e:	bf00      	nop
		}
	}
}
 80040a0:	bf00      	nop
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000bb0 	.word	0x20000bb0
 80040a8:	20000bad 	.word	0x20000bad
 80040ac:	20000ba5 	.word	0x20000ba5
 80040b0:	20000ba7 	.word	0x20000ba7
 80040b4:	0800eff8 	.word	0x0800eff8
 80040b8:	40011400 	.word	0x40011400
 80040bc:	0800f00c 	.word	0x0800f00c
 80040c0:	0800f020 	.word	0x0800f020
 80040c4:	40000c00 	.word	0x40000c00
 80040c8:	0800f048 	.word	0x0800f048

080040cc <ledTask>:

/*
 * blink led task */
static void ledTask(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
	static uint32_t led_tick = 0;
	if(HAL_GetTick() - led_tick > 1000)
 80040d0:	f001 fd8a 	bl	8005be8 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <ledTask+0x38>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040e0:	d90e      	bls.n	8004100 <ledTask+0x34>
	{
		led_tick = HAL_GetTick();
 80040e2:	f001 fd81 	bl	8005be8 <HAL_GetTick>
 80040e6:	4603      	mov	r3, r0
 80040e8:	4a06      	ldr	r2, [pc, #24]	; (8004104 <ledTask+0x38>)
 80040ea:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(ST1_GPIO_Port, ST1_Pin);
 80040ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040f0:	4805      	ldr	r0, [pc, #20]	; (8004108 <ledTask+0x3c>)
 80040f2:	f002 f9ba 	bl	800646a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(ST2_GPIO_Port, ST2_Pin);
 80040f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040fa:	4804      	ldr	r0, [pc, #16]	; (800410c <ledTask+0x40>)
 80040fc:	f002 f9b5 	bl	800646a <HAL_GPIO_TogglePin>
	}
}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000cc8 	.word	0x20000cc8
 8004108:	40010c00 	.word	0x40010c00
 800410c:	40011800 	.word	0x40011800

08004110 <UpdateStatus>:



static void UpdateStatus(void) {
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0

  HAL_Delay(10);
 8004114:	200a      	movs	r0, #10
 8004116:	f001 fd71 	bl	8005bfc <HAL_Delay>
   printf("update status to PC \r\n");
 800411a:	481f      	ldr	r0, [pc, #124]	; (8004198 <UpdateStatus+0x88>)
 800411c:	f006 f978 	bl	800a410 <puts>
	if (sttSensor1) {
 8004120:	4b1e      	ldr	r3, [pc, #120]	; (800419c <UpdateStatus+0x8c>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d006      	beq.n	8004136 <UpdateStatus+0x26>
		sendFrame("sensor1 off\n\r");
 8004128:	481d      	ldr	r0, [pc, #116]	; (80041a0 <UpdateStatus+0x90>)
 800412a:	f000 fd8d 	bl	8004c48 <sendFrame>
		printf("Sensor 1 off\n\r");
 800412e:	481d      	ldr	r0, [pc, #116]	; (80041a4 <UpdateStatus+0x94>)
 8004130:	f006 f900 	bl	800a334 <iprintf>
 8004134:	e005      	b.n	8004142 <UpdateStatus+0x32>
	} else  //// dong
	{
		printf("Sensor 1 on\n\r");
 8004136:	481c      	ldr	r0, [pc, #112]	; (80041a8 <UpdateStatus+0x98>)
 8004138:	f006 f8fc 	bl	800a334 <iprintf>
		sendFrame("sensor1 on\n\r");
 800413c:	481b      	ldr	r0, [pc, #108]	; (80041ac <UpdateStatus+0x9c>)
 800413e:	f000 fd83 	bl	8004c48 <sendFrame>

	}

	HAL_Delay(10);
 8004142:	200a      	movs	r0, #10
 8004144:	f001 fd5a 	bl	8005bfc <HAL_Delay>
	if (sttSensor2) {
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <UpdateStatus+0xa0>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <UpdateStatus+0x4e>
		sendFrame("sensor2 off\n\r");
 8004150:	4818      	ldr	r0, [pc, #96]	; (80041b4 <UpdateStatus+0xa4>)
 8004152:	f000 fd79 	bl	8004c48 <sendFrame>
		printf("Sensor 2 off\n\r");
 8004156:	4818      	ldr	r0, [pc, #96]	; (80041b8 <UpdateStatus+0xa8>)
 8004158:	f006 f8ec 	bl	800a334 <iprintf>
 800415c:	e005      	b.n	800416a <UpdateStatus+0x5a>
	} else {
		sendFrame("sensor2 on\n\r");
 800415e:	4817      	ldr	r0, [pc, #92]	; (80041bc <UpdateStatus+0xac>)
 8004160:	f000 fd72 	bl	8004c48 <sendFrame>
		printf("Sensor 2 on\n\r");
 8004164:	4816      	ldr	r0, [pc, #88]	; (80041c0 <UpdateStatus+0xb0>)
 8004166:	f006 f8e5 	bl	800a334 <iprintf>

	}

	HAL_Delay(10);
 800416a:	200a      	movs	r0, #10
 800416c:	f001 fd46 	bl	8005bfc <HAL_Delay>
	if (sttSensor3) {
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <UpdateStatus+0xb4>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <UpdateStatus+0x76>
		sendFrame("sensor3 off\n\r");
 8004178:	4813      	ldr	r0, [pc, #76]	; (80041c8 <UpdateStatus+0xb8>)
 800417a:	f000 fd65 	bl	8004c48 <sendFrame>
		printf("Sensor 3 off\n\r");
 800417e:	4813      	ldr	r0, [pc, #76]	; (80041cc <UpdateStatus+0xbc>)
 8004180:	f006 f8d8 	bl	800a334 <iprintf>
	} else {
		printf("Sensor 3 on\n\r");
		sendFrame("sensor3 on\n\r");
	}

}
 8004184:	e005      	b.n	8004192 <UpdateStatus+0x82>
		printf("Sensor 3 on\n\r");
 8004186:	4812      	ldr	r0, [pc, #72]	; (80041d0 <UpdateStatus+0xc0>)
 8004188:	f006 f8d4 	bl	800a334 <iprintf>
		sendFrame("sensor3 on\n\r");
 800418c:	4811      	ldr	r0, [pc, #68]	; (80041d4 <UpdateStatus+0xc4>)
 800418e:	f000 fd5b 	bl	8004c48 <sendFrame>
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	0800f070 	.word	0x0800f070
 800419c:	20000ba5 	.word	0x20000ba5
 80041a0:	0800ef38 	.word	0x0800ef38
 80041a4:	0800ef48 	.word	0x0800ef48
 80041a8:	0800ef58 	.word	0x0800ef58
 80041ac:	0800ef68 	.word	0x0800ef68
 80041b0:	20000ba7 	.word	0x20000ba7
 80041b4:	0800ef78 	.word	0x0800ef78
 80041b8:	0800ef88 	.word	0x0800ef88
 80041bc:	0800ef98 	.word	0x0800ef98
 80041c0:	0800efa8 	.word	0x0800efa8
 80041c4:	20000ba9 	.word	0x20000ba9
 80041c8:	0800efb8 	.word	0x0800efb8
 80041cc:	0800efc8 	.word	0x0800efc8
 80041d0:	0800efd8 	.word	0x0800efd8
 80041d4:	0800efe8 	.word	0x0800efe8

080041d8 <OpenDoor>:

static int counter = 0;
/* Open Door BareMental  */
static void OpenDoor(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
   int MAX_VALUE  = 100000;
 80041de:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <OpenDoor+0xd8>)
 80041e0:	607b      	str	r3, [r7, #4]
   int status = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
   uint16_t counter = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	817b      	strh	r3, [r7, #10]
    uint32_t toggle = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	603b      	str	r3, [r7, #0]

   counter = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	817b      	strh	r3, [r7, #10]
   HAL_GPIO_WritePin(EN17_GPIO_Port, EN17_Pin, 0);
 80041f2:	2200      	movs	r2, #0
 80041f4:	2101      	movs	r1, #1
 80041f6:	482f      	ldr	r0, [pc, #188]	; (80042b4 <OpenDoor+0xdc>)
 80041f8:	f002 f91f 	bl	800643a <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(DIR17_GPIO_Port, DIR17_Pin, DOOR_OPEN_DIR);
 80041fc:	2200      	movs	r2, #0
 80041fe:	2102      	movs	r1, #2
 8004200:	482c      	ldr	r0, [pc, #176]	; (80042b4 <OpenDoor+0xdc>)
 8004202:	f002 f91a 	bl	800643a <HAL_GPIO_WritePin>
//	HAL_TIM_Base_Start_IT(&htim5);
//	ENABLE_TIMER_DOOR;
for(status = 0;  status < MAX_VALUE; status++)
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e046      	b.n	800429a <OpenDoor+0xc2>
{
		HAL_GPIO_TogglePin(PUL17_GPIO_Port, PUL17_Pin);
 800420c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004210:	4829      	ldr	r0, [pc, #164]	; (80042b8 <OpenDoor+0xe0>)
 8004212:	f002 f92a 	bl	800646a <HAL_GPIO_TogglePin>
		//printf("toggle: %d  tick: %d \r\n", toggle++, HAL_GetTick());

		//delay using nop //
		for(counter = 0; counter < 2000; counter++)
 8004216:	2300      	movs	r3, #0
 8004218:	817b      	strh	r3, [r7, #10]
 800421a:	e003      	b.n	8004224 <OpenDoor+0x4c>
			__NOP();
 800421c:	bf00      	nop
		for(counter = 0; counter < 2000; counter++)
 800421e:	897b      	ldrh	r3, [r7, #10]
 8004220:	3301      	adds	r3, #1
 8004222:	817b      	strh	r3, [r7, #10]
 8004224:	897b      	ldrh	r3, [r7, #10]
 8004226:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800422a:	d3f7      	bcc.n	800421c <OpenDoor+0x44>

		status++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]

		if (read_sensor1 == 1 && read_sensor2 == 0) {
 8004232:	2101      	movs	r1, #1
 8004234:	4821      	ldr	r0, [pc, #132]	; (80042bc <OpenDoor+0xe4>)
 8004236:	f002 f8e9 	bl	800640c <HAL_GPIO_ReadPin>
 800423a:	4603      	mov	r3, r0
 800423c:	2b01      	cmp	r3, #1
 800423e:	d11e      	bne.n	800427e <OpenDoor+0xa6>
 8004240:	2102      	movs	r1, #2
 8004242:	481e      	ldr	r0, [pc, #120]	; (80042bc <OpenDoor+0xe4>)
 8004244:	f002 f8e2 	bl	800640c <HAL_GPIO_ReadPin>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d117      	bne.n	800427e <OpenDoor+0xa6>
			HAL_Delay(2);
 800424e:	2002      	movs	r0, #2
 8004250:	f001 fcd4 	bl	8005bfc <HAL_Delay>
			if (read_sensor1 == 1 && read_sensor2 == 0) {
 8004254:	2101      	movs	r1, #1
 8004256:	4819      	ldr	r0, [pc, #100]	; (80042bc <OpenDoor+0xe4>)
 8004258:	f002 f8d8 	bl	800640c <HAL_GPIO_ReadPin>
 800425c:	4603      	mov	r3, r0
 800425e:	2b01      	cmp	r3, #1
 8004260:	d10d      	bne.n	800427e <OpenDoor+0xa6>
 8004262:	2102      	movs	r1, #2
 8004264:	4815      	ldr	r0, [pc, #84]	; (80042bc <OpenDoor+0xe4>)
 8004266:	f002 f8d1 	bl	800640c <HAL_GPIO_ReadPin>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <OpenDoor+0xa6>
				printf("status = %d \r\n", status);
 8004270:	68f9      	ldr	r1, [r7, #12]
 8004272:	4813      	ldr	r0, [pc, #76]	; (80042c0 <OpenDoor+0xe8>)
 8004274:	f006 f85e 	bl	800a334 <iprintf>
				status = MAX_VALUE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	60fb      	str	r3, [r7, #12]
				break;
 800427c:	e011      	b.n	80042a2 <OpenDoor+0xca>
			}
		}
		if (read_sensor1 == 0 && read_sensor2 == 1) {
 800427e:	2101      	movs	r1, #1
 8004280:	480e      	ldr	r0, [pc, #56]	; (80042bc <OpenDoor+0xe4>)
 8004282:	f002 f8c3 	bl	800640c <HAL_GPIO_ReadPin>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d103      	bne.n	8004294 <OpenDoor+0xbc>
 800428c:	2102      	movs	r1, #2
 800428e:	480b      	ldr	r0, [pc, #44]	; (80042bc <OpenDoor+0xe4>)
 8004290:	f002 f8bc 	bl	800640c <HAL_GPIO_ReadPin>
for(status = 0;  status < MAX_VALUE; status++)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	dbb4      	blt.n	800420c <OpenDoor+0x34>
			//printf("cua  dong \r\n");
		}
}

   printf(" check door Done--> Open Complete \r\n");
 80042a2:	4808      	ldr	r0, [pc, #32]	; (80042c4 <OpenDoor+0xec>)
 80042a4:	f006 f8b4 	bl	800a410 <puts>
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	000186a0 	.word	0x000186a0
 80042b4:	40011400 	.word	0x40011400
 80042b8:	40011000 	.word	0x40011000
 80042bc:	40010800 	.word	0x40010800
 80042c0:	0800f088 	.word	0x0800f088
 80042c4:	0800f098 	.word	0x0800f098

080042c8 <CloseDoor>:

/* Close door BarMental  Dong cua test ok */
static void CloseDoor(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	71fb      	strb	r3, [r7, #7]
	printf("Disable Timer3 --> To Close Door \r\n");
 80042d2:	4816      	ldr	r0, [pc, #88]	; (800432c <CloseDoor+0x64>)
 80042d4:	f006 f89c 	bl	800a410 <puts>
	while (status) {
 80042d8:	e00d      	b.n	80042f6 <CloseDoor+0x2e>
		HAL_Delay(100);
 80042da:	2064      	movs	r0, #100	; 0x64
 80042dc:	f001 fc8e 	bl	8005bfc <HAL_Delay>
		printf(".");
 80042e0:	202e      	movs	r0, #46	; 0x2e
 80042e2:	f006 f839 	bl	800a358 <putchar>
		status++;
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	3301      	adds	r3, #1
 80042ea:	71fb      	strb	r3, [r7, #7]
		if (status > 30) {
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	2b1e      	cmp	r3, #30
 80042f0:	d901      	bls.n	80042f6 <CloseDoor+0x2e>
			status = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	71fb      	strb	r3, [r7, #7]
	while (status) {
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ee      	bne.n	80042da <CloseDoor+0x12>
		}
	}

	printf(" Close Complete \r\n");
 80042fc:	480c      	ldr	r0, [pc, #48]	; (8004330 <CloseDoor+0x68>)
 80042fe:	f006 f887 	bl	800a410 <puts>
	DOOR_STATE = DOOR_START;
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <CloseDoor+0x6c>)
 8004304:	2264      	movs	r2, #100	; 0x64
 8004306:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(EN17_GPIO_Port, EN17_Pin, 0);
 8004308:	2200      	movs	r2, #0
 800430a:	2101      	movs	r1, #1
 800430c:	480a      	ldr	r0, [pc, #40]	; (8004338 <CloseDoor+0x70>)
 800430e:	f002 f894 	bl	800643a <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim5);
 8004312:	480a      	ldr	r0, [pc, #40]	; (800433c <CloseDoor+0x74>)
 8004314:	f003 fe58 	bl	8007fc8 <HAL_TIM_Base_Start_IT>
	ENABLE_TIMER_DOOR;
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <CloseDoor+0x78>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a08      	ldr	r2, [pc, #32]	; (8004340 <CloseDoor+0x78>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6013      	str	r3, [r2, #0]
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	0800f0bc 	.word	0x0800f0bc
 8004330:	0800f0e0 	.word	0x0800f0e0
 8004334:	20000bad 	.word	0x20000bad
 8004338:	40011400 	.word	0x40011400
 800433c:	20000a84 	.word	0x20000a84
 8004340:	40000c00 	.word	0x40000c00

08004344 <ruaDauPhun>:

 void ruaDauPhun(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
	if (sttSensor3 == 1) // thung sơn chua co //
 800434a:	4b5d      	ldr	r3, [pc, #372]	; (80044c0 <ruaDauPhun+0x17c>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01c      	beq.n	800438c <ruaDauPhun+0x48>
			{
		bomMauStart = false;
 8004352:	4b5c      	ldr	r3, [pc, #368]	; (80044c4 <ruaDauPhun+0x180>)
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]
		sendFrame("choThungSonVao");
 8004358:	485b      	ldr	r0, [pc, #364]	; (80044c8 <ruaDauPhun+0x184>)
 800435a:	f000 fc75 	bl	8004c48 <sendFrame>
		printf("choThungSonVao\n\r");
 800435e:	485b      	ldr	r0, [pc, #364]	; (80044cc <ruaDauPhun+0x188>)
 8004360:	f005 ffe8 	bl	800a334 <iprintf>
		DISABLE_TIMER_PHA_MAU;
 8004364:	4b5a      	ldr	r3, [pc, #360]	; (80044d0 <ruaDauPhun+0x18c>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4959      	ldr	r1, [pc, #356]	; (80044d0 <ruaDauPhun+0x18c>)
 800436a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800436e:	4013      	ands	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
		printf("Disable timer 3 \n\r");
 8004372:	4858      	ldr	r0, [pc, #352]	; (80044d4 <ruaDauPhun+0x190>)
 8004374:	f005 ffde 	bl	800a334 <iprintf>

		while (read_sensor3 == 1) {
 8004378:	e001      	b.n	800437e <ruaDauPhun+0x3a>
			speaker_efect();
 800437a:	f000 fc3f 	bl	8004bfc <speaker_efect>
		while (read_sensor3 == 1) {
 800437e:	2108      	movs	r1, #8
 8004380:	4855      	ldr	r0, [pc, #340]	; (80044d8 <ruaDauPhun+0x194>)
 8004382:	f002 f843 	bl	800640c <HAL_GPIO_ReadPin>
 8004386:	4603      	mov	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d0f6      	beq.n	800437a <ruaDauPhun+0x36>
		}

		//return;
	}

	HAL_Delay(2000); // delay 3s //
 800438c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004390:	f001 fc34 	bl	8005bfc <HAL_Delay>
	OpenDoor();
 8004394:	f7ff ff20 	bl	80041d8 <OpenDoor>
	printf("Khac phuc loi-->> RuaDauPhun\n\r");
 8004398:	4850      	ldr	r0, [pc, #320]	; (80044dc <ruaDauPhun+0x198>)
 800439a:	f005 ffcb 	bl	800a334 <iprintf>

	huyLenh = false;
 800439e:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <ruaDauPhun+0x19c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++) {
 80043a4:	2300      	movs	r3, #0
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	e057      	b.n	800445a <ruaDauPhun+0x116>
		bomMau[i].mililit = khuayMau.luongMauPhunRa.value;
 80043aa:	4b4e      	ldr	r3, [pc, #312]	; (80044e4 <ruaDauPhun+0x1a0>)
 80043ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc fdaf 	bl	8000f14 <__aeabi_ui2f>
 80043b6:	4601      	mov	r1, r0
 80043b8:	484b      	ldr	r0, [pc, #300]	; (80044e8 <ruaDauPhun+0x1a4>)
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4403      	add	r3, r0
 80043c6:	3314      	adds	r3, #20
 80043c8:	6019      	str	r1, [r3, #0]
		bomMau[i].pulse1ml = 1000;
 80043ca:	4947      	ldr	r1, [pc, #284]	; (80044e8 <ruaDauPhun+0x1a4>)
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	331c      	adds	r3, #28
 80043da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043de:	801a      	strh	r2, [r3, #0]
		bomMau[i].countHighSpeed = bomMau[i].pulse1ml * bomMau[i].mililit;
 80043e0:	4941      	ldr	r1, [pc, #260]	; (80044e8 <ruaDauPhun+0x1a4>)
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	331c      	adds	r3, #28
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fc fd92 	bl	8000f1c <__aeabi_i2f>
 80043f8:	493b      	ldr	r1, [pc, #236]	; (80044e8 <ruaDauPhun+0x1a4>)
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	3314      	adds	r3, #20
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4619      	mov	r1, r3
 800440c:	f7fb ff14 	bl	8000238 <__aeabi_fmul>
 8004410:	4603      	mov	r3, r0
 8004412:	4618      	mov	r0, r3
 8004414:	f7fc fe72 	bl	80010fc <__aeabi_f2uiz>
 8004418:	4601      	mov	r1, r0
 800441a:	4833      	ldr	r0, [pc, #204]	; (80044e8 <ruaDauPhun+0x1a4>)
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4403      	add	r3, r0
 8004428:	330c      	adds	r3, #12
 800442a:	6019      	str	r1, [r3, #0]
		bomMau[i].countLowSpeed = 0;
 800442c:	492e      	ldr	r1, [pc, #184]	; (80044e8 <ruaDauPhun+0x1a4>)
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3310      	adds	r3, #16
 800443c:	2200      	movs	r2, #0
 800443e:	801a      	strh	r2, [r3, #0]
		calc_colorPulseOutput(&bomMau[i]);
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4a27      	ldr	r2, [pc, #156]	; (80044e8 <ruaDauPhun+0x1a4>)
 800444c:	4413      	add	r3, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fd3a 	bl	8004ec8 <calc_colorPulseOutput>
	for (int i = 0; i < 16; i++) {
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3301      	adds	r3, #1
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b0f      	cmp	r3, #15
 800445e:	dda4      	ble.n	80043aa <ruaDauPhun+0x66>
	}

	// check nap va thung --> rua dau phun ok //
	if (read_sensor3 == 0 && read_sensor1 == 1) {
 8004460:	2108      	movs	r1, #8
 8004462:	481d      	ldr	r0, [pc, #116]	; (80044d8 <ruaDauPhun+0x194>)
 8004464:	f001 ffd2 	bl	800640c <HAL_GPIO_ReadPin>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d119      	bne.n	80044a2 <ruaDauPhun+0x15e>
 800446e:	2101      	movs	r1, #1
 8004470:	481e      	ldr	r0, [pc, #120]	; (80044ec <ruaDauPhun+0x1a8>)
 8004472:	f001 ffcb 	bl	800640c <HAL_GPIO_ReadPin>
 8004476:	4603      	mov	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d112      	bne.n	80044a2 <ruaDauPhun+0x15e>
		allPumpIsRun();
 800447c:	f7ff fc64 	bl	8003d48 <allPumpIsRun>
		bomMauStart = true;
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <ruaDauPhun+0x180>)
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
		khuayMau.veSinhDauPhun = true;
 8004486:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <ruaDauPhun+0x1a0>)
 8004488:	2201      	movs	r2, #1
 800448a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		ENABLE_TIMER_PHA_MAU;
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <ruaDauPhun+0x18c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <ruaDauPhun+0x18c>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	6013      	str	r3, [r2, #0]
		printf(" cua mo va thung son ok \r\n");
 800449a:	4815      	ldr	r0, [pc, #84]	; (80044f0 <ruaDauPhun+0x1ac>)
 800449c:	f005 ffb8 	bl	800a410 <puts>
 80044a0:	e00a      	b.n	80044b8 <ruaDauPhun+0x174>
	}
	else
	{
		speaker_efect();
 80044a2:	f000 fbab 	bl	8004bfc <speaker_efect>
		speaker_efect();
 80044a6:	f000 fba9 	bl	8004bfc <speaker_efect>
		sendFrame("cho thung son vao");
 80044aa:	4812      	ldr	r0, [pc, #72]	; (80044f4 <ruaDauPhun+0x1b0>)
 80044ac:	f000 fbcc 	bl	8004c48 <sendFrame>
		printf("cho thung son vao \r\n");
 80044b0:	4811      	ldr	r0, [pc, #68]	; (80044f8 <ruaDauPhun+0x1b4>)
 80044b2:	f005 ffad 	bl	800a410 <puts>
	}
}
 80044b6:	bf00      	nop
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000ba9 	.word	0x20000ba9
 80044c4:	20000bb4 	.word	0x20000bb4
 80044c8:	0800eac0 	.word	0x0800eac0
 80044cc:	0800ead0 	.word	0x0800ead0
 80044d0:	40000400 	.word	0x40000400
 80044d4:	0800eae4 	.word	0x0800eae4
 80044d8:	40011000 	.word	0x40011000
 80044dc:	0800f0f4 	.word	0x0800f0f4
 80044e0:	20000bb8 	.word	0x20000bb8
 80044e4:	2000023c 	.word	0x2000023c
 80044e8:	20000ccc 	.word	0x20000ccc
 80044ec:	40010800 	.word	0x40010800
 80044f0:	0800f114 	.word	0x0800f114
 80044f4:	0800f130 	.word	0x0800f130
 80044f8:	0800f144 	.word	0x0800f144

080044fc <ruaDauPhun_Mililit>:
	}
}


void ruaDauPhun_Mililit(void) // rua theo mililit //
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b0da      	sub	sp, #360	; 0x168
 8004500:	af00      	add	r7, sp, #0
	uint8_t MAX_MOTOR = 16;
 8004502:	2310      	movs	r3, #16
 8004504:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
	uint32_t fulse;

	if (sttSensor3 == 1) // thung sơn chua co //
 8004508:	4ba6      	ldr	r3, [pc, #664]	; (80047a4 <ruaDauPhun_Mililit+0x2a8>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01c      	beq.n	800454a <ruaDauPhun_Mililit+0x4e>
			{
		bomMauStart = false;
 8004510:	4ba5      	ldr	r3, [pc, #660]	; (80047a8 <ruaDauPhun_Mililit+0x2ac>)
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
		sendFrame("choThungSonVao");
 8004516:	48a5      	ldr	r0, [pc, #660]	; (80047ac <ruaDauPhun_Mililit+0x2b0>)
 8004518:	f000 fb96 	bl	8004c48 <sendFrame>
		printf("choThungSonVao\n\r");
 800451c:	48a4      	ldr	r0, [pc, #656]	; (80047b0 <ruaDauPhun_Mililit+0x2b4>)
 800451e:	f005 ff09 	bl	800a334 <iprintf>
		DISABLE_TIMER_PHA_MAU;
 8004522:	4ba4      	ldr	r3, [pc, #656]	; (80047b4 <ruaDauPhun_Mililit+0x2b8>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	49a3      	ldr	r1, [pc, #652]	; (80047b4 <ruaDauPhun_Mililit+0x2b8>)
 8004528:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800452c:	4013      	ands	r3, r2
 800452e:	600b      	str	r3, [r1, #0]
		printf("Disable timer 3 \n\r");
 8004530:	48a1      	ldr	r0, [pc, #644]	; (80047b8 <ruaDauPhun_Mililit+0x2bc>)
 8004532:	f005 feff 	bl	800a334 <iprintf>

		while (read_sensor3 == 1) {
 8004536:	e001      	b.n	800453c <ruaDauPhun_Mililit+0x40>
			speaker_efect();
 8004538:	f000 fb60 	bl	8004bfc <speaker_efect>
		while (read_sensor3 == 1) {
 800453c:	2108      	movs	r1, #8
 800453e:	489f      	ldr	r0, [pc, #636]	; (80047bc <ruaDauPhun_Mililit+0x2c0>)
 8004540:	f001 ff64 	bl	800640c <HAL_GPIO_ReadPin>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d0f6      	beq.n	8004538 <ruaDauPhun_Mililit+0x3c>
		}

		//return;
	}

	HAL_Delay(2000); // delay 3s //
 800454a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800454e:	f001 fb55 	bl	8005bfc <HAL_Delay>
	OpenDoor();
 8004552:	f7ff fe41 	bl	80041d8 <OpenDoor>
	printf("Khac phuc loi-->> RuaDauPhun-Mililit\n\r");
 8004556:	489a      	ldr	r0, [pc, #616]	; (80047c0 <ruaDauPhun_Mililit+0x2c4>)
 8004558:	f005 feec 	bl	800a334 <iprintf>

	/*
	 @Test M1[12408]-M2[4612]-M3[4820]-M4[9800]-M5[10620]-M6[5208]-M7[4808]-M8[5320]-M9[10112]-M10[4904]-M11[5052]-M12[5092]-M13[4956]-M14[4672]-M15[5160]-M16[9800]#
	 */

	huyLenh = false;
 800455c:	4b99      	ldr	r3, [pc, #612]	; (80047c4 <ruaDauPhun_Mililit+0x2c8>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
	char txt[17][20];
	for (int i = 0; i < 16; i++)
 8004562:	2300      	movs	r3, #0
 8004564:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004568:	e011      	b.n	800458e <ruaDauPhun_Mililit+0x92>
		memset(txt[i], 0, 20);
 800456a:	1d39      	adds	r1, r7, #4
 800456c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	2214      	movs	r2, #20
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f006 f8ac 	bl	800a6dc <memset>
	for (int i = 0; i < 16; i++)
 8004584:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004588:	3301      	adds	r3, #1
 800458a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800458e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004592:	2b0f      	cmp	r3, #15
 8004594:	dde9      	ble.n	800456a <ruaDauPhun_Mililit+0x6e>

	printf("data: %s \n\r", myApp.arrData);
 8004596:	498c      	ldr	r1, [pc, #560]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004598:	488c      	ldr	r0, [pc, #560]	; (80047cc <ruaDauPhun_Mililit+0x2d0>)
 800459a:	f005 fecb 	bl	800a334 <iprintf>

	trim(myApp.arrData, txt[0],  "M1",  "-");
 800459e:	1d39      	adds	r1, r7, #4
 80045a0:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 80045a2:	4a8c      	ldr	r2, [pc, #560]	; (80047d4 <ruaDauPhun_Mililit+0x2d8>)
 80045a4:	4888      	ldr	r0, [pc, #544]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 80045a6:	f001 fa69 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[1],  "M2",  "-");
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	f103 0114 	add.w	r1, r3, #20
 80045b0:	4b87      	ldr	r3, [pc, #540]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 80045b2:	4a89      	ldr	r2, [pc, #548]	; (80047d8 <ruaDauPhun_Mililit+0x2dc>)
 80045b4:	4884      	ldr	r0, [pc, #528]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 80045b6:	f001 fa61 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[2],  "M3",  "-");
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80045c0:	4b83      	ldr	r3, [pc, #524]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 80045c2:	4a86      	ldr	r2, [pc, #536]	; (80047dc <ruaDauPhun_Mililit+0x2e0>)
 80045c4:	4880      	ldr	r0, [pc, #512]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 80045c6:	f001 fa59 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[3],  "M4",  "-");
 80045ca:	1d3b      	adds	r3, r7, #4
 80045cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80045d0:	4b7f      	ldr	r3, [pc, #508]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 80045d2:	4a83      	ldr	r2, [pc, #524]	; (80047e0 <ruaDauPhun_Mililit+0x2e4>)
 80045d4:	487c      	ldr	r0, [pc, #496]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 80045d6:	f001 fa51 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[4],  "M5",  "-");
 80045da:	1d3b      	adds	r3, r7, #4
 80045dc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80045e0:	4b7b      	ldr	r3, [pc, #492]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 80045e2:	4a80      	ldr	r2, [pc, #512]	; (80047e4 <ruaDauPhun_Mililit+0x2e8>)
 80045e4:	4878      	ldr	r0, [pc, #480]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 80045e6:	f001 fa49 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[5],  "M6",  "-");
 80045ea:	1d3b      	adds	r3, r7, #4
 80045ec:	f103 0164 	add.w	r1, r3, #100	; 0x64
 80045f0:	4b77      	ldr	r3, [pc, #476]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 80045f2:	4a7d      	ldr	r2, [pc, #500]	; (80047e8 <ruaDauPhun_Mililit+0x2ec>)
 80045f4:	4874      	ldr	r0, [pc, #464]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 80045f6:	f001 fa41 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[6],  "M7",  "-");
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8004600:	4b73      	ldr	r3, [pc, #460]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 8004602:	4a7a      	ldr	r2, [pc, #488]	; (80047ec <ruaDauPhun_Mililit+0x2f0>)
 8004604:	4870      	ldr	r0, [pc, #448]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004606:	f001 fa39 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[7],  "M8",  "-");
 800460a:	1d3b      	adds	r3, r7, #4
 800460c:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8004610:	4b6f      	ldr	r3, [pc, #444]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 8004612:	4a77      	ldr	r2, [pc, #476]	; (80047f0 <ruaDauPhun_Mililit+0x2f4>)
 8004614:	486c      	ldr	r0, [pc, #432]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004616:	f001 fa31 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[8],  "M9",  "-");
 800461a:	1d3b      	adds	r3, r7, #4
 800461c:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8004620:	4b6b      	ldr	r3, [pc, #428]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 8004622:	4a74      	ldr	r2, [pc, #464]	; (80047f4 <ruaDauPhun_Mililit+0x2f8>)
 8004624:	4868      	ldr	r0, [pc, #416]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004626:	f001 fa29 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[9],  "M10", "-");
 800462a:	1d3b      	adds	r3, r7, #4
 800462c:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
 8004630:	4b67      	ldr	r3, [pc, #412]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 8004632:	4a71      	ldr	r2, [pc, #452]	; (80047f8 <ruaDauPhun_Mililit+0x2fc>)
 8004634:	4864      	ldr	r0, [pc, #400]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004636:	f001 fa21 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[10], "M11", "-");
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 8004640:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 8004642:	4a6e      	ldr	r2, [pc, #440]	; (80047fc <ruaDauPhun_Mililit+0x300>)
 8004644:	4860      	ldr	r0, [pc, #384]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004646:	f001 fa19 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[11], "M12", "-");
 800464a:	1d3b      	adds	r3, r7, #4
 800464c:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 8004650:	4b5f      	ldr	r3, [pc, #380]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 8004652:	4a6b      	ldr	r2, [pc, #428]	; (8004800 <ruaDauPhun_Mililit+0x304>)
 8004654:	485c      	ldr	r0, [pc, #368]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004656:	f001 fa11 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[12], "M13", "-");
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8004660:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 8004662:	4a68      	ldr	r2, [pc, #416]	; (8004804 <ruaDauPhun_Mililit+0x308>)
 8004664:	4858      	ldr	r0, [pc, #352]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004666:	f001 fa09 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[13], "M14", "-");
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	f503 7182 	add.w	r1, r3, #260	; 0x104
 8004670:	4b57      	ldr	r3, [pc, #348]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 8004672:	4a65      	ldr	r2, [pc, #404]	; (8004808 <ruaDauPhun_Mililit+0x30c>)
 8004674:	4854      	ldr	r0, [pc, #336]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004676:	f001 fa01 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[14], "M15", "-");
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 8004682:	4a62      	ldr	r2, [pc, #392]	; (800480c <ruaDauPhun_Mililit+0x310>)
 8004684:	4850      	ldr	r0, [pc, #320]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004686:	f001 f9f9 	bl	8005a7c <trim>
	trim(myApp.arrData, txt[15], "M16", "-");
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	f503 7196 	add.w	r1, r3, #300	; 0x12c
 8004690:	4b4f      	ldr	r3, [pc, #316]	; (80047d0 <ruaDauPhun_Mililit+0x2d4>)
 8004692:	4a5f      	ldr	r2, [pc, #380]	; (8004810 <ruaDauPhun_Mililit+0x314>)
 8004694:	484c      	ldr	r0, [pc, #304]	; (80047c8 <ruaDauPhun_Mililit+0x2cc>)
 8004696:	f001 f9f1 	bl	8005a7c <trim>

	for (int i = 0; i < 16; i++) {
 800469a:	2300      	movs	r3, #0
 800469c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80046a0:	e04b      	b.n	800473a <ruaDauPhun_Mililit+0x23e>
		fulse = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		printf(" MOTOR[%d] = %s \r\n", i, (const char*) txt[i]);
 80046a8:	1d39      	adds	r1, r7, #4
 80046aa:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	461a      	mov	r2, r3
 80046ba:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80046be:	4855      	ldr	r0, [pc, #340]	; (8004814 <ruaDauPhun_Mililit+0x318>)
 80046c0:	f005 fe38 	bl	800a334 <iprintf>
		sscanf(txt[i], "[%d]", &fulse);
 80046c4:	1d39      	adds	r1, r7, #4
 80046c6:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80046d8:	494f      	ldr	r1, [pc, #316]	; (8004818 <ruaDauPhun_Mililit+0x31c>)
 80046da:	4618      	mov	r0, r3
 80046dc:	f005 fec0 	bl	800a460 <siscanf>
		printf("num value pulse = %d \n\r", fulse);
 80046e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80046e4:	4619      	mov	r1, r3
 80046e6:	484d      	ldr	r0, [pc, #308]	; (800481c <ruaDauPhun_Mililit+0x320>)
 80046e8:	f005 fe24 	bl	800a334 <iprintf>
		bomMau[i].countHighSpeed = 0;
 80046ec:	494c      	ldr	r1, [pc, #304]	; (8004820 <ruaDauPhun_Mililit+0x324>)
 80046ee:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80046f2:	4613      	mov	r3, r2
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	330c      	adds	r3, #12
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
		bomMau[i].countLowSpeed = 0;
 8004702:	4947      	ldr	r1, [pc, #284]	; (8004820 <ruaDauPhun_Mililit+0x324>)
 8004704:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8004708:	4613      	mov	r3, r2
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	3310      	adds	r3, #16
 8004714:	2200      	movs	r2, #0
 8004716:	801a      	strh	r2, [r3, #0]
		bomMau[i].pulseSetHighSpeed = fulse;
 8004718:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800471c:	4840      	ldr	r0, [pc, #256]	; (8004820 <ruaDauPhun_Mililit+0x324>)
 800471e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4403      	add	r3, r0
 800472c:	3304      	adds	r3, #4
 800472e:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < 16; i++) {
 8004730:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004734:	3301      	adds	r3, #1
 8004736:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800473a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800473e:	2b0f      	cmp	r3, #15
 8004740:	ddaf      	ble.n	80046a2 <ruaDauPhun_Mililit+0x1a6>
	/*
	 @Test M1[12408]-M2[4612]-M3[4820]-M4[9800]-M5[10620]-M6[5208]-M7[4808]-M8[5320]-M9[10112]-M10[4904]-M11[5052]-M12[5092]-M13[4956]-M14[4672]-M15[5160]-M16[9800]#
	 */
	/**** thuc thi *****/
	// check nap va thung --> rua dau phun ok //
	if (read_sensor3 == 0 && read_sensor1 == 1) {
 8004742:	2108      	movs	r1, #8
 8004744:	481d      	ldr	r0, [pc, #116]	; (80047bc <ruaDauPhun_Mililit+0x2c0>)
 8004746:	f001 fe61 	bl	800640c <HAL_GPIO_ReadPin>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d119      	bne.n	8004784 <ruaDauPhun_Mililit+0x288>
 8004750:	2101      	movs	r1, #1
 8004752:	4834      	ldr	r0, [pc, #208]	; (8004824 <ruaDauPhun_Mililit+0x328>)
 8004754:	f001 fe5a 	bl	800640c <HAL_GPIO_ReadPin>
 8004758:	4603      	mov	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d112      	bne.n	8004784 <ruaDauPhun_Mililit+0x288>
		allPumpIsRun();
 800475e:	f7ff faf3 	bl	8003d48 <allPumpIsRun>
		bomMauStart = true;
 8004762:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <ruaDauPhun_Mililit+0x2ac>)
 8004764:	2201      	movs	r2, #1
 8004766:	701a      	strb	r2, [r3, #0]
		khuayMau.veSinhDauPhun = true;
 8004768:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <ruaDauPhun_Mililit+0x32c>)
 800476a:	2201      	movs	r2, #1
 800476c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		ENABLE_TIMER_PHA_MAU;
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <ruaDauPhun_Mililit+0x2b8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <ruaDauPhun_Mililit+0x2b8>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6013      	str	r3, [r2, #0]
		printf(" cua mo va thung son ok \r\n");
 800477c:	482b      	ldr	r0, [pc, #172]	; (800482c <ruaDauPhun_Mililit+0x330>)
 800477e:	f005 fe47 	bl	800a410 <puts>
 8004782:	e00a      	b.n	800479a <ruaDauPhun_Mililit+0x29e>
	} else {
		speaker_efect();
 8004784:	f000 fa3a 	bl	8004bfc <speaker_efect>
		speaker_efect();
 8004788:	f000 fa38 	bl	8004bfc <speaker_efect>
		sendFrame("cho thung son vao");
 800478c:	4828      	ldr	r0, [pc, #160]	; (8004830 <ruaDauPhun_Mililit+0x334>)
 800478e:	f000 fa5b 	bl	8004c48 <sendFrame>
		printf("cho thung son vao \r\n");
 8004792:	4828      	ldr	r0, [pc, #160]	; (8004834 <ruaDauPhun_Mililit+0x338>)
 8004794:	f005 fe3c 	bl	800a410 <puts>
	}
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000ba9 	.word	0x20000ba9
 80047a8:	20000bb4 	.word	0x20000bb4
 80047ac:	0800eac0 	.word	0x0800eac0
 80047b0:	0800ead0 	.word	0x0800ead0
 80047b4:	40000400 	.word	0x40000400
 80047b8:	0800eae4 	.word	0x0800eae4
 80047bc:	40011000 	.word	0x40011000
 80047c0:	0800f158 	.word	0x0800f158
 80047c4:	20000bb8 	.word	0x20000bb8
 80047c8:	2000000a 	.word	0x2000000a
 80047cc:	0800ea08 	.word	0x0800ea08
 80047d0:	0800e8d8 	.word	0x0800e8d8
 80047d4:	0800ea14 	.word	0x0800ea14
 80047d8:	0800ea18 	.word	0x0800ea18
 80047dc:	0800ea1c 	.word	0x0800ea1c
 80047e0:	0800ea20 	.word	0x0800ea20
 80047e4:	0800ea24 	.word	0x0800ea24
 80047e8:	0800ea28 	.word	0x0800ea28
 80047ec:	0800ea2c 	.word	0x0800ea2c
 80047f0:	0800f180 	.word	0x0800f180
 80047f4:	0800f184 	.word	0x0800f184
 80047f8:	0800f188 	.word	0x0800f188
 80047fc:	0800f18c 	.word	0x0800f18c
 8004800:	0800f190 	.word	0x0800f190
 8004804:	0800f194 	.word	0x0800f194
 8004808:	0800f198 	.word	0x0800f198
 800480c:	0800f19c 	.word	0x0800f19c
 8004810:	0800f1a0 	.word	0x0800f1a0
 8004814:	0800f1a4 	.word	0x0800f1a4
 8004818:	0800f1b8 	.word	0x0800f1b8
 800481c:	0800f1c0 	.word	0x0800f1c0
 8004820:	20000ccc 	.word	0x20000ccc
 8004824:	40010800 	.word	0x40010800
 8004828:	2000023c 	.word	0x2000023c
 800482c:	0800f114 	.word	0x0800f114
 8004830:	0800f130 	.word	0x0800f130
 8004834:	0800f144 	.word	0x0800f144

08004838 <pump_init>:
	SET(EN17_GPIO_Port, EN17_Pin);

}

void pump_init()
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
	bomMau[0].GPIOx     = PUL1_GPIO_Port;
 800483e:	4bb7      	ldr	r3, [pc, #732]	; (8004b1c <pump_init+0x2e4>)
 8004840:	4ab7      	ldr	r2, [pc, #732]	; (8004b20 <pump_init+0x2e8>)
 8004842:	62da      	str	r2, [r3, #44]	; 0x2c
	bomMau[0].GPIO_Pin  = PUL1_Pin;
 8004844:	4bb5      	ldr	r3, [pc, #724]	; (8004b1c <pump_init+0x2e4>)
 8004846:	2201      	movs	r2, #1
 8004848:	861a      	strh	r2, [r3, #48]	; 0x30

	bomMau[0].DIR_Port  = GPIOC;
 800484a:	4bb4      	ldr	r3, [pc, #720]	; (8004b1c <pump_init+0x2e4>)
 800484c:	4ab4      	ldr	r2, [pc, #720]	; (8004b20 <pump_init+0x2e8>)
 800484e:	635a      	str	r2, [r3, #52]	; 0x34
	bomMau[0].DIR_Pin   = GPIO_PIN_2;
 8004850:	4bb2      	ldr	r3, [pc, #712]	; (8004b1c <pump_init+0x2e4>)
 8004852:	2204      	movs	r2, #4
 8004854:	871a      	strh	r2, [r3, #56]	; 0x38

	bomMau[0].EN_Port   = EN1_GPIO_Port;
 8004856:	4bb1      	ldr	r3, [pc, #708]	; (8004b1c <pump_init+0x2e4>)
 8004858:	4ab1      	ldr	r2, [pc, #708]	; (8004b20 <pump_init+0x2e8>)
 800485a:	63da      	str	r2, [r3, #60]	; 0x3c
	bomMau[0].EN_Pin    = EN1_Pin;
 800485c:	4baf      	ldr	r3, [pc, #700]	; (8004b1c <pump_init+0x2e4>)
 800485e:	2202      	movs	r2, #2
 8004860:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /***************************************************************/

	bomMau[1].GPIOx     = PWM1_GPIO_Port;
 8004864:	4bad      	ldr	r3, [pc, #692]	; (8004b1c <pump_init+0x2e4>)
 8004866:	4aaf      	ldr	r2, [pc, #700]	; (8004b24 <pump_init+0x2ec>)
 8004868:	671a      	str	r2, [r3, #112]	; 0x70
	bomMau[1].GPIO_Pin  = PWM1_Pin;
 800486a:	4bac      	ldr	r3, [pc, #688]	; (8004b1c <pump_init+0x2e4>)
 800486c:	2220      	movs	r2, #32
 800486e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	bomMau[1].DIR_Port  = DIR2_GPIO_Port;
 8004872:	4baa      	ldr	r3, [pc, #680]	; (8004b1c <pump_init+0x2e4>)
 8004874:	4aaa      	ldr	r2, [pc, #680]	; (8004b20 <pump_init+0x2e8>)
 8004876:	679a      	str	r2, [r3, #120]	; 0x78
	bomMau[1].DIR_Pin   = DIR2_Pin;
 8004878:	4ba8      	ldr	r3, [pc, #672]	; (8004b1c <pump_init+0x2e4>)
 800487a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800487e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

	bomMau[1].EN_Port   = EN2_GPIO_Port;
 8004882:	4ba6      	ldr	r3, [pc, #664]	; (8004b1c <pump_init+0x2e4>)
 8004884:	4aa7      	ldr	r2, [pc, #668]	; (8004b24 <pump_init+0x2ec>)
 8004886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	bomMau[1].EN_Pin    = EN2_Pin;
 800488a:	4ba4      	ldr	r3, [pc, #656]	; (8004b1c <pump_init+0x2e4>)
 800488c:	2240      	movs	r2, #64	; 0x40
 800488e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

	/**************************************************************/

	bomMau[2].GPIOx 	= PWM2_GPIO_Port;
 8004892:	4ba2      	ldr	r3, [pc, #648]	; (8004b1c <pump_init+0x2e4>)
 8004894:	4aa3      	ldr	r2, [pc, #652]	; (8004b24 <pump_init+0x2ec>)
 8004896:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	bomMau[2].GPIO_Pin 	= PWM2_Pin;
 800489a:	4ba0      	ldr	r3, [pc, #640]	; (8004b1c <pump_init+0x2e4>)
 800489c:	2204      	movs	r2, #4
 800489e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

	bomMau[2].DIR_Port 	= DIR3_GPIO_Port;
 80048a2:	4b9e      	ldr	r3, [pc, #632]	; (8004b1c <pump_init+0x2e4>)
 80048a4:	4a9f      	ldr	r2, [pc, #636]	; (8004b24 <pump_init+0x2ec>)
 80048a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	bomMau[2].DIR_Pin 	= DIR3_Pin;
 80048aa:	4b9c      	ldr	r3, [pc, #624]	; (8004b1c <pump_init+0x2e4>)
 80048ac:	2210      	movs	r2, #16
 80048ae:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

	bomMau[2].EN_Port 	= EN3_GPIO_Port;
 80048b2:	4b9a      	ldr	r3, [pc, #616]	; (8004b1c <pump_init+0x2e4>)
 80048b4:	4a9b      	ldr	r2, [pc, #620]	; (8004b24 <pump_init+0x2ec>)
 80048b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	bomMau[2].EN_Pin 	= EN3_Pin;
 80048ba:	4b98      	ldr	r3, [pc, #608]	; (8004b1c <pump_init+0x2e4>)
 80048bc:	2208      	movs	r2, #8
 80048be:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

	/**************************************************************/
	bomMau[3].GPIOx     = PWM3_GPIO_Port;
 80048c2:	4b96      	ldr	r3, [pc, #600]	; (8004b1c <pump_init+0x2e4>)
 80048c4:	4a98      	ldr	r2, [pc, #608]	; (8004b28 <pump_init+0x2f0>)
 80048c6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	bomMau[3].GPIO_Pin  = PWM3_Pin;
 80048ca:	4b94      	ldr	r3, [pc, #592]	; (8004b1c <pump_init+0x2e4>)
 80048cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d0:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc

	bomMau[3].DIR_Port 	= DIR4_GPIO_Port;
 80048d4:	4b91      	ldr	r3, [pc, #580]	; (8004b1c <pump_init+0x2e4>)
 80048d6:	4a93      	ldr	r2, [pc, #588]	; (8004b24 <pump_init+0x2ec>)
 80048d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	bomMau[3].DIR_Pin  	= DIR4_Pin;
 80048dc:	4b8f      	ldr	r3, [pc, #572]	; (8004b1c <pump_init+0x2e4>)
 80048de:	2202      	movs	r2, #2
 80048e0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

	bomMau[3].EN_Port  	= EN4_GPIO_Port;
 80048e4:	4b8d      	ldr	r3, [pc, #564]	; (8004b1c <pump_init+0x2e4>)
 80048e6:	4a8f      	ldr	r2, [pc, #572]	; (8004b24 <pump_init+0x2ec>)
 80048e8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	bomMau[3].EN_Pin   	= EN4_Pin;
 80048ec:	4b8b      	ldr	r3, [pc, #556]	; (8004b1c <pump_init+0x2e4>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /**************************************************************/
	bomMau[4].GPIOx     = PWM4_GPIO_Port;
 80048f4:	4b89      	ldr	r3, [pc, #548]	; (8004b1c <pump_init+0x2e4>)
 80048f6:	4a8c      	ldr	r2, [pc, #560]	; (8004b28 <pump_init+0x2f0>)
 80048f8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	bomMau[4].GPIO_Pin  = PWM4_Pin;
 80048fc:	4b87      	ldr	r3, [pc, #540]	; (8004b1c <pump_init+0x2e4>)
 80048fe:	2240      	movs	r2, #64	; 0x40
 8004900:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140

	bomMau[4].DIR_Port 	= DIR5_GPIO_Port;
 8004904:	4b85      	ldr	r3, [pc, #532]	; (8004b1c <pump_init+0x2e4>)
 8004906:	4a88      	ldr	r2, [pc, #544]	; (8004b28 <pump_init+0x2f0>)
 8004908:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	bomMau[4].DIR_Pin  	= DIR5_Pin;
 800490c:	4b83      	ldr	r3, [pc, #524]	; (8004b1c <pump_init+0x2e4>)
 800490e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004912:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148

	bomMau[4].EN_Port  	= EN5_GPIO_Port;
 8004916:	4b81      	ldr	r3, [pc, #516]	; (8004b1c <pump_init+0x2e4>)
 8004918:	4a83      	ldr	r2, [pc, #524]	; (8004b28 <pump_init+0x2f0>)
 800491a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	bomMau[4].EN_Pin   	= EN5_Pin;
 800491e:	4b7f      	ldr	r3, [pc, #508]	; (8004b1c <pump_init+0x2e4>)
 8004920:	2280      	movs	r2, #128	; 0x80
 8004922:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150

	/**************************************************************/
	bomMau[5].GPIOx     = PWM5_GPIO_Port;
 8004926:	4b7d      	ldr	r3, [pc, #500]	; (8004b1c <pump_init+0x2e4>)
 8004928:	4a7f      	ldr	r2, [pc, #508]	; (8004b28 <pump_init+0x2f0>)
 800492a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	bomMau[5].GPIO_Pin  = PWM5_Pin;
 800492e:	4b7b      	ldr	r3, [pc, #492]	; (8004b1c <pump_init+0x2e4>)
 8004930:	2208      	movs	r2, #8
 8004932:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184

	bomMau[5].DIR_Port  = DIR6_GPIO_Port;
 8004936:	4b79      	ldr	r3, [pc, #484]	; (8004b1c <pump_init+0x2e4>)
 8004938:	4a7b      	ldr	r2, [pc, #492]	; (8004b28 <pump_init+0x2f0>)
 800493a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	bomMau[5].DIR_Pin   = DIR6_Pin;
 800493e:	4b77      	ldr	r3, [pc, #476]	; (8004b1c <pump_init+0x2e4>)
 8004940:	2220      	movs	r2, #32
 8004942:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c

    // edit pin5 to pin 6 -> fix error motor6 is hold GND -> motor so hot

	bomMau[5].EN_Port   = EN6_GPIO_Port;
 8004946:	4b75      	ldr	r3, [pc, #468]	; (8004b1c <pump_init+0x2e4>)
 8004948:	4a77      	ldr	r2, [pc, #476]	; (8004b28 <pump_init+0x2f0>)
 800494a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	bomMau[5].EN_Pin    = EN6_Pin;
 800494e:	4b73      	ldr	r3, [pc, #460]	; (8004b1c <pump_init+0x2e4>)
 8004950:	2210      	movs	r2, #16
 8004952:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194

	/**************************************************************/
	bomMau[6].GPIOx     = PWM6_GPIO_Port;
 8004956:	4b71      	ldr	r3, [pc, #452]	; (8004b1c <pump_init+0x2e4>)
 8004958:	4a74      	ldr	r2, [pc, #464]	; (8004b2c <pump_init+0x2f4>)
 800495a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	bomMau[6].GPIO_Pin  = PWM6_Pin;
 800495e:	4b6f      	ldr	r3, [pc, #444]	; (8004b1c <pump_init+0x2e4>)
 8004960:	2220      	movs	r2, #32
 8004962:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8

	bomMau[6].DIR_Port  = DIR7_GPIO_Port;
 8004966:	4b6d      	ldr	r3, [pc, #436]	; (8004b1c <pump_init+0x2e4>)
 8004968:	4a70      	ldr	r2, [pc, #448]	; (8004b2c <pump_init+0x2f4>)
 800496a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	bomMau[6].DIR_Pin   = DIR7_Pin;
 800496e:	4b6b      	ldr	r3, [pc, #428]	; (8004b1c <pump_init+0x2e4>)
 8004970:	2280      	movs	r2, #128	; 0x80
 8004972:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0

	bomMau[6].EN_Port   = EN7_GPIO_Port;
 8004976:	4b69      	ldr	r3, [pc, #420]	; (8004b1c <pump_init+0x2e4>)
 8004978:	4a6c      	ldr	r2, [pc, #432]	; (8004b2c <pump_init+0x2f4>)
 800497a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	bomMau[6].EN_Pin    = EN7_Pin;
 800497e:	4b67      	ldr	r3, [pc, #412]	; (8004b1c <pump_init+0x2e4>)
 8004980:	2240      	movs	r2, #64	; 0x40
 8004982:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
	/**************************************************************/

	bomMau[7].GPIOx     = PWM7_GPIO_Port;
 8004986:	4b65      	ldr	r3, [pc, #404]	; (8004b1c <pump_init+0x2e4>)
 8004988:	4a68      	ldr	r2, [pc, #416]	; (8004b2c <pump_init+0x2f4>)
 800498a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	bomMau[7].GPIO_Pin  = PWM7_Pin;
 800498e:	4b63      	ldr	r3, [pc, #396]	; (8004b1c <pump_init+0x2e4>)
 8004990:	2204      	movs	r2, #4
 8004992:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c

	bomMau[7].DIR_Port  = DIR8_GPIO_Port;
 8004996:	4b61      	ldr	r3, [pc, #388]	; (8004b1c <pump_init+0x2e4>)
 8004998:	4a64      	ldr	r2, [pc, #400]	; (8004b2c <pump_init+0x2f4>)
 800499a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	bomMau[7].DIR_Pin   = DIR8_Pin;
 800499e:	4b5f      	ldr	r3, [pc, #380]	; (8004b1c <pump_init+0x2e4>)
 80049a0:	2210      	movs	r2, #16
 80049a2:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214

	bomMau[7].EN_Port   = EN8_GPIO_Port;
 80049a6:	4b5d      	ldr	r3, [pc, #372]	; (8004b1c <pump_init+0x2e4>)
 80049a8:	4a60      	ldr	r2, [pc, #384]	; (8004b2c <pump_init+0x2f4>)
 80049aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	bomMau[7].EN_Pin    = EN8_Pin;
 80049ae:	4b5b      	ldr	r3, [pc, #364]	; (8004b1c <pump_init+0x2e4>)
 80049b0:	2208      	movs	r2, #8
 80049b2:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	/**************************************************************/
	bomMau[8].GPIOx     = PWM8_GPIO_Port;
 80049b6:	4b59      	ldr	r3, [pc, #356]	; (8004b1c <pump_init+0x2e4>)
 80049b8:	4a5d      	ldr	r2, [pc, #372]	; (8004b30 <pump_init+0x2f8>)
 80049ba:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	bomMau[8].GPIO_Pin  = PWM8_Pin;
 80049be:	4b57      	ldr	r3, [pc, #348]	; (8004b1c <pump_init+0x2e4>)
 80049c0:	2208      	movs	r2, #8
 80049c2:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250

	bomMau[8].DIR_Port  = DIR9_GPIO_Port;
 80049c6:	4b55      	ldr	r3, [pc, #340]	; (8004b1c <pump_init+0x2e4>)
 80049c8:	4a59      	ldr	r2, [pc, #356]	; (8004b30 <pump_init+0x2f8>)
 80049ca:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	bomMau[8].DIR_Pin   = DIR9_Pin;
 80049ce:	4b53      	ldr	r3, [pc, #332]	; (8004b1c <pump_init+0x2e4>)
 80049d0:	2220      	movs	r2, #32
 80049d2:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258

	bomMau[8].EN_Port   = EN9_GPIO_Port;
 80049d6:	4b51      	ldr	r3, [pc, #324]	; (8004b1c <pump_init+0x2e4>)
 80049d8:	4a55      	ldr	r2, [pc, #340]	; (8004b30 <pump_init+0x2f8>)
 80049da:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	bomMau[8].EN_Pin    = EN9_Pin;
 80049de:	4b4f      	ldr	r3, [pc, #316]	; (8004b1c <pump_init+0x2e4>)
 80049e0:	2210      	movs	r2, #16
 80049e2:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260

	/**************************************************************/

	bomMau[9].GPIOx 	= PWM9_GPIO_Port;
 80049e6:	4b4d      	ldr	r3, [pc, #308]	; (8004b1c <pump_init+0x2e4>)
 80049e8:	4a51      	ldr	r2, [pc, #324]	; (8004b30 <pump_init+0x2f8>)
 80049ea:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	bomMau[9].GPIO_Pin 	= PWM9_Pin;
 80049ee:	4b4b      	ldr	r3, [pc, #300]	; (8004b1c <pump_init+0x2e4>)
 80049f0:	2240      	movs	r2, #64	; 0x40
 80049f2:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294

	bomMau[9].DIR_Port  = DIR10_GPIO_Port;
 80049f6:	4b49      	ldr	r3, [pc, #292]	; (8004b1c <pump_init+0x2e4>)
 80049f8:	4a49      	ldr	r2, [pc, #292]	; (8004b20 <pump_init+0x2e8>)
 80049fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	bomMau[9].DIR_Pin   = DIR10_Pin;
 80049fe:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <pump_init+0x2e4>)
 8004a00:	2210      	movs	r2, #16
 8004a02:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c

	bomMau[9].EN_Port   = EN10_GPIO_Port;
 8004a06:	4b45      	ldr	r3, [pc, #276]	; (8004b1c <pump_init+0x2e4>)
 8004a08:	4a49      	ldr	r2, [pc, #292]	; (8004b30 <pump_init+0x2f8>)
 8004a0a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	bomMau[9].EN_Pin    = EN10_Pin;
 8004a0e:	4b43      	ldr	r3, [pc, #268]	; (8004b1c <pump_init+0x2e4>)
 8004a10:	2280      	movs	r2, #128	; 0x80
 8004a12:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4

	/**************************************************************/
	bomMau[10].GPIOx 	 = PWM10_GPIO_Port;
 8004a16:	4b41      	ldr	r3, [pc, #260]	; (8004b1c <pump_init+0x2e4>)
 8004a18:	4a41      	ldr	r2, [pc, #260]	; (8004b20 <pump_init+0x2e8>)
 8004a1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
	bomMau[10].GPIO_Pin  = PWM10_Pin;
 8004a1e:	4b3f      	ldr	r3, [pc, #252]	; (8004b1c <pump_init+0x2e4>)
 8004a20:	2220      	movs	r2, #32
 8004a22:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8

	bomMau[10].DIR_Port  = DIR11_GPIO_Port;
 8004a26:	4b3d      	ldr	r3, [pc, #244]	; (8004b1c <pump_init+0x2e4>)
 8004a28:	4a3f      	ldr	r2, [pc, #252]	; (8004b28 <pump_init+0x2f0>)
 8004a2a:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
	bomMau[10].DIR_Pin   = DIR11_Pin;
 8004a2e:	4b3b      	ldr	r3, [pc, #236]	; (8004b1c <pump_init+0x2e4>)
 8004a30:	2202      	movs	r2, #2
 8004a32:	f8a3 22e0 	strh.w	r2, [r3, #736]	; 0x2e0

	bomMau[10].EN_Port   = EN11_GPIO_Port;
 8004a36:	4b39      	ldr	r3, [pc, #228]	; (8004b1c <pump_init+0x2e4>)
 8004a38:	4a3b      	ldr	r2, [pc, #236]	; (8004b28 <pump_init+0x2f0>)
 8004a3a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
	bomMau[10].EN_Pin    = EN11_Pin;
 8004a3e:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <pump_init+0x2e4>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

	/*************************************************************/

	bomMau[11].GPIOx 	 = PWM11_GPIO_Port;
 8004a46:	4b35      	ldr	r3, [pc, #212]	; (8004b1c <pump_init+0x2e4>)
 8004a48:	4a37      	ldr	r2, [pc, #220]	; (8004b28 <pump_init+0x2f0>)
 8004a4a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
	bomMau[11].GPIO_Pin  = PWM11_Pin;
 8004a4e:	4b33      	ldr	r3, [pc, #204]	; (8004b1c <pump_init+0x2e4>)
 8004a50:	2204      	movs	r2, #4
 8004a52:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c

	bomMau[11].DIR_Port  = DIR12_GPIO_Port;
 8004a56:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <pump_init+0x2e4>)
 8004a58:	4a32      	ldr	r2, [pc, #200]	; (8004b24 <pump_init+0x2ec>)
 8004a5a:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
	bomMau[11].DIR_Pin   = DIR12_Pin;
 8004a5e:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <pump_init+0x2e4>)
 8004a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a64:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324

	bomMau[11].EN_Port   = EN12_GPIO_Port;
 8004a68:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <pump_init+0x2e4>)
 8004a6a:	4a2e      	ldr	r2, [pc, #184]	; (8004b24 <pump_init+0x2ec>)
 8004a6c:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	bomMau[11].EN_Pin    = EN12_Pin;
 8004a70:	4b2a      	ldr	r3, [pc, #168]	; (8004b1c <pump_init+0x2e4>)
 8004a72:	2280      	movs	r2, #128	; 0x80
 8004a74:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
	/**********************************************************/

	bomMau[12].GPIOx 	 = PWM12_GPIO_Port;
 8004a78:	4b28      	ldr	r3, [pc, #160]	; (8004b1c <pump_init+0x2e4>)
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <pump_init+0x2ec>)
 8004a7c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
	bomMau[12].GPIO_Pin  = PWM12_Pin;
 8004a80:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <pump_init+0x2e4>)
 8004a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a86:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360

	bomMau[12].DIR_Port  = DIR13_GPIO_Port;
 8004a8a:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <pump_init+0x2e4>)
 8004a8c:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <pump_init+0x2ec>)
 8004a8e:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
	bomMau[12].DIR_Pin   = DIR13_Pin;
 8004a92:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <pump_init+0x2e4>)
 8004a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a98:	f8a3 2368 	strh.w	r2, [r3, #872]	; 0x368

	bomMau[12].EN_Port   = EN13_GPIO_Port;
 8004a9c:	4b1f      	ldr	r3, [pc, #124]	; (8004b1c <pump_init+0x2e4>)
 8004a9e:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <pump_init+0x2ec>)
 8004aa0:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
	bomMau[12].EN_Pin    = EN13_Pin;
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <pump_init+0x2e4>)
 8004aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aaa:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370

	/**********************************************************/
	bomMau[13].GPIOx 	 = PWM13_GPIO_Port;
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <pump_init+0x2e4>)
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <pump_init+0x2ec>)
 8004ab2:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	bomMau[13].GPIO_Pin  = PWM13_Pin;
 8004ab6:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <pump_init+0x2e4>)
 8004ab8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004abc:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4

	bomMau[13].DIR_Port  = DIR14_GPIO_Port;
 8004ac0:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <pump_init+0x2e4>)
 8004ac2:	4a1a      	ldr	r2, [pc, #104]	; (8004b2c <pump_init+0x2f4>)
 8004ac4:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
	bomMau[13].DIR_Pin   = DIR14_Pin;
 8004ac8:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <pump_init+0x2e4>)
 8004aca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ace:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac

	bomMau[13].EN_Port   = EN14_GPIO_Port;
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <pump_init+0x2e4>)
 8004ad4:	4a15      	ldr	r2, [pc, #84]	; (8004b2c <pump_init+0x2f4>)
 8004ad6:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	bomMau[13].EN_Pin    = EN14_Pin;
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <pump_init+0x2e4>)
 8004adc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ae0:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4

	/**********************************************************/
	bomMau[14].GPIOx 	 = PWM14_GPIO_Port;
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <pump_init+0x2e4>)
 8004ae6:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <pump_init+0x2e8>)
 8004ae8:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
	bomMau[14].GPIO_Pin  = PWM14_Pin;
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <pump_init+0x2e4>)
 8004aee:	2280      	movs	r2, #128	; 0x80
 8004af0:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8

	bomMau[14].DIR_Port  = DIR15_GPIO_Port;
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <pump_init+0x2e4>)
 8004af6:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <pump_init+0x2e8>)
 8004af8:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
	bomMau[14].DIR_Pin   = DIR15_Pin;
 8004afc:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <pump_init+0x2e4>)
 8004afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b02:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0

	bomMau[14].EN_Port   = EN15_GPIO_Port;
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <pump_init+0x2e4>)
 8004b08:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <pump_init+0x2e8>)
 8004b0a:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
	bomMau[14].EN_Pin    = EN15_Pin;
 8004b0e:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <pump_init+0x2e4>)
 8004b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b14:	f8a3 23f8 	strh.w	r2, [r3, #1016]	; 0x3f8
 8004b18:	e00c      	b.n	8004b34 <pump_init+0x2fc>
 8004b1a:	bf00      	nop
 8004b1c:	20000ccc 	.word	0x20000ccc
 8004b20:	40011000 	.word	0x40011000
 8004b24:	40011800 	.word	0x40011800
 8004b28:	40010c00 	.word	0x40010c00
 8004b2c:	40011400 	.word	0x40011400
 8004b30:	40010800 	.word	0x40010800

	/**********************************************************/
	bomMau[15].GPIOx 	 = PWM15_GPIO_Port;
 8004b34:	4b2f      	ldr	r3, [pc, #188]	; (8004bf4 <pump_init+0x3bc>)
 8004b36:	4a30      	ldr	r2, [pc, #192]	; (8004bf8 <pump_init+0x3c0>)
 8004b38:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	bomMau[15].GPIO_Pin  = PWM15_Pin;
 8004b3c:	4b2d      	ldr	r3, [pc, #180]	; (8004bf4 <pump_init+0x3bc>)
 8004b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b42:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c

	bomMau[15].DIR_Port  = DIR16_GPIO_Port;
 8004b46:	4b2b      	ldr	r3, [pc, #172]	; (8004bf4 <pump_init+0x3bc>)
 8004b48:	4a2b      	ldr	r2, [pc, #172]	; (8004bf8 <pump_init+0x3c0>)
 8004b4a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
	bomMau[15].DIR_Pin   = DIR16_Pin;
 8004b4e:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <pump_init+0x3bc>)
 8004b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b54:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434

	bomMau[15].EN_Port   = EN16_GPIO_Port;
 8004b58:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <pump_init+0x3bc>)
 8004b5a:	4a27      	ldr	r2, [pc, #156]	; (8004bf8 <pump_init+0x3c0>)
 8004b5c:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	bomMau[15].EN_Pin    = EN16_Pin;
 8004b60:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <pump_init+0x3bc>)
 8004b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b66:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c


	////////////////////////////////////////////////////////////
	for(uint8_t i = 0; i < 16; i++)
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	71fb      	strb	r3, [r7, #7]
 8004b6e:	e02e      	b.n	8004bce <pump_init+0x396>
	{
		// clear pin EN tp hold motor //
		SET(bomMau[i].EN_Port, bomMau[i].EN_Pin);
 8004b70:	79fa      	ldrb	r2, [r7, #7]
 8004b72:	4920      	ldr	r1, [pc, #128]	; (8004bf4 <pump_init+0x3bc>)
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	333c      	adds	r3, #60	; 0x3c
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	79fa      	ldrb	r2, [r7, #7]
 8004b84:	491b      	ldr	r1, [pc, #108]	; (8004bf4 <pump_init+0x3bc>)
 8004b86:	4613      	mov	r3, r2
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	3340      	adds	r3, #64	; 0x40
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	2201      	movs	r2, #1
 8004b96:	4619      	mov	r1, r3
 8004b98:	f001 fc4f 	bl	800643a <HAL_GPIO_WritePin>
		SET(bomMau[i].DIR_Port, bomMau[i].DIR_Pin);
 8004b9c:	79fa      	ldrb	r2, [r7, #7]
 8004b9e:	4915      	ldr	r1, [pc, #84]	; (8004bf4 <pump_init+0x3bc>)
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	3334      	adds	r3, #52	; 0x34
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	79fa      	ldrb	r2, [r7, #7]
 8004bb0:	4910      	ldr	r1, [pc, #64]	; (8004bf4 <pump_init+0x3bc>)
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	3338      	adds	r3, #56	; 0x38
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f001 fc39 	bl	800643a <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 16; i++)
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	71fb      	strb	r3, [r7, #7]
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	2b0f      	cmp	r3, #15
 8004bd2:	d9cd      	bls.n	8004b70 <pump_init+0x338>

	}
	CLEAR(bomMau[0].DIR_Port, bomMau[0].DIR_Pin);
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <pump_init+0x3bc>)
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd8:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <pump_init+0x3bc>)
 8004bda:	8f11      	ldrh	r1, [r2, #56]	; 0x38
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 fc2b 	bl	800643a <HAL_GPIO_WritePin>
	setAlarm_RuaDauPhun(0);
 8004be4:	2000      	movs	r0, #0
 8004be6:	f000 fee1 	bl	80059ac <setAlarm_RuaDauPhun>
		rs232_print("bomMau[%d].pulse01mlAddress=%d \n",i,bomMau[i].pulse01mlAddress);
		rs232_print("bomMau[%d].pulse001mlAddress=%d \n\r",i,bomMau[i].pulse001mlAddress);
	}
	rs232_print("\n\r");
	*/
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000ccc 	.word	0x20000ccc
 8004bf8:	40010800 	.word	0x40010800

08004bfc <speaker_efect>:

/**
 * test ok
 */
void speaker_efect()
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++)
 8004c02:	2300      	movs	r3, #0
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	e014      	b.n	8004c32 <speaker_efect+0x36>
	{
		HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, 1);
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c0e:	480d      	ldr	r0, [pc, #52]	; (8004c44 <speaker_efect+0x48>)
 8004c10:	f001 fc13 	bl	800643a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8004c14:	2064      	movs	r0, #100	; 0x64
 8004c16:	f000 fff1 	bl	8005bfc <HAL_Delay>
		HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, 0);
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c20:	4808      	ldr	r0, [pc, #32]	; (8004c44 <speaker_efect+0x48>)
 8004c22:	f001 fc0a 	bl	800643a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8004c26:	2064      	movs	r0, #100	; 0x64
 8004c28:	f000 ffe8 	bl	8005bfc <HAL_Delay>
	for (int i = 0; i < 2; i++)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	dde7      	ble.n	8004c08 <speaker_efect+0xc>
	}
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40011400 	.word	0x40011400

08004c48 <sendFrame>:

/**
 * send frame with format to App for notify information
 */
void sendFrame(const char *fmt, ...)
{
 8004c48:	b40f      	push	{r0, r1, r2, r3}
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
  static char buffer1[256];
  unsigned int len=0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, fmt);
 8004c54:	f107 031c 	add.w	r3, r7, #28
 8004c58:	60bb      	str	r3, [r7, #8]
  vsnprintf(buffer1, sizeof(buffer1), fmt, args);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c62:	4814      	ldr	r0, [pc, #80]	; (8004cb4 <sendFrame+0x6c>)
 8004c64:	f005 fc96 	bl	800a594 <vsniprintf>
  va_end(args);
  len=strlen(buffer1);
 8004c68:	4812      	ldr	r0, [pc, #72]	; (8004cb4 <sendFrame+0x6c>)
 8004c6a:	f7fb fadd 	bl	8000228 <strlen>
 8004c6e:	60f8      	str	r0, [r7, #12]

  char start[1]={'@'};
 8004c70:	2340      	movs	r3, #64	; 0x40
 8004c72:	713b      	strb	r3, [r7, #4]
  HAL_UART_Transmit(&UART_MAIN,  start,1,100);
 8004c74:	1d39      	adds	r1, r7, #4
 8004c76:	2364      	movs	r3, #100	; 0x64
 8004c78:	2201      	movs	r2, #1
 8004c7a:	480f      	ldr	r0, [pc, #60]	; (8004cb8 <sendFrame+0x70>)
 8004c7c:	f003 fe04 	bl	8008888 <HAL_UART_Transmit>
  HAL_UART_Transmit(&UART_MAIN,  buffer1,len,100);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	2364      	movs	r3, #100	; 0x64
 8004c86:	490b      	ldr	r1, [pc, #44]	; (8004cb4 <sendFrame+0x6c>)
 8004c88:	480b      	ldr	r0, [pc, #44]	; (8004cb8 <sendFrame+0x70>)
 8004c8a:	f003 fdfd 	bl	8008888 <HAL_UART_Transmit>
  char stop[1]={'#'};
 8004c8e:	2323      	movs	r3, #35	; 0x23
 8004c90:	703b      	strb	r3, [r7, #0]
  HAL_UART_Transmit(&UART_MAIN,  stop,1,100);
 8004c92:	4639      	mov	r1, r7
 8004c94:	2364      	movs	r3, #100	; 0x64
 8004c96:	2201      	movs	r2, #1
 8004c98:	4807      	ldr	r0, [pc, #28]	; (8004cb8 <sendFrame+0x70>)
 8004c9a:	f003 fdf5 	bl	8008888 <HAL_UART_Transmit>

  ///
  printf("send_frame -> %s \r\n", fmt);
 8004c9e:	69b9      	ldr	r1, [r7, #24]
 8004ca0:	4806      	ldr	r0, [pc, #24]	; (8004cbc <sendFrame+0x74>)
 8004ca2:	f005 fb47 	bl	800a334 <iprintf>
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cb0:	b004      	add	sp, #16
 8004cb2:	4770      	bx	lr
 8004cb4:	20001258 	.word	0x20001258
 8004cb8:	20000b14 	.word	0x20000b14
 8004cbc:	0800f1d8 	.word	0x0800f1d8

08004cc0 <write4Byte595_tron>:
{

}

void write4Byte595_tron(uint32_t data,bool enOut)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]

}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
	...

08004cd8 <check_dir_sleep_Colorpump>:
{

}

void check_dir_sleep_Colorpump()
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	71fb      	strb	r3, [r7, #7]

    for(i = 0; i <16; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	71fb      	strb	r3, [r7, #7]
 8004ce6:	e074      	b.n	8004dd2 <check_dir_sleep_Colorpump+0xfa>
    {
    	// check DIR //
		if (bomMau[i].dir == THUAN)
 8004ce8:	79fa      	ldrb	r2, [r7, #7]
 8004cea:	493e      	ldr	r1, [pc, #248]	; (8004de4 <check_dir_sleep_Colorpump+0x10c>)
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d016      	beq.n	8004d2a <check_dir_sleep_Colorpump+0x52>
			SET(bomMau[i].DIR_Port, bomMau[i].DIR_Pin);
 8004cfc:	79fa      	ldrb	r2, [r7, #7]
 8004cfe:	4939      	ldr	r1, [pc, #228]	; (8004de4 <check_dir_sleep_Colorpump+0x10c>)
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3334      	adds	r3, #52	; 0x34
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	79fa      	ldrb	r2, [r7, #7]
 8004d10:	4934      	ldr	r1, [pc, #208]	; (8004de4 <check_dir_sleep_Colorpump+0x10c>)
 8004d12:	4613      	mov	r3, r2
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3338      	adds	r3, #56	; 0x38
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	2201      	movs	r2, #1
 8004d22:	4619      	mov	r1, r3
 8004d24:	f001 fb89 	bl	800643a <HAL_GPIO_WritePin>
 8004d28:	e015      	b.n	8004d56 <check_dir_sleep_Colorpump+0x7e>
		else
			CLEAR(bomMau[i].DIR_Port, bomMau[i].DIR_Pin);
 8004d2a:	79fa      	ldrb	r2, [r7, #7]
 8004d2c:	492d      	ldr	r1, [pc, #180]	; (8004de4 <check_dir_sleep_Colorpump+0x10c>)
 8004d2e:	4613      	mov	r3, r2
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3334      	adds	r3, #52	; 0x34
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	79fa      	ldrb	r2, [r7, #7]
 8004d3e:	4929      	ldr	r1, [pc, #164]	; (8004de4 <check_dir_sleep_Colorpump+0x10c>)
 8004d40:	4613      	mov	r3, r2
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	3338      	adds	r3, #56	; 0x38
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	4619      	mov	r1, r3
 8004d52:	f001 fb72 	bl	800643a <HAL_GPIO_WritePin>

        // check SLEEP //
		if (bomMau[i].sleep == SLEEP)
 8004d56:	79fa      	ldrb	r2, [r7, #7]
 8004d58:	4922      	ldr	r1, [pc, #136]	; (8004de4 <check_dir_sleep_Colorpump+0x10c>)
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	3301      	adds	r3, #1
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f083 0301 	eor.w	r3, r3, #1
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d016      	beq.n	8004da0 <check_dir_sleep_Colorpump+0xc8>
			SET(bomMau[i].EN_Port, bomMau[i].EN_Pin);
 8004d72:	79fa      	ldrb	r2, [r7, #7]
 8004d74:	491b      	ldr	r1, [pc, #108]	; (8004de4 <check_dir_sleep_Colorpump+0x10c>)
 8004d76:	4613      	mov	r3, r2
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	333c      	adds	r3, #60	; 0x3c
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	79fa      	ldrb	r2, [r7, #7]
 8004d86:	4917      	ldr	r1, [pc, #92]	; (8004de4 <check_dir_sleep_Colorpump+0x10c>)
 8004d88:	4613      	mov	r3, r2
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	3340      	adds	r3, #64	; 0x40
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	2201      	movs	r2, #1
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f001 fb4e 	bl	800643a <HAL_GPIO_WritePin>
 8004d9e:	e015      	b.n	8004dcc <check_dir_sleep_Colorpump+0xf4>
		else
			CLEAR(bomMau[i].EN_Port, bomMau[i].EN_Pin);
 8004da0:	79fa      	ldrb	r2, [r7, #7]
 8004da2:	4910      	ldr	r1, [pc, #64]	; (8004de4 <check_dir_sleep_Colorpump+0x10c>)
 8004da4:	4613      	mov	r3, r2
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	333c      	adds	r3, #60	; 0x3c
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	79fa      	ldrb	r2, [r7, #7]
 8004db4:	490b      	ldr	r1, [pc, #44]	; (8004de4 <check_dir_sleep_Colorpump+0x10c>)
 8004db6:	4613      	mov	r3, r2
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3340      	adds	r3, #64	; 0x40
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f001 fb37 	bl	800643a <HAL_GPIO_WritePin>
    for(i = 0; i <16; i++)
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	71fb      	strb	r3, [r7, #7]
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	2b0f      	cmp	r3, #15
 8004dd6:	d987      	bls.n	8004ce8 <check_dir_sleep_Colorpump+0x10>
    }
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000ccc 	.word	0x20000ccc

08004de8 <outputPwmColorPump>:
/*
 *  dieu khien xung bom mau */
void outputPwmColorPump(pump *pumpTemp) {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	uint16_t slow = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	81fb      	strh	r3, [r7, #14]

	if (pumpTemp->sleep != SLEEP)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d05f      	beq.n	8004ebc <outputPwmColorPump+0xd4>
	{
		pumpTemp->Counter_Ton++;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	3301      	adds	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	855a      	strh	r2, [r3, #42]	; 0x2a
		if (pumpTemp->Counter_Ton > pumpTemp->Ton)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d953      	bls.n	8004ebc <outputPwmColorPump+0xd4>
		{
			pumpTemp->Counter_Ton = 0;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	855a      	strh	r2, [r3, #42]	; 0x2a


		if (pumpTemp->countHighSpeed < pumpTemp->pulseSetHighSpeed) {
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d20d      	bcs.n	8004e42 <outputPwmColorPump+0x5a>
			pumpTemp->countHighSpeed++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	60da      	str	r2, [r3, #12]
			HAL_GPIO_TogglePin(pumpTemp->GPIOx, pumpTemp->GPIO_Pin);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f001 fb15 	bl	800646a <HAL_GPIO_TogglePin>
	else

	{
		//printf(" PAUSE \r\n");
	}
}
 8004e40:	e03c      	b.n	8004ebc <outputPwmColorPump+0xd4>
			slow = 2;
 8004e42:	2302      	movs	r3, #2
 8004e44:	81fb      	strh	r3, [r7, #14]
			if (pumpTemp->countLowSpeed < pumpTemp->pulseSetLowSpeed) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8a1a      	ldrh	r2, [r3, #16]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	891b      	ldrh	r3, [r3, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d21c      	bcs.n	8004e8c <outputPwmColorPump+0xa4>
				if (pumpTemp->countDelay < slow)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	89fb      	ldrh	r3, [r7, #14]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d205      	bcs.n	8004e68 <outputPwmColorPump+0x80>
					pumpTemp->countDelay++;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	619a      	str	r2, [r3, #24]
}
 8004e66:	e029      	b.n	8004ebc <outputPwmColorPump+0xd4>
					pumpTemp->countDelay = 0;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	619a      	str	r2, [r3, #24]
					pumpTemp->countLowSpeed++;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8a1b      	ldrh	r3, [r3, #16]
 8004e72:	3301      	adds	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	821a      	strh	r2, [r3, #16]
					HAL_GPIO_TogglePin(pumpTemp->GPIOx, pumpTemp->GPIO_Pin);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004e82:	4619      	mov	r1, r3
 8004e84:	4610      	mov	r0, r2
 8004e86:	f001 faf0 	bl	800646a <HAL_GPIO_TogglePin>
}
 8004e8a:	e017      	b.n	8004ebc <outputPwmColorPump+0xd4>
				pumpTemp->sleep = SLEEP;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	705a      	strb	r2, [r3, #1]
				out(pumpTemp->GPIOx, pumpTemp->GPIO_Pin, 0);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f001 facc 	bl	800643a <HAL_GPIO_WritePin>
				out(pumpTemp->EN_Port, pumpTemp->EN_Pin, 1); // disable motor//
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004eac:	2201      	movs	r2, #1
 8004eae:	4619      	mov	r1, r3
 8004eb0:	f001 fac3 	bl	800643a <HAL_GPIO_WritePin>
				khuayMau.veSinhDauPhun = false;
 8004eb4:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <outputPwmColorPump+0xdc>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	2000023c 	.word	0x2000023c

08004ec8 <calc_colorPulseOutput>:
}
/*
 * Tính toán số xung cần xuất ra để điều khiển bơm
 */
void calc_colorPulseOutput(pump *pumpTemp)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	6078      	str	r0, [r7, #4]
	uint32_t Nguyen		=	(uint32_t)(pumpTemp->mililit);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fc f911 	bl	80010fc <__aeabi_f2uiz>
 8004eda:	4603      	mov	r3, r0
 8004edc:	60fb      	str	r3, [r7, #12]
	uint16_t boiSo01ml 	= 	(int) 	  (pumpTemp->mililit * 10) % 10;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	492e      	ldr	r1, [pc, #184]	; (8004f9c <calc_colorPulseOutput+0xd4>)
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fb f9a7 	bl	8000238 <__aeabi_fmul>
 8004eea:	4603      	mov	r3, r0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fc f8df 	bl	80010b0 <__aeabi_f2iz>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	; (8004fa0 <calc_colorPulseOutput+0xd8>)
 8004ef6:	fb83 1302 	smull	r1, r3, r3, r2
 8004efa:	1099      	asrs	r1, r3, #2
 8004efc:	17d3      	asrs	r3, r2, #31
 8004efe:	1ac9      	subs	r1, r1, r3
 8004f00:	460b      	mov	r3, r1
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	1ad1      	subs	r1, r2, r3
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	817b      	strh	r3, [r7, #10]
	uint16_t boiSo001ml = 	(int) 	  (pumpTemp->mililit * 100) % 10;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	4924      	ldr	r1, [pc, #144]	; (8004fa4 <calc_colorPulseOutput+0xdc>)
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fb f98f 	bl	8000238 <__aeabi_fmul>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fc f8c7 	bl	80010b0 <__aeabi_f2iz>
 8004f22:	4602      	mov	r2, r0
 8004f24:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <calc_colorPulseOutput+0xd8>)
 8004f26:	fb83 1302 	smull	r1, r3, r3, r2
 8004f2a:	1099      	asrs	r1, r3, #2
 8004f2c:	17d3      	asrs	r3, r2, #31
 8004f2e:	1ac9      	subs	r1, r1, r3
 8004f30:	460b      	mov	r3, r1
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	1ad1      	subs	r1, r2, r3
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	813b      	strh	r3, [r7, #8]

	pumpTemp->pulseSetHighSpeed = (Nguyen * pumpTemp->pulse1ml) * 2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8b9b      	ldrh	r3, [r3, #28]
 8004f42:	461a      	mov	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	005a      	lsls	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	605a      	str	r2, [r3, #4]
	pumpTemp->pulseSetLowSpeed  = (boiSo01ml * pumpTemp->pulse01ml + boiSo001ml * pumpTemp->pulse001ml) * 2;
 8004f50:	897b      	ldrh	r3, [r7, #10]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	8bd2      	ldrh	r2, [r2, #30]
 8004f56:	fb03 f202 	mul.w	r2, r3, r2
 8004f5a:	893b      	ldrh	r3, [r7, #8]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	8c09      	ldrh	r1, [r1, #32]
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	811a      	strh	r2, [r3, #8]

	printf("CALC: Nguyen=%d,boiSo01ml=%d,boiSo001ml=%d --pumpTemp->pulse1ml: %d \r\n", Nguyen, boiSo01ml, boiSo001ml, pumpTemp->pulse1ml);
 8004f70:	897a      	ldrh	r2, [r7, #10]
 8004f72:	8939      	ldrh	r1, [r7, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8b9b      	ldrh	r3, [r3, #28]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	68f9      	ldr	r1, [r7, #12]
 8004f7e:	480a      	ldr	r0, [pc, #40]	; (8004fa8 <calc_colorPulseOutput+0xe0>)
 8004f80:	f005 f9d8 	bl	800a334 <iprintf>
	printf("CLAC: pumpTemp->pulseSetHighSpeed=%d,pumpTemp->pulseSetLowSpeed=%d \r\n",
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6859      	ldr	r1, [r3, #4]
			pumpTemp->pulseSetHighSpeed, pumpTemp->pulseSetLowSpeed);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	891b      	ldrh	r3, [r3, #8]
	printf("CLAC: pumpTemp->pulseSetHighSpeed=%d,pumpTemp->pulseSetLowSpeed=%d \r\n",
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4807      	ldr	r0, [pc, #28]	; (8004fac <calc_colorPulseOutput+0xe4>)
 8004f90:	f005 f9d0 	bl	800a334 <iprintf>
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	41200000 	.word	0x41200000
 8004fa0:	66666667 	.word	0x66666667
 8004fa4:	42c80000 	.word	0x42c80000
 8004fa8:	0800f1ec 	.word	0x0800f1ec
 8004fac:	0800f234 	.word	0x0800f234

08004fb0 <pump_pwm_handle>:

static volatile uint32_t myTick = 0;

// 1 cycles = 50us //
void pump_pwm_handle()
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 16; i++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	607b      	str	r3, [r7, #4]
 8004fba:	e00c      	b.n	8004fd6 <pump_pwm_handle+0x26>
	{
		outputPwmColorPump(&bomMau[i]);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <pump_pwm_handle+0x38>)
 8004fc8:	4413      	add	r3, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ff0c 	bl	8004de8 <outputPwmColorPump>
	for (int i = 0; i < 16; i++)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b0f      	cmp	r3, #15
 8004fda:	ddef      	ble.n	8004fbc <pump_pwm_handle+0xc>
	}
	check_dir_sleep_Colorpump();
 8004fdc:	f7ff fe7c 	bl	8004cd8 <check_dir_sleep_Colorpump>
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20000ccc 	.word	0x20000ccc

08004fec <pump_tron_handle>:

void pump_tron_handle()
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(PUL_ALL_16_GPIO_Port, PUL_ALL_16_Pin);
 8004ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ff4:	4802      	ldr	r0, [pc, #8]	; (8005000 <pump_tron_handle+0x14>)
 8004ff6:	f001 fa38 	bl	800646a <HAL_GPIO_TogglePin>
//	if (khuayMau.khuayMau.en)
//	{
//		outputPwmTron();
//	}
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40011000 	.word	0x40011000

08005004 <AlarmTask>:
}



void AlarmTask()
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af02      	add	r7, sp, #8
	static uint32_t tick_1s = 0;
		static int last_min = 0;
		RTC_TimeTypeDef gTime;
		if (HAL_GetTick() - tick_1s > 1000)
 800500a:	f000 fded 	bl	8005be8 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <AlarmTask+0xbc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800501a:	d94d      	bls.n	80050b8 <AlarmTask+0xb4>
		{
			tick_1s = HAL_GetTick();
 800501c:	f000 fde4 	bl	8005be8 <HAL_GetTick>
 8005020:	4603      	mov	r3, r0
 8005022:	4a27      	ldr	r2, [pc, #156]	; (80050c0 <AlarmTask+0xbc>)
 8005024:	6013      	str	r3, [r2, #0]
			//HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
			//printf("%02d:%02d:%02d \n\r", gTime.Hours, gTime.Minutes, gTime.Seconds);



		timeNow.time_in_sec++;
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <AlarmTask+0xc0>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	3301      	adds	r3, #1
 800502c:	4a25      	ldr	r2, [pc, #148]	; (80050c4 <AlarmTask+0xc0>)
 800502e:	60d3      	str	r3, [r2, #12]
		checkAlarm();
 8005030:	f000 f908 	bl	8005244 <checkAlarm>
		checkRuaDauPhun();
 8005034:	f000 f88a 	bl	800514c <checkRuaDauPhun>

		int _hour = (timeNow.time_in_sec / 3600);
 8005038:	4b22      	ldr	r3, [pc, #136]	; (80050c4 <AlarmTask+0xc0>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4a22      	ldr	r2, [pc, #136]	; (80050c8 <AlarmTask+0xc4>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	0adb      	lsrs	r3, r3, #11
 8005044:	60fb      	str	r3, [r7, #12]
		int _min = (timeNow.time_in_sec / 60) % 60;
 8005046:	4b1f      	ldr	r3, [pc, #124]	; (80050c4 <AlarmTask+0xc0>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	4a20      	ldr	r2, [pc, #128]	; (80050cc <AlarmTask+0xc8>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	0959      	lsrs	r1, r3, #5
 8005052:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <AlarmTask+0xc8>)
 8005054:	fba3 2301 	umull	r2, r3, r3, r1
 8005058:	095a      	lsrs	r2, r3, #5
 800505a:	4613      	mov	r3, r2
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	1aca      	subs	r2, r1, r3
 8005064:	60ba      	str	r2, [r7, #8]
		int _sec = (timeNow.time_in_sec % 60);
 8005066:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <AlarmTask+0xc0>)
 8005068:	68d9      	ldr	r1, [r3, #12]
 800506a:	4b18      	ldr	r3, [pc, #96]	; (80050cc <AlarmTask+0xc8>)
 800506c:	fba3 2301 	umull	r2, r3, r3, r1
 8005070:	095a      	lsrs	r2, r3, #5
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	1aca      	subs	r2, r1, r3
 800507c:	607a      	str	r2, [r7, #4]

			//printf("time now_in sec: %d-> %02d:%02d:%02d \n\r",timeNow.time_in_sec, _hour, _min, _sec);

			if (_hour == 24 && _min == 0 && _sec == 0)  // reset for newday //
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b18      	cmp	r3, #24
 8005082:	d108      	bne.n	8005096 <AlarmTask+0x92>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d105      	bne.n	8005096 <AlarmTask+0x92>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <AlarmTask+0x92>
				timeNow.time_in_sec = 0;
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <AlarmTask+0xc0>)
 8005092:	2200      	movs	r2, #0
 8005094:	60da      	str	r2, [r3, #12]

			if (last_min != _min)
 8005096:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <AlarmTask+0xcc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	429a      	cmp	r2, r3
 800509e:	d00b      	beq.n	80050b8 <AlarmTask+0xb4>
			{
				last_min = _min;
 80050a0:	4a0b      	ldr	r2, [pc, #44]	; (80050d0 <AlarmTask+0xcc>)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6013      	str	r3, [r2, #0]
				printf("time now_in sec: %d-> %02d:%02d:%02d \n\r",
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <AlarmTask+0xc0>)
 80050a8:	68d9      	ldr	r1, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4808      	ldr	r0, [pc, #32]	; (80050d4 <AlarmTask+0xd0>)
 80050b4:	f005 f93e 	bl	800a334 <iprintf>
						timeNow.time_in_sec, _hour, _min, _sec);
			}
		}

}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20001358 	.word	0x20001358
 80050c4:	20001120 	.word	0x20001120
 80050c8:	91a2b3c5 	.word	0x91a2b3c5
 80050cc:	88888889 	.word	0x88888889
 80050d0:	2000135c 	.word	0x2000135c
 80050d4:	0800f27c 	.word	0x0800f27c

080050d8 <CheckTimeNow>:

void CheckTimeNow(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
   return;
 80050dc:	bf00      	nop
}
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr

080050e4 <AlarmOff>:

void AlarmOff(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	e00c      	b.n	800510a <AlarmOff+0x26>
	{
		timeAlarm[i].en = 0;
 80050f0:	4912      	ldr	r1, [pc, #72]	; (800513c <AlarmOff+0x58>)
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	3303      	adds	r3, #3
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3301      	adds	r3, #1
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b09      	cmp	r3, #9
 800510e:	ddef      	ble.n	80050f0 <AlarmOff+0xc>
	}
	HAL_TIM_Base_Stop(&htim4);
 8005110:	480b      	ldr	r0, [pc, #44]	; (8005140 <AlarmOff+0x5c>)
 8005112:	f002 ff32 	bl	8007f7a <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(&htim4);
 8005116:	480a      	ldr	r0, [pc, #40]	; (8005140 <AlarmOff+0x5c>)
 8005118:	f002 ffb6 	bl	8008088 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 1);
 800511c:	2201      	movs	r2, #1
 800511e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005122:	4808      	ldr	r0, [pc, #32]	; (8005144 <AlarmOff+0x60>)
 8005124:	f001 f989 	bl	800643a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800512e:	4806      	ldr	r0, [pc, #24]	; (8005148 <AlarmOff+0x64>)
 8005130:	f001 f983 	bl	800643a <HAL_GPIO_WritePin>
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	2000113c 	.word	0x2000113c
 8005140:	20000a3c 	.word	0x20000a3c
 8005144:	40010800 	.word	0x40010800
 8005148:	40011000 	.word	0x40011000

0800514c <checkRuaDauPhun>:

extern void ruaDauPhun();

void checkRuaDauPhun()
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
	static uint8_t en_timer[10] = {0};
		uint8_t total_state = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	71fb      	strb	r3, [r7, #7]
		//uint8_t last_en_timer[10] = {0};
		static uint8_t startTimer = 0;

		for(int i=0; i<10; i++)
 8005156:	2300      	movs	r3, #0
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	e04d      	b.n	80051f8 <checkRuaDauPhun+0xac>
		{
			if(timeAlarm[i].en == 2)
 800515c:	4933      	ldr	r1, [pc, #204]	; (800522c <checkRuaDauPhun+0xe0>)
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	3303      	adds	r3, #3
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d133      	bne.n	80051da <checkRuaDauPhun+0x8e>
			{
				if(timeAlarm[i].time_in_sec < timeNow.time_in_sec && timeAlarm[i].time_in_sec + 2 > timeNow.time_in_sec)
 8005172:	492e      	ldr	r1, [pc, #184]	; (800522c <checkRuaDauPhun+0xe0>)
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	330c      	adds	r3, #12
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b2a      	ldr	r3, [pc, #168]	; (8005230 <checkRuaDauPhun+0xe4>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	429a      	cmp	r2, r3
 800518a:	d219      	bcs.n	80051c0 <checkRuaDauPhun+0x74>
 800518c:	4927      	ldr	r1, [pc, #156]	; (800522c <checkRuaDauPhun+0xe0>)
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	330c      	adds	r3, #12
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	1c9a      	adds	r2, r3, #2
 80051a0:	4b23      	ldr	r3, [pc, #140]	; (8005230 <checkRuaDauPhun+0xe4>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d90b      	bls.n	80051c0 <checkRuaDauPhun+0x74>
				{
					en_timer[i] = 1;
 80051a8:	4a22      	ldr	r2, [pc, #136]	; (8005234 <checkRuaDauPhun+0xe8>)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	4413      	add	r3, r2
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
					printf("[ALARM_RUA_DAU_PHUN------>] \r\n");
 80051b2:	4821      	ldr	r0, [pc, #132]	; (8005238 <checkRuaDauPhun+0xec>)
 80051b4:	f005 f92c 	bl	800a410 <puts>
					ruaDauPhun_Alarm = 1;
 80051b8:	4b20      	ldr	r3, [pc, #128]	; (800523c <checkRuaDauPhun+0xf0>)
 80051ba:	2201      	movs	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e004      	b.n	80051ca <checkRuaDauPhun+0x7e>
					//ruaDauPhun();

				}
				else
				{
					en_timer[i] = 0;
 80051c0:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <checkRuaDauPhun+0xe8>)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	4413      	add	r3, r2
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
				}
				total_state +=en_timer[i];
 80051ca:	4a1a      	ldr	r2, [pc, #104]	; (8005234 <checkRuaDauPhun+0xe8>)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	4413      	add	r3, r2
 80051d0:	781a      	ldrb	r2, [r3, #0]
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	4413      	add	r3, r2
 80051d6:	71fb      	strb	r3, [r7, #7]
 80051d8:	e004      	b.n	80051e4 <checkRuaDauPhun+0x98>
			}
			else
			{
				en_timer[i] = 0;
 80051da:	4a16      	ldr	r2, [pc, #88]	; (8005234 <checkRuaDauPhun+0xe8>)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	4413      	add	r3, r2
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
			}
			total_state += en_timer[i];
 80051e4:	4a13      	ldr	r2, [pc, #76]	; (8005234 <checkRuaDauPhun+0xe8>)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	4413      	add	r3, r2
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	4413      	add	r3, r2
 80051f0:	71fb      	strb	r3, [r7, #7]
		for(int i=0; i<10; i++)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b09      	cmp	r3, #9
 80051fc:	ddae      	ble.n	800515c <checkRuaDauPhun+0x10>
		}


	    if(total_state > 0 && startTimer == 0)
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <checkRuaDauPhun+0xc8>
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <checkRuaDauPhun+0xf4>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <checkRuaDauPhun+0xc8>
	    {
	    	startTimer = 1;
 800520c:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <checkRuaDauPhun+0xf4>)
 800520e:	2201      	movs	r2, #1
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e005      	b.n	8005220 <checkRuaDauPhun+0xd4>
//	    	HAL_Delay(5000);
//	    	printf("RuaDauPhun------> DongCua] \r\n");


	    }
	    else if(total_state == 0)
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <checkRuaDauPhun+0xd4>
	    {
	    	startTimer = 0;
 800521a:	4b09      	ldr	r3, [pc, #36]	; (8005240 <checkRuaDauPhun+0xf4>)
 800521c:	2200      	movs	r2, #0
 800521e:	701a      	strb	r2, [r3, #0]
//	    	HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
	    	//printf("[ALARM_OFF------>] \r\n");
	    }
	    else;

		total_state= 0;
 8005220:	2300      	movs	r3, #0
 8005222:	71fb      	strb	r3, [r7, #7]
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	2000113c 	.word	0x2000113c
 8005230:	20001120 	.word	0x20001120
 8005234:	20001360 	.word	0x20001360
 8005238:	0800f2a4 	.word	0x0800f2a4
 800523c:	20001254 	.word	0x20001254
 8005240:	2000136a 	.word	0x2000136a

08005244 <checkAlarm>:

// check alarm tron mau //
void checkAlarm()
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
	static uint8_t en_timer[10] = {0};
	uint8_t total_state = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	71fb      	strb	r3, [r7, #7]
	//uint8_t last_en_timer[10] = {0};
	static uint8_t startTimer = 0;

	if(khuayMau.khuayMau.en == true)
 800524e:	4b4f      	ldr	r3, [pc, #316]	; (800538c <checkAlarm+0x148>)
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	f040 8094 	bne.w	8005384 <checkAlarm+0x140>
		return;

	for (int i = 0; i < 10; i++)
 800525c:	2300      	movs	r3, #0
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	e061      	b.n	8005326 <checkAlarm+0xe2>
	{
		if(timeAlarm[i].en == 1)
 8005262:	494b      	ldr	r1, [pc, #300]	; (8005390 <checkAlarm+0x14c>)
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	4613      	mov	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3303      	adds	r3, #3
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d147      	bne.n	8005308 <checkAlarm+0xc4>
		{
			if(timeAlarm[i].time_in_sec < timeNow.time_in_sec && timeAlarm[i].time_in_sec + timeAlarm[i].time*60 > timeNow.time_in_sec)
 8005278:	4945      	ldr	r1, [pc, #276]	; (8005390 <checkAlarm+0x14c>)
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	330c      	adds	r3, #12
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b42      	ldr	r3, [pc, #264]	; (8005394 <checkAlarm+0x150>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	429a      	cmp	r2, r3
 8005290:	d22d      	bcs.n	80052ee <checkAlarm+0xaa>
 8005292:	493f      	ldr	r1, [pc, #252]	; (8005390 <checkAlarm+0x14c>)
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	4613      	mov	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	330c      	adds	r3, #12
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	483a      	ldr	r0, [pc, #232]	; (8005390 <checkAlarm+0x14c>)
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4403      	add	r3, r0
 80052b2:	3304      	adds	r3, #4
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	4613      	mov	r3, r2
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	18ca      	adds	r2, r1, r3
 80052c2:	4b34      	ldr	r3, [pc, #208]	; (8005394 <checkAlarm+0x150>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d911      	bls.n	80052ee <checkAlarm+0xaa>
			{
				en_timer[i] = 1;
 80052ca:	4a33      	ldr	r2, [pc, #204]	; (8005398 <checkAlarm+0x154>)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	4413      	add	r3, r2
 80052d0:	2201      	movs	r2, #1
 80052d2:	701a      	strb	r2, [r3, #0]
				//printf(" alarm ---\n\r");
				HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 0);
 80052d4:	2200      	movs	r2, #0
 80052d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052da:	4830      	ldr	r0, [pc, #192]	; (800539c <checkAlarm+0x158>)
 80052dc:	f001 f8ad 	bl	800643a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 80052e0:	2200      	movs	r2, #0
 80052e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80052e6:	482e      	ldr	r0, [pc, #184]	; (80053a0 <checkAlarm+0x15c>)
 80052e8:	f001 f8a7 	bl	800643a <HAL_GPIO_WritePin>
 80052ec:	e004      	b.n	80052f8 <checkAlarm+0xb4>
			}
			else
			{
				en_timer[i] = 0;
 80052ee:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <checkAlarm+0x154>)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	4413      	add	r3, r2
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
			}
			total_state +=en_timer[i];
 80052f8:	4a27      	ldr	r2, [pc, #156]	; (8005398 <checkAlarm+0x154>)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	4413      	add	r3, r2
 80052fe:	781a      	ldrb	r2, [r3, #0]
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	4413      	add	r3, r2
 8005304:	71fb      	strb	r3, [r7, #7]
 8005306:	e004      	b.n	8005312 <checkAlarm+0xce>
		}
		else
		{
			en_timer[i] = 0;
 8005308:	4a23      	ldr	r2, [pc, #140]	; (8005398 <checkAlarm+0x154>)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	4413      	add	r3, r2
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
		}
		total_state += en_timer[i];
 8005312:	4a21      	ldr	r2, [pc, #132]	; (8005398 <checkAlarm+0x154>)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	4413      	add	r3, r2
 8005318:	781a      	ldrb	r2, [r3, #0]
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	4413      	add	r3, r2
 800531e:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 10; i++)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	3301      	adds	r3, #1
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b09      	cmp	r3, #9
 800532a:	dd9a      	ble.n	8005262 <checkAlarm+0x1e>
	}


    if(total_state > 0 && startTimer == 0)
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <checkAlarm+0x10a>
 8005332:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <checkAlarm+0x160>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <checkAlarm+0x10a>
    {
    	startTimer = 1;
 800533a:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <checkAlarm+0x160>)
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
    	printf("[ALARM_KHUAY_MAU------>] \r\n");
 8005340:	4819      	ldr	r0, [pc, #100]	; (80053a8 <checkAlarm+0x164>)
 8005342:	f005 f865 	bl	800a410 <puts>
    	HAL_TIM_Base_Start_IT(&htim4);
 8005346:	4819      	ldr	r0, [pc, #100]	; (80053ac <checkAlarm+0x168>)
 8005348:	f002 fe3e 	bl	8007fc8 <HAL_TIM_Base_Start_IT>
 800534c:	e017      	b.n	800537e <checkAlarm+0x13a>
    }
    else if(total_state == 0)
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d114      	bne.n	800537e <checkAlarm+0x13a>
    {
    	startTimer = 0;
 8005354:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <checkAlarm+0x160>)
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Stop(&htim4);
 800535a:	4814      	ldr	r0, [pc, #80]	; (80053ac <checkAlarm+0x168>)
 800535c:	f002 fe0d 	bl	8007f7a <HAL_TIM_Base_Stop>
    	HAL_TIM_Base_Stop_IT(&htim4);
 8005360:	4812      	ldr	r0, [pc, #72]	; (80053ac <checkAlarm+0x168>)
 8005362:	f002 fe91 	bl	8008088 <HAL_TIM_Base_Stop_IT>
    	HAL_GPIO_WritePin(EN_ALL_16_GPIO_Port, EN_ALL_16_Pin, 1);
 8005366:	2201      	movs	r2, #1
 8005368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800536c:	480b      	ldr	r0, [pc, #44]	; (800539c <checkAlarm+0x158>)
 800536e:	f001 f864 	bl	800643a <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(DIR_ALL_16_GPIO_Port, DIR_ALL_16_Pin, 0);
 8005372:	2200      	movs	r2, #0
 8005374:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005378:	4809      	ldr	r0, [pc, #36]	; (80053a0 <checkAlarm+0x15c>)
 800537a:	f001 f85e 	bl	800643a <HAL_GPIO_WritePin>
    	//printf("[ALARM_OFF------>] \r\n");
    }
    else;

	total_state= 0;
 800537e:	2300      	movs	r3, #0
 8005380:	71fb      	strb	r3, [r7, #7]
 8005382:	e000      	b.n	8005386 <checkAlarm+0x142>
		return;
 8005384:	bf00      	nop
}
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	2000023c 	.word	0x2000023c
 8005390:	2000113c 	.word	0x2000113c
 8005394:	20001120 	.word	0x20001120
 8005398:	2000136c 	.word	0x2000136c
 800539c:	40010800 	.word	0x40010800
 80053a0:	40011000 	.word	0x40011000
 80053a4:	20001376 	.word	0x20001376
 80053a8:	0800f2c4 	.word	0x0800f2c4
 80053ac:	20000a3c 	.word	0x20000a3c

080053b0 <loadConfigInEeprom>:


void loadConfigInEeprom()
{
 80053b0:	b5b0      	push	{r4, r5, r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af02      	add	r7, sp, #8
	//Dừng khuấy màu
	write4Byte595_tron(0,1);
 80053b6:	2101      	movs	r1, #1
 80053b8:	2000      	movs	r0, #0
 80053ba:	f7ff fc81 	bl	8004cc0 <write4Byte595_tron>
	bomTron.en=false;
 80053be:	4ba1      	ldr	r3, [pc, #644]	; (8005644 <loadConfigInEeprom+0x294>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
	//dừng bơm
	//write4Byte595_bom(0xffffffff, 1);

	//Thời gian nghỉ khuấy màu
	khuayMau.khoiDongKhuayMau.time.gio=eep_read_word(khuayMau.khoiDongKhuayMau.time.addr.gio);
 80053c4:	4ba0      	ldr	r3, [pc, #640]	; (8005648 <loadConfigInEeprom+0x298>)
 80053c6:	8a1b      	ldrh	r3, [r3, #16]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fb2d 	bl	8005a28 <eep_read_word>
 80053ce:	4603      	mov	r3, r0
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	4b9d      	ldr	r3, [pc, #628]	; (8005648 <loadConfigInEeprom+0x298>)
 80053d4:	701a      	strb	r2, [r3, #0]
	khuayMau.khoiDongKhuayMau.time.phut=eep_read_word(khuayMau.khoiDongKhuayMau.time.addr.phut);
 80053d6:	4b9c      	ldr	r3, [pc, #624]	; (8005648 <loadConfigInEeprom+0x298>)
 80053d8:	8a5b      	ldrh	r3, [r3, #18]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fb24 	bl	8005a28 <eep_read_word>
 80053e0:	4603      	mov	r3, r0
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	4b98      	ldr	r3, [pc, #608]	; (8005648 <loadConfigInEeprom+0x298>)
 80053e6:	705a      	strb	r2, [r3, #1]
	khuayMau.khoiDongKhuayMau.time.giay=eep_read_word(khuayMau.khoiDongKhuayMau.time.addr.giay);
 80053e8:	4b97      	ldr	r3, [pc, #604]	; (8005648 <loadConfigInEeprom+0x298>)
 80053ea:	8a9b      	ldrh	r3, [r3, #20]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fb1b 	bl	8005a28 <eep_read_word>
 80053f2:	4603      	mov	r3, r0
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	4b94      	ldr	r3, [pc, #592]	; (8005648 <loadConfigInEeprom+0x298>)
 80053f8:	709a      	strb	r2, [r3, #2]
	//thời gian khuấy màu
	khuayMau.khuayMau.time.phut=eep_read_word(khuayMau.khuayMau.time.addr.phut);
 80053fa:	4b93      	ldr	r3, [pc, #588]	; (8005648 <loadConfigInEeprom+0x298>)
 80053fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fb12 	bl	8005a28 <eep_read_word>
 8005404:	4603      	mov	r3, r0
 8005406:	b2da      	uxtb	r2, r3
 8005408:	4b8f      	ldr	r3, [pc, #572]	; (8005648 <loadConfigInEeprom+0x298>)
 800540a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	khuayMau.khuayMau.time.giay=eep_read_word(khuayMau.khuayMau.time.addr.giay);
 800540e:	4b8e      	ldr	r3, [pc, #568]	; (8005648 <loadConfigInEeprom+0x298>)
 8005410:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fb08 	bl	8005a28 <eep_read_word>
 8005418:	4603      	mov	r3, r0
 800541a:	b2da      	uxtb	r2, r3
 800541c:	4b8a      	ldr	r3, [pc, #552]	; (8005648 <loadConfigInEeprom+0x298>)
 800541e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	//tốc độ bơm khi vệ sinh đầu phun
	khuayMau.tocDoBomVeSinh.value=eep_read_word(khuayMau.tocDoBomVeSinh.address);
 8005422:	4b89      	ldr	r3, [pc, #548]	; (8005648 <loadConfigInEeprom+0x298>)
 8005424:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fafd 	bl	8005a28 <eep_read_word>
 800542e:	4603      	mov	r3, r0
 8005430:	461a      	mov	r2, r3
 8005432:	4b85      	ldr	r3, [pc, #532]	; (8005648 <loadConfigInEeprom+0x298>)
 8005434:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	//lượng màu phun ra
	khuayMau.luongMauPhunRa.value=eep_read_word(khuayMau.luongMauPhunRa.address);
 8005438:	4b83      	ldr	r3, [pc, #524]	; (8005648 <loadConfigInEeprom+0x298>)
 800543a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800543e:	4618      	mov	r0, r3
 8005440:	f000 faf2 	bl	8005a28 <eep_read_word>
 8005444:	4603      	mov	r3, r0
 8005446:	461a      	mov	r2, r3
 8005448:	4b7f      	ldr	r3, [pc, #508]	; (8005648 <loadConfigInEeprom+0x298>)
 800544a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	//góc đóng mở nắp
	gocDongNap=eep_read_word(gocDongNap_addr);
 800544e:	4b7f      	ldr	r3, [pc, #508]	; (800564c <loadConfigInEeprom+0x29c>)
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fae8 	bl	8005a28 <eep_read_word>
 8005458:	4603      	mov	r3, r0
 800545a:	461a      	mov	r2, r3
 800545c:	4b7c      	ldr	r3, [pc, #496]	; (8005650 <loadConfigInEeprom+0x2a0>)
 800545e:	801a      	strh	r2, [r3, #0]
	gocMoNap=eep_read_word(gocMoNap_addr);
 8005460:	4b7c      	ldr	r3, [pc, #496]	; (8005654 <loadConfigInEeprom+0x2a4>)
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fadf 	bl	8005a28 <eep_read_word>
 800546a:	4603      	mov	r3, r0
 800546c:	461a      	mov	r2, r3
 800546e:	4b7a      	ldr	r3, [pc, #488]	; (8005658 <loadConfigInEeprom+0x2a8>)
 8005470:	801a      	strh	r2, [r3, #0]
	//Độ rộng xung điều khiển bơm màu
	uint16_t TonBomMau=0;
 8005472:	2300      	movs	r3, #0
 8005474:	817b      	strh	r3, [r7, #10]
//	{
//		TonBomMau=50;
//		eep_write_word(doRongXungBomMau_addr,TonBomMau);
//	}

	TimerBomMau_SetFulseUs(5);
 8005476:	2005      	movs	r0, #5
 8005478:	f000 fa24 	bl	80058c4 <TimerBomMau_SetFulseUs>

	//Độ rộng xung khuấy màu
	khuayMau.doRongXung.value = eep_read_word(khuayMau.doRongXung.address);
 800547c:	4b72      	ldr	r3, [pc, #456]	; (8005648 <loadConfigInEeprom+0x298>)
 800547e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fad0 	bl	8005a28 <eep_read_word>
 8005488:	4603      	mov	r3, r0
 800548a:	461a      	mov	r2, r3
 800548c:	4b6e      	ldr	r3, [pc, #440]	; (8005648 <loadConfigInEeprom+0x298>)
 800548e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	bomTron.Tset=khuayMau.doRongXung.value/10;
 8005492:	4b6d      	ldr	r3, [pc, #436]	; (8005648 <loadConfigInEeprom+0x298>)
 8005494:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005498:	4a70      	ldr	r2, [pc, #448]	; (800565c <loadConfigInEeprom+0x2ac>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	08db      	lsrs	r3, r3, #3
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	4b67      	ldr	r3, [pc, #412]	; (8005644 <loadConfigInEeprom+0x294>)
 80054a6:	711a      	strb	r2, [r3, #4]
	bomTron.countT=0;
 80054a8:	4b66      	ldr	r3, [pc, #408]	; (8005644 <loadConfigInEeprom+0x294>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	70da      	strb	r2, [r3, #3]

	TimerKhuayMau_SetFulseUs(khuayMau.doRongXung.value);
 80054ae:	4b66      	ldr	r3, [pc, #408]	; (8005648 <loadConfigInEeprom+0x298>)
 80054b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fa39 	bl	800592c <TimerKhuayMau_SetFulseUs>

	khuayMau.levelThap.address=28;
 80054ba:	4b63      	ldr	r3, [pc, #396]	; (8005648 <loadConfigInEeprom+0x298>)
 80054bc:	221c      	movs	r2, #28
 80054be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	khuayMau.levelTrungBinh.address=30;
 80054c2:	4b61      	ldr	r3, [pc, #388]	; (8005648 <loadConfigInEeprom+0x298>)
 80054c4:	221e      	movs	r2, #30
 80054c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	khuayMau.levelCao.address=32;
 80054ca:	4b5f      	ldr	r3, [pc, #380]	; (8005648 <loadConfigInEeprom+0x298>)
 80054cc:	2220      	movs	r2, #32
 80054ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	//tốc độ khuấy màu
	//level thấp
	khuayMau.levelThap.value=eep_read_word(khuayMau.levelThap.address);
 80054d2:	4b5d      	ldr	r3, [pc, #372]	; (8005648 <loadConfigInEeprom+0x298>)
 80054d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 faa5 	bl	8005a28 <eep_read_word>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
 80054e2:	4b59      	ldr	r3, [pc, #356]	; (8005648 <loadConfigInEeprom+0x298>)
 80054e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	if(khuayMau.levelThap.value>100)
 80054e8:	4b57      	ldr	r3, [pc, #348]	; (8005648 <loadConfigInEeprom+0x298>)
 80054ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d90d      	bls.n	800550e <loadConfigInEeprom+0x15e>
	{
		khuayMau.levelThap.value=10;
 80054f2:	4b55      	ldr	r3, [pc, #340]	; (8005648 <loadConfigInEeprom+0x298>)
 80054f4:	220a      	movs	r2, #10
 80054f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		eep_write_word(khuayMau.levelThap.address,khuayMau.levelThap.value);
 80054fa:	4b53      	ldr	r3, [pc, #332]	; (8005648 <loadConfigInEeprom+0x298>)
 80054fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005500:	4a51      	ldr	r2, [pc, #324]	; (8005648 <loadConfigInEeprom+0x298>)
 8005502:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8005506:	4611      	mov	r1, r2
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fa5f 	bl	80059cc <eep_write_word>
	}
	//level trung bình
	khuayMau.levelTrungBinh.value=eep_read_word(khuayMau.levelTrungBinh.address);
 800550e:	4b4e      	ldr	r3, [pc, #312]	; (8005648 <loadConfigInEeprom+0x298>)
 8005510:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fa87 	bl	8005a28 <eep_read_word>
 800551a:	4603      	mov	r3, r0
 800551c:	461a      	mov	r2, r3
 800551e:	4b4a      	ldr	r3, [pc, #296]	; (8005648 <loadConfigInEeprom+0x298>)
 8005520:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	if(khuayMau.levelTrungBinh.value>100)
 8005524:	4b48      	ldr	r3, [pc, #288]	; (8005648 <loadConfigInEeprom+0x298>)
 8005526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800552a:	2b64      	cmp	r3, #100	; 0x64
 800552c:	d90d      	bls.n	800554a <loadConfigInEeprom+0x19a>
	{
		khuayMau.levelTrungBinh.value=5;
 800552e:	4b46      	ldr	r3, [pc, #280]	; (8005648 <loadConfigInEeprom+0x298>)
 8005530:	2205      	movs	r2, #5
 8005532:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		eep_write_word(khuayMau.levelTrungBinh.address,khuayMau.levelTrungBinh.value);
 8005536:	4b44      	ldr	r3, [pc, #272]	; (8005648 <loadConfigInEeprom+0x298>)
 8005538:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800553c:	4a42      	ldr	r2, [pc, #264]	; (8005648 <loadConfigInEeprom+0x298>)
 800553e:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 8005542:	4611      	mov	r1, r2
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fa41 	bl	80059cc <eep_write_word>
	}
	//level cao
	khuayMau.levelCao.value=eep_read_word(khuayMau.levelCao.address);
 800554a:	4b3f      	ldr	r3, [pc, #252]	; (8005648 <loadConfigInEeprom+0x298>)
 800554c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fa69 	bl	8005a28 <eep_read_word>
 8005556:	4603      	mov	r3, r0
 8005558:	461a      	mov	r2, r3
 800555a:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <loadConfigInEeprom+0x298>)
 800555c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	if(khuayMau.levelCao.value>100)
 8005560:	4b39      	ldr	r3, [pc, #228]	; (8005648 <loadConfigInEeprom+0x298>)
 8005562:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8005566:	2b64      	cmp	r3, #100	; 0x64
 8005568:	d90d      	bls.n	8005586 <loadConfigInEeprom+0x1d6>
	{
		khuayMau.levelCao.value=1;
 800556a:	4b37      	ldr	r3, [pc, #220]	; (8005648 <loadConfigInEeprom+0x298>)
 800556c:	2201      	movs	r2, #1
 800556e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		eep_write_word(khuayMau.levelCao.address,khuayMau.levelCao.value);
 8005572:	4b35      	ldr	r3, [pc, #212]	; (8005648 <loadConfigInEeprom+0x298>)
 8005574:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005578:	4a33      	ldr	r2, [pc, #204]	; (8005648 <loadConfigInEeprom+0x298>)
 800557a:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 800557e:	4611      	mov	r1, r2
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fa23 	bl	80059cc <eep_write_word>
	}
	if(khuayMau.tocDoKhuayMau.value==THAP) bomTron.slowLevel=khuayMau.levelThap.value;
 8005586:	4b30      	ldr	r3, [pc, #192]	; (8005648 <loadConfigInEeprom+0x298>)
 8005588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800558c:	2b01      	cmp	r3, #1
 800558e:	d106      	bne.n	800559e <loadConfigInEeprom+0x1ee>
 8005590:	4b2d      	ldr	r3, [pc, #180]	; (8005648 <loadConfigInEeprom+0x298>)
 8005592:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005596:	b2da      	uxtb	r2, r3
 8005598:	4b2a      	ldr	r3, [pc, #168]	; (8005644 <loadConfigInEeprom+0x294>)
 800559a:	705a      	strb	r2, [r3, #1]
 800559c:	e016      	b.n	80055cc <loadConfigInEeprom+0x21c>
	else if(khuayMau.tocDoKhuayMau.value==TRUNGBINH) bomTron.slowLevel=khuayMau.levelTrungBinh.value;
 800559e:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <loadConfigInEeprom+0x298>)
 80055a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d106      	bne.n	80055b6 <loadConfigInEeprom+0x206>
 80055a8:	4b27      	ldr	r3, [pc, #156]	; (8005648 <loadConfigInEeprom+0x298>)
 80055aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	4b24      	ldr	r3, [pc, #144]	; (8005644 <loadConfigInEeprom+0x294>)
 80055b2:	705a      	strb	r2, [r3, #1]
 80055b4:	e00a      	b.n	80055cc <loadConfigInEeprom+0x21c>
	else if(khuayMau.tocDoKhuayMau.value==CAO) bomTron.slowLevel=khuayMau.levelCao.value;
 80055b6:	4b24      	ldr	r3, [pc, #144]	; (8005648 <loadConfigInEeprom+0x298>)
 80055b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d105      	bne.n	80055cc <loadConfigInEeprom+0x21c>
 80055c0:	4b21      	ldr	r3, [pc, #132]	; (8005648 <loadConfigInEeprom+0x298>)
 80055c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <loadConfigInEeprom+0x294>)
 80055ca:	705a      	strb	r2, [r3, #1]
//	rs232_print("khuayMau.levelThap.value=%d \r\n",khuayMau.levelThap.value);
//	rs232_print("khuayMau.levelTrungBinh.value=%d \r\n",khuayMau.levelTrungBinh.value);
//	rs232_print("khuayMau.levelCao.value=%d \r\n",khuayMau.levelCao.value);
//	rs232_print("khuayMau.levelCao.address=%d \r\n",khuayMau.levelCao.address);
    /*******************************************************************************************/
	HAL_Delay(50);
 80055cc:	2032      	movs	r0, #50	; 0x32
 80055ce:	f000 fb15 	bl	8005bfc <HAL_Delay>
	printf("load config ton \n\r");
 80055d2:	4823      	ldr	r0, [pc, #140]	; (8005660 <loadConfigInEeprom+0x2b0>)
 80055d4:	f004 feae 	bl	800a334 <iprintf>
	for(int i=0;i<16;i++)
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e026      	b.n	800562c <loadConfigInEeprom+0x27c>
	{
			uint16_t data= {0};
 80055de:	2300      	movs	r3, #0
 80055e0:	813b      	strh	r3, [r7, #8]
			data = eep_read_word(200+i*2);
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	3364      	adds	r3, #100	; 0x64
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fa1b 	bl	8005a28 <eep_read_word>
 80055f2:	4603      	mov	r3, r0
 80055f4:	813b      	strh	r3, [r7, #8]
			bomMau[i].Ton = data;
 80055f6:	491b      	ldr	r1, [pc, #108]	; (8005664 <loadConfigInEeprom+0x2b4>)
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4613      	mov	r3, r2
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	3328      	adds	r3, #40	; 0x28
 8005606:	893a      	ldrh	r2, [r7, #8]
 8005608:	801a      	strh	r2, [r3, #0]
			printf("bomMau[%d]=%d", i, bomMau[i].Ton);
 800560a:	4916      	ldr	r1, [pc, #88]	; (8005664 <loadConfigInEeprom+0x2b4>)
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4613      	mov	r3, r2
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3328      	adds	r3, #40	; 0x28
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	6979      	ldr	r1, [r7, #20]
 8005620:	4811      	ldr	r0, [pc, #68]	; (8005668 <loadConfigInEeprom+0x2b8>)
 8005622:	f004 fe87 	bl	800a334 <iprintf>
	for(int i=0;i<16;i++)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	3301      	adds	r3, #1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b0f      	cmp	r3, #15
 8005630:	ddd5      	ble.n	80055de <loadConfigInEeprom+0x22e>
	}
	printf("\n\r");
 8005632:	480e      	ldr	r0, [pc, #56]	; (800566c <loadConfigInEeprom+0x2bc>)
 8005634:	f004 fe7e 	bl	800a334 <iprintf>


	HAL_Delay(50);
 8005638:	2032      	movs	r0, #50	; 0x32
 800563a:	f000 fadf 	bl	8005bfc <HAL_Delay>
	//hẹn giờ khuấy màu -- 100- 186
	for (int i = 0; i < 10; i++) {
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	e057      	b.n	80056f4 <loadConfigInEeprom+0x344>
 8005644:	2000110c 	.word	0x2000110c
 8005648:	2000023c 	.word	0x2000023c
 800564c:	200002a8 	.word	0x200002a8
 8005650:	20000238 	.word	0x20000238
 8005654:	200002aa 	.word	0x200002aa
 8005658:	20001112 	.word	0x20001112
 800565c:	cccccccd 	.word	0xcccccccd
 8005660:	0800f2e0 	.word	0x0800f2e0
 8005664:	20000ccc 	.word	0x20000ccc
 8005668:	0800f2f4 	.word	0x0800f2f4
 800566c:	0800f304 	.word	0x0800f304
		timeAlarm[i].addr.gio = 100 + 8 * i;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	b29b      	uxth	r3, r3
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	b29b      	uxth	r3, r3
 8005678:	3364      	adds	r3, #100	; 0x64
 800567a:	b298      	uxth	r0, r3
 800567c:	4988      	ldr	r1, [pc, #544]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	3310      	adds	r3, #16
 800568c:	4602      	mov	r2, r0
 800568e:	801a      	strh	r2, [r3, #0]
		timeAlarm[i].addr.phut = 100 + 8 * i + 2;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	b29b      	uxth	r3, r3
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	b29b      	uxth	r3, r3
 8005698:	3366      	adds	r3, #102	; 0x66
 800569a:	b298      	uxth	r0, r3
 800569c:	4980      	ldr	r1, [pc, #512]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4613      	mov	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	3312      	adds	r3, #18
 80056ac:	4602      	mov	r2, r0
 80056ae:	801a      	strh	r2, [r3, #0]
		timeAlarm[i].addr.time = 100 + 8 * i + 4;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	330d      	adds	r3, #13
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	b298      	uxth	r0, r3
 80056ba:	4979      	ldr	r1, [pc, #484]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4613      	mov	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	3316      	adds	r3, #22
 80056ca:	4602      	mov	r2, r0
 80056cc:	801a      	strh	r2, [r3, #0]
		timeAlarm[i].addr.en = 100 + 8 * i + 6;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	336a      	adds	r3, #106	; 0x6a
 80056d8:	b298      	uxth	r0, r3
 80056da:	4971      	ldr	r1, [pc, #452]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	3318      	adds	r3, #24
 80056ea:	4602      	mov	r2, r0
 80056ec:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 10; i++) {
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	3301      	adds	r3, #1
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b09      	cmp	r3, #9
 80056f8:	ddba      	ble.n	8005670 <loadConfigInEeprom+0x2c0>
		//rs232_print("addr.gio=%d addr.phut=%d addr.time=%d addr.en=%d\n",timeAlarm[i].addr.gio,timeAlarm[i].addr.phut,timeAlarm[i].addr.time,timeAlarm[i].addr.en);
	}

	/* load time setting alarmmmm */
	printf("...............readback alarm when 121023 ...............\r\n");
 80056fa:	486a      	ldr	r0, [pc, #424]	; (80058a4 <loadConfigInEeprom+0x4f4>)
 80056fc:	f004 fe88 	bl	800a410 <puts>
	for(int i=0;i<10;i++)
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e0c0      	b.n	8005888 <loadConfigInEeprom+0x4d8>
	{
		uint16_t data[4]= {0};
 8005706:	463b      	mov	r3, r7
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	605a      	str	r2, [r3, #4]

		data[0] = eep_read_word(timeAlarm[i].addr.gio);
 800570e:	4964      	ldr	r1, [pc, #400]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4613      	mov	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	3310      	adds	r3, #16
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f981 	bl	8005a28 <eep_read_word>
 8005726:	4603      	mov	r3, r0
 8005728:	803b      	strh	r3, [r7, #0]
		data[1] = eep_read_word(timeAlarm[i].addr.phut);
 800572a:	495d      	ldr	r1, [pc, #372]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4613      	mov	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3312      	adds	r3, #18
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 f973 	bl	8005a28 <eep_read_word>
 8005742:	4603      	mov	r3, r0
 8005744:	807b      	strh	r3, [r7, #2]
		data[2] = eep_read_word(timeAlarm[i].addr.time);
 8005746:	4956      	ldr	r1, [pc, #344]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4613      	mov	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	3316      	adds	r3, #22
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f965 	bl	8005a28 <eep_read_word>
 800575e:	4603      	mov	r3, r0
 8005760:	80bb      	strh	r3, [r7, #4]
		data[3] = eep_read_word(timeAlarm[i].addr.en);
 8005762:	494f      	ldr	r1, [pc, #316]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	3318      	adds	r3, #24
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 f957 	bl	8005a28 <eep_read_word>
 800577a:	4603      	mov	r3, r0
 800577c:	80fb      	strh	r3, [r7, #6]

		timeAlarm[i].gio  = data[0];
 800577e:	883b      	ldrh	r3, [r7, #0]
 8005780:	b2d8      	uxtb	r0, r3
 8005782:	4947      	ldr	r1, [pc, #284]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4613      	mov	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	4602      	mov	r2, r0
 8005792:	701a      	strb	r2, [r3, #0]
		timeAlarm[i].phut = data[1];
 8005794:	887b      	ldrh	r3, [r7, #2]
 8005796:	b2d8      	uxtb	r0, r3
 8005798:	4941      	ldr	r1, [pc, #260]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	3301      	adds	r3, #1
 80057a8:	4602      	mov	r2, r0
 80057aa:	701a      	strb	r2, [r3, #0]
		timeAlarm[i].time = data[2];
 80057ac:	88bb      	ldrh	r3, [r7, #4]
 80057ae:	b2d8      	uxtb	r0, r3
 80057b0:	493b      	ldr	r1, [pc, #236]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	3304      	adds	r3, #4
 80057c0:	4602      	mov	r2, r0
 80057c2:	701a      	strb	r2, [r3, #0]
		timeAlarm[i].en   = data[3];
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	b2d8      	uxtb	r0, r3
 80057c8:	4935      	ldr	r1, [pc, #212]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	1a9b      	subs	r3, r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	3303      	adds	r3, #3
 80057d8:	4602      	mov	r2, r0
 80057da:	701a      	strb	r2, [r3, #0]

		timeAlarm[i].time_in_sec = timeAlarm[i].gio* 3600 + timeAlarm[i].phut*60;
 80057dc:	4930      	ldr	r1, [pc, #192]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4613      	mov	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	1a9b      	subs	r3, r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80057f2:	fb03 f102 	mul.w	r1, r3, r2
 80057f6:	482a      	ldr	r0, [pc, #168]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4613      	mov	r3, r2
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4403      	add	r3, r0
 8005804:	3301      	adds	r3, #1
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	4613      	mov	r3, r2
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	4618      	mov	r0, r3
 8005816:	4922      	ldr	r1, [pc, #136]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4613      	mov	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	1a9b      	subs	r3, r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	330c      	adds	r3, #12
 8005826:	6018      	str	r0, [r3, #0]
		printf("gio:%d phut:%d interval: %d state:%d \r\n", timeAlarm[i].gio, timeAlarm[i].phut, timeAlarm[i].time , timeAlarm[i].en);
 8005828:	491d      	ldr	r1, [pc, #116]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4613      	mov	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	4919      	ldr	r1, [pc, #100]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4613      	mov	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	3301      	adds	r3, #1
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	461c      	mov	r4, r3
 800584e:	4914      	ldr	r1, [pc, #80]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4613      	mov	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	3304      	adds	r3, #4
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	461d      	mov	r5, r3
 8005862:	490f      	ldr	r1, [pc, #60]	; (80058a0 <loadConfigInEeprom+0x4f0>)
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	440b      	add	r3, r1
 8005870:	3303      	adds	r3, #3
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	462b      	mov	r3, r5
 8005878:	4622      	mov	r2, r4
 800587a:	4601      	mov	r1, r0
 800587c:	480a      	ldr	r0, [pc, #40]	; (80058a8 <loadConfigInEeprom+0x4f8>)
 800587e:	f004 fd59 	bl	800a334 <iprintf>
	for(int i=0;i<10;i++)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3301      	adds	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b09      	cmp	r3, #9
 800588c:	f77f af3b 	ble.w	8005706 <loadConfigInEeprom+0x356>
	}
	HAL_Delay(50);
 8005890:	2032      	movs	r0, #50	; 0x32
 8005892:	f000 f9b3 	bl	8005bfc <HAL_Delay>

	/** load config Ton for 16P PWM **/


}
 8005896:	bf00      	nop
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bdb0      	pop	{r4, r5, r7, pc}
 800589e:	bf00      	nop
 80058a0:	2000113c 	.word	0x2000113c
 80058a4:	0800f308 	.word	0x0800f308
 80058a8:	0800f344 	.word	0x0800f344

080058ac <dongNapHandle>:
	HAL_TIM_Base_Start_IT(&htim5);

}

void dongNapHandle()
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 80058b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058b4:	4802      	ldr	r0, [pc, #8]	; (80058c0 <dongNapHandle+0x14>)
 80058b6:	f000 fdd8 	bl	800646a <HAL_GPIO_TogglePin>
}
 80058ba:	bf00      	nop
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40011000 	.word	0x40011000

080058c4 <TimerBomMau_SetFulseUs>:
 *  prescaler: 71 + 1 -> timerClk = 1.000.000hz = 1Mhz = 1us
 *  period: value = value * 1us.
 *  note:  50 < Value < 400 -> motor stable
 */
void TimerBomMau_SetFulseUs(uint16_t value)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	80fb      	strh	r3, [r7, #6]

	printf("update timer bom mau -> %d us \r\n", value);
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	4619      	mov	r1, r3
 80058d2:	4813      	ldr	r0, [pc, #76]	; (8005920 <TimerBomMau_SetFulseUs+0x5c>)
 80058d4:	f004 fd2e 	bl	800a334 <iprintf>
	HAL_TIM_Base_Stop_IT(&htim3);
 80058d8:	4812      	ldr	r0, [pc, #72]	; (8005924 <TimerBomMau_SetFulseUs+0x60>)
 80058da:	f002 fbd5 	bl	8008088 <HAL_TIM_Base_Stop_IT>
	htim3.Instance = TIM3;
 80058de:	4b11      	ldr	r3, [pc, #68]	; (8005924 <TimerBomMau_SetFulseUs+0x60>)
 80058e0:	4a11      	ldr	r2, [pc, #68]	; (8005928 <TimerBomMau_SetFulseUs+0x64>)
 80058e2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 71;
 80058e4:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <TimerBomMau_SetFulseUs+0x60>)
 80058e6:	2247      	movs	r2, #71	; 0x47
 80058e8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ea:	4b0e      	ldr	r3, [pc, #56]	; (8005924 <TimerBomMau_SetFulseUs+0x60>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = value-1;
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	461a      	mov	r2, r3
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <TimerBomMau_SetFulseUs+0x60>)
 80058f8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058fa:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <TimerBomMau_SetFulseUs+0x60>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005900:	4b08      	ldr	r3, [pc, #32]	; (8005924 <TimerBomMau_SetFulseUs+0x60>)
 8005902:	2280      	movs	r2, #128	; 0x80
 8005904:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005906:	4807      	ldr	r0, [pc, #28]	; (8005924 <TimerBomMau_SetFulseUs+0x60>)
 8005908:	f002 fae8 	bl	8007edc <HAL_TIM_Base_Init>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <TimerBomMau_SetFulseUs+0x52>
	{
		Error_Handler();
 8005912:	f7fc f881 	bl	8001a18 <Error_Handler>
	}
	//HAL_TIM_Base_Start_IT(&htim3);
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	0800f36c 	.word	0x0800f36c
 8005924:	200009f4 	.word	0x200009f4
 8005928:	40000400 	.word	0x40000400

0800592c <TimerKhuayMau_SetFulseUs>:


void TimerKhuayMau_SetFulseUs(uint16_t value)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	80fb      	strh	r3, [r7, #6]
	printf("update timer tron -> %d us \r\n", value);
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	4619      	mov	r1, r3
 800593a:	4813      	ldr	r0, [pc, #76]	; (8005988 <TimerKhuayMau_SetFulseUs+0x5c>)
 800593c:	f004 fcfa 	bl	800a334 <iprintf>
	HAL_TIM_Base_Stop_IT(&htim4);
 8005940:	4812      	ldr	r0, [pc, #72]	; (800598c <TimerKhuayMau_SetFulseUs+0x60>)
 8005942:	f002 fba1 	bl	8008088 <HAL_TIM_Base_Stop_IT>
	htim4.Instance = TIM4;
 8005946:	4b11      	ldr	r3, [pc, #68]	; (800598c <TimerKhuayMau_SetFulseUs+0x60>)
 8005948:	4a11      	ldr	r2, [pc, #68]	; (8005990 <TimerKhuayMau_SetFulseUs+0x64>)
 800594a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 71;
 800594c:	4b0f      	ldr	r3, [pc, #60]	; (800598c <TimerKhuayMau_SetFulseUs+0x60>)
 800594e:	2247      	movs	r2, #71	; 0x47
 8005950:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005952:	4b0e      	ldr	r3, [pc, #56]	; (800598c <TimerKhuayMau_SetFulseUs+0x60>)
 8005954:	2200      	movs	r2, #0
 8005956:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = value - 1;
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	3b01      	subs	r3, #1
 800595c:	461a      	mov	r2, r3
 800595e:	4b0b      	ldr	r3, [pc, #44]	; (800598c <TimerKhuayMau_SetFulseUs+0x60>)
 8005960:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <TimerKhuayMau_SetFulseUs+0x60>)
 8005964:	2200      	movs	r2, #0
 8005966:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <TimerKhuayMau_SetFulseUs+0x60>)
 800596a:	2280      	movs	r2, #128	; 0x80
 800596c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800596e:	4807      	ldr	r0, [pc, #28]	; (800598c <TimerKhuayMau_SetFulseUs+0x60>)
 8005970:	f002 fab4 	bl	8007edc <HAL_TIM_Base_Init>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <TimerKhuayMau_SetFulseUs+0x52>
	{
		Error_Handler();
 800597a:	f7fc f84d 	bl	8001a18 <Error_Handler>
	}
	//HAL_TIM_Base_Start_IT(&htim4);
}
 800597e:	bf00      	nop
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	0800f390 	.word	0x0800f390
 800598c:	20000a3c 	.word	0x20000a3c
 8005990:	40000800 	.word	0x40000800

08005994 <getAlarm_RuaDauPhun>:

/// rua dau phun //
uint8_t getAlarm_RuaDauPhun(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
	return ruaDauPhun_Alarm;
 8005998:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <getAlarm_RuaDauPhun+0x14>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	b2db      	uxtb	r3, r3
}
 800599e:	4618      	mov	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20001254 	.word	0x20001254

080059ac <setAlarm_RuaDauPhun>:
void setAlarm_RuaDauPhun(uint8_t value)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	71fb      	strb	r3, [r7, #7]
	ruaDauPhun_Alarm = value;
 80059b6:	4a04      	ldr	r2, [pc, #16]	; (80059c8 <setAlarm_RuaDauPhun+0x1c>)
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	7013      	strb	r3, [r2, #0]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	20001254 	.word	0x20001254

080059cc <eep_write_word>:
	return buf[0];
}


uint8_t eep_write_word (uint16_t address, uint16_t data)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af04      	add	r7, sp, #16
 80059d2:	4603      	mov	r3, r0
 80059d4:	460a      	mov	r2, r1
 80059d6:	80fb      	strh	r3, [r7, #6]
 80059d8:	4613      	mov	r3, r2
 80059da:	80bb      	strh	r3, [r7, #4]
	char result=0;
 80059dc:	2300      	movs	r3, #0
 80059de:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0]=(data&0xff00)>>8;
 80059e0:	88bb      	ldrh	r3, [r7, #4]
 80059e2:	0a1b      	lsrs	r3, r3, #8
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	733b      	strb	r3, [r7, #12]
	buf[1]=data&0xff;
 80059ea:	88bb      	ldrh	r3, [r7, #4]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	737b      	strb	r3, [r7, #13]
	result = HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, address*2, I2C_MEMADD_SIZE_16BIT, buf, 2, 100);  // write the data to the EEPROM
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	2364      	movs	r3, #100	; 0x64
 80059f8:	9302      	str	r3, [sp, #8]
 80059fa:	2302      	movs	r3, #2
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	f107 030c 	add.w	r3, r7, #12
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2310      	movs	r3, #16
 8005a06:	21a0      	movs	r1, #160	; 0xa0
 8005a08:	4806      	ldr	r0, [pc, #24]	; (8005a24 <eep_write_word+0x58>)
 8005a0a:	f000 fe8b 	bl	8006724 <HAL_I2C_Mem_Write>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(T_DELAY);  // Write cycle delay (5ms)
 8005a12:	200a      	movs	r0, #10
 8005a14:	f000 f8f2 	bl	8005bfc <HAL_Delay>
	return result;
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000954 	.word	0x20000954

08005a28 <eep_read_word>:

uint16_t eep_read_word (uint16_t address)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af04      	add	r7, sp, #16
 8005a2e:	4603      	mov	r3, r0
 8005a30:	80fb      	strh	r3, [r7, #6]
	unsigned int result=0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
	uint8_t buf[2]={0};
 8005a36:	2300      	movs	r3, #0
 8005a38:	813b      	strh	r3, [r7, #8]
	result = HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, address*2, I2C_MEMADD_SIZE_16BIT, buf, 2, 100);
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	2364      	movs	r3, #100	; 0x64
 8005a42:	9302      	str	r3, [sp, #8]
 8005a44:	2302      	movs	r3, #2
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	f107 0308 	add.w	r3, r7, #8
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	2310      	movs	r3, #16
 8005a50:	21a0      	movs	r1, #160	; 0xa0
 8005a52:	4809      	ldr	r0, [pc, #36]	; (8005a78 <eep_read_word+0x50>)
 8005a54:	f000 ff60 	bl	8006918 <HAL_I2C_Mem_Read>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	60fb      	str	r3, [r7, #12]
	result=(buf[0]<<8)|buf[1];
 8005a5c:	7a3b      	ldrb	r3, [r7, #8]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	7a7a      	ldrb	r2, [r7, #9]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]
	HAL_Delay (T_DELAY);
 8005a66:	200a      	movs	r0, #10
 8005a68:	f000 f8c8 	bl	8005bfc <HAL_Delay>
	return result;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	b29b      	uxth	r3, r3
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000954 	.word	0x20000954

08005a7c <trim>:


//----------------------------------------------------

bool trim(char *source,char *des,char key_start[30],char key_stop[30])
{
 8005a7c:	b590      	push	{r4, r7, lr}
 8005a7e:	b089      	sub	sp, #36	; 0x24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
    unsigned int start_id=0,stop_id=0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
    if(strstr(source,key_start)==0) return false;
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f004 fe29 	bl	800a6ec <strstr>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <trim+0x28>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e044      	b.n	8005b2e <trim+0xb2>
    if(strstr(source,key_stop)==0) return false;
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f004 fe20 	bl	800a6ec <strstr>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <trim+0x3a>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e03b      	b.n	8005b2e <trim+0xb2>
    memset(des,0,strlen(des));
 8005ab6:	68b8      	ldr	r0, [r7, #8]
 8005ab8:	f7fa fbb6 	bl	8000228 <strlen>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	68b8      	ldr	r0, [r7, #8]
 8005ac4:	f004 fe0a 	bl	800a6dc <memset>
    start_id=strstr(source,key_start)+strlen(key_start)-source;
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f004 fe0e 	bl	800a6ec <strstr>
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fa fba8 	bl	8000228 <strlen>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	18e2      	adds	r2, r4, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	61bb      	str	r3, [r7, #24]
    stop_id=strstr(source+start_id,key_stop)-source;
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f004 fdfe 	bl	800a6ec <strstr>
 8005af0:	4602      	mov	r2, r0
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	617b      	str	r3, [r7, #20]
    //printf("start_id: %d\n",start_id);
    //printf("stop_id: %d\n",stop_id);
    if(start_id>stop_id) return false;
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d901      	bls.n	8005b04 <trim+0x88>
 8005b00:	2300      	movs	r3, #0
 8005b02:	e014      	b.n	8005b2e <trim+0xb2>
    for(int i=start_id;i<stop_id;i++)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e00c      	b.n	8005b24 <trim+0xa8>
    	des[i-start_id]=source[i];
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	441a      	add	r2, r3
 8005b10:	69f9      	ldr	r1, [r7, #28]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	1acb      	subs	r3, r1, r3
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	440b      	add	r3, r1
 8005b1a:	7812      	ldrb	r2, [r2, #0]
 8005b1c:	701a      	strb	r2, [r3, #0]
    for(int i=start_id;i<stop_id;i++)
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3301      	adds	r3, #1
 8005b22:	61fb      	str	r3, [r7, #28]
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d8ee      	bhi.n	8005b0a <trim+0x8e>
    return true;
 8005b2c:	2301      	movs	r3, #1
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3724      	adds	r7, #36	; 0x24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd90      	pop	{r4, r7, pc}
	...

08005b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b3c:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <HAL_Init+0x28>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a07      	ldr	r2, [pc, #28]	; (8005b60 <HAL_Init+0x28>)
 8005b42:	f043 0310 	orr.w	r3, r3, #16
 8005b46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b48:	2003      	movs	r0, #3
 8005b4a:	f000 f947 	bl	8005ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b4e:	200f      	movs	r0, #15
 8005b50:	f000 f808 	bl	8005b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b54:	f7fb ff66 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	40022000 	.word	0x40022000

08005b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b6c:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <HAL_InitTick+0x54>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <HAL_InitTick+0x58>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	4619      	mov	r1, r3
 8005b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f95f 	bl	8005e46 <HAL_SYSTICK_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e00e      	b.n	8005bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b0f      	cmp	r3, #15
 8005b96:	d80a      	bhi.n	8005bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	f000 f927 	bl	8005df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ba4:	4a06      	ldr	r2, [pc, #24]	; (8005bc0 <HAL_InitTick+0x5c>)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e000      	b.n	8005bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20000000 	.word	0x20000000
 8005bbc:	200002b4 	.word	0x200002b4
 8005bc0:	200002b0 	.word	0x200002b0

08005bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_IncTick+0x1c>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <HAL_IncTick+0x20>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	4a03      	ldr	r2, [pc, #12]	; (8005be4 <HAL_IncTick+0x20>)
 8005bd6:	6013      	str	r3, [r2, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr
 8005be0:	200002b4 	.word	0x200002b4
 8005be4:	20001378 	.word	0x20001378

08005be8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  return uwTick;
 8005bec:	4b02      	ldr	r3, [pc, #8]	; (8005bf8 <HAL_GetTick+0x10>)
 8005bee:	681b      	ldr	r3, [r3, #0]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	20001378 	.word	0x20001378

08005bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c04:	f7ff fff0 	bl	8005be8 <HAL_GetTick>
 8005c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d005      	beq.n	8005c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c16:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <HAL_Delay+0x44>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c22:	bf00      	nop
 8005c24:	f7ff ffe0 	bl	8005be8 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d8f7      	bhi.n	8005c24 <HAL_Delay+0x28>
  {
  }
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	200002b4 	.word	0x200002b4

08005c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <__NVIC_SetPriorityGrouping+0x44>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c60:	4013      	ands	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c76:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <__NVIC_SetPriorityGrouping+0x44>)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	60d3      	str	r3, [r2, #12]
}
 8005c7c:	bf00      	nop
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	e000ed00 	.word	0xe000ed00

08005c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c90:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	f003 0307 	and.w	r3, r3, #7
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	e000ed00 	.word	0xe000ed00

08005ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	db0b      	blt.n	8005cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	f003 021f 	and.w	r2, r3, #31
 8005cc0:	4906      	ldr	r1, [pc, #24]	; (8005cdc <__NVIC_EnableIRQ+0x34>)
 8005cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	2001      	movs	r0, #1
 8005cca:	fa00 f202 	lsl.w	r2, r0, r2
 8005cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr
 8005cdc:	e000e100 	.word	0xe000e100

08005ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	6039      	str	r1, [r7, #0]
 8005cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	db0a      	blt.n	8005d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	490c      	ldr	r1, [pc, #48]	; (8005d2c <__NVIC_SetPriority+0x4c>)
 8005cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfe:	0112      	lsls	r2, r2, #4
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	440b      	add	r3, r1
 8005d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d08:	e00a      	b.n	8005d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4908      	ldr	r1, [pc, #32]	; (8005d30 <__NVIC_SetPriority+0x50>)
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	3b04      	subs	r3, #4
 8005d18:	0112      	lsls	r2, r2, #4
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	761a      	strb	r2, [r3, #24]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	e000e100 	.word	0xe000e100
 8005d30:	e000ed00 	.word	0xe000ed00

08005d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f1c3 0307 	rsb	r3, r3, #7
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	bf28      	it	cs
 8005d52:	2304      	movcs	r3, #4
 8005d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d902      	bls.n	8005d64 <NVIC_EncodePriority+0x30>
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	3b03      	subs	r3, #3
 8005d62:	e000      	b.n	8005d66 <NVIC_EncodePriority+0x32>
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43da      	mvns	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	401a      	ands	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	fa01 f303 	lsl.w	r3, r1, r3
 8005d86:	43d9      	mvns	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d8c:	4313      	orrs	r3, r2
         );
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3724      	adds	r7, #36	; 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005da8:	d301      	bcc.n	8005dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005daa:	2301      	movs	r3, #1
 8005dac:	e00f      	b.n	8005dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dae:	4a0a      	ldr	r2, [pc, #40]	; (8005dd8 <SysTick_Config+0x40>)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005db6:	210f      	movs	r1, #15
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	f7ff ff90 	bl	8005ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dc0:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <SysTick_Config+0x40>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dc6:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <SysTick_Config+0x40>)
 8005dc8:	2207      	movs	r2, #7
 8005dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	e000e010 	.word	0xe000e010

08005ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff ff2d 	bl	8005c44 <__NVIC_SetPriorityGrouping>
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b086      	sub	sp, #24
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	4603      	mov	r3, r0
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
 8005dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e04:	f7ff ff42 	bl	8005c8c <__NVIC_GetPriorityGrouping>
 8005e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	6978      	ldr	r0, [r7, #20]
 8005e10:	f7ff ff90 	bl	8005d34 <NVIC_EncodePriority>
 8005e14:	4602      	mov	r2, r0
 8005e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff ff5f 	bl	8005ce0 <__NVIC_SetPriority>
}
 8005e22:	bf00      	nop
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	4603      	mov	r3, r0
 8005e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff ff35 	bl	8005ca8 <__NVIC_EnableIRQ>
}
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff ffa2 	bl	8005d98 <SysTick_Config>
 8005e54:	4603      	mov	r3, r0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d008      	beq.n	8005e88 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2204      	movs	r2, #4
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e020      	b.n	8005eca <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 020e 	bic.w	r2, r2, #14
 8005e96:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d005      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2204      	movs	r2, #4
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	73fb      	strb	r3, [r7, #15]
 8005ef6:	e0d6      	b.n	80060a6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 020e 	bic.w	r2, r2, #14
 8005f06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b64      	ldr	r3, [pc, #400]	; (80060b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d958      	bls.n	8005fd6 <HAL_DMA_Abort_IT+0x102>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a62      	ldr	r2, [pc, #392]	; (80060b4 <HAL_DMA_Abort_IT+0x1e0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04f      	beq.n	8005fce <HAL_DMA_Abort_IT+0xfa>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a61      	ldr	r2, [pc, #388]	; (80060b8 <HAL_DMA_Abort_IT+0x1e4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d048      	beq.n	8005fca <HAL_DMA_Abort_IT+0xf6>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a5f      	ldr	r2, [pc, #380]	; (80060bc <HAL_DMA_Abort_IT+0x1e8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d040      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xf0>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a5e      	ldr	r2, [pc, #376]	; (80060c0 <HAL_DMA_Abort_IT+0x1ec>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d038      	beq.n	8005fbe <HAL_DMA_Abort_IT+0xea>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a5c      	ldr	r2, [pc, #368]	; (80060c4 <HAL_DMA_Abort_IT+0x1f0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d030      	beq.n	8005fb8 <HAL_DMA_Abort_IT+0xe4>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a5b      	ldr	r2, [pc, #364]	; (80060c8 <HAL_DMA_Abort_IT+0x1f4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d028      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0xde>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a52      	ldr	r2, [pc, #328]	; (80060b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d020      	beq.n	8005fac <HAL_DMA_Abort_IT+0xd8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a57      	ldr	r2, [pc, #348]	; (80060cc <HAL_DMA_Abort_IT+0x1f8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d019      	beq.n	8005fa8 <HAL_DMA_Abort_IT+0xd4>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a55      	ldr	r2, [pc, #340]	; (80060d0 <HAL_DMA_Abort_IT+0x1fc>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d012      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xd0>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a54      	ldr	r2, [pc, #336]	; (80060d4 <HAL_DMA_Abort_IT+0x200>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00a      	beq.n	8005f9e <HAL_DMA_Abort_IT+0xca>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a52      	ldr	r2, [pc, #328]	; (80060d8 <HAL_DMA_Abort_IT+0x204>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d102      	bne.n	8005f98 <HAL_DMA_Abort_IT+0xc4>
 8005f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f96:	e01b      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f9c:	e018      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fa2:	e015      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fa4:	2310      	movs	r3, #16
 8005fa6:	e013      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e011      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fb0:	e00e      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fb6:	e00b      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fbc:	e008      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fc2:	e005      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fc8:	e002      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fca:	2310      	movs	r3, #16
 8005fcc:	e000      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4a42      	ldr	r2, [pc, #264]	; (80060dc <HAL_DMA_Abort_IT+0x208>)
 8005fd2:	6053      	str	r3, [r2, #4]
 8005fd4:	e057      	b.n	8006086 <HAL_DMA_Abort_IT+0x1b2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a36      	ldr	r2, [pc, #216]	; (80060b4 <HAL_DMA_Abort_IT+0x1e0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d04f      	beq.n	8006080 <HAL_DMA_Abort_IT+0x1ac>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a34      	ldr	r2, [pc, #208]	; (80060b8 <HAL_DMA_Abort_IT+0x1e4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d048      	beq.n	800607c <HAL_DMA_Abort_IT+0x1a8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a33      	ldr	r2, [pc, #204]	; (80060bc <HAL_DMA_Abort_IT+0x1e8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d040      	beq.n	8006076 <HAL_DMA_Abort_IT+0x1a2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a31      	ldr	r2, [pc, #196]	; (80060c0 <HAL_DMA_Abort_IT+0x1ec>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d038      	beq.n	8006070 <HAL_DMA_Abort_IT+0x19c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a30      	ldr	r2, [pc, #192]	; (80060c4 <HAL_DMA_Abort_IT+0x1f0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d030      	beq.n	800606a <HAL_DMA_Abort_IT+0x196>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2e      	ldr	r2, [pc, #184]	; (80060c8 <HAL_DMA_Abort_IT+0x1f4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d028      	beq.n	8006064 <HAL_DMA_Abort_IT+0x190>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a26      	ldr	r2, [pc, #152]	; (80060b0 <HAL_DMA_Abort_IT+0x1dc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d020      	beq.n	800605e <HAL_DMA_Abort_IT+0x18a>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a2a      	ldr	r2, [pc, #168]	; (80060cc <HAL_DMA_Abort_IT+0x1f8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d019      	beq.n	800605a <HAL_DMA_Abort_IT+0x186>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a29      	ldr	r2, [pc, #164]	; (80060d0 <HAL_DMA_Abort_IT+0x1fc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d012      	beq.n	8006056 <HAL_DMA_Abort_IT+0x182>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a27      	ldr	r2, [pc, #156]	; (80060d4 <HAL_DMA_Abort_IT+0x200>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00a      	beq.n	8006050 <HAL_DMA_Abort_IT+0x17c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <HAL_DMA_Abort_IT+0x204>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d102      	bne.n	800604a <HAL_DMA_Abort_IT+0x176>
 8006044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006048:	e01b      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 800604a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800604e:	e018      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006054:	e015      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006056:	2310      	movs	r3, #16
 8006058:	e013      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 800605a:	2301      	movs	r3, #1
 800605c:	e011      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 800605e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006062:	e00e      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006064:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006068:	e00b      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 800606a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800606e:	e008      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006074:	e005      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800607a:	e002      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 800607c:	2310      	movs	r3, #16
 800607e:	e000      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006080:	2301      	movs	r3, #1
 8006082:	4a17      	ldr	r2, [pc, #92]	; (80060e0 <HAL_DMA_Abort_IT+0x20c>)
 8006084:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	4798      	blx	r3
    } 
  }
  return status;
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40020080 	.word	0x40020080
 80060b4:	40020008 	.word	0x40020008
 80060b8:	4002001c 	.word	0x4002001c
 80060bc:	40020030 	.word	0x40020030
 80060c0:	40020044 	.word	0x40020044
 80060c4:	40020058 	.word	0x40020058
 80060c8:	4002006c 	.word	0x4002006c
 80060cc:	40020408 	.word	0x40020408
 80060d0:	4002041c 	.word	0x4002041c
 80060d4:	40020430 	.word	0x40020430
 80060d8:	40020444 	.word	0x40020444
 80060dc:	40020400 	.word	0x40020400
 80060e0:	40020000 	.word	0x40020000

080060e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b08b      	sub	sp, #44	; 0x2c
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060ee:	2300      	movs	r3, #0
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80060f2:	2300      	movs	r3, #0
 80060f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060f6:	e179      	b.n	80063ec <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80060f8:	2201      	movs	r2, #1
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	4013      	ands	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	429a      	cmp	r2, r3
 8006112:	f040 8168 	bne.w	80063e6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	4a96      	ldr	r2, [pc, #600]	; (8006374 <HAL_GPIO_Init+0x290>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d05e      	beq.n	80061de <HAL_GPIO_Init+0xfa>
 8006120:	4a94      	ldr	r2, [pc, #592]	; (8006374 <HAL_GPIO_Init+0x290>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d875      	bhi.n	8006212 <HAL_GPIO_Init+0x12e>
 8006126:	4a94      	ldr	r2, [pc, #592]	; (8006378 <HAL_GPIO_Init+0x294>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d058      	beq.n	80061de <HAL_GPIO_Init+0xfa>
 800612c:	4a92      	ldr	r2, [pc, #584]	; (8006378 <HAL_GPIO_Init+0x294>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d86f      	bhi.n	8006212 <HAL_GPIO_Init+0x12e>
 8006132:	4a92      	ldr	r2, [pc, #584]	; (800637c <HAL_GPIO_Init+0x298>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d052      	beq.n	80061de <HAL_GPIO_Init+0xfa>
 8006138:	4a90      	ldr	r2, [pc, #576]	; (800637c <HAL_GPIO_Init+0x298>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d869      	bhi.n	8006212 <HAL_GPIO_Init+0x12e>
 800613e:	4a90      	ldr	r2, [pc, #576]	; (8006380 <HAL_GPIO_Init+0x29c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d04c      	beq.n	80061de <HAL_GPIO_Init+0xfa>
 8006144:	4a8e      	ldr	r2, [pc, #568]	; (8006380 <HAL_GPIO_Init+0x29c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d863      	bhi.n	8006212 <HAL_GPIO_Init+0x12e>
 800614a:	4a8e      	ldr	r2, [pc, #568]	; (8006384 <HAL_GPIO_Init+0x2a0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d046      	beq.n	80061de <HAL_GPIO_Init+0xfa>
 8006150:	4a8c      	ldr	r2, [pc, #560]	; (8006384 <HAL_GPIO_Init+0x2a0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d85d      	bhi.n	8006212 <HAL_GPIO_Init+0x12e>
 8006156:	2b12      	cmp	r3, #18
 8006158:	d82a      	bhi.n	80061b0 <HAL_GPIO_Init+0xcc>
 800615a:	2b12      	cmp	r3, #18
 800615c:	d859      	bhi.n	8006212 <HAL_GPIO_Init+0x12e>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <HAL_GPIO_Init+0x80>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	080061df 	.word	0x080061df
 8006168:	080061b9 	.word	0x080061b9
 800616c:	080061cb 	.word	0x080061cb
 8006170:	0800620d 	.word	0x0800620d
 8006174:	08006213 	.word	0x08006213
 8006178:	08006213 	.word	0x08006213
 800617c:	08006213 	.word	0x08006213
 8006180:	08006213 	.word	0x08006213
 8006184:	08006213 	.word	0x08006213
 8006188:	08006213 	.word	0x08006213
 800618c:	08006213 	.word	0x08006213
 8006190:	08006213 	.word	0x08006213
 8006194:	08006213 	.word	0x08006213
 8006198:	08006213 	.word	0x08006213
 800619c:	08006213 	.word	0x08006213
 80061a0:	08006213 	.word	0x08006213
 80061a4:	08006213 	.word	0x08006213
 80061a8:	080061c1 	.word	0x080061c1
 80061ac:	080061d5 	.word	0x080061d5
 80061b0:	4a75      	ldr	r2, [pc, #468]	; (8006388 <HAL_GPIO_Init+0x2a4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d013      	beq.n	80061de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80061b6:	e02c      	b.n	8006212 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	623b      	str	r3, [r7, #32]
          break;
 80061be:	e029      	b.n	8006214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	3304      	adds	r3, #4
 80061c6:	623b      	str	r3, [r7, #32]
          break;
 80061c8:	e024      	b.n	8006214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	3308      	adds	r3, #8
 80061d0:	623b      	str	r3, [r7, #32]
          break;
 80061d2:	e01f      	b.n	8006214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	330c      	adds	r3, #12
 80061da:	623b      	str	r3, [r7, #32]
          break;
 80061dc:	e01a      	b.n	8006214 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80061e6:	2304      	movs	r3, #4
 80061e8:	623b      	str	r3, [r7, #32]
          break;
 80061ea:	e013      	b.n	8006214 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d105      	bne.n	8006200 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80061f4:	2308      	movs	r3, #8
 80061f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	611a      	str	r2, [r3, #16]
          break;
 80061fe:	e009      	b.n	8006214 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006200:	2308      	movs	r3, #8
 8006202:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	615a      	str	r2, [r3, #20]
          break;
 800620a:	e003      	b.n	8006214 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800620c:	2300      	movs	r3, #0
 800620e:	623b      	str	r3, [r7, #32]
          break;
 8006210:	e000      	b.n	8006214 <HAL_GPIO_Init+0x130>
          break;
 8006212:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2bff      	cmp	r3, #255	; 0xff
 8006218:	d801      	bhi.n	800621e <HAL_GPIO_Init+0x13a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	e001      	b.n	8006222 <HAL_GPIO_Init+0x13e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3304      	adds	r3, #4
 8006222:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2bff      	cmp	r3, #255	; 0xff
 8006228:	d802      	bhi.n	8006230 <HAL_GPIO_Init+0x14c>
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	e002      	b.n	8006236 <HAL_GPIO_Init+0x152>
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	3b08      	subs	r3, #8
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	210f      	movs	r1, #15
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	fa01 f303 	lsl.w	r3, r1, r3
 8006244:	43db      	mvns	r3, r3
 8006246:	401a      	ands	r2, r3
 8006248:	6a39      	ldr	r1, [r7, #32]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	fa01 f303 	lsl.w	r3, r1, r3
 8006250:	431a      	orrs	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80c1 	beq.w	80063e6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006264:	4b49      	ldr	r3, [pc, #292]	; (800638c <HAL_GPIO_Init+0x2a8>)
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	4a48      	ldr	r2, [pc, #288]	; (800638c <HAL_GPIO_Init+0x2a8>)
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	6193      	str	r3, [r2, #24]
 8006270:	4b46      	ldr	r3, [pc, #280]	; (800638c <HAL_GPIO_Init+0x2a8>)
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800627c:	4a44      	ldr	r2, [pc, #272]	; (8006390 <HAL_GPIO_Init+0x2ac>)
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	089b      	lsrs	r3, r3, #2
 8006282:	3302      	adds	r3, #2
 8006284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006288:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	220f      	movs	r2, #15
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4013      	ands	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a3c      	ldr	r2, [pc, #240]	; (8006394 <HAL_GPIO_Init+0x2b0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d01f      	beq.n	80062e8 <HAL_GPIO_Init+0x204>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a3b      	ldr	r2, [pc, #236]	; (8006398 <HAL_GPIO_Init+0x2b4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d019      	beq.n	80062e4 <HAL_GPIO_Init+0x200>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a3a      	ldr	r2, [pc, #232]	; (800639c <HAL_GPIO_Init+0x2b8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d013      	beq.n	80062e0 <HAL_GPIO_Init+0x1fc>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a39      	ldr	r2, [pc, #228]	; (80063a0 <HAL_GPIO_Init+0x2bc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00d      	beq.n	80062dc <HAL_GPIO_Init+0x1f8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a38      	ldr	r2, [pc, #224]	; (80063a4 <HAL_GPIO_Init+0x2c0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d007      	beq.n	80062d8 <HAL_GPIO_Init+0x1f4>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a37      	ldr	r2, [pc, #220]	; (80063a8 <HAL_GPIO_Init+0x2c4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d101      	bne.n	80062d4 <HAL_GPIO_Init+0x1f0>
 80062d0:	2305      	movs	r3, #5
 80062d2:	e00a      	b.n	80062ea <HAL_GPIO_Init+0x206>
 80062d4:	2306      	movs	r3, #6
 80062d6:	e008      	b.n	80062ea <HAL_GPIO_Init+0x206>
 80062d8:	2304      	movs	r3, #4
 80062da:	e006      	b.n	80062ea <HAL_GPIO_Init+0x206>
 80062dc:	2303      	movs	r3, #3
 80062de:	e004      	b.n	80062ea <HAL_GPIO_Init+0x206>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e002      	b.n	80062ea <HAL_GPIO_Init+0x206>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <HAL_GPIO_Init+0x206>
 80062e8:	2300      	movs	r3, #0
 80062ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ec:	f002 0203 	and.w	r2, r2, #3
 80062f0:	0092      	lsls	r2, r2, #2
 80062f2:	4093      	lsls	r3, r2
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80062fa:	4925      	ldr	r1, [pc, #148]	; (8006390 <HAL_GPIO_Init+0x2ac>)
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	089b      	lsrs	r3, r3, #2
 8006300:	3302      	adds	r3, #2
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d006      	beq.n	8006322 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <HAL_GPIO_Init+0x2c8>)
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	4924      	ldr	r1, [pc, #144]	; (80063ac <HAL_GPIO_Init+0x2c8>)
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	4313      	orrs	r3, r2
 800631e:	608b      	str	r3, [r1, #8]
 8006320:	e006      	b.n	8006330 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006322:	4b22      	ldr	r3, [pc, #136]	; (80063ac <HAL_GPIO_Init+0x2c8>)
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	43db      	mvns	r3, r3
 800632a:	4920      	ldr	r1, [pc, #128]	; (80063ac <HAL_GPIO_Init+0x2c8>)
 800632c:	4013      	ands	r3, r2
 800632e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d006      	beq.n	800634a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800633c:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <HAL_GPIO_Init+0x2c8>)
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	491a      	ldr	r1, [pc, #104]	; (80063ac <HAL_GPIO_Init+0x2c8>)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	4313      	orrs	r3, r2
 8006346:	60cb      	str	r3, [r1, #12]
 8006348:	e006      	b.n	8006358 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800634a:	4b18      	ldr	r3, [pc, #96]	; (80063ac <HAL_GPIO_Init+0x2c8>)
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	43db      	mvns	r3, r3
 8006352:	4916      	ldr	r1, [pc, #88]	; (80063ac <HAL_GPIO_Init+0x2c8>)
 8006354:	4013      	ands	r3, r2
 8006356:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d025      	beq.n	80063b0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006364:	4b11      	ldr	r3, [pc, #68]	; (80063ac <HAL_GPIO_Init+0x2c8>)
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	4910      	ldr	r1, [pc, #64]	; (80063ac <HAL_GPIO_Init+0x2c8>)
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	4313      	orrs	r3, r2
 800636e:	604b      	str	r3, [r1, #4]
 8006370:	e025      	b.n	80063be <HAL_GPIO_Init+0x2da>
 8006372:	bf00      	nop
 8006374:	10320000 	.word	0x10320000
 8006378:	10310000 	.word	0x10310000
 800637c:	10220000 	.word	0x10220000
 8006380:	10210000 	.word	0x10210000
 8006384:	10120000 	.word	0x10120000
 8006388:	10110000 	.word	0x10110000
 800638c:	40021000 	.word	0x40021000
 8006390:	40010000 	.word	0x40010000
 8006394:	40010800 	.word	0x40010800
 8006398:	40010c00 	.word	0x40010c00
 800639c:	40011000 	.word	0x40011000
 80063a0:	40011400 	.word	0x40011400
 80063a4:	40011800 	.word	0x40011800
 80063a8:	40011c00 	.word	0x40011c00
 80063ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80063b0:	4b15      	ldr	r3, [pc, #84]	; (8006408 <HAL_GPIO_Init+0x324>)
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	43db      	mvns	r3, r3
 80063b8:	4913      	ldr	r1, [pc, #76]	; (8006408 <HAL_GPIO_Init+0x324>)
 80063ba:	4013      	ands	r3, r2
 80063bc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d006      	beq.n	80063d8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80063ca:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <HAL_GPIO_Init+0x324>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	490e      	ldr	r1, [pc, #56]	; (8006408 <HAL_GPIO_Init+0x324>)
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	600b      	str	r3, [r1, #0]
 80063d6:	e006      	b.n	80063e6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80063d8:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <HAL_GPIO_Init+0x324>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	43db      	mvns	r3, r3
 80063e0:	4909      	ldr	r1, [pc, #36]	; (8006408 <HAL_GPIO_Init+0x324>)
 80063e2:	4013      	ands	r3, r2
 80063e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	3301      	adds	r3, #1
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	fa22 f303 	lsr.w	r3, r2, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f47f ae7e 	bne.w	80060f8 <HAL_GPIO_Init+0x14>
  }
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	372c      	adds	r7, #44	; 0x2c
 8006402:	46bd      	mov	sp, r7
 8006404:	bc80      	pop	{r7}
 8006406:	4770      	bx	lr
 8006408:	40010400 	.word	0x40010400

0800640c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	887b      	ldrh	r3, [r7, #2]
 800641e:	4013      	ands	r3, r2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006424:	2301      	movs	r3, #1
 8006426:	73fb      	strb	r3, [r7, #15]
 8006428:	e001      	b.n	800642e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr

0800643a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	807b      	strh	r3, [r7, #2]
 8006446:	4613      	mov	r3, r2
 8006448:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800644a:	787b      	ldrb	r3, [r7, #1]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006450:	887a      	ldrh	r2, [r7, #2]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006456:	e003      	b.n	8006460 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	041a      	lsls	r2, r3, #16
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	611a      	str	r2, [r3, #16]
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr

0800646a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800647c:	887a      	ldrh	r2, [r7, #2]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4013      	ands	r3, r2
 8006482:	041a      	lsls	r2, r3, #16
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	43d9      	mvns	r1, r3
 8006488:	887b      	ldrh	r3, [r7, #2]
 800648a:	400b      	ands	r3, r1
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	611a      	str	r2, [r3, #16]
}
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e12b      	b.n	8006706 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fb f988 	bl	80017d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2224      	movs	r2, #36	; 0x24
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006500:	f001 fbf0 	bl	8007ce4 <HAL_RCC_GetPCLK1Freq>
 8006504:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	4a81      	ldr	r2, [pc, #516]	; (8006710 <HAL_I2C_Init+0x274>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d807      	bhi.n	8006520 <HAL_I2C_Init+0x84>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a80      	ldr	r2, [pc, #512]	; (8006714 <HAL_I2C_Init+0x278>)
 8006514:	4293      	cmp	r3, r2
 8006516:	bf94      	ite	ls
 8006518:	2301      	movls	r3, #1
 800651a:	2300      	movhi	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	e006      	b.n	800652e <HAL_I2C_Init+0x92>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a7d      	ldr	r2, [pc, #500]	; (8006718 <HAL_I2C_Init+0x27c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	bf94      	ite	ls
 8006528:	2301      	movls	r3, #1
 800652a:	2300      	movhi	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e0e7      	b.n	8006706 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a78      	ldr	r2, [pc, #480]	; (800671c <HAL_I2C_Init+0x280>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	0c9b      	lsrs	r3, r3, #18
 8006540:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	4a6a      	ldr	r2, [pc, #424]	; (8006710 <HAL_I2C_Init+0x274>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d802      	bhi.n	8006570 <HAL_I2C_Init+0xd4>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	3301      	adds	r3, #1
 800656e:	e009      	b.n	8006584 <HAL_I2C_Init+0xe8>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006576:	fb02 f303 	mul.w	r3, r2, r3
 800657a:	4a69      	ldr	r2, [pc, #420]	; (8006720 <HAL_I2C_Init+0x284>)
 800657c:	fba2 2303 	umull	r2, r3, r2, r3
 8006580:	099b      	lsrs	r3, r3, #6
 8006582:	3301      	adds	r3, #1
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	430b      	orrs	r3, r1
 800658a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006596:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	495c      	ldr	r1, [pc, #368]	; (8006710 <HAL_I2C_Init+0x274>)
 80065a0:	428b      	cmp	r3, r1
 80065a2:	d819      	bhi.n	80065d8 <HAL_I2C_Init+0x13c>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	1e59      	subs	r1, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80065b2:	1c59      	adds	r1, r3, #1
 80065b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065b8:	400b      	ands	r3, r1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_I2C_Init+0x138>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1e59      	subs	r1, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80065cc:	3301      	adds	r3, #1
 80065ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065d2:	e051      	b.n	8006678 <HAL_I2C_Init+0x1dc>
 80065d4:	2304      	movs	r3, #4
 80065d6:	e04f      	b.n	8006678 <HAL_I2C_Init+0x1dc>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d111      	bne.n	8006604 <HAL_I2C_Init+0x168>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1e58      	subs	r0, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6859      	ldr	r1, [r3, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	440b      	add	r3, r1
 80065ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80065f2:	3301      	adds	r3, #1
 80065f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf0c      	ite	eq
 80065fc:	2301      	moveq	r3, #1
 80065fe:	2300      	movne	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	e012      	b.n	800662a <HAL_I2C_Init+0x18e>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	1e58      	subs	r0, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	0099      	lsls	r1, r3, #2
 8006614:	440b      	add	r3, r1
 8006616:	fbb0 f3f3 	udiv	r3, r0, r3
 800661a:	3301      	adds	r3, #1
 800661c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf0c      	ite	eq
 8006624:	2301      	moveq	r3, #1
 8006626:	2300      	movne	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <HAL_I2C_Init+0x196>
 800662e:	2301      	movs	r3, #1
 8006630:	e022      	b.n	8006678 <HAL_I2C_Init+0x1dc>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10e      	bne.n	8006658 <HAL_I2C_Init+0x1bc>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	1e58      	subs	r0, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6859      	ldr	r1, [r3, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	440b      	add	r3, r1
 8006648:	fbb0 f3f3 	udiv	r3, r0, r3
 800664c:	3301      	adds	r3, #1
 800664e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006656:	e00f      	b.n	8006678 <HAL_I2C_Init+0x1dc>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	1e58      	subs	r0, r3, #1
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6859      	ldr	r1, [r3, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	0099      	lsls	r1, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	fbb0 f3f3 	udiv	r3, r0, r3
 800666e:	3301      	adds	r3, #1
 8006670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	6809      	ldr	r1, [r1, #0]
 800667c:	4313      	orrs	r3, r2
 800667e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69da      	ldr	r2, [r3, #28]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6911      	ldr	r1, [r2, #16]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	68d2      	ldr	r2, [r2, #12]
 80066b2:	4311      	orrs	r1, r2
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	430b      	orrs	r3, r1
 80066ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	695a      	ldr	r2, [r3, #20]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	000186a0 	.word	0x000186a0
 8006714:	001e847f 	.word	0x001e847f
 8006718:	003d08ff 	.word	0x003d08ff
 800671c:	431bde83 	.word	0x431bde83
 8006720:	10624dd3 	.word	0x10624dd3

08006724 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	4608      	mov	r0, r1
 800672e:	4611      	mov	r1, r2
 8006730:	461a      	mov	r2, r3
 8006732:	4603      	mov	r3, r0
 8006734:	817b      	strh	r3, [r7, #10]
 8006736:	460b      	mov	r3, r1
 8006738:	813b      	strh	r3, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800673e:	f7ff fa53 	bl	8005be8 <HAL_GetTick>
 8006742:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b20      	cmp	r3, #32
 800674e:	f040 80d9 	bne.w	8006904 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	2319      	movs	r3, #25
 8006758:	2201      	movs	r2, #1
 800675a:	496d      	ldr	r1, [pc, #436]	; (8006910 <HAL_I2C_Mem_Write+0x1ec>)
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fcc1 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006768:	2302      	movs	r3, #2
 800676a:	e0cc      	b.n	8006906 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_I2C_Mem_Write+0x56>
 8006776:	2302      	movs	r3, #2
 8006778:	e0c5      	b.n	8006906 <HAL_I2C_Mem_Write+0x1e2>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b01      	cmp	r3, #1
 800678e:	d007      	beq.n	80067a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2221      	movs	r2, #33	; 0x21
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2240      	movs	r2, #64	; 0x40
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a3a      	ldr	r2, [r7, #32]
 80067ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a4d      	ldr	r2, [pc, #308]	; (8006914 <HAL_I2C_Mem_Write+0x1f0>)
 80067e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067e2:	88f8      	ldrh	r0, [r7, #6]
 80067e4:	893a      	ldrh	r2, [r7, #8]
 80067e6:	8979      	ldrh	r1, [r7, #10]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	4603      	mov	r3, r0
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 faf8 	bl	8006de8 <I2C_RequestMemoryWrite>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d052      	beq.n	80068a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e081      	b.n	8006906 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fd86 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00d      	beq.n	800682e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	2b04      	cmp	r3, #4
 8006818:	d107      	bne.n	800682a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006828:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e06b      	b.n	8006906 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	781a      	ldrb	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b04      	cmp	r3, #4
 800686a:	d11b      	bne.n	80068a4 <HAL_I2C_Mem_Write+0x180>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006870:	2b00      	cmp	r3, #0
 8006872:	d017      	beq.n	80068a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	781a      	ldrb	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1aa      	bne.n	8006802 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 fd79 	bl	80073a8 <I2C_WaitOnBTFFlagUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d107      	bne.n	80068d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e016      	b.n	8006906 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	e000      	b.n	8006906 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006904:	2302      	movs	r3, #2
  }
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	00100002 	.word	0x00100002
 8006914:	ffff0000 	.word	0xffff0000

08006918 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08c      	sub	sp, #48	; 0x30
 800691c:	af02      	add	r7, sp, #8
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	4608      	mov	r0, r1
 8006922:	4611      	mov	r1, r2
 8006924:	461a      	mov	r2, r3
 8006926:	4603      	mov	r3, r0
 8006928:	817b      	strh	r3, [r7, #10]
 800692a:	460b      	mov	r3, r1
 800692c:	813b      	strh	r3, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006936:	f7ff f957 	bl	8005be8 <HAL_GetTick>
 800693a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b20      	cmp	r3, #32
 8006946:	f040 8244 	bne.w	8006dd2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	2319      	movs	r3, #25
 8006950:	2201      	movs	r2, #1
 8006952:	4982      	ldr	r1, [pc, #520]	; (8006b5c <HAL_I2C_Mem_Read+0x244>)
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fbc5 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006960:	2302      	movs	r3, #2
 8006962:	e237      	b.n	8006dd4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_I2C_Mem_Read+0x5a>
 800696e:	2302      	movs	r3, #2
 8006970:	e230      	b.n	8006dd4 <HAL_I2C_Mem_Read+0x4bc>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b01      	cmp	r3, #1
 8006986:	d007      	beq.n	8006998 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2222      	movs	r2, #34	; 0x22
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2240      	movs	r2, #64	; 0x40
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80069c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a62      	ldr	r2, [pc, #392]	; (8006b60 <HAL_I2C_Mem_Read+0x248>)
 80069d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069da:	88f8      	ldrh	r0, [r7, #6]
 80069dc:	893a      	ldrh	r2, [r7, #8]
 80069de:	8979      	ldrh	r1, [r7, #10]
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	4603      	mov	r3, r0
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fa92 	bl	8006f14 <I2C_RequestMemoryRead>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e1ec      	b.n	8006dd4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d113      	bne.n	8006a2a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	61fb      	str	r3, [r7, #28]
 8006a16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	e1c0      	b.n	8006dac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d11e      	bne.n	8006a70 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a42:	b672      	cpsid	i
}
 8006a44:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a46:	2300      	movs	r3, #0
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	61bb      	str	r3, [r7, #24]
 8006a5a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006a6c:	b662      	cpsie	i
}
 8006a6e:	e035      	b.n	8006adc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d11e      	bne.n	8006ab6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a88:	b672      	cpsid	i
}
 8006a8a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006ab2:	b662      	cpsie	i
}
 8006ab4:	e012      	b.n	8006adc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ac4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006adc:	e166      	b.n	8006dac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	f200 811f 	bhi.w	8006d26 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d123      	bne.n	8006b38 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fc9f 	bl	8007438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e167      	b.n	8006dd4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b36:	e139      	b.n	8006dac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d152      	bne.n	8006be6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	2200      	movs	r2, #0
 8006b48:	4906      	ldr	r1, [pc, #24]	; (8006b64 <HAL_I2C_Mem_Read+0x24c>)
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 faca 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d008      	beq.n	8006b68 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e13c      	b.n	8006dd4 <HAL_I2C_Mem_Read+0x4bc>
 8006b5a:	bf00      	nop
 8006b5c:	00100002 	.word	0x00100002
 8006b60:	ffff0000 	.word	0xffff0000
 8006b64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006b68:	b672      	cpsid	i
}
 8006b6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006bae:	b662      	cpsie	i
}
 8006bb0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006be4:	e0e2      	b.n	8006dac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	2200      	movs	r2, #0
 8006bee:	497b      	ldr	r1, [pc, #492]	; (8006ddc <HAL_I2C_Mem_Read+0x4c4>)
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fa77 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e0e9      	b.n	8006dd4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c10:	b672      	cpsid	i
}
 8006c12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c46:	4b66      	ldr	r3, [pc, #408]	; (8006de0 <HAL_I2C_Mem_Read+0x4c8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	08db      	lsrs	r3, r3, #3
 8006c4c:	4a65      	ldr	r2, [pc, #404]	; (8006de4 <HAL_I2C_Mem_Read+0x4cc>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	0a1a      	lsrs	r2, r3, #8
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	00da      	lsls	r2, r3, #3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d118      	bne.n	8006c9e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f043 0220 	orr.w	r2, r3, #32
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006c8e:	b662      	cpsie	i
}
 8006c90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e09a      	b.n	8006dd4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d1d9      	bne.n	8006c60 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006cee:	b662      	cpsie	i
}
 8006cf0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	b2d2      	uxtb	r2, r2
 8006cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d24:	e042      	b.n	8006dac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 fb84 	bl	8007438 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e04c      	b.n	8006dd4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	f003 0304 	and.w	r3, r3, #4
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d118      	bne.n	8006dac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	b2d2      	uxtb	r2, r2
 8006d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d96:	3b01      	subs	r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f47f ae94 	bne.w	8006ade <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e000      	b.n	8006dd4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006dd2:	2302      	movs	r3, #2
  }
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3728      	adds	r7, #40	; 0x28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	00010004 	.word	0x00010004
 8006de0:	20000000 	.word	0x20000000
 8006de4:	14f8b589 	.word	0x14f8b589

08006de8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	4608      	mov	r0, r1
 8006df2:	4611      	mov	r1, r2
 8006df4:	461a      	mov	r2, r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	817b      	strh	r3, [r7, #10]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	813b      	strh	r3, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f960 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e38:	d103      	bne.n	8006e42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e05f      	b.n	8006f06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e46:	897b      	ldrh	r3, [r7, #10]
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	6a3a      	ldr	r2, [r7, #32]
 8006e5a:	492d      	ldr	r1, [pc, #180]	; (8006f10 <I2C_RequestMemoryWrite+0x128>)
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f9bb 	bl	80071d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e04c      	b.n	8006f06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e84:	6a39      	ldr	r1, [r7, #32]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 fa46 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00d      	beq.n	8006eae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d107      	bne.n	8006eaa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e02b      	b.n	8006f06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d105      	bne.n	8006ec0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006eb4:	893b      	ldrh	r3, [r7, #8]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	611a      	str	r2, [r3, #16]
 8006ebe:	e021      	b.n	8006f04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ec0:	893b      	ldrh	r3, [r7, #8]
 8006ec2:	0a1b      	lsrs	r3, r3, #8
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed0:	6a39      	ldr	r1, [r7, #32]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fa20 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00d      	beq.n	8006efa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d107      	bne.n	8006ef6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ef4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e005      	b.n	8006f06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006efa:	893b      	ldrh	r3, [r7, #8]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	00010002 	.word	0x00010002

08006f14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	461a      	mov	r2, r3
 8006f22:	4603      	mov	r3, r0
 8006f24:	817b      	strh	r3, [r7, #10]
 8006f26:	460b      	mov	r3, r1
 8006f28:	813b      	strh	r3, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f8c2 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00d      	beq.n	8006f82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f74:	d103      	bne.n	8006f7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e0aa      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f82:	897b      	ldrh	r3, [r7, #10]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	6a3a      	ldr	r2, [r7, #32]
 8006f96:	4952      	ldr	r1, [pc, #328]	; (80070e0 <I2C_RequestMemoryRead+0x1cc>)
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f91d 	bl	80071d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e097      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc0:	6a39      	ldr	r1, [r7, #32]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f9a8 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d107      	bne.n	8006fe6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e076      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d105      	bne.n	8006ffc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ff0:	893b      	ldrh	r3, [r7, #8]
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	611a      	str	r2, [r3, #16]
 8006ffa:	e021      	b.n	8007040 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ffc:	893b      	ldrh	r3, [r7, #8]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	b29b      	uxth	r3, r3
 8007002:	b2da      	uxtb	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800700a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800700c:	6a39      	ldr	r1, [r7, #32]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 f982 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00d      	beq.n	8007036 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	2b04      	cmp	r3, #4
 8007020:	d107      	bne.n	8007032 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007030:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e050      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007036:	893b      	ldrh	r3, [r7, #8]
 8007038:	b2da      	uxtb	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007042:	6a39      	ldr	r1, [r7, #32]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f967 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00d      	beq.n	800706c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	2b04      	cmp	r3, #4
 8007056:	d107      	bne.n	8007068 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007066:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e035      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800707a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	2200      	movs	r2, #0
 8007084:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f82b 	bl	80070e4 <I2C_WaitOnFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00d      	beq.n	80070b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a2:	d103      	bne.n	80070ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e013      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070b0:	897b      	ldrh	r3, [r7, #10]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	6a3a      	ldr	r2, [r7, #32]
 80070c4:	4906      	ldr	r1, [pc, #24]	; (80070e0 <I2C_RequestMemoryRead+0x1cc>)
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 f886 	bl	80071d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	00010002 	.word	0x00010002

080070e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	603b      	str	r3, [r7, #0]
 80070f0:	4613      	mov	r3, r2
 80070f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070f4:	e048      	b.n	8007188 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fc:	d044      	beq.n	8007188 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fe:	f7fe fd73 	bl	8005be8 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d302      	bcc.n	8007114 <I2C_WaitOnFlagUntilTimeout+0x30>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d139      	bne.n	8007188 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b01      	cmp	r3, #1
 800711c:	d10d      	bne.n	800713a <I2C_WaitOnFlagUntilTimeout+0x56>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	43da      	mvns	r2, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	4013      	ands	r3, r2
 800712a:	b29b      	uxth	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	bf0c      	ite	eq
 8007130:	2301      	moveq	r3, #1
 8007132:	2300      	movne	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	461a      	mov	r2, r3
 8007138:	e00c      	b.n	8007154 <I2C_WaitOnFlagUntilTimeout+0x70>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	43da      	mvns	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	4013      	ands	r3, r2
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	bf0c      	ite	eq
 800714c:	2301      	moveq	r3, #1
 800714e:	2300      	movne	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	461a      	mov	r2, r3
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	429a      	cmp	r2, r3
 8007158:	d116      	bne.n	8007188 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007174:	f043 0220 	orr.w	r2, r3, #32
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e023      	b.n	80071d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b01      	cmp	r3, #1
 8007190:	d10d      	bne.n	80071ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	43da      	mvns	r2, r3
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	4013      	ands	r3, r2
 800719e:	b29b      	uxth	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	bf0c      	ite	eq
 80071a4:	2301      	moveq	r3, #1
 80071a6:	2300      	movne	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	e00c      	b.n	80071c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	43da      	mvns	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	4013      	ands	r3, r2
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bf0c      	ite	eq
 80071c0:	2301      	moveq	r3, #1
 80071c2:	2300      	movne	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	461a      	mov	r2, r3
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d093      	beq.n	80070f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071e6:	e071      	b.n	80072cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f6:	d123      	bne.n	8007240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007206:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007210:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	f043 0204 	orr.w	r2, r3, #4
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e067      	b.n	8007310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007246:	d041      	beq.n	80072cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007248:	f7fe fcce 	bl	8005be8 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	429a      	cmp	r2, r3
 8007256:	d302      	bcc.n	800725e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d136      	bne.n	80072cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	0c1b      	lsrs	r3, r3, #16
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d10c      	bne.n	8007282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	43da      	mvns	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4013      	ands	r3, r2
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	bf14      	ite	ne
 800727a:	2301      	movne	r3, #1
 800727c:	2300      	moveq	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	e00b      	b.n	800729a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	43da      	mvns	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4013      	ands	r3, r2
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	bf14      	ite	ne
 8007294:	2301      	movne	r3, #1
 8007296:	2300      	moveq	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	f043 0220 	orr.w	r2, r3, #32
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e021      	b.n	8007310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	0c1b      	lsrs	r3, r3, #16
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d10c      	bne.n	80072f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	43da      	mvns	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	4013      	ands	r3, r2
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bf14      	ite	ne
 80072e8:	2301      	movne	r3, #1
 80072ea:	2300      	moveq	r3, #0
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	e00b      	b.n	8007308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	43da      	mvns	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bf14      	ite	ne
 8007302:	2301      	movne	r3, #1
 8007304:	2300      	moveq	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	f47f af6d 	bne.w	80071e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007324:	e034      	b.n	8007390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f8e3 	bl	80074f2 <I2C_IsAcknowledgeFailed>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e034      	b.n	80073a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733c:	d028      	beq.n	8007390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733e:	f7fe fc53 	bl	8005be8 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	d302      	bcc.n	8007354 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d11d      	bne.n	8007390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d016      	beq.n	8007390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	f043 0220 	orr.w	r2, r3, #32
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e007      	b.n	80073a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739a:	2b80      	cmp	r3, #128	; 0x80
 800739c:	d1c3      	bne.n	8007326 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073b4:	e034      	b.n	8007420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f89b 	bl	80074f2 <I2C_IsAcknowledgeFailed>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e034      	b.n	8007430 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073cc:	d028      	beq.n	8007420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ce:	f7fe fc0b 	bl	8005be8 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d302      	bcc.n	80073e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d11d      	bne.n	8007420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d016      	beq.n	8007420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740c:	f043 0220 	orr.w	r2, r3, #32
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e007      	b.n	8007430 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b04      	cmp	r3, #4
 800742c:	d1c3      	bne.n	80073b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007444:	e049      	b.n	80074da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	f003 0310 	and.w	r3, r3, #16
 8007450:	2b10      	cmp	r3, #16
 8007452:	d119      	bne.n	8007488 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0210 	mvn.w	r2, #16
 800745c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e030      	b.n	80074ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007488:	f7fe fbae 	bl	8005be8 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	429a      	cmp	r2, r3
 8007496:	d302      	bcc.n	800749e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d11d      	bne.n	80074da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d016      	beq.n	80074da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f043 0220 	orr.w	r2, r3, #32
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e007      	b.n	80074ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e4:	2b40      	cmp	r3, #64	; 0x40
 80074e6:	d1ae      	bne.n	8007446 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007508:	d11b      	bne.n	8007542 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007512:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	f043 0204 	orr.w	r2, r3, #4
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	bc80      	pop	{r7}
 800754c:	4770      	bx	lr
	...

08007550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e272      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 8087 	beq.w	800767e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007570:	4b92      	ldr	r3, [pc, #584]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f003 030c 	and.w	r3, r3, #12
 8007578:	2b04      	cmp	r3, #4
 800757a:	d00c      	beq.n	8007596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800757c:	4b8f      	ldr	r3, [pc, #572]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f003 030c 	and.w	r3, r3, #12
 8007584:	2b08      	cmp	r3, #8
 8007586:	d112      	bne.n	80075ae <HAL_RCC_OscConfig+0x5e>
 8007588:	4b8c      	ldr	r3, [pc, #560]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007594:	d10b      	bne.n	80075ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007596:	4b89      	ldr	r3, [pc, #548]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d06c      	beq.n	800767c <HAL_RCC_OscConfig+0x12c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d168      	bne.n	800767c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e24c      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b6:	d106      	bne.n	80075c6 <HAL_RCC_OscConfig+0x76>
 80075b8:	4b80      	ldr	r3, [pc, #512]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a7f      	ldr	r2, [pc, #508]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80075be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	e02e      	b.n	8007624 <HAL_RCC_OscConfig+0xd4>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10c      	bne.n	80075e8 <HAL_RCC_OscConfig+0x98>
 80075ce:	4b7b      	ldr	r3, [pc, #492]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a7a      	ldr	r2, [pc, #488]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80075d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	4b78      	ldr	r3, [pc, #480]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a77      	ldr	r2, [pc, #476]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80075e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	e01d      	b.n	8007624 <HAL_RCC_OscConfig+0xd4>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075f0:	d10c      	bne.n	800760c <HAL_RCC_OscConfig+0xbc>
 80075f2:	4b72      	ldr	r3, [pc, #456]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a71      	ldr	r2, [pc, #452]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80075f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	4b6f      	ldr	r3, [pc, #444]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a6e      	ldr	r2, [pc, #440]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e00b      	b.n	8007624 <HAL_RCC_OscConfig+0xd4>
 800760c:	4b6b      	ldr	r3, [pc, #428]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a6a      	ldr	r2, [pc, #424]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	4b68      	ldr	r3, [pc, #416]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a67      	ldr	r2, [pc, #412]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 800761e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d013      	beq.n	8007654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800762c:	f7fe fadc 	bl	8005be8 <HAL_GetTick>
 8007630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007632:	e008      	b.n	8007646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007634:	f7fe fad8 	bl	8005be8 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b64      	cmp	r3, #100	; 0x64
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e200      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007646:	4b5d      	ldr	r3, [pc, #372]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0f0      	beq.n	8007634 <HAL_RCC_OscConfig+0xe4>
 8007652:	e014      	b.n	800767e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007654:	f7fe fac8 	bl	8005be8 <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800765c:	f7fe fac4 	bl	8005be8 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b64      	cmp	r3, #100	; 0x64
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e1ec      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800766e:	4b53      	ldr	r3, [pc, #332]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1f0      	bne.n	800765c <HAL_RCC_OscConfig+0x10c>
 800767a:	e000      	b.n	800767e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800767c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d063      	beq.n	8007752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800768a:	4b4c      	ldr	r3, [pc, #304]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f003 030c 	and.w	r3, r3, #12
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00b      	beq.n	80076ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007696:	4b49      	ldr	r3, [pc, #292]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f003 030c 	and.w	r3, r3, #12
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d11c      	bne.n	80076dc <HAL_RCC_OscConfig+0x18c>
 80076a2:	4b46      	ldr	r3, [pc, #280]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d116      	bne.n	80076dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ae:	4b43      	ldr	r3, [pc, #268]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d005      	beq.n	80076c6 <HAL_RCC_OscConfig+0x176>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d001      	beq.n	80076c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e1c0      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076c6:	4b3d      	ldr	r3, [pc, #244]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	4939      	ldr	r1, [pc, #228]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076da:	e03a      	b.n	8007752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d020      	beq.n	8007726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076e4:	4b36      	ldr	r3, [pc, #216]	; (80077c0 <HAL_RCC_OscConfig+0x270>)
 80076e6:	2201      	movs	r2, #1
 80076e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ea:	f7fe fa7d 	bl	8005be8 <HAL_GetTick>
 80076ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f0:	e008      	b.n	8007704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076f2:	f7fe fa79 	bl	8005be8 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e1a1      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007704:	4b2d      	ldr	r3, [pc, #180]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0f0      	beq.n	80076f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007710:	4b2a      	ldr	r3, [pc, #168]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	4927      	ldr	r1, [pc, #156]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007720:	4313      	orrs	r3, r2
 8007722:	600b      	str	r3, [r1, #0]
 8007724:	e015      	b.n	8007752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007726:	4b26      	ldr	r3, [pc, #152]	; (80077c0 <HAL_RCC_OscConfig+0x270>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800772c:	f7fe fa5c 	bl	8005be8 <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007734:	f7fe fa58 	bl	8005be8 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e180      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007746:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1f0      	bne.n	8007734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d03a      	beq.n	80077d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d019      	beq.n	800779a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007766:	4b17      	ldr	r3, [pc, #92]	; (80077c4 <HAL_RCC_OscConfig+0x274>)
 8007768:	2201      	movs	r2, #1
 800776a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800776c:	f7fe fa3c 	bl	8005be8 <HAL_GetTick>
 8007770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007772:	e008      	b.n	8007786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007774:	f7fe fa38 	bl	8005be8 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e160      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007786:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <HAL_RCC_OscConfig+0x26c>)
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0f0      	beq.n	8007774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007792:	2001      	movs	r0, #1
 8007794:	f000 face 	bl	8007d34 <RCC_Delay>
 8007798:	e01c      	b.n	80077d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800779a:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <HAL_RCC_OscConfig+0x274>)
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077a0:	f7fe fa22 	bl	8005be8 <HAL_GetTick>
 80077a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077a6:	e00f      	b.n	80077c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077a8:	f7fe fa1e 	bl	8005be8 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d908      	bls.n	80077c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e146      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
 80077ba:	bf00      	nop
 80077bc:	40021000 	.word	0x40021000
 80077c0:	42420000 	.word	0x42420000
 80077c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077c8:	4b92      	ldr	r3, [pc, #584]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e9      	bne.n	80077a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 80a6 	beq.w	800792e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077e6:	4b8b      	ldr	r3, [pc, #556]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10d      	bne.n	800780e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077f2:	4b88      	ldr	r3, [pc, #544]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	4a87      	ldr	r2, [pc, #540]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80077f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077fc:	61d3      	str	r3, [r2, #28]
 80077fe:	4b85      	ldr	r3, [pc, #532]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007806:	60bb      	str	r3, [r7, #8]
 8007808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800780a:	2301      	movs	r3, #1
 800780c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800780e:	4b82      	ldr	r3, [pc, #520]	; (8007a18 <HAL_RCC_OscConfig+0x4c8>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d118      	bne.n	800784c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800781a:	4b7f      	ldr	r3, [pc, #508]	; (8007a18 <HAL_RCC_OscConfig+0x4c8>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a7e      	ldr	r2, [pc, #504]	; (8007a18 <HAL_RCC_OscConfig+0x4c8>)
 8007820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007826:	f7fe f9df 	bl	8005be8 <HAL_GetTick>
 800782a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800782c:	e008      	b.n	8007840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800782e:	f7fe f9db 	bl	8005be8 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b64      	cmp	r3, #100	; 0x64
 800783a:	d901      	bls.n	8007840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e103      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007840:	4b75      	ldr	r3, [pc, #468]	; (8007a18 <HAL_RCC_OscConfig+0x4c8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0f0      	beq.n	800782e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d106      	bne.n	8007862 <HAL_RCC_OscConfig+0x312>
 8007854:	4b6f      	ldr	r3, [pc, #444]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	4a6e      	ldr	r2, [pc, #440]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	6213      	str	r3, [r2, #32]
 8007860:	e02d      	b.n	80078be <HAL_RCC_OscConfig+0x36e>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10c      	bne.n	8007884 <HAL_RCC_OscConfig+0x334>
 800786a:	4b6a      	ldr	r3, [pc, #424]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	4a69      	ldr	r2, [pc, #420]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	6213      	str	r3, [r2, #32]
 8007876:	4b67      	ldr	r3, [pc, #412]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	4a66      	ldr	r2, [pc, #408]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 800787c:	f023 0304 	bic.w	r3, r3, #4
 8007880:	6213      	str	r3, [r2, #32]
 8007882:	e01c      	b.n	80078be <HAL_RCC_OscConfig+0x36e>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	2b05      	cmp	r3, #5
 800788a:	d10c      	bne.n	80078a6 <HAL_RCC_OscConfig+0x356>
 800788c:	4b61      	ldr	r3, [pc, #388]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	4a60      	ldr	r2, [pc, #384]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007892:	f043 0304 	orr.w	r3, r3, #4
 8007896:	6213      	str	r3, [r2, #32]
 8007898:	4b5e      	ldr	r3, [pc, #376]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	4a5d      	ldr	r2, [pc, #372]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 800789e:	f043 0301 	orr.w	r3, r3, #1
 80078a2:	6213      	str	r3, [r2, #32]
 80078a4:	e00b      	b.n	80078be <HAL_RCC_OscConfig+0x36e>
 80078a6:	4b5b      	ldr	r3, [pc, #364]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	4a5a      	ldr	r2, [pc, #360]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80078ac:	f023 0301 	bic.w	r3, r3, #1
 80078b0:	6213      	str	r3, [r2, #32]
 80078b2:	4b58      	ldr	r3, [pc, #352]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	4a57      	ldr	r2, [pc, #348]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80078b8:	f023 0304 	bic.w	r3, r3, #4
 80078bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d015      	beq.n	80078f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078c6:	f7fe f98f 	bl	8005be8 <HAL_GetTick>
 80078ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078cc:	e00a      	b.n	80078e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ce:	f7fe f98b 	bl	8005be8 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078dc:	4293      	cmp	r3, r2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e0b1      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e4:	4b4b      	ldr	r3, [pc, #300]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0ee      	beq.n	80078ce <HAL_RCC_OscConfig+0x37e>
 80078f0:	e014      	b.n	800791c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078f2:	f7fe f979 	bl	8005be8 <HAL_GetTick>
 80078f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f8:	e00a      	b.n	8007910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078fa:	f7fe f975 	bl	8005be8 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	f241 3288 	movw	r2, #5000	; 0x1388
 8007908:	4293      	cmp	r3, r2
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e09b      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007910:	4b40      	ldr	r3, [pc, #256]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1ee      	bne.n	80078fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800791c:	7dfb      	ldrb	r3, [r7, #23]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d105      	bne.n	800792e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007922:	4b3c      	ldr	r3, [pc, #240]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	4a3b      	ldr	r2, [pc, #236]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800792c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 8087 	beq.w	8007a46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007938:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f003 030c 	and.w	r3, r3, #12
 8007940:	2b08      	cmp	r3, #8
 8007942:	d061      	beq.n	8007a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d146      	bne.n	80079da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800794c:	4b33      	ldr	r3, [pc, #204]	; (8007a1c <HAL_RCC_OscConfig+0x4cc>)
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007952:	f7fe f949 	bl	8005be8 <HAL_GetTick>
 8007956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007958:	e008      	b.n	800796c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800795a:	f7fe f945 	bl	8005be8 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e06d      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800796c:	4b29      	ldr	r3, [pc, #164]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1f0      	bne.n	800795a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007980:	d108      	bne.n	8007994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007982:	4b24      	ldr	r3, [pc, #144]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	4921      	ldr	r1, [pc, #132]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007990:	4313      	orrs	r3, r2
 8007992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007994:	4b1f      	ldr	r3, [pc, #124]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a19      	ldr	r1, [r3, #32]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	430b      	orrs	r3, r1
 80079a6:	491b      	ldr	r1, [pc, #108]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079ac:	4b1b      	ldr	r3, [pc, #108]	; (8007a1c <HAL_RCC_OscConfig+0x4cc>)
 80079ae:	2201      	movs	r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b2:	f7fe f919 	bl	8005be8 <HAL_GetTick>
 80079b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079b8:	e008      	b.n	80079cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ba:	f7fe f915 	bl	8005be8 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e03d      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079cc:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0f0      	beq.n	80079ba <HAL_RCC_OscConfig+0x46a>
 80079d8:	e035      	b.n	8007a46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079da:	4b10      	ldr	r3, [pc, #64]	; (8007a1c <HAL_RCC_OscConfig+0x4cc>)
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e0:	f7fe f902 	bl	8005be8 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e8:	f7fe f8fe 	bl	8005be8 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e026      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079fa:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <HAL_RCC_OscConfig+0x4c4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f0      	bne.n	80079e8 <HAL_RCC_OscConfig+0x498>
 8007a06:	e01e      	b.n	8007a46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d107      	bne.n	8007a20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e019      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
 8007a14:	40021000 	.word	0x40021000
 8007a18:	40007000 	.word	0x40007000
 8007a1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <HAL_RCC_OscConfig+0x500>)
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d106      	bne.n	8007a42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d001      	beq.n	8007a46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	40021000 	.word	0x40021000

08007a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e0d0      	b.n	8007c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a68:	4b6a      	ldr	r3, [pc, #424]	; (8007c14 <HAL_RCC_ClockConfig+0x1c0>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d910      	bls.n	8007a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a76:	4b67      	ldr	r3, [pc, #412]	; (8007c14 <HAL_RCC_ClockConfig+0x1c0>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f023 0207 	bic.w	r2, r3, #7
 8007a7e:	4965      	ldr	r1, [pc, #404]	; (8007c14 <HAL_RCC_ClockConfig+0x1c0>)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a86:	4b63      	ldr	r3, [pc, #396]	; (8007c14 <HAL_RCC_ClockConfig+0x1c0>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d001      	beq.n	8007a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e0b8      	b.n	8007c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d020      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ab0:	4b59      	ldr	r3, [pc, #356]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4a58      	ldr	r2, [pc, #352]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ac8:	4b53      	ldr	r3, [pc, #332]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	4a52      	ldr	r2, [pc, #328]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007ace:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ad4:	4b50      	ldr	r3, [pc, #320]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	494d      	ldr	r1, [pc, #308]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d040      	beq.n	8007b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d107      	bne.n	8007b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007afa:	4b47      	ldr	r3, [pc, #284]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d115      	bne.n	8007b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e07f      	b.n	8007c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d107      	bne.n	8007b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b12:	4b41      	ldr	r3, [pc, #260]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e073      	b.n	8007c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b22:	4b3d      	ldr	r3, [pc, #244]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e06b      	b.n	8007c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b32:	4b39      	ldr	r3, [pc, #228]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f023 0203 	bic.w	r2, r3, #3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	4936      	ldr	r1, [pc, #216]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b44:	f7fe f850 	bl	8005be8 <HAL_GetTick>
 8007b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b4a:	e00a      	b.n	8007b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b4c:	f7fe f84c 	bl	8005be8 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e053      	b.n	8007c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b62:	4b2d      	ldr	r3, [pc, #180]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f003 020c 	and.w	r2, r3, #12
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d1eb      	bne.n	8007b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b74:	4b27      	ldr	r3, [pc, #156]	; (8007c14 <HAL_RCC_ClockConfig+0x1c0>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d210      	bcs.n	8007ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b82:	4b24      	ldr	r3, [pc, #144]	; (8007c14 <HAL_RCC_ClockConfig+0x1c0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f023 0207 	bic.w	r2, r3, #7
 8007b8a:	4922      	ldr	r1, [pc, #136]	; (8007c14 <HAL_RCC_ClockConfig+0x1c0>)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b92:	4b20      	ldr	r3, [pc, #128]	; (8007c14 <HAL_RCC_ClockConfig+0x1c0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d001      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e032      	b.n	8007c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bb0:	4b19      	ldr	r3, [pc, #100]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	4916      	ldr	r1, [pc, #88]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	490e      	ldr	r1, [pc, #56]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007be2:	f000 f821 	bl	8007c28 <HAL_RCC_GetSysClockFreq>
 8007be6:	4602      	mov	r2, r0
 8007be8:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	091b      	lsrs	r3, r3, #4
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	490a      	ldr	r1, [pc, #40]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bf4:	5ccb      	ldrb	r3, [r1, r3]
 8007bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfa:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <HAL_RCC_ClockConfig+0x1cc>)
 8007bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007bfe:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <HAL_RCC_ClockConfig+0x1d0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fd ffae 	bl	8005b64 <HAL_InitTick>

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40022000 	.word	0x40022000
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	0800f3d0 	.word	0x0800f3d0
 8007c20:	20000000 	.word	0x20000000
 8007c24:	200002b0 	.word	0x200002b0

08007c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	2300      	movs	r3, #0
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007c42:	4b1e      	ldr	r3, [pc, #120]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 030c 	and.w	r3, r3, #12
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d002      	beq.n	8007c58 <HAL_RCC_GetSysClockFreq+0x30>
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d003      	beq.n	8007c5e <HAL_RCC_GetSysClockFreq+0x36>
 8007c56:	e027      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007c58:	4b19      	ldr	r3, [pc, #100]	; (8007cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007c5a:	613b      	str	r3, [r7, #16]
      break;
 8007c5c:	e027      	b.n	8007cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	0c9b      	lsrs	r3, r3, #18
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	4a17      	ldr	r2, [pc, #92]	; (8007cc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007c68:	5cd3      	ldrb	r3, [r2, r3]
 8007c6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d010      	beq.n	8007c98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c76:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	0c5b      	lsrs	r3, r3, #17
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	4a11      	ldr	r2, [pc, #68]	; (8007cc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007c82:	5cd3      	ldrb	r3, [r2, r3]
 8007c84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a0d      	ldr	r2, [pc, #52]	; (8007cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007c8a:	fb03 f202 	mul.w	r2, r3, r2
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	e004      	b.n	8007ca2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a0c      	ldr	r2, [pc, #48]	; (8007ccc <HAL_RCC_GetSysClockFreq+0xa4>)
 8007c9c:	fb02 f303 	mul.w	r3, r2, r3
 8007ca0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	613b      	str	r3, [r7, #16]
      break;
 8007ca6:	e002      	b.n	8007cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8007caa:	613b      	str	r3, [r7, #16]
      break;
 8007cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cae:	693b      	ldr	r3, [r7, #16]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bc80      	pop	{r7}
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	40021000 	.word	0x40021000
 8007cc0:	007a1200 	.word	0x007a1200
 8007cc4:	0800f3e8 	.word	0x0800f3e8
 8007cc8:	0800f3f8 	.word	0x0800f3f8
 8007ccc:	003d0900 	.word	0x003d0900

08007cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cd4:	4b02      	ldr	r3, [pc, #8]	; (8007ce0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr
 8007ce0:	20000000 	.word	0x20000000

08007ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ce8:	f7ff fff2 	bl	8007cd0 <HAL_RCC_GetHCLKFreq>
 8007cec:	4602      	mov	r2, r0
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	0a1b      	lsrs	r3, r3, #8
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	4903      	ldr	r1, [pc, #12]	; (8007d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cfa:	5ccb      	ldrb	r3, [r1, r3]
 8007cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	40021000 	.word	0x40021000
 8007d08:	0800f3e0 	.word	0x0800f3e0

08007d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d10:	f7ff ffde 	bl	8007cd0 <HAL_RCC_GetHCLKFreq>
 8007d14:	4602      	mov	r2, r0
 8007d16:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	0adb      	lsrs	r3, r3, #11
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	4903      	ldr	r1, [pc, #12]	; (8007d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d22:	5ccb      	ldrb	r3, [r1, r3]
 8007d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	40021000 	.word	0x40021000
 8007d30:	0800f3e0 	.word	0x0800f3e0

08007d34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <RCC_Delay+0x34>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a0a      	ldr	r2, [pc, #40]	; (8007d6c <RCC_Delay+0x38>)
 8007d42:	fba2 2303 	umull	r2, r3, r2, r3
 8007d46:	0a5b      	lsrs	r3, r3, #9
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	fb02 f303 	mul.w	r3, r2, r3
 8007d4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007d50:	bf00      	nop
  }
  while (Delay --);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	1e5a      	subs	r2, r3, #1
 8007d56:	60fa      	str	r2, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f9      	bne.n	8007d50 <RCC_Delay+0x1c>
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc80      	pop	{r7}
 8007d66:	4770      	bx	lr
 8007d68:	20000000 	.word	0x20000000
 8007d6c:	10624dd3 	.word	0x10624dd3

08007d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	613b      	str	r3, [r7, #16]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d07d      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d90:	4b4f      	ldr	r3, [pc, #316]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10d      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d9c:	4b4c      	ldr	r3, [pc, #304]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	4a4b      	ldr	r2, [pc, #300]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007da6:	61d3      	str	r3, [r2, #28]
 8007da8:	4b49      	ldr	r3, [pc, #292]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007db0:	60bb      	str	r3, [r7, #8]
 8007db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007db4:	2301      	movs	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007db8:	4b46      	ldr	r3, [pc, #280]	; (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d118      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dc4:	4b43      	ldr	r3, [pc, #268]	; (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a42      	ldr	r2, [pc, #264]	; (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dd0:	f7fd ff0a 	bl	8005be8 <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dd6:	e008      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dd8:	f7fd ff06 	bl	8005be8 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b64      	cmp	r3, #100	; 0x64
 8007de4:	d901      	bls.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e06d      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dea:	4b3a      	ldr	r3, [pc, #232]	; (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0f0      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007df6:	4b36      	ldr	r3, [pc, #216]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d02e      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d027      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e14:	4b2e      	ldr	r3, [pc, #184]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e1e:	4b2e      	ldr	r3, [pc, #184]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e24:	4b2c      	ldr	r3, [pc, #176]	; (8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007e2a:	4a29      	ldr	r2, [pc, #164]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d014      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e3a:	f7fd fed5 	bl	8005be8 <HAL_GetTick>
 8007e3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e40:	e00a      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e42:	f7fd fed1 	bl	8005be8 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d901      	bls.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e036      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e58:	4b1d      	ldr	r3, [pc, #116]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0ee      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e64:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	4917      	ldr	r1, [pc, #92]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d105      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e7c:	4b14      	ldr	r3, [pc, #80]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	4a13      	ldr	r2, [pc, #76]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d008      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e94:	4b0e      	ldr	r3, [pc, #56]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	490b      	ldr	r1, [pc, #44]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0310 	and.w	r3, r3, #16
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	4904      	ldr	r1, [pc, #16]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	40021000 	.word	0x40021000
 8007ed4:	40007000 	.word	0x40007000
 8007ed8:	42420440 	.word	0x42420440

08007edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e041      	b.n	8007f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fa f83a 	bl	8001f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	f000 fad6 	bl	80084cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6a1a      	ldr	r2, [r3, #32]
 8007f88:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10f      	bne.n	8007fb2 <HAL_TIM_Base_Stop+0x38>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6a1a      	ldr	r2, [r3, #32]
 8007f98:	f240 4344 	movw	r3, #1092	; 0x444
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d107      	bne.n	8007fb2 <HAL_TIM_Base_Stop+0x38>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0201 	bic.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bc80      	pop	{r7}
 8007fc4:	4770      	bx	lr
	...

08007fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d001      	beq.n	8007fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e044      	b.n	800806a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0201 	orr.w	r2, r2, #1
 8007ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a1d      	ldr	r2, [pc, #116]	; (8008074 <HAL_TIM_Base_Start_IT+0xac>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d018      	beq.n	8008034 <HAL_TIM_Base_Start_IT+0x6c>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a1c      	ldr	r2, [pc, #112]	; (8008078 <HAL_TIM_Base_Start_IT+0xb0>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d013      	beq.n	8008034 <HAL_TIM_Base_Start_IT+0x6c>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008014:	d00e      	beq.n	8008034 <HAL_TIM_Base_Start_IT+0x6c>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a18      	ldr	r2, [pc, #96]	; (800807c <HAL_TIM_Base_Start_IT+0xb4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d009      	beq.n	8008034 <HAL_TIM_Base_Start_IT+0x6c>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a16      	ldr	r2, [pc, #88]	; (8008080 <HAL_TIM_Base_Start_IT+0xb8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d004      	beq.n	8008034 <HAL_TIM_Base_Start_IT+0x6c>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a15      	ldr	r2, [pc, #84]	; (8008084 <HAL_TIM_Base_Start_IT+0xbc>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d111      	bne.n	8008058 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f003 0307 	and.w	r3, r3, #7
 800803e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b06      	cmp	r3, #6
 8008044:	d010      	beq.n	8008068 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f042 0201 	orr.w	r2, r2, #1
 8008054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008056:	e007      	b.n	8008068 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0201 	orr.w	r2, r2, #1
 8008066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	bc80      	pop	{r7}
 8008072:	4770      	bx	lr
 8008074:	40012c00 	.word	0x40012c00
 8008078:	40013400 	.word	0x40013400
 800807c:	40000400 	.word	0x40000400
 8008080:	40000800 	.word	0x40000800
 8008084:	40000c00 	.word	0x40000c00

08008088 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0201 	bic.w	r2, r2, #1
 800809e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6a1a      	ldr	r2, [r3, #32]
 80080a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80080aa:	4013      	ands	r3, r2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10f      	bne.n	80080d0 <HAL_TIM_Base_Stop_IT+0x48>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6a1a      	ldr	r2, [r3, #32]
 80080b6:	f240 4344 	movw	r3, #1092	; 0x444
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d107      	bne.n	80080d0 <HAL_TIM_Base_Stop_IT+0x48>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0201 	bic.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr

080080e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d122      	bne.n	8008140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b02      	cmp	r3, #2
 8008106:	d11b      	bne.n	8008140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0202 	mvn.w	r2, #2
 8008110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f9b4 	bl	8008494 <HAL_TIM_IC_CaptureCallback>
 800812c:	e005      	b.n	800813a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f9a7 	bl	8008482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f9b6 	bl	80084a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	f003 0304 	and.w	r3, r3, #4
 800814a:	2b04      	cmp	r3, #4
 800814c:	d122      	bne.n	8008194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b04      	cmp	r3, #4
 800815a:	d11b      	bne.n	8008194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0204 	mvn.w	r2, #4
 8008164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2202      	movs	r2, #2
 800816a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f98a 	bl	8008494 <HAL_TIM_IC_CaptureCallback>
 8008180:	e005      	b.n	800818e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f97d 	bl	8008482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f98c 	bl	80084a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0308 	and.w	r3, r3, #8
 800819e:	2b08      	cmp	r3, #8
 80081a0:	d122      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f003 0308 	and.w	r3, r3, #8
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d11b      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f06f 0208 	mvn.w	r2, #8
 80081b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2204      	movs	r2, #4
 80081be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f960 	bl	8008494 <HAL_TIM_IC_CaptureCallback>
 80081d4:	e005      	b.n	80081e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f953 	bl	8008482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f962 	bl	80084a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0310 	and.w	r3, r3, #16
 80081f2:	2b10      	cmp	r3, #16
 80081f4:	d122      	bne.n	800823c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f003 0310 	and.w	r3, r3, #16
 8008200:	2b10      	cmp	r3, #16
 8008202:	d11b      	bne.n	800823c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f06f 0210 	mvn.w	r2, #16
 800820c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2208      	movs	r2, #8
 8008212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f936 	bl	8008494 <HAL_TIM_IC_CaptureCallback>
 8008228:	e005      	b.n	8008236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f929 	bl	8008482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f938 	bl	80084a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b01      	cmp	r3, #1
 8008248:	d10e      	bne.n	8008268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b01      	cmp	r3, #1
 8008256:	d107      	bne.n	8008268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0201 	mvn.w	r2, #1
 8008260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7f9 fbcf 	bl	8001a06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008272:	2b80      	cmp	r3, #128	; 0x80
 8008274:	d10e      	bne.n	8008294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008280:	2b80      	cmp	r3, #128	; 0x80
 8008282:	d107      	bne.n	8008294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800828c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 faa1 	bl	80087d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829e:	2b40      	cmp	r3, #64	; 0x40
 80082a0:	d10e      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ac:	2b40      	cmp	r3, #64	; 0x40
 80082ae:	d107      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f8fc 	bl	80084b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b20      	cmp	r3, #32
 80082cc:	d10e      	bne.n	80082ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d107      	bne.n	80082ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f06f 0220 	mvn.w	r2, #32
 80082e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa6c 	bl	80087c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_TIM_ConfigClockSource+0x1c>
 800830c:	2302      	movs	r3, #2
 800830e:	e0b4      	b.n	800847a <HAL_TIM_ConfigClockSource+0x186>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800832e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008348:	d03e      	beq.n	80083c8 <HAL_TIM_ConfigClockSource+0xd4>
 800834a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800834e:	f200 8087 	bhi.w	8008460 <HAL_TIM_ConfigClockSource+0x16c>
 8008352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008356:	f000 8086 	beq.w	8008466 <HAL_TIM_ConfigClockSource+0x172>
 800835a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800835e:	d87f      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x16c>
 8008360:	2b70      	cmp	r3, #112	; 0x70
 8008362:	d01a      	beq.n	800839a <HAL_TIM_ConfigClockSource+0xa6>
 8008364:	2b70      	cmp	r3, #112	; 0x70
 8008366:	d87b      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x16c>
 8008368:	2b60      	cmp	r3, #96	; 0x60
 800836a:	d050      	beq.n	800840e <HAL_TIM_ConfigClockSource+0x11a>
 800836c:	2b60      	cmp	r3, #96	; 0x60
 800836e:	d877      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x16c>
 8008370:	2b50      	cmp	r3, #80	; 0x50
 8008372:	d03c      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0xfa>
 8008374:	2b50      	cmp	r3, #80	; 0x50
 8008376:	d873      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x16c>
 8008378:	2b40      	cmp	r3, #64	; 0x40
 800837a:	d058      	beq.n	800842e <HAL_TIM_ConfigClockSource+0x13a>
 800837c:	2b40      	cmp	r3, #64	; 0x40
 800837e:	d86f      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x16c>
 8008380:	2b30      	cmp	r3, #48	; 0x30
 8008382:	d064      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x15a>
 8008384:	2b30      	cmp	r3, #48	; 0x30
 8008386:	d86b      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x16c>
 8008388:	2b20      	cmp	r3, #32
 800838a:	d060      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x15a>
 800838c:	2b20      	cmp	r3, #32
 800838e:	d867      	bhi.n	8008460 <HAL_TIM_ConfigClockSource+0x16c>
 8008390:	2b00      	cmp	r3, #0
 8008392:	d05c      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x15a>
 8008394:	2b10      	cmp	r3, #16
 8008396:	d05a      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x15a>
 8008398:	e062      	b.n	8008460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083aa:	f000 f980 	bl	80086ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	609a      	str	r2, [r3, #8]
      break;
 80083c6:	e04f      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083d8:	f000 f969 	bl	80086ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083ea:	609a      	str	r2, [r3, #8]
      break;
 80083ec:	e03c      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fa:	461a      	mov	r2, r3
 80083fc:	f000 f8e0 	bl	80085c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2150      	movs	r1, #80	; 0x50
 8008406:	4618      	mov	r0, r3
 8008408:	f000 f937 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 800840c:	e02c      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800841a:	461a      	mov	r2, r3
 800841c:	f000 f8fe 	bl	800861c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2160      	movs	r1, #96	; 0x60
 8008426:	4618      	mov	r0, r3
 8008428:	f000 f927 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 800842c:	e01c      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800843a:	461a      	mov	r2, r3
 800843c:	f000 f8c0 	bl	80085c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2140      	movs	r1, #64	; 0x40
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f917 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 800844c:	e00c      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f000 f90e 	bl	800867a <TIM_ITRx_SetConfig>
      break;
 800845e:	e003      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]
      break;
 8008464:	e000      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800848a:	bf00      	nop
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	bc80      	pop	{r7}
 8008492:	4770      	bx	lr

08008494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bc80      	pop	{r7}
 80084a4:	4770      	bx	lr

080084a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr
	...

080084cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a33      	ldr	r2, [pc, #204]	; (80085ac <TIM_Base_SetConfig+0xe0>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d013      	beq.n	800850c <TIM_Base_SetConfig+0x40>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a32      	ldr	r2, [pc, #200]	; (80085b0 <TIM_Base_SetConfig+0xe4>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d00f      	beq.n	800850c <TIM_Base_SetConfig+0x40>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f2:	d00b      	beq.n	800850c <TIM_Base_SetConfig+0x40>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a2f      	ldr	r2, [pc, #188]	; (80085b4 <TIM_Base_SetConfig+0xe8>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d007      	beq.n	800850c <TIM_Base_SetConfig+0x40>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a2e      	ldr	r2, [pc, #184]	; (80085b8 <TIM_Base_SetConfig+0xec>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d003      	beq.n	800850c <TIM_Base_SetConfig+0x40>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a2d      	ldr	r2, [pc, #180]	; (80085bc <TIM_Base_SetConfig+0xf0>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d108      	bne.n	800851e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a22      	ldr	r2, [pc, #136]	; (80085ac <TIM_Base_SetConfig+0xe0>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d013      	beq.n	800854e <TIM_Base_SetConfig+0x82>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a21      	ldr	r2, [pc, #132]	; (80085b0 <TIM_Base_SetConfig+0xe4>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00f      	beq.n	800854e <TIM_Base_SetConfig+0x82>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008534:	d00b      	beq.n	800854e <TIM_Base_SetConfig+0x82>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a1e      	ldr	r2, [pc, #120]	; (80085b4 <TIM_Base_SetConfig+0xe8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d007      	beq.n	800854e <TIM_Base_SetConfig+0x82>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a1d      	ldr	r2, [pc, #116]	; (80085b8 <TIM_Base_SetConfig+0xec>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d003      	beq.n	800854e <TIM_Base_SetConfig+0x82>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a1c      	ldr	r2, [pc, #112]	; (80085bc <TIM_Base_SetConfig+0xf0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d108      	bne.n	8008560 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a09      	ldr	r2, [pc, #36]	; (80085ac <TIM_Base_SetConfig+0xe0>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d003      	beq.n	8008594 <TIM_Base_SetConfig+0xc8>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a08      	ldr	r2, [pc, #32]	; (80085b0 <TIM_Base_SetConfig+0xe4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d103      	bne.n	800859c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	691a      	ldr	r2, [r3, #16]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	615a      	str	r2, [r3, #20]
}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bc80      	pop	{r7}
 80085aa:	4770      	bx	lr
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40013400 	.word	0x40013400
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800
 80085bc:	40000c00 	.word	0x40000c00

080085c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	f023 0201 	bic.w	r2, r3, #1
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f023 030a 	bic.w	r3, r3, #10
 80085fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	4313      	orrs	r3, r2
 8008604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	621a      	str	r2, [r3, #32]
}
 8008612:	bf00      	nop
 8008614:	371c      	adds	r7, #28
 8008616:	46bd      	mov	sp, r7
 8008618:	bc80      	pop	{r7}
 800861a:	4770      	bx	lr

0800861c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	f023 0210 	bic.w	r2, r3, #16
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	031b      	lsls	r3, r3, #12
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	4313      	orrs	r3, r2
 8008650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008658:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	011b      	lsls	r3, r3, #4
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	621a      	str	r2, [r3, #32]
}
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr

0800867a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	f043 0307 	orr.w	r3, r3, #7
 800869c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	609a      	str	r2, [r3, #8]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr

080086ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b087      	sub	sp, #28
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	021a      	lsls	r2, r3, #8
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	4313      	orrs	r3, r2
 80086da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	609a      	str	r2, [r3, #8]
}
 80086e2:	bf00      	nop
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr

080086ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008700:	2302      	movs	r3, #2
 8008702:	e050      	b.n	80087a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a1b      	ldr	r2, [pc, #108]	; (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d018      	beq.n	800877a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a19      	ldr	r2, [pc, #100]	; (80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d013      	beq.n	800877a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875a:	d00e      	beq.n	800877a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d009      	beq.n	800877a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a14      	ldr	r2, [pc, #80]	; (80087bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d004      	beq.n	800877a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a12      	ldr	r2, [pc, #72]	; (80087c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d10c      	bne.n	8008794 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	4313      	orrs	r3, r2
 800878a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr
 80087b0:	40012c00 	.word	0x40012c00
 80087b4:	40013400 	.word	0x40013400
 80087b8:	40000400 	.word	0x40000400
 80087bc:	40000800 	.word	0x40000800
 80087c0:	40000c00 	.word	0x40000c00

080087c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr

080087d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bc80      	pop	{r7}
 80087e6:	4770      	bx	lr

080087e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e042      	b.n	8008880 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7f9 fcce 	bl	80021b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2224      	movs	r2, #36	; 0x24
 8008818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800882a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fdc5 	bl	80093bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	691a      	ldr	r2, [r3, #16]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	695a      	ldr	r2, [r3, #20]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b08a      	sub	sp, #40	; 0x28
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	4613      	mov	r3, r2
 8008896:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d16d      	bne.n	8008984 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <HAL_UART_Transmit+0x2c>
 80088ae:	88fb      	ldrh	r3, [r7, #6]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e066      	b.n	8008986 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2221      	movs	r2, #33	; 0x21
 80088c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088c6:	f7fd f98f 	bl	8005be8 <HAL_GetTick>
 80088ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	88fa      	ldrh	r2, [r7, #6]
 80088d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	88fa      	ldrh	r2, [r7, #6]
 80088d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e0:	d108      	bne.n	80088f4 <HAL_UART_Transmit+0x6c>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d104      	bne.n	80088f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	61bb      	str	r3, [r7, #24]
 80088f2:	e003      	b.n	80088fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088fc:	e02a      	b.n	8008954 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2200      	movs	r2, #0
 8008906:	2180      	movs	r1, #128	; 0x80
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 fb14 	bl	8008f36 <UART_WaitOnFlagUntilTimeout>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e036      	b.n	8008986 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10b      	bne.n	8008936 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800892c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	3302      	adds	r3, #2
 8008932:	61bb      	str	r3, [r7, #24]
 8008934:	e007      	b.n	8008946 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	781a      	ldrb	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	3301      	adds	r3, #1
 8008944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800894a:	b29b      	uxth	r3, r3
 800894c:	3b01      	subs	r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008958:	b29b      	uxth	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1cf      	bne.n	80088fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2200      	movs	r2, #0
 8008966:	2140      	movs	r1, #64	; 0x40
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 fae4 	bl	8008f36 <UART_WaitOnFlagUntilTimeout>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e006      	b.n	8008986 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	e000      	b.n	8008986 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008984:	2302      	movs	r3, #2
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	4613      	mov	r3, r2
 800899a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b20      	cmp	r3, #32
 80089a6:	d112      	bne.n	80089ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <HAL_UART_Receive_IT+0x26>
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e00b      	b.n	80089d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089be:	88fb      	ldrh	r3, [r7, #6]
 80089c0:	461a      	mov	r2, r3
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fb24 	bl	8009012 <UART_Start_Receive_IT>
 80089ca:	4603      	mov	r3, r0
 80089cc:	e000      	b.n	80089d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80089ce:	2302      	movs	r3, #2
  }
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b0ba      	sub	sp, #232	; 0xe8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10f      	bne.n	8008a3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d009      	beq.n	8008a3e <HAL_UART_IRQHandler+0x66>
 8008a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fc01 	bl	800923e <UART_Receive_IT>
      return;
 8008a3c:	e25b      	b.n	8008ef6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 80de 	beq.w	8008c04 <HAL_UART_IRQHandler+0x22c>
 8008a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80d1 	beq.w	8008c04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <HAL_UART_IRQHandler+0xae>
 8008a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d005      	beq.n	8008a86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7e:	f043 0201 	orr.w	r2, r3, #1
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00b      	beq.n	8008aaa <HAL_UART_IRQHandler+0xd2>
 8008a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d005      	beq.n	8008aaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa2:	f043 0202 	orr.w	r2, r3, #2
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aae:	f003 0302 	and.w	r3, r3, #2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00b      	beq.n	8008ace <HAL_UART_IRQHandler+0xf6>
 8008ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d005      	beq.n	8008ace <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac6:	f043 0204 	orr.w	r2, r3, #4
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ad2:	f003 0308 	and.w	r3, r3, #8
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d011      	beq.n	8008afe <HAL_UART_IRQHandler+0x126>
 8008ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d105      	bne.n	8008af2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af6:	f043 0208 	orr.w	r2, r3, #8
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 81f2 	beq.w	8008eec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d008      	beq.n	8008b26 <HAL_UART_IRQHandler+0x14e>
 8008b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fb8c 	bl	800923e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bf14      	ite	ne
 8008b34:	2301      	movne	r3, #1
 8008b36:	2300      	moveq	r3, #0
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b42:	f003 0308 	and.w	r3, r3, #8
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <HAL_UART_IRQHandler+0x17a>
 8008b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d04f      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fa96 	bl	8009084 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d041      	beq.n	8008bea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b74:	e853 3f00 	ldrex	r3, [r3]
 8008b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3314      	adds	r3, #20
 8008b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1d9      	bne.n	8008b66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d013      	beq.n	8008be2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bbe:	4a7e      	ldr	r2, [pc, #504]	; (8008db8 <HAL_UART_IRQHandler+0x3e0>)
 8008bc0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fd f984 	bl	8005ed4 <HAL_DMA_Abort_IT>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d016      	beq.n	8008c00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be0:	e00e      	b.n	8008c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f993 	bl	8008f0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be8:	e00a      	b.n	8008c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f98f 	bl	8008f0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf0:	e006      	b.n	8008c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f98b 	bl	8008f0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008bfe:	e175      	b.n	8008eec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c00:	bf00      	nop
    return;
 8008c02:	e173      	b.n	8008eec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	f040 814f 	bne.w	8008eac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c12:	f003 0310 	and.w	r3, r3, #16
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 8148 	beq.w	8008eac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 8141 	beq.w	8008eac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60bb      	str	r3, [r7, #8]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	60bb      	str	r3, [r7, #8]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	60bb      	str	r3, [r7, #8]
 8008c3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 80b6 	beq.w	8008dbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8145 	beq.w	8008ef0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	f080 813e 	bcs.w	8008ef0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	f000 8088 	beq.w	8008d98 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	330c      	adds	r3, #12
 8008cb0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008cb4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008cc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cc4:	e841 2300 	strex	r3, r2, [r1]
 8008cc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1d9      	bne.n	8008c88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3314      	adds	r3, #20
 8008cda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ce6:	f023 0301 	bic.w	r3, r3, #1
 8008cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cf8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d04:	e841 2300 	strex	r3, r2, [r1]
 8008d08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e1      	bne.n	8008cd4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3314      	adds	r3, #20
 8008d16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3314      	adds	r3, #20
 8008d30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d34:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e3      	bne.n	8008d10 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	330c      	adds	r3, #12
 8008d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d68:	f023 0310 	bic.w	r3, r3, #16
 8008d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	330c      	adds	r3, #12
 8008d76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d7c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e3      	bne.n	8008d56 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fd f863 	bl	8005e5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f8b6 	bl	8008f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008db4:	e09c      	b.n	8008ef0 <HAL_UART_IRQHandler+0x518>
 8008db6:	bf00      	nop
 8008db8:	08009149 	.word	0x08009149
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 808e 	beq.w	8008ef4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 8089 	beq.w	8008ef4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	330c      	adds	r3, #12
 8008de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	330c      	adds	r3, #12
 8008e02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e06:	647a      	str	r2, [r7, #68]	; 0x44
 8008e08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e3      	bne.n	8008de2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3314      	adds	r3, #20
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	623b      	str	r3, [r7, #32]
   return(result);
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	f023 0301 	bic.w	r3, r3, #1
 8008e30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3314      	adds	r3, #20
 8008e3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e3e:	633a      	str	r2, [r7, #48]	; 0x30
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e3      	bne.n	8008e1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2220      	movs	r2, #32
 8008e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	330c      	adds	r3, #12
 8008e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f023 0310 	bic.w	r3, r3, #16
 8008e76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	330c      	adds	r3, #12
 8008e80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008e84:	61fa      	str	r2, [r7, #28]
 8008e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	69b9      	ldr	r1, [r7, #24]
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	617b      	str	r3, [r7, #20]
   return(result);
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e3      	bne.n	8008e60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f83b 	bl	8008f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008eaa:	e023      	b.n	8008ef4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d009      	beq.n	8008ecc <HAL_UART_IRQHandler+0x4f4>
 8008eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f953 	bl	8009170 <UART_Transmit_IT>
    return;
 8008eca:	e014      	b.n	8008ef6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00e      	beq.n	8008ef6 <HAL_UART_IRQHandler+0x51e>
 8008ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d008      	beq.n	8008ef6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f992 	bl	800920e <UART_EndTransmit_IT>
    return;
 8008eea:	e004      	b.n	8008ef6 <HAL_UART_IRQHandler+0x51e>
    return;
 8008eec:	bf00      	nop
 8008eee:	e002      	b.n	8008ef6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ef0:	bf00      	nop
 8008ef2:	e000      	b.n	8008ef6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ef4:	bf00      	nop
  }
}
 8008ef6:	37e8      	adds	r7, #232	; 0xe8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bc80      	pop	{r7}
 8008f0c:	4770      	bx	lr

08008f0e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bc80      	pop	{r7}
 8008f1e:	4770      	bx	lr

08008f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bc80      	pop	{r7}
 8008f34:	4770      	bx	lr

08008f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b090      	sub	sp, #64	; 0x40
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	603b      	str	r3, [r7, #0]
 8008f42:	4613      	mov	r3, r2
 8008f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f46:	e050      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d04c      	beq.n	8008fea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d007      	beq.n	8008f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f56:	f7fc fe47 	bl	8005be8 <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d241      	bcs.n	8008fea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	330c      	adds	r3, #12
 8008f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f86:	637a      	str	r2, [r7, #52]	; 0x34
 8008f88:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e5      	bne.n	8008f66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3314      	adds	r3, #20
 8008fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f023 0301 	bic.w	r3, r3, #1
 8008fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3314      	adds	r3, #20
 8008fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fba:	623a      	str	r2, [r7, #32]
 8008fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	69f9      	ldr	r1, [r7, #28]
 8008fc0:	6a3a      	ldr	r2, [r7, #32]
 8008fc2:	e841 2300 	strex	r3, r2, [r1]
 8008fc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e5      	bne.n	8008f9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2220      	movs	r2, #32
 8008fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2220      	movs	r2, #32
 8008fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e00f      	b.n	800900a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	bf0c      	ite	eq
 8008ffa:	2301      	moveq	r3, #1
 8008ffc:	2300      	movne	r3, #0
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	461a      	mov	r2, r3
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	429a      	cmp	r2, r3
 8009006:	d09f      	beq.n	8008f48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3740      	adds	r7, #64	; 0x40
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	4613      	mov	r3, r2
 800901e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	88fa      	ldrh	r2, [r7, #6]
 800902a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	88fa      	ldrh	r2, [r7, #6]
 8009030:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2222      	movs	r2, #34	; 0x22
 800903c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d007      	beq.n	8009058 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009056:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	695a      	ldr	r2, [r3, #20]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f042 0220 	orr.w	r2, r2, #32
 8009076:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	bc80      	pop	{r7}
 8009082:	4770      	bx	lr

08009084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009084:	b480      	push	{r7}
 8009086:	b095      	sub	sp, #84	; 0x54
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	330c      	adds	r3, #12
 8009092:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	330c      	adds	r3, #12
 80090aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090ac:	643a      	str	r2, [r7, #64]	; 0x40
 80090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e5      	bne.n	800908c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3314      	adds	r3, #20
 80090c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	f023 0301 	bic.w	r3, r3, #1
 80090d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3314      	adds	r3, #20
 80090de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e5      	bne.n	80090c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d119      	bne.n	8009130 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	330c      	adds	r3, #12
 8009102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	60bb      	str	r3, [r7, #8]
   return(result);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f023 0310 	bic.w	r3, r3, #16
 8009112:	647b      	str	r3, [r7, #68]	; 0x44
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	330c      	adds	r3, #12
 800911a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800911c:	61ba      	str	r2, [r7, #24]
 800911e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	6979      	ldr	r1, [r7, #20]
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	613b      	str	r3, [r7, #16]
   return(result);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e5      	bne.n	80090fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2220      	movs	r2, #32
 8009134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800913e:	bf00      	nop
 8009140:	3754      	adds	r7, #84	; 0x54
 8009142:	46bd      	mov	sp, r7
 8009144:	bc80      	pop	{r7}
 8009146:	4770      	bx	lr

08009148 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff fed3 	bl	8008f0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009168:	bf00      	nop
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b21      	cmp	r3, #33	; 0x21
 8009182:	d13e      	bne.n	8009202 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800918c:	d114      	bne.n	80091b8 <UART_Transmit_IT+0x48>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d110      	bne.n	80091b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	1c9a      	adds	r2, r3, #2
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	621a      	str	r2, [r3, #32]
 80091b6:	e008      	b.n	80091ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	1c59      	adds	r1, r3, #1
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	6211      	str	r1, [r2, #32]
 80091c2:	781a      	ldrb	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	3b01      	subs	r3, #1
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	4619      	mov	r1, r3
 80091d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10f      	bne.n	80091fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68da      	ldr	r2, [r3, #12]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	e000      	b.n	8009204 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009202:	2302      	movs	r3, #2
  }
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	bc80      	pop	{r7}
 800920c:	4770      	bx	lr

0800920e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009224:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2220      	movs	r2, #32
 800922a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7ff fe64 	bl	8008efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b08c      	sub	sp, #48	; 0x30
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b22      	cmp	r3, #34	; 0x22
 8009250:	f040 80ae 	bne.w	80093b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800925c:	d117      	bne.n	800928e <UART_Receive_IT+0x50>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d113      	bne.n	800928e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	b29b      	uxth	r3, r3
 8009278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800927c:	b29a      	uxth	r2, r3
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	1c9a      	adds	r2, r3, #2
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	629a      	str	r2, [r3, #40]	; 0x28
 800928c:	e026      	b.n	80092dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009294:	2300      	movs	r3, #0
 8009296:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a0:	d007      	beq.n	80092b2 <UART_Receive_IT+0x74>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10a      	bne.n	80092c0 <UART_Receive_IT+0x82>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d106      	bne.n	80092c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092bc:	701a      	strb	r2, [r3, #0]
 80092be:	e008      	b.n	80092d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d6:	1c5a      	adds	r2, r3, #1
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	4619      	mov	r1, r3
 80092ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d15d      	bne.n	80093ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 0220 	bic.w	r2, r2, #32
 80092fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68da      	ldr	r2, [r3, #12]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800930e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	695a      	ldr	r2, [r3, #20]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 0201 	bic.w	r2, r2, #1
 800931e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2220      	movs	r2, #32
 8009324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	2b01      	cmp	r3, #1
 8009334:	d135      	bne.n	80093a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	330c      	adds	r3, #12
 8009342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	613b      	str	r3, [r7, #16]
   return(result);
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f023 0310 	bic.w	r3, r3, #16
 8009352:	627b      	str	r3, [r7, #36]	; 0x24
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	330c      	adds	r3, #12
 800935a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935c:	623a      	str	r2, [r7, #32]
 800935e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	69f9      	ldr	r1, [r7, #28]
 8009362:	6a3a      	ldr	r2, [r7, #32]
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	61bb      	str	r3, [r7, #24]
   return(result);
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e5      	bne.n	800933c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0310 	and.w	r3, r3, #16
 800937a:	2b10      	cmp	r3, #16
 800937c:	d10a      	bne.n	8009394 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	60fb      	str	r3, [r7, #12]
 8009392:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff fdc0 	bl	8008f20 <HAL_UARTEx_RxEventCallback>
 80093a0:	e002      	b.n	80093a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7f8 fa58 	bl	8001858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	e002      	b.n	80093b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	e000      	b.n	80093b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80093b0:	2302      	movs	r3, #2
  }
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3730      	adds	r7, #48	; 0x30
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	431a      	orrs	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80093f6:	f023 030c 	bic.w	r3, r3, #12
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6812      	ldr	r2, [r2, #0]
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	430b      	orrs	r3, r1
 8009402:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	699a      	ldr	r2, [r3, #24]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a2c      	ldr	r2, [pc, #176]	; (80094d0 <UART_SetConfig+0x114>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d103      	bne.n	800942c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009424:	f7fe fc72 	bl	8007d0c <HAL_RCC_GetPCLK2Freq>
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	e002      	b.n	8009432 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800942c:	f7fe fc5a 	bl	8007ce4 <HAL_RCC_GetPCLK1Freq>
 8009430:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	4613      	mov	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	009a      	lsls	r2, r3, #2
 800943c:	441a      	add	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	fbb2 f3f3 	udiv	r3, r2, r3
 8009448:	4a22      	ldr	r2, [pc, #136]	; (80094d4 <UART_SetConfig+0x118>)
 800944a:	fba2 2303 	umull	r2, r3, r2, r3
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	0119      	lsls	r1, r3, #4
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009a      	lsls	r2, r3, #2
 800945c:	441a      	add	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	fbb2 f2f3 	udiv	r2, r2, r3
 8009468:	4b1a      	ldr	r3, [pc, #104]	; (80094d4 <UART_SetConfig+0x118>)
 800946a:	fba3 0302 	umull	r0, r3, r3, r2
 800946e:	095b      	lsrs	r3, r3, #5
 8009470:	2064      	movs	r0, #100	; 0x64
 8009472:	fb00 f303 	mul.w	r3, r0, r3
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	3332      	adds	r3, #50	; 0x32
 800947c:	4a15      	ldr	r2, [pc, #84]	; (80094d4 <UART_SetConfig+0x118>)
 800947e:	fba2 2303 	umull	r2, r3, r2, r3
 8009482:	095b      	lsrs	r3, r3, #5
 8009484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009488:	4419      	add	r1, r3
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4613      	mov	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	009a      	lsls	r2, r3, #2
 8009494:	441a      	add	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	fbb2 f2f3 	udiv	r2, r2, r3
 80094a0:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <UART_SetConfig+0x118>)
 80094a2:	fba3 0302 	umull	r0, r3, r3, r2
 80094a6:	095b      	lsrs	r3, r3, #5
 80094a8:	2064      	movs	r0, #100	; 0x64
 80094aa:	fb00 f303 	mul.w	r3, r0, r3
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	011b      	lsls	r3, r3, #4
 80094b2:	3332      	adds	r3, #50	; 0x32
 80094b4:	4a07      	ldr	r2, [pc, #28]	; (80094d4 <UART_SetConfig+0x118>)
 80094b6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ba:	095b      	lsrs	r3, r3, #5
 80094bc:	f003 020f 	and.w	r2, r3, #15
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	440a      	add	r2, r1
 80094c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	40013800 	.word	0x40013800
 80094d4:	51eb851f 	.word	0x51eb851f

080094d8 <__cvt>:
 80094d8:	2b00      	cmp	r3, #0
 80094da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094de:	461f      	mov	r7, r3
 80094e0:	bfbb      	ittet	lt
 80094e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80094e6:	461f      	movlt	r7, r3
 80094e8:	2300      	movge	r3, #0
 80094ea:	232d      	movlt	r3, #45	; 0x2d
 80094ec:	b088      	sub	sp, #32
 80094ee:	4614      	mov	r4, r2
 80094f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80094f4:	7013      	strb	r3, [r2, #0]
 80094f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80094fc:	f023 0820 	bic.w	r8, r3, #32
 8009500:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009504:	d005      	beq.n	8009512 <__cvt+0x3a>
 8009506:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800950a:	d100      	bne.n	800950e <__cvt+0x36>
 800950c:	3501      	adds	r5, #1
 800950e:	2302      	movs	r3, #2
 8009510:	e000      	b.n	8009514 <__cvt+0x3c>
 8009512:	2303      	movs	r3, #3
 8009514:	aa07      	add	r2, sp, #28
 8009516:	9204      	str	r2, [sp, #16]
 8009518:	aa06      	add	r2, sp, #24
 800951a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800951e:	e9cd 3500 	strd	r3, r5, [sp]
 8009522:	4622      	mov	r2, r4
 8009524:	463b      	mov	r3, r7
 8009526:	f001 fa27 	bl	800a978 <_dtoa_r>
 800952a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800952e:	4606      	mov	r6, r0
 8009530:	d102      	bne.n	8009538 <__cvt+0x60>
 8009532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009534:	07db      	lsls	r3, r3, #31
 8009536:	d522      	bpl.n	800957e <__cvt+0xa6>
 8009538:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800953c:	eb06 0905 	add.w	r9, r6, r5
 8009540:	d110      	bne.n	8009564 <__cvt+0x8c>
 8009542:	7833      	ldrb	r3, [r6, #0]
 8009544:	2b30      	cmp	r3, #48	; 0x30
 8009546:	d10a      	bne.n	800955e <__cvt+0x86>
 8009548:	2200      	movs	r2, #0
 800954a:	2300      	movs	r3, #0
 800954c:	4620      	mov	r0, r4
 800954e:	4639      	mov	r1, r7
 8009550:	f7f7 fb4a 	bl	8000be8 <__aeabi_dcmpeq>
 8009554:	b918      	cbnz	r0, 800955e <__cvt+0x86>
 8009556:	f1c5 0501 	rsb	r5, r5, #1
 800955a:	f8ca 5000 	str.w	r5, [sl]
 800955e:	f8da 3000 	ldr.w	r3, [sl]
 8009562:	4499      	add	r9, r3
 8009564:	2200      	movs	r2, #0
 8009566:	2300      	movs	r3, #0
 8009568:	4620      	mov	r0, r4
 800956a:	4639      	mov	r1, r7
 800956c:	f7f7 fb3c 	bl	8000be8 <__aeabi_dcmpeq>
 8009570:	b108      	cbz	r0, 8009576 <__cvt+0x9e>
 8009572:	f8cd 901c 	str.w	r9, [sp, #28]
 8009576:	2230      	movs	r2, #48	; 0x30
 8009578:	9b07      	ldr	r3, [sp, #28]
 800957a:	454b      	cmp	r3, r9
 800957c:	d307      	bcc.n	800958e <__cvt+0xb6>
 800957e:	4630      	mov	r0, r6
 8009580:	9b07      	ldr	r3, [sp, #28]
 8009582:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009584:	1b9b      	subs	r3, r3, r6
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	b008      	add	sp, #32
 800958a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958e:	1c59      	adds	r1, r3, #1
 8009590:	9107      	str	r1, [sp, #28]
 8009592:	701a      	strb	r2, [r3, #0]
 8009594:	e7f0      	b.n	8009578 <__cvt+0xa0>

08009596 <__exponent>:
 8009596:	4603      	mov	r3, r0
 8009598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800959a:	2900      	cmp	r1, #0
 800959c:	f803 2b02 	strb.w	r2, [r3], #2
 80095a0:	bfb6      	itet	lt
 80095a2:	222d      	movlt	r2, #45	; 0x2d
 80095a4:	222b      	movge	r2, #43	; 0x2b
 80095a6:	4249      	neglt	r1, r1
 80095a8:	2909      	cmp	r1, #9
 80095aa:	7042      	strb	r2, [r0, #1]
 80095ac:	dd2a      	ble.n	8009604 <__exponent+0x6e>
 80095ae:	f10d 0207 	add.w	r2, sp, #7
 80095b2:	4617      	mov	r7, r2
 80095b4:	260a      	movs	r6, #10
 80095b6:	fb91 f5f6 	sdiv	r5, r1, r6
 80095ba:	4694      	mov	ip, r2
 80095bc:	fb06 1415 	mls	r4, r6, r5, r1
 80095c0:	3430      	adds	r4, #48	; 0x30
 80095c2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80095c6:	460c      	mov	r4, r1
 80095c8:	2c63      	cmp	r4, #99	; 0x63
 80095ca:	4629      	mov	r1, r5
 80095cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80095d0:	dcf1      	bgt.n	80095b6 <__exponent+0x20>
 80095d2:	3130      	adds	r1, #48	; 0x30
 80095d4:	f1ac 0402 	sub.w	r4, ip, #2
 80095d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80095dc:	4622      	mov	r2, r4
 80095de:	1c41      	adds	r1, r0, #1
 80095e0:	42ba      	cmp	r2, r7
 80095e2:	d30a      	bcc.n	80095fa <__exponent+0x64>
 80095e4:	f10d 0209 	add.w	r2, sp, #9
 80095e8:	eba2 020c 	sub.w	r2, r2, ip
 80095ec:	42bc      	cmp	r4, r7
 80095ee:	bf88      	it	hi
 80095f0:	2200      	movhi	r2, #0
 80095f2:	4413      	add	r3, r2
 80095f4:	1a18      	subs	r0, r3, r0
 80095f6:	b003      	add	sp, #12
 80095f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80095fe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009602:	e7ed      	b.n	80095e0 <__exponent+0x4a>
 8009604:	2330      	movs	r3, #48	; 0x30
 8009606:	3130      	adds	r1, #48	; 0x30
 8009608:	7083      	strb	r3, [r0, #2]
 800960a:	70c1      	strb	r1, [r0, #3]
 800960c:	1d03      	adds	r3, r0, #4
 800960e:	e7f1      	b.n	80095f4 <__exponent+0x5e>

08009610 <_printf_float>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	b091      	sub	sp, #68	; 0x44
 8009616:	460c      	mov	r4, r1
 8009618:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800961c:	4616      	mov	r6, r2
 800961e:	461f      	mov	r7, r3
 8009620:	4605      	mov	r5, r0
 8009622:	f001 f879 	bl	800a718 <_localeconv_r>
 8009626:	6803      	ldr	r3, [r0, #0]
 8009628:	4618      	mov	r0, r3
 800962a:	9309      	str	r3, [sp, #36]	; 0x24
 800962c:	f7f6 fdfc 	bl	8000228 <strlen>
 8009630:	2300      	movs	r3, #0
 8009632:	930e      	str	r3, [sp, #56]	; 0x38
 8009634:	f8d8 3000 	ldr.w	r3, [r8]
 8009638:	900a      	str	r0, [sp, #40]	; 0x28
 800963a:	3307      	adds	r3, #7
 800963c:	f023 0307 	bic.w	r3, r3, #7
 8009640:	f103 0208 	add.w	r2, r3, #8
 8009644:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009648:	f8d4 b000 	ldr.w	fp, [r4]
 800964c:	f8c8 2000 	str.w	r2, [r8]
 8009650:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009654:	4652      	mov	r2, sl
 8009656:	4643      	mov	r3, r8
 8009658:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800965c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009660:	930b      	str	r3, [sp, #44]	; 0x2c
 8009662:	f04f 32ff 	mov.w	r2, #4294967295
 8009666:	4650      	mov	r0, sl
 8009668:	4b9c      	ldr	r3, [pc, #624]	; (80098dc <_printf_float+0x2cc>)
 800966a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800966c:	f7f7 faee 	bl	8000c4c <__aeabi_dcmpun>
 8009670:	bb70      	cbnz	r0, 80096d0 <_printf_float+0xc0>
 8009672:	f04f 32ff 	mov.w	r2, #4294967295
 8009676:	4650      	mov	r0, sl
 8009678:	4b98      	ldr	r3, [pc, #608]	; (80098dc <_printf_float+0x2cc>)
 800967a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800967c:	f7f7 fac8 	bl	8000c10 <__aeabi_dcmple>
 8009680:	bb30      	cbnz	r0, 80096d0 <_printf_float+0xc0>
 8009682:	2200      	movs	r2, #0
 8009684:	2300      	movs	r3, #0
 8009686:	4650      	mov	r0, sl
 8009688:	4641      	mov	r1, r8
 800968a:	f7f7 fab7 	bl	8000bfc <__aeabi_dcmplt>
 800968e:	b110      	cbz	r0, 8009696 <_printf_float+0x86>
 8009690:	232d      	movs	r3, #45	; 0x2d
 8009692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009696:	4a92      	ldr	r2, [pc, #584]	; (80098e0 <_printf_float+0x2d0>)
 8009698:	4b92      	ldr	r3, [pc, #584]	; (80098e4 <_printf_float+0x2d4>)
 800969a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800969e:	bf94      	ite	ls
 80096a0:	4690      	movls	r8, r2
 80096a2:	4698      	movhi	r8, r3
 80096a4:	2303      	movs	r3, #3
 80096a6:	f04f 0a00 	mov.w	sl, #0
 80096aa:	6123      	str	r3, [r4, #16]
 80096ac:	f02b 0304 	bic.w	r3, fp, #4
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	4633      	mov	r3, r6
 80096b4:	4621      	mov	r1, r4
 80096b6:	4628      	mov	r0, r5
 80096b8:	9700      	str	r7, [sp, #0]
 80096ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80096bc:	f000 f9d6 	bl	8009a6c <_printf_common>
 80096c0:	3001      	adds	r0, #1
 80096c2:	f040 8090 	bne.w	80097e6 <_printf_float+0x1d6>
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ca:	b011      	add	sp, #68	; 0x44
 80096cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d0:	4652      	mov	r2, sl
 80096d2:	4643      	mov	r3, r8
 80096d4:	4650      	mov	r0, sl
 80096d6:	4641      	mov	r1, r8
 80096d8:	f7f7 fab8 	bl	8000c4c <__aeabi_dcmpun>
 80096dc:	b148      	cbz	r0, 80096f2 <_printf_float+0xe2>
 80096de:	f1b8 0f00 	cmp.w	r8, #0
 80096e2:	bfb8      	it	lt
 80096e4:	232d      	movlt	r3, #45	; 0x2d
 80096e6:	4a80      	ldr	r2, [pc, #512]	; (80098e8 <_printf_float+0x2d8>)
 80096e8:	bfb8      	it	lt
 80096ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096ee:	4b7f      	ldr	r3, [pc, #508]	; (80098ec <_printf_float+0x2dc>)
 80096f0:	e7d3      	b.n	800969a <_printf_float+0x8a>
 80096f2:	6863      	ldr	r3, [r4, #4]
 80096f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80096f8:	1c5a      	adds	r2, r3, #1
 80096fa:	d142      	bne.n	8009782 <_printf_float+0x172>
 80096fc:	2306      	movs	r3, #6
 80096fe:	6063      	str	r3, [r4, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	9206      	str	r2, [sp, #24]
 8009704:	aa0e      	add	r2, sp, #56	; 0x38
 8009706:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800970a:	aa0d      	add	r2, sp, #52	; 0x34
 800970c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009710:	9203      	str	r2, [sp, #12]
 8009712:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009716:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800971a:	6023      	str	r3, [r4, #0]
 800971c:	6863      	ldr	r3, [r4, #4]
 800971e:	4652      	mov	r2, sl
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4628      	mov	r0, r5
 8009724:	4643      	mov	r3, r8
 8009726:	910b      	str	r1, [sp, #44]	; 0x2c
 8009728:	f7ff fed6 	bl	80094d8 <__cvt>
 800972c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800972e:	4680      	mov	r8, r0
 8009730:	2947      	cmp	r1, #71	; 0x47
 8009732:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009734:	d108      	bne.n	8009748 <_printf_float+0x138>
 8009736:	1cc8      	adds	r0, r1, #3
 8009738:	db02      	blt.n	8009740 <_printf_float+0x130>
 800973a:	6863      	ldr	r3, [r4, #4]
 800973c:	4299      	cmp	r1, r3
 800973e:	dd40      	ble.n	80097c2 <_printf_float+0x1b2>
 8009740:	f1a9 0902 	sub.w	r9, r9, #2
 8009744:	fa5f f989 	uxtb.w	r9, r9
 8009748:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800974c:	d81f      	bhi.n	800978e <_printf_float+0x17e>
 800974e:	464a      	mov	r2, r9
 8009750:	3901      	subs	r1, #1
 8009752:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009756:	910d      	str	r1, [sp, #52]	; 0x34
 8009758:	f7ff ff1d 	bl	8009596 <__exponent>
 800975c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800975e:	4682      	mov	sl, r0
 8009760:	1813      	adds	r3, r2, r0
 8009762:	2a01      	cmp	r2, #1
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	dc02      	bgt.n	800976e <_printf_float+0x15e>
 8009768:	6822      	ldr	r2, [r4, #0]
 800976a:	07d2      	lsls	r2, r2, #31
 800976c:	d501      	bpl.n	8009772 <_printf_float+0x162>
 800976e:	3301      	adds	r3, #1
 8009770:	6123      	str	r3, [r4, #16]
 8009772:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009776:	2b00      	cmp	r3, #0
 8009778:	d09b      	beq.n	80096b2 <_printf_float+0xa2>
 800977a:	232d      	movs	r3, #45	; 0x2d
 800977c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009780:	e797      	b.n	80096b2 <_printf_float+0xa2>
 8009782:	2947      	cmp	r1, #71	; 0x47
 8009784:	d1bc      	bne.n	8009700 <_printf_float+0xf0>
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1ba      	bne.n	8009700 <_printf_float+0xf0>
 800978a:	2301      	movs	r3, #1
 800978c:	e7b7      	b.n	80096fe <_printf_float+0xee>
 800978e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009792:	d118      	bne.n	80097c6 <_printf_float+0x1b6>
 8009794:	2900      	cmp	r1, #0
 8009796:	6863      	ldr	r3, [r4, #4]
 8009798:	dd0b      	ble.n	80097b2 <_printf_float+0x1a2>
 800979a:	6121      	str	r1, [r4, #16]
 800979c:	b913      	cbnz	r3, 80097a4 <_printf_float+0x194>
 800979e:	6822      	ldr	r2, [r4, #0]
 80097a0:	07d0      	lsls	r0, r2, #31
 80097a2:	d502      	bpl.n	80097aa <_printf_float+0x19a>
 80097a4:	3301      	adds	r3, #1
 80097a6:	440b      	add	r3, r1
 80097a8:	6123      	str	r3, [r4, #16]
 80097aa:	f04f 0a00 	mov.w	sl, #0
 80097ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80097b0:	e7df      	b.n	8009772 <_printf_float+0x162>
 80097b2:	b913      	cbnz	r3, 80097ba <_printf_float+0x1aa>
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	07d2      	lsls	r2, r2, #31
 80097b8:	d501      	bpl.n	80097be <_printf_float+0x1ae>
 80097ba:	3302      	adds	r3, #2
 80097bc:	e7f4      	b.n	80097a8 <_printf_float+0x198>
 80097be:	2301      	movs	r3, #1
 80097c0:	e7f2      	b.n	80097a8 <_printf_float+0x198>
 80097c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097c8:	4299      	cmp	r1, r3
 80097ca:	db05      	blt.n	80097d8 <_printf_float+0x1c8>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	6121      	str	r1, [r4, #16]
 80097d0:	07d8      	lsls	r0, r3, #31
 80097d2:	d5ea      	bpl.n	80097aa <_printf_float+0x19a>
 80097d4:	1c4b      	adds	r3, r1, #1
 80097d6:	e7e7      	b.n	80097a8 <_printf_float+0x198>
 80097d8:	2900      	cmp	r1, #0
 80097da:	bfcc      	ite	gt
 80097dc:	2201      	movgt	r2, #1
 80097de:	f1c1 0202 	rsble	r2, r1, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	e7e0      	b.n	80097a8 <_printf_float+0x198>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	055a      	lsls	r2, r3, #21
 80097ea:	d407      	bmi.n	80097fc <_printf_float+0x1ec>
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	4642      	mov	r2, r8
 80097f0:	4631      	mov	r1, r6
 80097f2:	4628      	mov	r0, r5
 80097f4:	47b8      	blx	r7
 80097f6:	3001      	adds	r0, #1
 80097f8:	d12b      	bne.n	8009852 <_printf_float+0x242>
 80097fa:	e764      	b.n	80096c6 <_printf_float+0xb6>
 80097fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009800:	f240 80dd 	bls.w	80099be <_printf_float+0x3ae>
 8009804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009808:	2200      	movs	r2, #0
 800980a:	2300      	movs	r3, #0
 800980c:	f7f7 f9ec 	bl	8000be8 <__aeabi_dcmpeq>
 8009810:	2800      	cmp	r0, #0
 8009812:	d033      	beq.n	800987c <_printf_float+0x26c>
 8009814:	2301      	movs	r3, #1
 8009816:	4631      	mov	r1, r6
 8009818:	4628      	mov	r0, r5
 800981a:	4a35      	ldr	r2, [pc, #212]	; (80098f0 <_printf_float+0x2e0>)
 800981c:	47b8      	blx	r7
 800981e:	3001      	adds	r0, #1
 8009820:	f43f af51 	beq.w	80096c6 <_printf_float+0xb6>
 8009824:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009828:	429a      	cmp	r2, r3
 800982a:	db02      	blt.n	8009832 <_printf_float+0x222>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	07d8      	lsls	r0, r3, #31
 8009830:	d50f      	bpl.n	8009852 <_printf_float+0x242>
 8009832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009836:	4631      	mov	r1, r6
 8009838:	4628      	mov	r0, r5
 800983a:	47b8      	blx	r7
 800983c:	3001      	adds	r0, #1
 800983e:	f43f af42 	beq.w	80096c6 <_printf_float+0xb6>
 8009842:	f04f 0800 	mov.w	r8, #0
 8009846:	f104 091a 	add.w	r9, r4, #26
 800984a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800984c:	3b01      	subs	r3, #1
 800984e:	4543      	cmp	r3, r8
 8009850:	dc09      	bgt.n	8009866 <_printf_float+0x256>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	079b      	lsls	r3, r3, #30
 8009856:	f100 8104 	bmi.w	8009a62 <_printf_float+0x452>
 800985a:	68e0      	ldr	r0, [r4, #12]
 800985c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800985e:	4298      	cmp	r0, r3
 8009860:	bfb8      	it	lt
 8009862:	4618      	movlt	r0, r3
 8009864:	e731      	b.n	80096ca <_printf_float+0xba>
 8009866:	2301      	movs	r3, #1
 8009868:	464a      	mov	r2, r9
 800986a:	4631      	mov	r1, r6
 800986c:	4628      	mov	r0, r5
 800986e:	47b8      	blx	r7
 8009870:	3001      	adds	r0, #1
 8009872:	f43f af28 	beq.w	80096c6 <_printf_float+0xb6>
 8009876:	f108 0801 	add.w	r8, r8, #1
 800987a:	e7e6      	b.n	800984a <_printf_float+0x23a>
 800987c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800987e:	2b00      	cmp	r3, #0
 8009880:	dc38      	bgt.n	80098f4 <_printf_float+0x2e4>
 8009882:	2301      	movs	r3, #1
 8009884:	4631      	mov	r1, r6
 8009886:	4628      	mov	r0, r5
 8009888:	4a19      	ldr	r2, [pc, #100]	; (80098f0 <_printf_float+0x2e0>)
 800988a:	47b8      	blx	r7
 800988c:	3001      	adds	r0, #1
 800988e:	f43f af1a 	beq.w	80096c6 <_printf_float+0xb6>
 8009892:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009896:	4313      	orrs	r3, r2
 8009898:	d102      	bne.n	80098a0 <_printf_float+0x290>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	07d9      	lsls	r1, r3, #31
 800989e:	d5d8      	bpl.n	8009852 <_printf_float+0x242>
 80098a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098a4:	4631      	mov	r1, r6
 80098a6:	4628      	mov	r0, r5
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	f43f af0b 	beq.w	80096c6 <_printf_float+0xb6>
 80098b0:	f04f 0900 	mov.w	r9, #0
 80098b4:	f104 0a1a 	add.w	sl, r4, #26
 80098b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ba:	425b      	negs	r3, r3
 80098bc:	454b      	cmp	r3, r9
 80098be:	dc01      	bgt.n	80098c4 <_printf_float+0x2b4>
 80098c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098c2:	e794      	b.n	80097ee <_printf_float+0x1de>
 80098c4:	2301      	movs	r3, #1
 80098c6:	4652      	mov	r2, sl
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	47b8      	blx	r7
 80098ce:	3001      	adds	r0, #1
 80098d0:	f43f aef9 	beq.w	80096c6 <_printf_float+0xb6>
 80098d4:	f109 0901 	add.w	r9, r9, #1
 80098d8:	e7ee      	b.n	80098b8 <_printf_float+0x2a8>
 80098da:	bf00      	nop
 80098dc:	7fefffff 	.word	0x7fefffff
 80098e0:	0800f3fa 	.word	0x0800f3fa
 80098e4:	0800f3fe 	.word	0x0800f3fe
 80098e8:	0800f402 	.word	0x0800f402
 80098ec:	0800f406 	.word	0x0800f406
 80098f0:	0800f7d0 	.word	0x0800f7d0
 80098f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098f8:	429a      	cmp	r2, r3
 80098fa:	bfa8      	it	ge
 80098fc:	461a      	movge	r2, r3
 80098fe:	2a00      	cmp	r2, #0
 8009900:	4691      	mov	r9, r2
 8009902:	dc37      	bgt.n	8009974 <_printf_float+0x364>
 8009904:	f04f 0b00 	mov.w	fp, #0
 8009908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800990c:	f104 021a 	add.w	r2, r4, #26
 8009910:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009914:	ebaa 0309 	sub.w	r3, sl, r9
 8009918:	455b      	cmp	r3, fp
 800991a:	dc33      	bgt.n	8009984 <_printf_float+0x374>
 800991c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009920:	429a      	cmp	r2, r3
 8009922:	db3b      	blt.n	800999c <_printf_float+0x38c>
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	07da      	lsls	r2, r3, #31
 8009928:	d438      	bmi.n	800999c <_printf_float+0x38c>
 800992a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800992e:	eba2 0903 	sub.w	r9, r2, r3
 8009932:	eba2 020a 	sub.w	r2, r2, sl
 8009936:	4591      	cmp	r9, r2
 8009938:	bfa8      	it	ge
 800993a:	4691      	movge	r9, r2
 800993c:	f1b9 0f00 	cmp.w	r9, #0
 8009940:	dc34      	bgt.n	80099ac <_printf_float+0x39c>
 8009942:	f04f 0800 	mov.w	r8, #0
 8009946:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800994a:	f104 0a1a 	add.w	sl, r4, #26
 800994e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009952:	1a9b      	subs	r3, r3, r2
 8009954:	eba3 0309 	sub.w	r3, r3, r9
 8009958:	4543      	cmp	r3, r8
 800995a:	f77f af7a 	ble.w	8009852 <_printf_float+0x242>
 800995e:	2301      	movs	r3, #1
 8009960:	4652      	mov	r2, sl
 8009962:	4631      	mov	r1, r6
 8009964:	4628      	mov	r0, r5
 8009966:	47b8      	blx	r7
 8009968:	3001      	adds	r0, #1
 800996a:	f43f aeac 	beq.w	80096c6 <_printf_float+0xb6>
 800996e:	f108 0801 	add.w	r8, r8, #1
 8009972:	e7ec      	b.n	800994e <_printf_float+0x33e>
 8009974:	4613      	mov	r3, r2
 8009976:	4631      	mov	r1, r6
 8009978:	4642      	mov	r2, r8
 800997a:	4628      	mov	r0, r5
 800997c:	47b8      	blx	r7
 800997e:	3001      	adds	r0, #1
 8009980:	d1c0      	bne.n	8009904 <_printf_float+0x2f4>
 8009982:	e6a0      	b.n	80096c6 <_printf_float+0xb6>
 8009984:	2301      	movs	r3, #1
 8009986:	4631      	mov	r1, r6
 8009988:	4628      	mov	r0, r5
 800998a:	920b      	str	r2, [sp, #44]	; 0x2c
 800998c:	47b8      	blx	r7
 800998e:	3001      	adds	r0, #1
 8009990:	f43f ae99 	beq.w	80096c6 <_printf_float+0xb6>
 8009994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009996:	f10b 0b01 	add.w	fp, fp, #1
 800999a:	e7b9      	b.n	8009910 <_printf_float+0x300>
 800999c:	4631      	mov	r1, r6
 800999e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099a2:	4628      	mov	r0, r5
 80099a4:	47b8      	blx	r7
 80099a6:	3001      	adds	r0, #1
 80099a8:	d1bf      	bne.n	800992a <_printf_float+0x31a>
 80099aa:	e68c      	b.n	80096c6 <_printf_float+0xb6>
 80099ac:	464b      	mov	r3, r9
 80099ae:	4631      	mov	r1, r6
 80099b0:	4628      	mov	r0, r5
 80099b2:	eb08 020a 	add.w	r2, r8, sl
 80099b6:	47b8      	blx	r7
 80099b8:	3001      	adds	r0, #1
 80099ba:	d1c2      	bne.n	8009942 <_printf_float+0x332>
 80099bc:	e683      	b.n	80096c6 <_printf_float+0xb6>
 80099be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099c0:	2a01      	cmp	r2, #1
 80099c2:	dc01      	bgt.n	80099c8 <_printf_float+0x3b8>
 80099c4:	07db      	lsls	r3, r3, #31
 80099c6:	d539      	bpl.n	8009a3c <_printf_float+0x42c>
 80099c8:	2301      	movs	r3, #1
 80099ca:	4642      	mov	r2, r8
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	f43f ae77 	beq.w	80096c6 <_printf_float+0xb6>
 80099d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099dc:	4631      	mov	r1, r6
 80099de:	4628      	mov	r0, r5
 80099e0:	47b8      	blx	r7
 80099e2:	3001      	adds	r0, #1
 80099e4:	f43f ae6f 	beq.w	80096c6 <_printf_float+0xb6>
 80099e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099ec:	2200      	movs	r2, #0
 80099ee:	2300      	movs	r3, #0
 80099f0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80099f4:	f7f7 f8f8 	bl	8000be8 <__aeabi_dcmpeq>
 80099f8:	b9d8      	cbnz	r0, 8009a32 <_printf_float+0x422>
 80099fa:	f109 33ff 	add.w	r3, r9, #4294967295
 80099fe:	f108 0201 	add.w	r2, r8, #1
 8009a02:	4631      	mov	r1, r6
 8009a04:	4628      	mov	r0, r5
 8009a06:	47b8      	blx	r7
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d10e      	bne.n	8009a2a <_printf_float+0x41a>
 8009a0c:	e65b      	b.n	80096c6 <_printf_float+0xb6>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	464a      	mov	r2, r9
 8009a12:	4631      	mov	r1, r6
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	f43f ae54 	beq.w	80096c6 <_printf_float+0xb6>
 8009a1e:	f108 0801 	add.w	r8, r8, #1
 8009a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a24:	3b01      	subs	r3, #1
 8009a26:	4543      	cmp	r3, r8
 8009a28:	dcf1      	bgt.n	8009a0e <_printf_float+0x3fe>
 8009a2a:	4653      	mov	r3, sl
 8009a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a30:	e6de      	b.n	80097f0 <_printf_float+0x1e0>
 8009a32:	f04f 0800 	mov.w	r8, #0
 8009a36:	f104 091a 	add.w	r9, r4, #26
 8009a3a:	e7f2      	b.n	8009a22 <_printf_float+0x412>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	4642      	mov	r2, r8
 8009a40:	e7df      	b.n	8009a02 <_printf_float+0x3f2>
 8009a42:	2301      	movs	r3, #1
 8009a44:	464a      	mov	r2, r9
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f43f ae3a 	beq.w	80096c6 <_printf_float+0xb6>
 8009a52:	f108 0801 	add.w	r8, r8, #1
 8009a56:	68e3      	ldr	r3, [r4, #12]
 8009a58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a5a:	1a5b      	subs	r3, r3, r1
 8009a5c:	4543      	cmp	r3, r8
 8009a5e:	dcf0      	bgt.n	8009a42 <_printf_float+0x432>
 8009a60:	e6fb      	b.n	800985a <_printf_float+0x24a>
 8009a62:	f04f 0800 	mov.w	r8, #0
 8009a66:	f104 0919 	add.w	r9, r4, #25
 8009a6a:	e7f4      	b.n	8009a56 <_printf_float+0x446>

08009a6c <_printf_common>:
 8009a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a70:	4616      	mov	r6, r2
 8009a72:	4699      	mov	r9, r3
 8009a74:	688a      	ldr	r2, [r1, #8]
 8009a76:	690b      	ldr	r3, [r1, #16]
 8009a78:	4607      	mov	r7, r0
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	bfb8      	it	lt
 8009a7e:	4613      	movlt	r3, r2
 8009a80:	6033      	str	r3, [r6, #0]
 8009a82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a86:	460c      	mov	r4, r1
 8009a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a8c:	b10a      	cbz	r2, 8009a92 <_printf_common+0x26>
 8009a8e:	3301      	adds	r3, #1
 8009a90:	6033      	str	r3, [r6, #0]
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	0699      	lsls	r1, r3, #26
 8009a96:	bf42      	ittt	mi
 8009a98:	6833      	ldrmi	r3, [r6, #0]
 8009a9a:	3302      	addmi	r3, #2
 8009a9c:	6033      	strmi	r3, [r6, #0]
 8009a9e:	6825      	ldr	r5, [r4, #0]
 8009aa0:	f015 0506 	ands.w	r5, r5, #6
 8009aa4:	d106      	bne.n	8009ab4 <_printf_common+0x48>
 8009aa6:	f104 0a19 	add.w	sl, r4, #25
 8009aaa:	68e3      	ldr	r3, [r4, #12]
 8009aac:	6832      	ldr	r2, [r6, #0]
 8009aae:	1a9b      	subs	r3, r3, r2
 8009ab0:	42ab      	cmp	r3, r5
 8009ab2:	dc2b      	bgt.n	8009b0c <_printf_common+0xa0>
 8009ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ab8:	1e13      	subs	r3, r2, #0
 8009aba:	6822      	ldr	r2, [r4, #0]
 8009abc:	bf18      	it	ne
 8009abe:	2301      	movne	r3, #1
 8009ac0:	0692      	lsls	r2, r2, #26
 8009ac2:	d430      	bmi.n	8009b26 <_printf_common+0xba>
 8009ac4:	4649      	mov	r1, r9
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009acc:	47c0      	blx	r8
 8009ace:	3001      	adds	r0, #1
 8009ad0:	d023      	beq.n	8009b1a <_printf_common+0xae>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	6922      	ldr	r2, [r4, #16]
 8009ad6:	f003 0306 	and.w	r3, r3, #6
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	bf14      	ite	ne
 8009ade:	2500      	movne	r5, #0
 8009ae0:	6833      	ldreq	r3, [r6, #0]
 8009ae2:	f04f 0600 	mov.w	r6, #0
 8009ae6:	bf08      	it	eq
 8009ae8:	68e5      	ldreq	r5, [r4, #12]
 8009aea:	f104 041a 	add.w	r4, r4, #26
 8009aee:	bf08      	it	eq
 8009af0:	1aed      	subeq	r5, r5, r3
 8009af2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009af6:	bf08      	it	eq
 8009af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009afc:	4293      	cmp	r3, r2
 8009afe:	bfc4      	itt	gt
 8009b00:	1a9b      	subgt	r3, r3, r2
 8009b02:	18ed      	addgt	r5, r5, r3
 8009b04:	42b5      	cmp	r5, r6
 8009b06:	d11a      	bne.n	8009b3e <_printf_common+0xd2>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e008      	b.n	8009b1e <_printf_common+0xb2>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	4652      	mov	r2, sl
 8009b10:	4649      	mov	r1, r9
 8009b12:	4638      	mov	r0, r7
 8009b14:	47c0      	blx	r8
 8009b16:	3001      	adds	r0, #1
 8009b18:	d103      	bne.n	8009b22 <_printf_common+0xb6>
 8009b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b22:	3501      	adds	r5, #1
 8009b24:	e7c1      	b.n	8009aaa <_printf_common+0x3e>
 8009b26:	2030      	movs	r0, #48	; 0x30
 8009b28:	18e1      	adds	r1, r4, r3
 8009b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b34:	4422      	add	r2, r4
 8009b36:	3302      	adds	r3, #2
 8009b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b3c:	e7c2      	b.n	8009ac4 <_printf_common+0x58>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4622      	mov	r2, r4
 8009b42:	4649      	mov	r1, r9
 8009b44:	4638      	mov	r0, r7
 8009b46:	47c0      	blx	r8
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d0e6      	beq.n	8009b1a <_printf_common+0xae>
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	e7d9      	b.n	8009b04 <_printf_common+0x98>

08009b50 <_printf_i>:
 8009b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	7e0f      	ldrb	r7, [r1, #24]
 8009b56:	4691      	mov	r9, r2
 8009b58:	2f78      	cmp	r7, #120	; 0x78
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	469a      	mov	sl, r3
 8009b60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b66:	d807      	bhi.n	8009b78 <_printf_i+0x28>
 8009b68:	2f62      	cmp	r7, #98	; 0x62
 8009b6a:	d80a      	bhi.n	8009b82 <_printf_i+0x32>
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	f000 80d5 	beq.w	8009d1c <_printf_i+0x1cc>
 8009b72:	2f58      	cmp	r7, #88	; 0x58
 8009b74:	f000 80c1 	beq.w	8009cfa <_printf_i+0x1aa>
 8009b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b80:	e03a      	b.n	8009bf8 <_printf_i+0xa8>
 8009b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b86:	2b15      	cmp	r3, #21
 8009b88:	d8f6      	bhi.n	8009b78 <_printf_i+0x28>
 8009b8a:	a101      	add	r1, pc, #4	; (adr r1, 8009b90 <_printf_i+0x40>)
 8009b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b90:	08009be9 	.word	0x08009be9
 8009b94:	08009bfd 	.word	0x08009bfd
 8009b98:	08009b79 	.word	0x08009b79
 8009b9c:	08009b79 	.word	0x08009b79
 8009ba0:	08009b79 	.word	0x08009b79
 8009ba4:	08009b79 	.word	0x08009b79
 8009ba8:	08009bfd 	.word	0x08009bfd
 8009bac:	08009b79 	.word	0x08009b79
 8009bb0:	08009b79 	.word	0x08009b79
 8009bb4:	08009b79 	.word	0x08009b79
 8009bb8:	08009b79 	.word	0x08009b79
 8009bbc:	08009d03 	.word	0x08009d03
 8009bc0:	08009c29 	.word	0x08009c29
 8009bc4:	08009cbd 	.word	0x08009cbd
 8009bc8:	08009b79 	.word	0x08009b79
 8009bcc:	08009b79 	.word	0x08009b79
 8009bd0:	08009d25 	.word	0x08009d25
 8009bd4:	08009b79 	.word	0x08009b79
 8009bd8:	08009c29 	.word	0x08009c29
 8009bdc:	08009b79 	.word	0x08009b79
 8009be0:	08009b79 	.word	0x08009b79
 8009be4:	08009cc5 	.word	0x08009cc5
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	1d1a      	adds	r2, r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	602a      	str	r2, [r5, #0]
 8009bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e0a0      	b.n	8009d3e <_printf_i+0x1ee>
 8009bfc:	6820      	ldr	r0, [r4, #0]
 8009bfe:	682b      	ldr	r3, [r5, #0]
 8009c00:	0607      	lsls	r7, r0, #24
 8009c02:	f103 0104 	add.w	r1, r3, #4
 8009c06:	6029      	str	r1, [r5, #0]
 8009c08:	d501      	bpl.n	8009c0e <_printf_i+0xbe>
 8009c0a:	681e      	ldr	r6, [r3, #0]
 8009c0c:	e003      	b.n	8009c16 <_printf_i+0xc6>
 8009c0e:	0646      	lsls	r6, r0, #25
 8009c10:	d5fb      	bpl.n	8009c0a <_printf_i+0xba>
 8009c12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	da03      	bge.n	8009c22 <_printf_i+0xd2>
 8009c1a:	232d      	movs	r3, #45	; 0x2d
 8009c1c:	4276      	negs	r6, r6
 8009c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c22:	230a      	movs	r3, #10
 8009c24:	4859      	ldr	r0, [pc, #356]	; (8009d8c <_printf_i+0x23c>)
 8009c26:	e012      	b.n	8009c4e <_printf_i+0xfe>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	6820      	ldr	r0, [r4, #0]
 8009c2c:	1d19      	adds	r1, r3, #4
 8009c2e:	6029      	str	r1, [r5, #0]
 8009c30:	0605      	lsls	r5, r0, #24
 8009c32:	d501      	bpl.n	8009c38 <_printf_i+0xe8>
 8009c34:	681e      	ldr	r6, [r3, #0]
 8009c36:	e002      	b.n	8009c3e <_printf_i+0xee>
 8009c38:	0641      	lsls	r1, r0, #25
 8009c3a:	d5fb      	bpl.n	8009c34 <_printf_i+0xe4>
 8009c3c:	881e      	ldrh	r6, [r3, #0]
 8009c3e:	2f6f      	cmp	r7, #111	; 0x6f
 8009c40:	bf0c      	ite	eq
 8009c42:	2308      	moveq	r3, #8
 8009c44:	230a      	movne	r3, #10
 8009c46:	4851      	ldr	r0, [pc, #324]	; (8009d8c <_printf_i+0x23c>)
 8009c48:	2100      	movs	r1, #0
 8009c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c4e:	6865      	ldr	r5, [r4, #4]
 8009c50:	2d00      	cmp	r5, #0
 8009c52:	bfa8      	it	ge
 8009c54:	6821      	ldrge	r1, [r4, #0]
 8009c56:	60a5      	str	r5, [r4, #8]
 8009c58:	bfa4      	itt	ge
 8009c5a:	f021 0104 	bicge.w	r1, r1, #4
 8009c5e:	6021      	strge	r1, [r4, #0]
 8009c60:	b90e      	cbnz	r6, 8009c66 <_printf_i+0x116>
 8009c62:	2d00      	cmp	r5, #0
 8009c64:	d04b      	beq.n	8009cfe <_printf_i+0x1ae>
 8009c66:	4615      	mov	r5, r2
 8009c68:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c6c:	fb03 6711 	mls	r7, r3, r1, r6
 8009c70:	5dc7      	ldrb	r7, [r0, r7]
 8009c72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c76:	4637      	mov	r7, r6
 8009c78:	42bb      	cmp	r3, r7
 8009c7a:	460e      	mov	r6, r1
 8009c7c:	d9f4      	bls.n	8009c68 <_printf_i+0x118>
 8009c7e:	2b08      	cmp	r3, #8
 8009c80:	d10b      	bne.n	8009c9a <_printf_i+0x14a>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	07de      	lsls	r6, r3, #31
 8009c86:	d508      	bpl.n	8009c9a <_printf_i+0x14a>
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	6861      	ldr	r1, [r4, #4]
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	bfde      	ittt	le
 8009c90:	2330      	movle	r3, #48	; 0x30
 8009c92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c9a:	1b52      	subs	r2, r2, r5
 8009c9c:	6122      	str	r2, [r4, #16]
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	4640      	mov	r0, r8
 8009ca4:	f8cd a000 	str.w	sl, [sp]
 8009ca8:	aa03      	add	r2, sp, #12
 8009caa:	f7ff fedf 	bl	8009a6c <_printf_common>
 8009cae:	3001      	adds	r0, #1
 8009cb0:	d14a      	bne.n	8009d48 <_printf_i+0x1f8>
 8009cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb6:	b004      	add	sp, #16
 8009cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	f043 0320 	orr.w	r3, r3, #32
 8009cc2:	6023      	str	r3, [r4, #0]
 8009cc4:	2778      	movs	r7, #120	; 0x78
 8009cc6:	4832      	ldr	r0, [pc, #200]	; (8009d90 <_printf_i+0x240>)
 8009cc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	6829      	ldr	r1, [r5, #0]
 8009cd0:	061f      	lsls	r7, r3, #24
 8009cd2:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cd6:	d402      	bmi.n	8009cde <_printf_i+0x18e>
 8009cd8:	065f      	lsls	r7, r3, #25
 8009cda:	bf48      	it	mi
 8009cdc:	b2b6      	uxthmi	r6, r6
 8009cde:	07df      	lsls	r7, r3, #31
 8009ce0:	bf48      	it	mi
 8009ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8009ce6:	6029      	str	r1, [r5, #0]
 8009ce8:	bf48      	it	mi
 8009cea:	6023      	strmi	r3, [r4, #0]
 8009cec:	b91e      	cbnz	r6, 8009cf6 <_printf_i+0x1a6>
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	f023 0320 	bic.w	r3, r3, #32
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	2310      	movs	r3, #16
 8009cf8:	e7a6      	b.n	8009c48 <_printf_i+0xf8>
 8009cfa:	4824      	ldr	r0, [pc, #144]	; (8009d8c <_printf_i+0x23c>)
 8009cfc:	e7e4      	b.n	8009cc8 <_printf_i+0x178>
 8009cfe:	4615      	mov	r5, r2
 8009d00:	e7bd      	b.n	8009c7e <_printf_i+0x12e>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	6826      	ldr	r6, [r4, #0]
 8009d06:	1d18      	adds	r0, r3, #4
 8009d08:	6961      	ldr	r1, [r4, #20]
 8009d0a:	6028      	str	r0, [r5, #0]
 8009d0c:	0635      	lsls	r5, r6, #24
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	d501      	bpl.n	8009d16 <_printf_i+0x1c6>
 8009d12:	6019      	str	r1, [r3, #0]
 8009d14:	e002      	b.n	8009d1c <_printf_i+0x1cc>
 8009d16:	0670      	lsls	r0, r6, #25
 8009d18:	d5fb      	bpl.n	8009d12 <_printf_i+0x1c2>
 8009d1a:	8019      	strh	r1, [r3, #0]
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4615      	mov	r5, r2
 8009d20:	6123      	str	r3, [r4, #16]
 8009d22:	e7bc      	b.n	8009c9e <_printf_i+0x14e>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	2100      	movs	r1, #0
 8009d28:	1d1a      	adds	r2, r3, #4
 8009d2a:	602a      	str	r2, [r5, #0]
 8009d2c:	681d      	ldr	r5, [r3, #0]
 8009d2e:	6862      	ldr	r2, [r4, #4]
 8009d30:	4628      	mov	r0, r5
 8009d32:	f000 fd56 	bl	800a7e2 <memchr>
 8009d36:	b108      	cbz	r0, 8009d3c <_printf_i+0x1ec>
 8009d38:	1b40      	subs	r0, r0, r5
 8009d3a:	6060      	str	r0, [r4, #4]
 8009d3c:	6863      	ldr	r3, [r4, #4]
 8009d3e:	6123      	str	r3, [r4, #16]
 8009d40:	2300      	movs	r3, #0
 8009d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d46:	e7aa      	b.n	8009c9e <_printf_i+0x14e>
 8009d48:	462a      	mov	r2, r5
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	4640      	mov	r0, r8
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	47d0      	blx	sl
 8009d52:	3001      	adds	r0, #1
 8009d54:	d0ad      	beq.n	8009cb2 <_printf_i+0x162>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	079b      	lsls	r3, r3, #30
 8009d5a:	d413      	bmi.n	8009d84 <_printf_i+0x234>
 8009d5c:	68e0      	ldr	r0, [r4, #12]
 8009d5e:	9b03      	ldr	r3, [sp, #12]
 8009d60:	4298      	cmp	r0, r3
 8009d62:	bfb8      	it	lt
 8009d64:	4618      	movlt	r0, r3
 8009d66:	e7a6      	b.n	8009cb6 <_printf_i+0x166>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	4632      	mov	r2, r6
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	4640      	mov	r0, r8
 8009d70:	47d0      	blx	sl
 8009d72:	3001      	adds	r0, #1
 8009d74:	d09d      	beq.n	8009cb2 <_printf_i+0x162>
 8009d76:	3501      	adds	r5, #1
 8009d78:	68e3      	ldr	r3, [r4, #12]
 8009d7a:	9903      	ldr	r1, [sp, #12]
 8009d7c:	1a5b      	subs	r3, r3, r1
 8009d7e:	42ab      	cmp	r3, r5
 8009d80:	dcf2      	bgt.n	8009d68 <_printf_i+0x218>
 8009d82:	e7eb      	b.n	8009d5c <_printf_i+0x20c>
 8009d84:	2500      	movs	r5, #0
 8009d86:	f104 0619 	add.w	r6, r4, #25
 8009d8a:	e7f5      	b.n	8009d78 <_printf_i+0x228>
 8009d8c:	0800f40a 	.word	0x0800f40a
 8009d90:	0800f41b 	.word	0x0800f41b

08009d94 <_scanf_float>:
 8009d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d98:	b087      	sub	sp, #28
 8009d9a:	9303      	str	r3, [sp, #12]
 8009d9c:	688b      	ldr	r3, [r1, #8]
 8009d9e:	4617      	mov	r7, r2
 8009da0:	1e5a      	subs	r2, r3, #1
 8009da2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009da6:	bf85      	ittet	hi
 8009da8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009dac:	195b      	addhi	r3, r3, r5
 8009dae:	2300      	movls	r3, #0
 8009db0:	9302      	strhi	r3, [sp, #8]
 8009db2:	bf88      	it	hi
 8009db4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009db8:	468b      	mov	fp, r1
 8009dba:	f04f 0500 	mov.w	r5, #0
 8009dbe:	bf8c      	ite	hi
 8009dc0:	608b      	strhi	r3, [r1, #8]
 8009dc2:	9302      	strls	r3, [sp, #8]
 8009dc4:	680b      	ldr	r3, [r1, #0]
 8009dc6:	4680      	mov	r8, r0
 8009dc8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009dcc:	f84b 3b1c 	str.w	r3, [fp], #28
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	465e      	mov	r6, fp
 8009dd4:	46aa      	mov	sl, r5
 8009dd6:	46a9      	mov	r9, r5
 8009dd8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009ddc:	9501      	str	r5, [sp, #4]
 8009dde:	68a2      	ldr	r2, [r4, #8]
 8009de0:	b152      	cbz	r2, 8009df8 <_scanf_float+0x64>
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b4e      	cmp	r3, #78	; 0x4e
 8009de8:	d864      	bhi.n	8009eb4 <_scanf_float+0x120>
 8009dea:	2b40      	cmp	r3, #64	; 0x40
 8009dec:	d83c      	bhi.n	8009e68 <_scanf_float+0xd4>
 8009dee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009df2:	b2c8      	uxtb	r0, r1
 8009df4:	280e      	cmp	r0, #14
 8009df6:	d93a      	bls.n	8009e6e <_scanf_float+0xda>
 8009df8:	f1b9 0f00 	cmp.w	r9, #0
 8009dfc:	d003      	beq.n	8009e06 <_scanf_float+0x72>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e0a:	f1ba 0f01 	cmp.w	sl, #1
 8009e0e:	f200 8113 	bhi.w	800a038 <_scanf_float+0x2a4>
 8009e12:	455e      	cmp	r6, fp
 8009e14:	f200 8105 	bhi.w	800a022 <_scanf_float+0x28e>
 8009e18:	2501      	movs	r5, #1
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	b007      	add	sp, #28
 8009e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009e26:	2a0d      	cmp	r2, #13
 8009e28:	d8e6      	bhi.n	8009df8 <_scanf_float+0x64>
 8009e2a:	a101      	add	r1, pc, #4	; (adr r1, 8009e30 <_scanf_float+0x9c>)
 8009e2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e30:	08009f6f 	.word	0x08009f6f
 8009e34:	08009df9 	.word	0x08009df9
 8009e38:	08009df9 	.word	0x08009df9
 8009e3c:	08009df9 	.word	0x08009df9
 8009e40:	08009fcf 	.word	0x08009fcf
 8009e44:	08009fa7 	.word	0x08009fa7
 8009e48:	08009df9 	.word	0x08009df9
 8009e4c:	08009df9 	.word	0x08009df9
 8009e50:	08009f7d 	.word	0x08009f7d
 8009e54:	08009df9 	.word	0x08009df9
 8009e58:	08009df9 	.word	0x08009df9
 8009e5c:	08009df9 	.word	0x08009df9
 8009e60:	08009df9 	.word	0x08009df9
 8009e64:	08009f35 	.word	0x08009f35
 8009e68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009e6c:	e7db      	b.n	8009e26 <_scanf_float+0x92>
 8009e6e:	290e      	cmp	r1, #14
 8009e70:	d8c2      	bhi.n	8009df8 <_scanf_float+0x64>
 8009e72:	a001      	add	r0, pc, #4	; (adr r0, 8009e78 <_scanf_float+0xe4>)
 8009e74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009e78:	08009f27 	.word	0x08009f27
 8009e7c:	08009df9 	.word	0x08009df9
 8009e80:	08009f27 	.word	0x08009f27
 8009e84:	08009fbb 	.word	0x08009fbb
 8009e88:	08009df9 	.word	0x08009df9
 8009e8c:	08009ed5 	.word	0x08009ed5
 8009e90:	08009f11 	.word	0x08009f11
 8009e94:	08009f11 	.word	0x08009f11
 8009e98:	08009f11 	.word	0x08009f11
 8009e9c:	08009f11 	.word	0x08009f11
 8009ea0:	08009f11 	.word	0x08009f11
 8009ea4:	08009f11 	.word	0x08009f11
 8009ea8:	08009f11 	.word	0x08009f11
 8009eac:	08009f11 	.word	0x08009f11
 8009eb0:	08009f11 	.word	0x08009f11
 8009eb4:	2b6e      	cmp	r3, #110	; 0x6e
 8009eb6:	d809      	bhi.n	8009ecc <_scanf_float+0x138>
 8009eb8:	2b60      	cmp	r3, #96	; 0x60
 8009eba:	d8b2      	bhi.n	8009e22 <_scanf_float+0x8e>
 8009ebc:	2b54      	cmp	r3, #84	; 0x54
 8009ebe:	d077      	beq.n	8009fb0 <_scanf_float+0x21c>
 8009ec0:	2b59      	cmp	r3, #89	; 0x59
 8009ec2:	d199      	bne.n	8009df8 <_scanf_float+0x64>
 8009ec4:	2d07      	cmp	r5, #7
 8009ec6:	d197      	bne.n	8009df8 <_scanf_float+0x64>
 8009ec8:	2508      	movs	r5, #8
 8009eca:	e029      	b.n	8009f20 <_scanf_float+0x18c>
 8009ecc:	2b74      	cmp	r3, #116	; 0x74
 8009ece:	d06f      	beq.n	8009fb0 <_scanf_float+0x21c>
 8009ed0:	2b79      	cmp	r3, #121	; 0x79
 8009ed2:	e7f6      	b.n	8009ec2 <_scanf_float+0x12e>
 8009ed4:	6821      	ldr	r1, [r4, #0]
 8009ed6:	05c8      	lsls	r0, r1, #23
 8009ed8:	d51a      	bpl.n	8009f10 <_scanf_float+0x17c>
 8009eda:	9b02      	ldr	r3, [sp, #8]
 8009edc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009ee0:	6021      	str	r1, [r4, #0]
 8009ee2:	f109 0901 	add.w	r9, r9, #1
 8009ee6:	b11b      	cbz	r3, 8009ef0 <_scanf_float+0x15c>
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	3201      	adds	r2, #1
 8009eec:	9302      	str	r3, [sp, #8]
 8009eee:	60a2      	str	r2, [r4, #8]
 8009ef0:	68a3      	ldr	r3, [r4, #8]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	60a3      	str	r3, [r4, #8]
 8009ef6:	6923      	ldr	r3, [r4, #16]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	6123      	str	r3, [r4, #16]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	607b      	str	r3, [r7, #4]
 8009f04:	f340 8084 	ble.w	800a010 <_scanf_float+0x27c>
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	603b      	str	r3, [r7, #0]
 8009f0e:	e766      	b.n	8009dde <_scanf_float+0x4a>
 8009f10:	eb1a 0f05 	cmn.w	sl, r5
 8009f14:	f47f af70 	bne.w	8009df8 <_scanf_float+0x64>
 8009f18:	6822      	ldr	r2, [r4, #0]
 8009f1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009f1e:	6022      	str	r2, [r4, #0]
 8009f20:	f806 3b01 	strb.w	r3, [r6], #1
 8009f24:	e7e4      	b.n	8009ef0 <_scanf_float+0x15c>
 8009f26:	6822      	ldr	r2, [r4, #0]
 8009f28:	0610      	lsls	r0, r2, #24
 8009f2a:	f57f af65 	bpl.w	8009df8 <_scanf_float+0x64>
 8009f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f32:	e7f4      	b.n	8009f1e <_scanf_float+0x18a>
 8009f34:	f1ba 0f00 	cmp.w	sl, #0
 8009f38:	d10e      	bne.n	8009f58 <_scanf_float+0x1c4>
 8009f3a:	f1b9 0f00 	cmp.w	r9, #0
 8009f3e:	d10e      	bne.n	8009f5e <_scanf_float+0x1ca>
 8009f40:	6822      	ldr	r2, [r4, #0]
 8009f42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f4a:	d108      	bne.n	8009f5e <_scanf_float+0x1ca>
 8009f4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f50:	f04f 0a01 	mov.w	sl, #1
 8009f54:	6022      	str	r2, [r4, #0]
 8009f56:	e7e3      	b.n	8009f20 <_scanf_float+0x18c>
 8009f58:	f1ba 0f02 	cmp.w	sl, #2
 8009f5c:	d055      	beq.n	800a00a <_scanf_float+0x276>
 8009f5e:	2d01      	cmp	r5, #1
 8009f60:	d002      	beq.n	8009f68 <_scanf_float+0x1d4>
 8009f62:	2d04      	cmp	r5, #4
 8009f64:	f47f af48 	bne.w	8009df8 <_scanf_float+0x64>
 8009f68:	3501      	adds	r5, #1
 8009f6a:	b2ed      	uxtb	r5, r5
 8009f6c:	e7d8      	b.n	8009f20 <_scanf_float+0x18c>
 8009f6e:	f1ba 0f01 	cmp.w	sl, #1
 8009f72:	f47f af41 	bne.w	8009df8 <_scanf_float+0x64>
 8009f76:	f04f 0a02 	mov.w	sl, #2
 8009f7a:	e7d1      	b.n	8009f20 <_scanf_float+0x18c>
 8009f7c:	b97d      	cbnz	r5, 8009f9e <_scanf_float+0x20a>
 8009f7e:	f1b9 0f00 	cmp.w	r9, #0
 8009f82:	f47f af3c 	bne.w	8009dfe <_scanf_float+0x6a>
 8009f86:	6822      	ldr	r2, [r4, #0]
 8009f88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f90:	f47f af39 	bne.w	8009e06 <_scanf_float+0x72>
 8009f94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f98:	2501      	movs	r5, #1
 8009f9a:	6022      	str	r2, [r4, #0]
 8009f9c:	e7c0      	b.n	8009f20 <_scanf_float+0x18c>
 8009f9e:	2d03      	cmp	r5, #3
 8009fa0:	d0e2      	beq.n	8009f68 <_scanf_float+0x1d4>
 8009fa2:	2d05      	cmp	r5, #5
 8009fa4:	e7de      	b.n	8009f64 <_scanf_float+0x1d0>
 8009fa6:	2d02      	cmp	r5, #2
 8009fa8:	f47f af26 	bne.w	8009df8 <_scanf_float+0x64>
 8009fac:	2503      	movs	r5, #3
 8009fae:	e7b7      	b.n	8009f20 <_scanf_float+0x18c>
 8009fb0:	2d06      	cmp	r5, #6
 8009fb2:	f47f af21 	bne.w	8009df8 <_scanf_float+0x64>
 8009fb6:	2507      	movs	r5, #7
 8009fb8:	e7b2      	b.n	8009f20 <_scanf_float+0x18c>
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	0591      	lsls	r1, r2, #22
 8009fbe:	f57f af1b 	bpl.w	8009df8 <_scanf_float+0x64>
 8009fc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009fc6:	6022      	str	r2, [r4, #0]
 8009fc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fcc:	e7a8      	b.n	8009f20 <_scanf_float+0x18c>
 8009fce:	6822      	ldr	r2, [r4, #0]
 8009fd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009fd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009fd8:	d006      	beq.n	8009fe8 <_scanf_float+0x254>
 8009fda:	0550      	lsls	r0, r2, #21
 8009fdc:	f57f af0c 	bpl.w	8009df8 <_scanf_float+0x64>
 8009fe0:	f1b9 0f00 	cmp.w	r9, #0
 8009fe4:	f43f af0f 	beq.w	8009e06 <_scanf_float+0x72>
 8009fe8:	0591      	lsls	r1, r2, #22
 8009fea:	bf58      	it	pl
 8009fec:	9901      	ldrpl	r1, [sp, #4]
 8009fee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ff2:	bf58      	it	pl
 8009ff4:	eba9 0101 	subpl.w	r1, r9, r1
 8009ff8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009ffc:	f04f 0900 	mov.w	r9, #0
 800a000:	bf58      	it	pl
 800a002:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a006:	6022      	str	r2, [r4, #0]
 800a008:	e78a      	b.n	8009f20 <_scanf_float+0x18c>
 800a00a:	f04f 0a03 	mov.w	sl, #3
 800a00e:	e787      	b.n	8009f20 <_scanf_float+0x18c>
 800a010:	4639      	mov	r1, r7
 800a012:	4640      	mov	r0, r8
 800a014:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a018:	4798      	blx	r3
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f43f aedf 	beq.w	8009dde <_scanf_float+0x4a>
 800a020:	e6ea      	b.n	8009df8 <_scanf_float+0x64>
 800a022:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a026:	463a      	mov	r2, r7
 800a028:	4640      	mov	r0, r8
 800a02a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a02e:	4798      	blx	r3
 800a030:	6923      	ldr	r3, [r4, #16]
 800a032:	3b01      	subs	r3, #1
 800a034:	6123      	str	r3, [r4, #16]
 800a036:	e6ec      	b.n	8009e12 <_scanf_float+0x7e>
 800a038:	1e6b      	subs	r3, r5, #1
 800a03a:	2b06      	cmp	r3, #6
 800a03c:	d825      	bhi.n	800a08a <_scanf_float+0x2f6>
 800a03e:	2d02      	cmp	r5, #2
 800a040:	d836      	bhi.n	800a0b0 <_scanf_float+0x31c>
 800a042:	455e      	cmp	r6, fp
 800a044:	f67f aee8 	bls.w	8009e18 <_scanf_float+0x84>
 800a048:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a04c:	463a      	mov	r2, r7
 800a04e:	4640      	mov	r0, r8
 800a050:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a054:	4798      	blx	r3
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	3b01      	subs	r3, #1
 800a05a:	6123      	str	r3, [r4, #16]
 800a05c:	e7f1      	b.n	800a042 <_scanf_float+0x2ae>
 800a05e:	9802      	ldr	r0, [sp, #8]
 800a060:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a064:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a068:	463a      	mov	r2, r7
 800a06a:	9002      	str	r0, [sp, #8]
 800a06c:	4640      	mov	r0, r8
 800a06e:	4798      	blx	r3
 800a070:	6923      	ldr	r3, [r4, #16]
 800a072:	3b01      	subs	r3, #1
 800a074:	6123      	str	r3, [r4, #16]
 800a076:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a07a:	fa5f fa8a 	uxtb.w	sl, sl
 800a07e:	f1ba 0f02 	cmp.w	sl, #2
 800a082:	d1ec      	bne.n	800a05e <_scanf_float+0x2ca>
 800a084:	3d03      	subs	r5, #3
 800a086:	b2ed      	uxtb	r5, r5
 800a088:	1b76      	subs	r6, r6, r5
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	05da      	lsls	r2, r3, #23
 800a08e:	d52f      	bpl.n	800a0f0 <_scanf_float+0x35c>
 800a090:	055b      	lsls	r3, r3, #21
 800a092:	d510      	bpl.n	800a0b6 <_scanf_float+0x322>
 800a094:	455e      	cmp	r6, fp
 800a096:	f67f aebf 	bls.w	8009e18 <_scanf_float+0x84>
 800a09a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a09e:	463a      	mov	r2, r7
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0a6:	4798      	blx	r3
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	6123      	str	r3, [r4, #16]
 800a0ae:	e7f1      	b.n	800a094 <_scanf_float+0x300>
 800a0b0:	46aa      	mov	sl, r5
 800a0b2:	9602      	str	r6, [sp, #8]
 800a0b4:	e7df      	b.n	800a076 <_scanf_float+0x2e2>
 800a0b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	2965      	cmp	r1, #101	; 0x65
 800a0be:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0c2:	f106 35ff 	add.w	r5, r6, #4294967295
 800a0c6:	6123      	str	r3, [r4, #16]
 800a0c8:	d00c      	beq.n	800a0e4 <_scanf_float+0x350>
 800a0ca:	2945      	cmp	r1, #69	; 0x45
 800a0cc:	d00a      	beq.n	800a0e4 <_scanf_float+0x350>
 800a0ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0d2:	463a      	mov	r2, r7
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	4798      	blx	r3
 800a0d8:	6923      	ldr	r3, [r4, #16]
 800a0da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	1eb5      	subs	r5, r6, #2
 800a0e2:	6123      	str	r3, [r4, #16]
 800a0e4:	463a      	mov	r2, r7
 800a0e6:	4640      	mov	r0, r8
 800a0e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0ec:	4798      	blx	r3
 800a0ee:	462e      	mov	r6, r5
 800a0f0:	6825      	ldr	r5, [r4, #0]
 800a0f2:	f015 0510 	ands.w	r5, r5, #16
 800a0f6:	d155      	bne.n	800a1a4 <_scanf_float+0x410>
 800a0f8:	7035      	strb	r5, [r6, #0]
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a104:	d11d      	bne.n	800a142 <_scanf_float+0x3ae>
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	454b      	cmp	r3, r9
 800a10a:	eba3 0209 	sub.w	r2, r3, r9
 800a10e:	d125      	bne.n	800a15c <_scanf_float+0x3c8>
 800a110:	2200      	movs	r2, #0
 800a112:	4659      	mov	r1, fp
 800a114:	4640      	mov	r0, r8
 800a116:	f002 fdc3 	bl	800cca0 <_strtod_r>
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	f8d4 c000 	ldr.w	ip, [r4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f01c 0f02 	tst.w	ip, #2
 800a126:	4606      	mov	r6, r0
 800a128:	460f      	mov	r7, r1
 800a12a:	f103 0204 	add.w	r2, r3, #4
 800a12e:	d020      	beq.n	800a172 <_scanf_float+0x3de>
 800a130:	9903      	ldr	r1, [sp, #12]
 800a132:	600a      	str	r2, [r1, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	e9c3 6700 	strd	r6, r7, [r3]
 800a13a:	68e3      	ldr	r3, [r4, #12]
 800a13c:	3301      	adds	r3, #1
 800a13e:	60e3      	str	r3, [r4, #12]
 800a140:	e66b      	b.n	8009e1a <_scanf_float+0x86>
 800a142:	9b04      	ldr	r3, [sp, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d0e3      	beq.n	800a110 <_scanf_float+0x37c>
 800a148:	9905      	ldr	r1, [sp, #20]
 800a14a:	230a      	movs	r3, #10
 800a14c:	462a      	mov	r2, r5
 800a14e:	4640      	mov	r0, r8
 800a150:	3101      	adds	r1, #1
 800a152:	f002 fe29 	bl	800cda8 <_strtol_r>
 800a156:	9b04      	ldr	r3, [sp, #16]
 800a158:	9e05      	ldr	r6, [sp, #20]
 800a15a:	1ac2      	subs	r2, r0, r3
 800a15c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a160:	429e      	cmp	r6, r3
 800a162:	bf28      	it	cs
 800a164:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a168:	4630      	mov	r0, r6
 800a16a:	490f      	ldr	r1, [pc, #60]	; (800a1a8 <_scanf_float+0x414>)
 800a16c:	f000 f958 	bl	800a420 <siprintf>
 800a170:	e7ce      	b.n	800a110 <_scanf_float+0x37c>
 800a172:	f01c 0f04 	tst.w	ip, #4
 800a176:	d1db      	bne.n	800a130 <_scanf_float+0x39c>
 800a178:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a17c:	f8cc 2000 	str.w	r2, [ip]
 800a180:	f8d3 8000 	ldr.w	r8, [r3]
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	f7f6 fd60 	bl	8000c4c <__aeabi_dcmpun>
 800a18c:	b128      	cbz	r0, 800a19a <_scanf_float+0x406>
 800a18e:	4807      	ldr	r0, [pc, #28]	; (800a1ac <_scanf_float+0x418>)
 800a190:	f000 fb44 	bl	800a81c <nanf>
 800a194:	f8c8 0000 	str.w	r0, [r8]
 800a198:	e7cf      	b.n	800a13a <_scanf_float+0x3a6>
 800a19a:	4630      	mov	r0, r6
 800a19c:	4639      	mov	r1, r7
 800a19e:	f7f6 fdb3 	bl	8000d08 <__aeabi_d2f>
 800a1a2:	e7f7      	b.n	800a194 <_scanf_float+0x400>
 800a1a4:	2500      	movs	r5, #0
 800a1a6:	e638      	b.n	8009e1a <_scanf_float+0x86>
 800a1a8:	0800f42c 	.word	0x0800f42c
 800a1ac:	0800f46c 	.word	0x0800f46c

0800a1b0 <std>:
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1be:	6083      	str	r3, [r0, #8]
 800a1c0:	8181      	strh	r1, [r0, #12]
 800a1c2:	6643      	str	r3, [r0, #100]	; 0x64
 800a1c4:	81c2      	strh	r2, [r0, #14]
 800a1c6:	6183      	str	r3, [r0, #24]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	2208      	movs	r2, #8
 800a1cc:	305c      	adds	r0, #92	; 0x5c
 800a1ce:	f000 fa85 	bl	800a6dc <memset>
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <std+0x58>)
 800a1d4:	6224      	str	r4, [r4, #32]
 800a1d6:	6263      	str	r3, [r4, #36]	; 0x24
 800a1d8:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <std+0x5c>)
 800a1da:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1dc:	4b0c      	ldr	r3, [pc, #48]	; (800a210 <std+0x60>)
 800a1de:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1e0:	4b0c      	ldr	r3, [pc, #48]	; (800a214 <std+0x64>)
 800a1e2:	6323      	str	r3, [r4, #48]	; 0x30
 800a1e4:	4b0c      	ldr	r3, [pc, #48]	; (800a218 <std+0x68>)
 800a1e6:	429c      	cmp	r4, r3
 800a1e8:	d006      	beq.n	800a1f8 <std+0x48>
 800a1ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a1ee:	4294      	cmp	r4, r2
 800a1f0:	d002      	beq.n	800a1f8 <std+0x48>
 800a1f2:	33d0      	adds	r3, #208	; 0xd0
 800a1f4:	429c      	cmp	r4, r3
 800a1f6:	d105      	bne.n	800a204 <std+0x54>
 800a1f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a200:	f000 baec 	b.w	800a7dc <__retarget_lock_init_recursive>
 800a204:	bd10      	pop	{r4, pc}
 800a206:	bf00      	nop
 800a208:	0800a4b5 	.word	0x0800a4b5
 800a20c:	0800a4db 	.word	0x0800a4db
 800a210:	0800a513 	.word	0x0800a513
 800a214:	0800a537 	.word	0x0800a537
 800a218:	2000137c 	.word	0x2000137c

0800a21c <stdio_exit_handler>:
 800a21c:	4a02      	ldr	r2, [pc, #8]	; (800a228 <stdio_exit_handler+0xc>)
 800a21e:	4903      	ldr	r1, [pc, #12]	; (800a22c <stdio_exit_handler+0x10>)
 800a220:	4803      	ldr	r0, [pc, #12]	; (800a230 <stdio_exit_handler+0x14>)
 800a222:	f000 b869 	b.w	800a2f8 <_fwalk_sglue>
 800a226:	bf00      	nop
 800a228:	200002b8 	.word	0x200002b8
 800a22c:	0800da21 	.word	0x0800da21
 800a230:	200002c4 	.word	0x200002c4

0800a234 <cleanup_stdio>:
 800a234:	6841      	ldr	r1, [r0, #4]
 800a236:	4b0c      	ldr	r3, [pc, #48]	; (800a268 <cleanup_stdio+0x34>)
 800a238:	b510      	push	{r4, lr}
 800a23a:	4299      	cmp	r1, r3
 800a23c:	4604      	mov	r4, r0
 800a23e:	d001      	beq.n	800a244 <cleanup_stdio+0x10>
 800a240:	f003 fbee 	bl	800da20 <_fflush_r>
 800a244:	68a1      	ldr	r1, [r4, #8]
 800a246:	4b09      	ldr	r3, [pc, #36]	; (800a26c <cleanup_stdio+0x38>)
 800a248:	4299      	cmp	r1, r3
 800a24a:	d002      	beq.n	800a252 <cleanup_stdio+0x1e>
 800a24c:	4620      	mov	r0, r4
 800a24e:	f003 fbe7 	bl	800da20 <_fflush_r>
 800a252:	68e1      	ldr	r1, [r4, #12]
 800a254:	4b06      	ldr	r3, [pc, #24]	; (800a270 <cleanup_stdio+0x3c>)
 800a256:	4299      	cmp	r1, r3
 800a258:	d004      	beq.n	800a264 <cleanup_stdio+0x30>
 800a25a:	4620      	mov	r0, r4
 800a25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a260:	f003 bbde 	b.w	800da20 <_fflush_r>
 800a264:	bd10      	pop	{r4, pc}
 800a266:	bf00      	nop
 800a268:	2000137c 	.word	0x2000137c
 800a26c:	200013e4 	.word	0x200013e4
 800a270:	2000144c 	.word	0x2000144c

0800a274 <global_stdio_init.part.0>:
 800a274:	b510      	push	{r4, lr}
 800a276:	4b0b      	ldr	r3, [pc, #44]	; (800a2a4 <global_stdio_init.part.0+0x30>)
 800a278:	4c0b      	ldr	r4, [pc, #44]	; (800a2a8 <global_stdio_init.part.0+0x34>)
 800a27a:	4a0c      	ldr	r2, [pc, #48]	; (800a2ac <global_stdio_init.part.0+0x38>)
 800a27c:	4620      	mov	r0, r4
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	2104      	movs	r1, #4
 800a282:	2200      	movs	r2, #0
 800a284:	f7ff ff94 	bl	800a1b0 <std>
 800a288:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a28c:	2201      	movs	r2, #1
 800a28e:	2109      	movs	r1, #9
 800a290:	f7ff ff8e 	bl	800a1b0 <std>
 800a294:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a298:	2202      	movs	r2, #2
 800a29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a29e:	2112      	movs	r1, #18
 800a2a0:	f7ff bf86 	b.w	800a1b0 <std>
 800a2a4:	200014b4 	.word	0x200014b4
 800a2a8:	2000137c 	.word	0x2000137c
 800a2ac:	0800a21d 	.word	0x0800a21d

0800a2b0 <__sfp_lock_acquire>:
 800a2b0:	4801      	ldr	r0, [pc, #4]	; (800a2b8 <__sfp_lock_acquire+0x8>)
 800a2b2:	f000 ba94 	b.w	800a7de <__retarget_lock_acquire_recursive>
 800a2b6:	bf00      	nop
 800a2b8:	200014bd 	.word	0x200014bd

0800a2bc <__sfp_lock_release>:
 800a2bc:	4801      	ldr	r0, [pc, #4]	; (800a2c4 <__sfp_lock_release+0x8>)
 800a2be:	f000 ba8f 	b.w	800a7e0 <__retarget_lock_release_recursive>
 800a2c2:	bf00      	nop
 800a2c4:	200014bd 	.word	0x200014bd

0800a2c8 <__sinit>:
 800a2c8:	b510      	push	{r4, lr}
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	f7ff fff0 	bl	800a2b0 <__sfp_lock_acquire>
 800a2d0:	6a23      	ldr	r3, [r4, #32]
 800a2d2:	b11b      	cbz	r3, 800a2dc <__sinit+0x14>
 800a2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d8:	f7ff bff0 	b.w	800a2bc <__sfp_lock_release>
 800a2dc:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <__sinit+0x28>)
 800a2de:	6223      	str	r3, [r4, #32]
 800a2e0:	4b04      	ldr	r3, [pc, #16]	; (800a2f4 <__sinit+0x2c>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1f5      	bne.n	800a2d4 <__sinit+0xc>
 800a2e8:	f7ff ffc4 	bl	800a274 <global_stdio_init.part.0>
 800a2ec:	e7f2      	b.n	800a2d4 <__sinit+0xc>
 800a2ee:	bf00      	nop
 800a2f0:	0800a235 	.word	0x0800a235
 800a2f4:	200014b4 	.word	0x200014b4

0800a2f8 <_fwalk_sglue>:
 800a2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	4688      	mov	r8, r1
 800a300:	4614      	mov	r4, r2
 800a302:	2600      	movs	r6, #0
 800a304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a308:	f1b9 0901 	subs.w	r9, r9, #1
 800a30c:	d505      	bpl.n	800a31a <_fwalk_sglue+0x22>
 800a30e:	6824      	ldr	r4, [r4, #0]
 800a310:	2c00      	cmp	r4, #0
 800a312:	d1f7      	bne.n	800a304 <_fwalk_sglue+0xc>
 800a314:	4630      	mov	r0, r6
 800a316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31a:	89ab      	ldrh	r3, [r5, #12]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d907      	bls.n	800a330 <_fwalk_sglue+0x38>
 800a320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a324:	3301      	adds	r3, #1
 800a326:	d003      	beq.n	800a330 <_fwalk_sglue+0x38>
 800a328:	4629      	mov	r1, r5
 800a32a:	4638      	mov	r0, r7
 800a32c:	47c0      	blx	r8
 800a32e:	4306      	orrs	r6, r0
 800a330:	3568      	adds	r5, #104	; 0x68
 800a332:	e7e9      	b.n	800a308 <_fwalk_sglue+0x10>

0800a334 <iprintf>:
 800a334:	b40f      	push	{r0, r1, r2, r3}
 800a336:	b507      	push	{r0, r1, r2, lr}
 800a338:	4906      	ldr	r1, [pc, #24]	; (800a354 <iprintf+0x20>)
 800a33a:	ab04      	add	r3, sp, #16
 800a33c:	6808      	ldr	r0, [r1, #0]
 800a33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a342:	6881      	ldr	r1, [r0, #8]
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	f003 f883 	bl	800d450 <_vfiprintf_r>
 800a34a:	b003      	add	sp, #12
 800a34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a350:	b004      	add	sp, #16
 800a352:	4770      	bx	lr
 800a354:	20000310 	.word	0x20000310

0800a358 <putchar>:
 800a358:	4b02      	ldr	r3, [pc, #8]	; (800a364 <putchar+0xc>)
 800a35a:	4601      	mov	r1, r0
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	6882      	ldr	r2, [r0, #8]
 800a360:	f003 bbf9 	b.w	800db56 <_putc_r>
 800a364:	20000310 	.word	0x20000310

0800a368 <_puts_r>:
 800a368:	6a03      	ldr	r3, [r0, #32]
 800a36a:	b570      	push	{r4, r5, r6, lr}
 800a36c:	4605      	mov	r5, r0
 800a36e:	460e      	mov	r6, r1
 800a370:	6884      	ldr	r4, [r0, #8]
 800a372:	b90b      	cbnz	r3, 800a378 <_puts_r+0x10>
 800a374:	f7ff ffa8 	bl	800a2c8 <__sinit>
 800a378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a37a:	07db      	lsls	r3, r3, #31
 800a37c:	d405      	bmi.n	800a38a <_puts_r+0x22>
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	0598      	lsls	r0, r3, #22
 800a382:	d402      	bmi.n	800a38a <_puts_r+0x22>
 800a384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a386:	f000 fa2a 	bl	800a7de <__retarget_lock_acquire_recursive>
 800a38a:	89a3      	ldrh	r3, [r4, #12]
 800a38c:	0719      	lsls	r1, r3, #28
 800a38e:	d513      	bpl.n	800a3b8 <_puts_r+0x50>
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	b18b      	cbz	r3, 800a3b8 <_puts_r+0x50>
 800a394:	3e01      	subs	r6, #1
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a39c:	3b01      	subs	r3, #1
 800a39e:	60a3      	str	r3, [r4, #8]
 800a3a0:	b9e9      	cbnz	r1, 800a3de <_puts_r+0x76>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	da2e      	bge.n	800a404 <_puts_r+0x9c>
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	210a      	movs	r1, #10
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	f000 f900 	bl	800a5b0 <__swbuf_r>
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	d007      	beq.n	800a3c4 <_puts_r+0x5c>
 800a3b4:	250a      	movs	r5, #10
 800a3b6:	e007      	b.n	800a3c8 <_puts_r+0x60>
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f000 f936 	bl	800a62c <__swsetup_r>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d0e7      	beq.n	800a394 <_puts_r+0x2c>
 800a3c4:	f04f 35ff 	mov.w	r5, #4294967295
 800a3c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ca:	07da      	lsls	r2, r3, #31
 800a3cc:	d405      	bmi.n	800a3da <_puts_r+0x72>
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	059b      	lsls	r3, r3, #22
 800a3d2:	d402      	bmi.n	800a3da <_puts_r+0x72>
 800a3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3d6:	f000 fa03 	bl	800a7e0 <__retarget_lock_release_recursive>
 800a3da:	4628      	mov	r0, r5
 800a3dc:	bd70      	pop	{r4, r5, r6, pc}
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	da04      	bge.n	800a3ec <_puts_r+0x84>
 800a3e2:	69a2      	ldr	r2, [r4, #24]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	dc06      	bgt.n	800a3f6 <_puts_r+0x8e>
 800a3e8:	290a      	cmp	r1, #10
 800a3ea:	d004      	beq.n	800a3f6 <_puts_r+0x8e>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	6022      	str	r2, [r4, #0]
 800a3f2:	7019      	strb	r1, [r3, #0]
 800a3f4:	e7cf      	b.n	800a396 <_puts_r+0x2e>
 800a3f6:	4622      	mov	r2, r4
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f000 f8d9 	bl	800a5b0 <__swbuf_r>
 800a3fe:	3001      	adds	r0, #1
 800a400:	d1c9      	bne.n	800a396 <_puts_r+0x2e>
 800a402:	e7df      	b.n	800a3c4 <_puts_r+0x5c>
 800a404:	250a      	movs	r5, #10
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	6022      	str	r2, [r4, #0]
 800a40c:	701d      	strb	r5, [r3, #0]
 800a40e:	e7db      	b.n	800a3c8 <_puts_r+0x60>

0800a410 <puts>:
 800a410:	4b02      	ldr	r3, [pc, #8]	; (800a41c <puts+0xc>)
 800a412:	4601      	mov	r1, r0
 800a414:	6818      	ldr	r0, [r3, #0]
 800a416:	f7ff bfa7 	b.w	800a368 <_puts_r>
 800a41a:	bf00      	nop
 800a41c:	20000310 	.word	0x20000310

0800a420 <siprintf>:
 800a420:	b40e      	push	{r1, r2, r3}
 800a422:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a426:	b500      	push	{lr}
 800a428:	b09c      	sub	sp, #112	; 0x70
 800a42a:	ab1d      	add	r3, sp, #116	; 0x74
 800a42c:	9002      	str	r0, [sp, #8]
 800a42e:	9006      	str	r0, [sp, #24]
 800a430:	9107      	str	r1, [sp, #28]
 800a432:	9104      	str	r1, [sp, #16]
 800a434:	4808      	ldr	r0, [pc, #32]	; (800a458 <siprintf+0x38>)
 800a436:	4909      	ldr	r1, [pc, #36]	; (800a45c <siprintf+0x3c>)
 800a438:	f853 2b04 	ldr.w	r2, [r3], #4
 800a43c:	9105      	str	r1, [sp, #20]
 800a43e:	6800      	ldr	r0, [r0, #0]
 800a440:	a902      	add	r1, sp, #8
 800a442:	9301      	str	r3, [sp, #4]
 800a444:	f002 fd0c 	bl	800ce60 <_svfiprintf_r>
 800a448:	2200      	movs	r2, #0
 800a44a:	9b02      	ldr	r3, [sp, #8]
 800a44c:	701a      	strb	r2, [r3, #0]
 800a44e:	b01c      	add	sp, #112	; 0x70
 800a450:	f85d eb04 	ldr.w	lr, [sp], #4
 800a454:	b003      	add	sp, #12
 800a456:	4770      	bx	lr
 800a458:	20000310 	.word	0x20000310
 800a45c:	ffff0208 	.word	0xffff0208

0800a460 <siscanf>:
 800a460:	b40e      	push	{r1, r2, r3}
 800a462:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a466:	b530      	push	{r4, r5, lr}
 800a468:	b09c      	sub	sp, #112	; 0x70
 800a46a:	ac1f      	add	r4, sp, #124	; 0x7c
 800a46c:	f854 5b04 	ldr.w	r5, [r4], #4
 800a470:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a474:	9002      	str	r0, [sp, #8]
 800a476:	9006      	str	r0, [sp, #24]
 800a478:	f7f5 fed6 	bl	8000228 <strlen>
 800a47c:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <siscanf+0x4c>)
 800a47e:	9003      	str	r0, [sp, #12]
 800a480:	930b      	str	r3, [sp, #44]	; 0x2c
 800a482:	2300      	movs	r3, #0
 800a484:	930f      	str	r3, [sp, #60]	; 0x3c
 800a486:	9314      	str	r3, [sp, #80]	; 0x50
 800a488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a48c:	9007      	str	r0, [sp, #28]
 800a48e:	4808      	ldr	r0, [pc, #32]	; (800a4b0 <siscanf+0x50>)
 800a490:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a494:	462a      	mov	r2, r5
 800a496:	4623      	mov	r3, r4
 800a498:	a902      	add	r1, sp, #8
 800a49a:	6800      	ldr	r0, [r0, #0]
 800a49c:	9401      	str	r4, [sp, #4]
 800a49e:	f002 fe37 	bl	800d110 <__ssvfiscanf_r>
 800a4a2:	b01c      	add	sp, #112	; 0x70
 800a4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4a8:	b003      	add	sp, #12
 800a4aa:	4770      	bx	lr
 800a4ac:	0800a4d7 	.word	0x0800a4d7
 800a4b0:	20000310 	.word	0x20000310

0800a4b4 <__sread>:
 800a4b4:	b510      	push	{r4, lr}
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4bc:	f000 f952 	bl	800a764 <_read_r>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	bfab      	itete	ge
 800a4c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4c6:	89a3      	ldrhlt	r3, [r4, #12]
 800a4c8:	181b      	addge	r3, r3, r0
 800a4ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4ce:	bfac      	ite	ge
 800a4d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4d2:	81a3      	strhlt	r3, [r4, #12]
 800a4d4:	bd10      	pop	{r4, pc}

0800a4d6 <__seofread>:
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	4770      	bx	lr

0800a4da <__swrite>:
 800a4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4de:	461f      	mov	r7, r3
 800a4e0:	898b      	ldrh	r3, [r1, #12]
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	05db      	lsls	r3, r3, #23
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	d505      	bpl.n	800a4f8 <__swrite+0x1e>
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f4:	f000 f924 	bl	800a740 <_lseek_r>
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	4632      	mov	r2, r6
 800a4fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a500:	81a3      	strh	r3, [r4, #12]
 800a502:	4628      	mov	r0, r5
 800a504:	463b      	mov	r3, r7
 800a506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a50e:	f7f6 bfd9 	b.w	80014c4 <_write_r>

0800a512 <__sseek>:
 800a512:	b510      	push	{r4, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51a:	f000 f911 	bl	800a740 <_lseek_r>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	bf15      	itete	ne
 800a524:	6560      	strne	r0, [r4, #84]	; 0x54
 800a526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a52a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a52e:	81a3      	strheq	r3, [r4, #12]
 800a530:	bf18      	it	ne
 800a532:	81a3      	strhne	r3, [r4, #12]
 800a534:	bd10      	pop	{r4, pc}

0800a536 <__sclose>:
 800a536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53a:	f000 b8f1 	b.w	800a720 <_close_r>

0800a53e <_vsniprintf_r>:
 800a53e:	b530      	push	{r4, r5, lr}
 800a540:	4614      	mov	r4, r2
 800a542:	2c00      	cmp	r4, #0
 800a544:	4605      	mov	r5, r0
 800a546:	461a      	mov	r2, r3
 800a548:	b09b      	sub	sp, #108	; 0x6c
 800a54a:	da05      	bge.n	800a558 <_vsniprintf_r+0x1a>
 800a54c:	238b      	movs	r3, #139	; 0x8b
 800a54e:	6003      	str	r3, [r0, #0]
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	b01b      	add	sp, #108	; 0x6c
 800a556:	bd30      	pop	{r4, r5, pc}
 800a558:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a55c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a560:	bf0c      	ite	eq
 800a562:	4623      	moveq	r3, r4
 800a564:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a568:	9302      	str	r3, [sp, #8]
 800a56a:	9305      	str	r3, [sp, #20]
 800a56c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a570:	9100      	str	r1, [sp, #0]
 800a572:	9104      	str	r1, [sp, #16]
 800a574:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a578:	4669      	mov	r1, sp
 800a57a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a57c:	f002 fc70 	bl	800ce60 <_svfiprintf_r>
 800a580:	1c43      	adds	r3, r0, #1
 800a582:	bfbc      	itt	lt
 800a584:	238b      	movlt	r3, #139	; 0x8b
 800a586:	602b      	strlt	r3, [r5, #0]
 800a588:	2c00      	cmp	r4, #0
 800a58a:	d0e3      	beq.n	800a554 <_vsniprintf_r+0x16>
 800a58c:	2200      	movs	r2, #0
 800a58e:	9b00      	ldr	r3, [sp, #0]
 800a590:	701a      	strb	r2, [r3, #0]
 800a592:	e7df      	b.n	800a554 <_vsniprintf_r+0x16>

0800a594 <vsniprintf>:
 800a594:	b507      	push	{r0, r1, r2, lr}
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	4613      	mov	r3, r2
 800a59a:	460a      	mov	r2, r1
 800a59c:	4601      	mov	r1, r0
 800a59e:	4803      	ldr	r0, [pc, #12]	; (800a5ac <vsniprintf+0x18>)
 800a5a0:	6800      	ldr	r0, [r0, #0]
 800a5a2:	f7ff ffcc 	bl	800a53e <_vsniprintf_r>
 800a5a6:	b003      	add	sp, #12
 800a5a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5ac:	20000310 	.word	0x20000310

0800a5b0 <__swbuf_r>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	460e      	mov	r6, r1
 800a5b4:	4614      	mov	r4, r2
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	b118      	cbz	r0, 800a5c2 <__swbuf_r+0x12>
 800a5ba:	6a03      	ldr	r3, [r0, #32]
 800a5bc:	b90b      	cbnz	r3, 800a5c2 <__swbuf_r+0x12>
 800a5be:	f7ff fe83 	bl	800a2c8 <__sinit>
 800a5c2:	69a3      	ldr	r3, [r4, #24]
 800a5c4:	60a3      	str	r3, [r4, #8]
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	071a      	lsls	r2, r3, #28
 800a5ca:	d525      	bpl.n	800a618 <__swbuf_r+0x68>
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	b31b      	cbz	r3, 800a618 <__swbuf_r+0x68>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	6922      	ldr	r2, [r4, #16]
 800a5d4:	b2f6      	uxtb	r6, r6
 800a5d6:	1a98      	subs	r0, r3, r2
 800a5d8:	6963      	ldr	r3, [r4, #20]
 800a5da:	4637      	mov	r7, r6
 800a5dc:	4283      	cmp	r3, r0
 800a5de:	dc04      	bgt.n	800a5ea <__swbuf_r+0x3a>
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f003 fa1c 	bl	800da20 <_fflush_r>
 800a5e8:	b9e0      	cbnz	r0, 800a624 <__swbuf_r+0x74>
 800a5ea:	68a3      	ldr	r3, [r4, #8]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	60a3      	str	r3, [r4, #8]
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	1c5a      	adds	r2, r3, #1
 800a5f4:	6022      	str	r2, [r4, #0]
 800a5f6:	701e      	strb	r6, [r3, #0]
 800a5f8:	6962      	ldr	r2, [r4, #20]
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d004      	beq.n	800a60a <__swbuf_r+0x5a>
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	07db      	lsls	r3, r3, #31
 800a604:	d506      	bpl.n	800a614 <__swbuf_r+0x64>
 800a606:	2e0a      	cmp	r6, #10
 800a608:	d104      	bne.n	800a614 <__swbuf_r+0x64>
 800a60a:	4621      	mov	r1, r4
 800a60c:	4628      	mov	r0, r5
 800a60e:	f003 fa07 	bl	800da20 <_fflush_r>
 800a612:	b938      	cbnz	r0, 800a624 <__swbuf_r+0x74>
 800a614:	4638      	mov	r0, r7
 800a616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a618:	4621      	mov	r1, r4
 800a61a:	4628      	mov	r0, r5
 800a61c:	f000 f806 	bl	800a62c <__swsetup_r>
 800a620:	2800      	cmp	r0, #0
 800a622:	d0d5      	beq.n	800a5d0 <__swbuf_r+0x20>
 800a624:	f04f 37ff 	mov.w	r7, #4294967295
 800a628:	e7f4      	b.n	800a614 <__swbuf_r+0x64>
	...

0800a62c <__swsetup_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4b2a      	ldr	r3, [pc, #168]	; (800a6d8 <__swsetup_r+0xac>)
 800a630:	4605      	mov	r5, r0
 800a632:	6818      	ldr	r0, [r3, #0]
 800a634:	460c      	mov	r4, r1
 800a636:	b118      	cbz	r0, 800a640 <__swsetup_r+0x14>
 800a638:	6a03      	ldr	r3, [r0, #32]
 800a63a:	b90b      	cbnz	r3, 800a640 <__swsetup_r+0x14>
 800a63c:	f7ff fe44 	bl	800a2c8 <__sinit>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a646:	0718      	lsls	r0, r3, #28
 800a648:	d422      	bmi.n	800a690 <__swsetup_r+0x64>
 800a64a:	06d9      	lsls	r1, r3, #27
 800a64c:	d407      	bmi.n	800a65e <__swsetup_r+0x32>
 800a64e:	2309      	movs	r3, #9
 800a650:	602b      	str	r3, [r5, #0]
 800a652:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a656:	f04f 30ff 	mov.w	r0, #4294967295
 800a65a:	81a3      	strh	r3, [r4, #12]
 800a65c:	e034      	b.n	800a6c8 <__swsetup_r+0x9c>
 800a65e:	0758      	lsls	r0, r3, #29
 800a660:	d512      	bpl.n	800a688 <__swsetup_r+0x5c>
 800a662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a664:	b141      	cbz	r1, 800a678 <__swsetup_r+0x4c>
 800a666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a66a:	4299      	cmp	r1, r3
 800a66c:	d002      	beq.n	800a674 <__swsetup_r+0x48>
 800a66e:	4628      	mov	r0, r5
 800a670:	f000 ff66 	bl	800b540 <_free_r>
 800a674:	2300      	movs	r3, #0
 800a676:	6363      	str	r3, [r4, #52]	; 0x34
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a67e:	81a3      	strh	r3, [r4, #12]
 800a680:	2300      	movs	r3, #0
 800a682:	6063      	str	r3, [r4, #4]
 800a684:	6923      	ldr	r3, [r4, #16]
 800a686:	6023      	str	r3, [r4, #0]
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	f043 0308 	orr.w	r3, r3, #8
 800a68e:	81a3      	strh	r3, [r4, #12]
 800a690:	6923      	ldr	r3, [r4, #16]
 800a692:	b94b      	cbnz	r3, 800a6a8 <__swsetup_r+0x7c>
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a69a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a69e:	d003      	beq.n	800a6a8 <__swsetup_r+0x7c>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f003 fa1b 	bl	800dade <__smakebuf_r>
 800a6a8:	89a0      	ldrh	r0, [r4, #12]
 800a6aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6ae:	f010 0301 	ands.w	r3, r0, #1
 800a6b2:	d00a      	beq.n	800a6ca <__swsetup_r+0x9e>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	60a3      	str	r3, [r4, #8]
 800a6b8:	6963      	ldr	r3, [r4, #20]
 800a6ba:	425b      	negs	r3, r3
 800a6bc:	61a3      	str	r3, [r4, #24]
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	b943      	cbnz	r3, 800a6d4 <__swsetup_r+0xa8>
 800a6c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6c6:	d1c4      	bne.n	800a652 <__swsetup_r+0x26>
 800a6c8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ca:	0781      	lsls	r1, r0, #30
 800a6cc:	bf58      	it	pl
 800a6ce:	6963      	ldrpl	r3, [r4, #20]
 800a6d0:	60a3      	str	r3, [r4, #8]
 800a6d2:	e7f4      	b.n	800a6be <__swsetup_r+0x92>
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7f7      	b.n	800a6c8 <__swsetup_r+0x9c>
 800a6d8:	20000310 	.word	0x20000310

0800a6dc <memset>:
 800a6dc:	4603      	mov	r3, r0
 800a6de:	4402      	add	r2, r0
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d100      	bne.n	800a6e6 <memset+0xa>
 800a6e4:	4770      	bx	lr
 800a6e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a6ea:	e7f9      	b.n	800a6e0 <memset+0x4>

0800a6ec <strstr>:
 800a6ec:	780a      	ldrb	r2, [r1, #0]
 800a6ee:	b570      	push	{r4, r5, r6, lr}
 800a6f0:	b96a      	cbnz	r2, 800a70e <strstr+0x22>
 800a6f2:	bd70      	pop	{r4, r5, r6, pc}
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d109      	bne.n	800a70c <strstr+0x20>
 800a6f8:	460c      	mov	r4, r1
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a700:	2b00      	cmp	r3, #0
 800a702:	d0f6      	beq.n	800a6f2 <strstr+0x6>
 800a704:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a708:	429e      	cmp	r6, r3
 800a70a:	d0f7      	beq.n	800a6fc <strstr+0x10>
 800a70c:	3001      	adds	r0, #1
 800a70e:	7803      	ldrb	r3, [r0, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1ef      	bne.n	800a6f4 <strstr+0x8>
 800a714:	4618      	mov	r0, r3
 800a716:	e7ec      	b.n	800a6f2 <strstr+0x6>

0800a718 <_localeconv_r>:
 800a718:	4800      	ldr	r0, [pc, #0]	; (800a71c <_localeconv_r+0x4>)
 800a71a:	4770      	bx	lr
 800a71c:	20000404 	.word	0x20000404

0800a720 <_close_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	2300      	movs	r3, #0
 800a724:	4d05      	ldr	r5, [pc, #20]	; (800a73c <_close_r+0x1c>)
 800a726:	4604      	mov	r4, r0
 800a728:	4608      	mov	r0, r1
 800a72a:	602b      	str	r3, [r5, #0]
 800a72c:	f7f7 fa4e 	bl	8001bcc <_close>
 800a730:	1c43      	adds	r3, r0, #1
 800a732:	d102      	bne.n	800a73a <_close_r+0x1a>
 800a734:	682b      	ldr	r3, [r5, #0]
 800a736:	b103      	cbz	r3, 800a73a <_close_r+0x1a>
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	200014b8 	.word	0x200014b8

0800a740 <_lseek_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	4611      	mov	r1, r2
 800a748:	2200      	movs	r2, #0
 800a74a:	4d05      	ldr	r5, [pc, #20]	; (800a760 <_lseek_r+0x20>)
 800a74c:	602a      	str	r2, [r5, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	f7f7 fa60 	bl	8001c14 <_lseek>
 800a754:	1c43      	adds	r3, r0, #1
 800a756:	d102      	bne.n	800a75e <_lseek_r+0x1e>
 800a758:	682b      	ldr	r3, [r5, #0]
 800a75a:	b103      	cbz	r3, 800a75e <_lseek_r+0x1e>
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	bd38      	pop	{r3, r4, r5, pc}
 800a760:	200014b8 	.word	0x200014b8

0800a764 <_read_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4604      	mov	r4, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	4611      	mov	r1, r2
 800a76c:	2200      	movs	r2, #0
 800a76e:	4d05      	ldr	r5, [pc, #20]	; (800a784 <_read_r+0x20>)
 800a770:	602a      	str	r2, [r5, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	f7f7 fa0d 	bl	8001b92 <_read>
 800a778:	1c43      	adds	r3, r0, #1
 800a77a:	d102      	bne.n	800a782 <_read_r+0x1e>
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	b103      	cbz	r3, 800a782 <_read_r+0x1e>
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	bd38      	pop	{r3, r4, r5, pc}
 800a784:	200014b8 	.word	0x200014b8

0800a788 <__errno>:
 800a788:	4b01      	ldr	r3, [pc, #4]	; (800a790 <__errno+0x8>)
 800a78a:	6818      	ldr	r0, [r3, #0]
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	20000310 	.word	0x20000310

0800a794 <__libc_init_array>:
 800a794:	b570      	push	{r4, r5, r6, lr}
 800a796:	2600      	movs	r6, #0
 800a798:	4d0c      	ldr	r5, [pc, #48]	; (800a7cc <__libc_init_array+0x38>)
 800a79a:	4c0d      	ldr	r4, [pc, #52]	; (800a7d0 <__libc_init_array+0x3c>)
 800a79c:	1b64      	subs	r4, r4, r5
 800a79e:	10a4      	asrs	r4, r4, #2
 800a7a0:	42a6      	cmp	r6, r4
 800a7a2:	d109      	bne.n	800a7b8 <__libc_init_array+0x24>
 800a7a4:	f003 ff64 	bl	800e670 <_init>
 800a7a8:	2600      	movs	r6, #0
 800a7aa:	4d0a      	ldr	r5, [pc, #40]	; (800a7d4 <__libc_init_array+0x40>)
 800a7ac:	4c0a      	ldr	r4, [pc, #40]	; (800a7d8 <__libc_init_array+0x44>)
 800a7ae:	1b64      	subs	r4, r4, r5
 800a7b0:	10a4      	asrs	r4, r4, #2
 800a7b2:	42a6      	cmp	r6, r4
 800a7b4:	d105      	bne.n	800a7c2 <__libc_init_array+0x2e>
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
 800a7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7bc:	4798      	blx	r3
 800a7be:	3601      	adds	r6, #1
 800a7c0:	e7ee      	b.n	800a7a0 <__libc_init_array+0xc>
 800a7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c6:	4798      	blx	r3
 800a7c8:	3601      	adds	r6, #1
 800a7ca:	e7f2      	b.n	800a7b2 <__libc_init_array+0x1e>
 800a7cc:	0800f840 	.word	0x0800f840
 800a7d0:	0800f840 	.word	0x0800f840
 800a7d4:	0800f840 	.word	0x0800f840
 800a7d8:	0800f844 	.word	0x0800f844

0800a7dc <__retarget_lock_init_recursive>:
 800a7dc:	4770      	bx	lr

0800a7de <__retarget_lock_acquire_recursive>:
 800a7de:	4770      	bx	lr

0800a7e0 <__retarget_lock_release_recursive>:
 800a7e0:	4770      	bx	lr

0800a7e2 <memchr>:
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	b510      	push	{r4, lr}
 800a7e6:	b2c9      	uxtb	r1, r1
 800a7e8:	4402      	add	r2, r0
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	d101      	bne.n	800a7f4 <memchr+0x12>
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	e003      	b.n	800a7fc <memchr+0x1a>
 800a7f4:	7804      	ldrb	r4, [r0, #0]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	428c      	cmp	r4, r1
 800a7fa:	d1f6      	bne.n	800a7ea <memchr+0x8>
 800a7fc:	bd10      	pop	{r4, pc}

0800a7fe <memcpy>:
 800a7fe:	440a      	add	r2, r1
 800a800:	4291      	cmp	r1, r2
 800a802:	f100 33ff 	add.w	r3, r0, #4294967295
 800a806:	d100      	bne.n	800a80a <memcpy+0xc>
 800a808:	4770      	bx	lr
 800a80a:	b510      	push	{r4, lr}
 800a80c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a810:	4291      	cmp	r1, r2
 800a812:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a816:	d1f9      	bne.n	800a80c <memcpy+0xe>
 800a818:	bd10      	pop	{r4, pc}
	...

0800a81c <nanf>:
 800a81c:	4800      	ldr	r0, [pc, #0]	; (800a820 <nanf+0x4>)
 800a81e:	4770      	bx	lr
 800a820:	7fc00000 	.word	0x7fc00000

0800a824 <__assert_func>:
 800a824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a826:	4614      	mov	r4, r2
 800a828:	461a      	mov	r2, r3
 800a82a:	4b09      	ldr	r3, [pc, #36]	; (800a850 <__assert_func+0x2c>)
 800a82c:	4605      	mov	r5, r0
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68d8      	ldr	r0, [r3, #12]
 800a832:	b14c      	cbz	r4, 800a848 <__assert_func+0x24>
 800a834:	4b07      	ldr	r3, [pc, #28]	; (800a854 <__assert_func+0x30>)
 800a836:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a83a:	9100      	str	r1, [sp, #0]
 800a83c:	462b      	mov	r3, r5
 800a83e:	4906      	ldr	r1, [pc, #24]	; (800a858 <__assert_func+0x34>)
 800a840:	f003 f916 	bl	800da70 <fiprintf>
 800a844:	f003 fa90 	bl	800dd68 <abort>
 800a848:	4b04      	ldr	r3, [pc, #16]	; (800a85c <__assert_func+0x38>)
 800a84a:	461c      	mov	r4, r3
 800a84c:	e7f3      	b.n	800a836 <__assert_func+0x12>
 800a84e:	bf00      	nop
 800a850:	20000310 	.word	0x20000310
 800a854:	0800f431 	.word	0x0800f431
 800a858:	0800f43e 	.word	0x0800f43e
 800a85c:	0800f46c 	.word	0x0800f46c

0800a860 <quorem>:
 800a860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	6903      	ldr	r3, [r0, #16]
 800a866:	690c      	ldr	r4, [r1, #16]
 800a868:	4607      	mov	r7, r0
 800a86a:	42a3      	cmp	r3, r4
 800a86c:	db7f      	blt.n	800a96e <quorem+0x10e>
 800a86e:	3c01      	subs	r4, #1
 800a870:	f100 0514 	add.w	r5, r0, #20
 800a874:	f101 0814 	add.w	r8, r1, #20
 800a878:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a87c:	9301      	str	r3, [sp, #4]
 800a87e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a882:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a886:	3301      	adds	r3, #1
 800a888:	429a      	cmp	r2, r3
 800a88a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a88e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a892:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a896:	d331      	bcc.n	800a8fc <quorem+0x9c>
 800a898:	f04f 0e00 	mov.w	lr, #0
 800a89c:	4640      	mov	r0, r8
 800a89e:	46ac      	mov	ip, r5
 800a8a0:	46f2      	mov	sl, lr
 800a8a2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8a6:	b293      	uxth	r3, r2
 800a8a8:	fb06 e303 	mla	r3, r6, r3, lr
 800a8ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8b0:	0c1a      	lsrs	r2, r3, #16
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	fb06 220e 	mla	r2, r6, lr, r2
 800a8b8:	ebaa 0303 	sub.w	r3, sl, r3
 800a8bc:	f8dc a000 	ldr.w	sl, [ip]
 800a8c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8c4:	fa1f fa8a 	uxth.w	sl, sl
 800a8c8:	4453      	add	r3, sl
 800a8ca:	f8dc a000 	ldr.w	sl, [ip]
 800a8ce:	b292      	uxth	r2, r2
 800a8d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a8d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8de:	4581      	cmp	r9, r0
 800a8e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a8e4:	f84c 3b04 	str.w	r3, [ip], #4
 800a8e8:	d2db      	bcs.n	800a8a2 <quorem+0x42>
 800a8ea:	f855 300b 	ldr.w	r3, [r5, fp]
 800a8ee:	b92b      	cbnz	r3, 800a8fc <quorem+0x9c>
 800a8f0:	9b01      	ldr	r3, [sp, #4]
 800a8f2:	3b04      	subs	r3, #4
 800a8f4:	429d      	cmp	r5, r3
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	d32d      	bcc.n	800a956 <quorem+0xf6>
 800a8fa:	613c      	str	r4, [r7, #16]
 800a8fc:	4638      	mov	r0, r7
 800a8fe:	f001 f9df 	bl	800bcc0 <__mcmp>
 800a902:	2800      	cmp	r0, #0
 800a904:	db23      	blt.n	800a94e <quorem+0xee>
 800a906:	4629      	mov	r1, r5
 800a908:	2000      	movs	r0, #0
 800a90a:	3601      	adds	r6, #1
 800a90c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a910:	f8d1 c000 	ldr.w	ip, [r1]
 800a914:	b293      	uxth	r3, r2
 800a916:	1ac3      	subs	r3, r0, r3
 800a918:	0c12      	lsrs	r2, r2, #16
 800a91a:	fa1f f08c 	uxth.w	r0, ip
 800a91e:	4403      	add	r3, r0
 800a920:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a924:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a928:	b29b      	uxth	r3, r3
 800a92a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a92e:	45c1      	cmp	r9, r8
 800a930:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a934:	f841 3b04 	str.w	r3, [r1], #4
 800a938:	d2e8      	bcs.n	800a90c <quorem+0xac>
 800a93a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a93e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a942:	b922      	cbnz	r2, 800a94e <quorem+0xee>
 800a944:	3b04      	subs	r3, #4
 800a946:	429d      	cmp	r5, r3
 800a948:	461a      	mov	r2, r3
 800a94a:	d30a      	bcc.n	800a962 <quorem+0x102>
 800a94c:	613c      	str	r4, [r7, #16]
 800a94e:	4630      	mov	r0, r6
 800a950:	b003      	add	sp, #12
 800a952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a956:	6812      	ldr	r2, [r2, #0]
 800a958:	3b04      	subs	r3, #4
 800a95a:	2a00      	cmp	r2, #0
 800a95c:	d1cd      	bne.n	800a8fa <quorem+0x9a>
 800a95e:	3c01      	subs	r4, #1
 800a960:	e7c8      	b.n	800a8f4 <quorem+0x94>
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	3b04      	subs	r3, #4
 800a966:	2a00      	cmp	r2, #0
 800a968:	d1f0      	bne.n	800a94c <quorem+0xec>
 800a96a:	3c01      	subs	r4, #1
 800a96c:	e7eb      	b.n	800a946 <quorem+0xe6>
 800a96e:	2000      	movs	r0, #0
 800a970:	e7ee      	b.n	800a950 <quorem+0xf0>
 800a972:	0000      	movs	r0, r0
 800a974:	0000      	movs	r0, r0
	...

0800a978 <_dtoa_r>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	4616      	mov	r6, r2
 800a97e:	461f      	mov	r7, r3
 800a980:	69c4      	ldr	r4, [r0, #28]
 800a982:	b099      	sub	sp, #100	; 0x64
 800a984:	4605      	mov	r5, r0
 800a986:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a98a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a98e:	b974      	cbnz	r4, 800a9ae <_dtoa_r+0x36>
 800a990:	2010      	movs	r0, #16
 800a992:	f000 fe1d 	bl	800b5d0 <malloc>
 800a996:	4602      	mov	r2, r0
 800a998:	61e8      	str	r0, [r5, #28]
 800a99a:	b920      	cbnz	r0, 800a9a6 <_dtoa_r+0x2e>
 800a99c:	21ef      	movs	r1, #239	; 0xef
 800a99e:	4bac      	ldr	r3, [pc, #688]	; (800ac50 <_dtoa_r+0x2d8>)
 800a9a0:	48ac      	ldr	r0, [pc, #688]	; (800ac54 <_dtoa_r+0x2dc>)
 800a9a2:	f7ff ff3f 	bl	800a824 <__assert_func>
 800a9a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9aa:	6004      	str	r4, [r0, #0]
 800a9ac:	60c4      	str	r4, [r0, #12]
 800a9ae:	69eb      	ldr	r3, [r5, #28]
 800a9b0:	6819      	ldr	r1, [r3, #0]
 800a9b2:	b151      	cbz	r1, 800a9ca <_dtoa_r+0x52>
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	4093      	lsls	r3, r2
 800a9ba:	604a      	str	r2, [r1, #4]
 800a9bc:	608b      	str	r3, [r1, #8]
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f000 fefa 	bl	800b7b8 <_Bfree>
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	69eb      	ldr	r3, [r5, #28]
 800a9c8:	601a      	str	r2, [r3, #0]
 800a9ca:	1e3b      	subs	r3, r7, #0
 800a9cc:	bfaf      	iteee	ge
 800a9ce:	2300      	movge	r3, #0
 800a9d0:	2201      	movlt	r2, #1
 800a9d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a9d6:	9305      	strlt	r3, [sp, #20]
 800a9d8:	bfa8      	it	ge
 800a9da:	f8c8 3000 	strge.w	r3, [r8]
 800a9de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a9e2:	4b9d      	ldr	r3, [pc, #628]	; (800ac58 <_dtoa_r+0x2e0>)
 800a9e4:	bfb8      	it	lt
 800a9e6:	f8c8 2000 	strlt.w	r2, [r8]
 800a9ea:	ea33 0309 	bics.w	r3, r3, r9
 800a9ee:	d119      	bne.n	800aa24 <_dtoa_r+0xac>
 800a9f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9fc:	4333      	orrs	r3, r6
 800a9fe:	f000 8589 	beq.w	800b514 <_dtoa_r+0xb9c>
 800aa02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa04:	b953      	cbnz	r3, 800aa1c <_dtoa_r+0xa4>
 800aa06:	4b95      	ldr	r3, [pc, #596]	; (800ac5c <_dtoa_r+0x2e4>)
 800aa08:	e023      	b.n	800aa52 <_dtoa_r+0xda>
 800aa0a:	4b95      	ldr	r3, [pc, #596]	; (800ac60 <_dtoa_r+0x2e8>)
 800aa0c:	9303      	str	r3, [sp, #12]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa12:	6013      	str	r3, [r2, #0]
 800aa14:	9803      	ldr	r0, [sp, #12]
 800aa16:	b019      	add	sp, #100	; 0x64
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	4b8f      	ldr	r3, [pc, #572]	; (800ac5c <_dtoa_r+0x2e4>)
 800aa1e:	9303      	str	r3, [sp, #12]
 800aa20:	3303      	adds	r3, #3
 800aa22:	e7f5      	b.n	800aa10 <_dtoa_r+0x98>
 800aa24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800aa2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa30:	2200      	movs	r2, #0
 800aa32:	2300      	movs	r3, #0
 800aa34:	f7f6 f8d8 	bl	8000be8 <__aeabi_dcmpeq>
 800aa38:	4680      	mov	r8, r0
 800aa3a:	b160      	cbz	r0, 800aa56 <_dtoa_r+0xde>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 8562 	beq.w	800b50e <_dtoa_r+0xb96>
 800aa4a:	4b86      	ldr	r3, [pc, #536]	; (800ac64 <_dtoa_r+0x2ec>)
 800aa4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	9303      	str	r3, [sp, #12]
 800aa54:	e7de      	b.n	800aa14 <_dtoa_r+0x9c>
 800aa56:	ab16      	add	r3, sp, #88	; 0x58
 800aa58:	9301      	str	r3, [sp, #4]
 800aa5a:	ab17      	add	r3, sp, #92	; 0x5c
 800aa5c:	9300      	str	r3, [sp, #0]
 800aa5e:	4628      	mov	r0, r5
 800aa60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa64:	f001 fa3c 	bl	800bee0 <__d2b>
 800aa68:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	2c00      	cmp	r4, #0
 800aa70:	d07e      	beq.n	800ab70 <_dtoa_r+0x1f8>
 800aa72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa78:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800aa7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa80:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aa84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa88:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4b75      	ldr	r3, [pc, #468]	; (800ac68 <_dtoa_r+0x2f0>)
 800aa92:	f7f5 fc89 	bl	80003a8 <__aeabi_dsub>
 800aa96:	a368      	add	r3, pc, #416	; (adr r3, 800ac38 <_dtoa_r+0x2c0>)
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f7f5 fe3c 	bl	8000718 <__aeabi_dmul>
 800aaa0:	a367      	add	r3, pc, #412	; (adr r3, 800ac40 <_dtoa_r+0x2c8>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fc81 	bl	80003ac <__adddf3>
 800aaaa:	4606      	mov	r6, r0
 800aaac:	4620      	mov	r0, r4
 800aaae:	460f      	mov	r7, r1
 800aab0:	f7f5 fdc8 	bl	8000644 <__aeabi_i2d>
 800aab4:	a364      	add	r3, pc, #400	; (adr r3, 800ac48 <_dtoa_r+0x2d0>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	f7f5 fe2d 	bl	8000718 <__aeabi_dmul>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	4630      	mov	r0, r6
 800aac4:	4639      	mov	r1, r7
 800aac6:	f7f5 fc71 	bl	80003ac <__adddf3>
 800aaca:	4606      	mov	r6, r0
 800aacc:	460f      	mov	r7, r1
 800aace:	f7f6 f8d3 	bl	8000c78 <__aeabi_d2iz>
 800aad2:	2200      	movs	r2, #0
 800aad4:	4683      	mov	fp, r0
 800aad6:	2300      	movs	r3, #0
 800aad8:	4630      	mov	r0, r6
 800aada:	4639      	mov	r1, r7
 800aadc:	f7f6 f88e 	bl	8000bfc <__aeabi_dcmplt>
 800aae0:	b148      	cbz	r0, 800aaf6 <_dtoa_r+0x17e>
 800aae2:	4658      	mov	r0, fp
 800aae4:	f7f5 fdae 	bl	8000644 <__aeabi_i2d>
 800aae8:	4632      	mov	r2, r6
 800aaea:	463b      	mov	r3, r7
 800aaec:	f7f6 f87c 	bl	8000be8 <__aeabi_dcmpeq>
 800aaf0:	b908      	cbnz	r0, 800aaf6 <_dtoa_r+0x17e>
 800aaf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aaf6:	f1bb 0f16 	cmp.w	fp, #22
 800aafa:	d857      	bhi.n	800abac <_dtoa_r+0x234>
 800aafc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab00:	4b5a      	ldr	r3, [pc, #360]	; (800ac6c <_dtoa_r+0x2f4>)
 800ab02:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	f7f6 f877 	bl	8000bfc <__aeabi_dcmplt>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d04e      	beq.n	800abb0 <_dtoa_r+0x238>
 800ab12:	2300      	movs	r3, #0
 800ab14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab18:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab1c:	1b1b      	subs	r3, r3, r4
 800ab1e:	1e5a      	subs	r2, r3, #1
 800ab20:	bf46      	itte	mi
 800ab22:	f1c3 0901 	rsbmi	r9, r3, #1
 800ab26:	2300      	movmi	r3, #0
 800ab28:	f04f 0900 	movpl.w	r9, #0
 800ab2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab2e:	bf48      	it	mi
 800ab30:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ab32:	f1bb 0f00 	cmp.w	fp, #0
 800ab36:	db3d      	blt.n	800abb4 <_dtoa_r+0x23c>
 800ab38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab3a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ab3e:	445b      	add	r3, fp
 800ab40:	9309      	str	r3, [sp, #36]	; 0x24
 800ab42:	2300      	movs	r3, #0
 800ab44:	930a      	str	r3, [sp, #40]	; 0x28
 800ab46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab48:	2b09      	cmp	r3, #9
 800ab4a:	d867      	bhi.n	800ac1c <_dtoa_r+0x2a4>
 800ab4c:	2b05      	cmp	r3, #5
 800ab4e:	bfc4      	itt	gt
 800ab50:	3b04      	subgt	r3, #4
 800ab52:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ab54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab56:	bfc8      	it	gt
 800ab58:	2400      	movgt	r4, #0
 800ab5a:	f1a3 0302 	sub.w	r3, r3, #2
 800ab5e:	bfd8      	it	le
 800ab60:	2401      	movle	r4, #1
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	f200 8086 	bhi.w	800ac74 <_dtoa_r+0x2fc>
 800ab68:	e8df f003 	tbb	[pc, r3]
 800ab6c:	5637392c 	.word	0x5637392c
 800ab70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ab74:	441c      	add	r4, r3
 800ab76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ab7a:	2b20      	cmp	r3, #32
 800ab7c:	bfc1      	itttt	gt
 800ab7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab82:	fa09 f903 	lslgt.w	r9, r9, r3
 800ab86:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800ab8a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ab8e:	bfd6      	itet	le
 800ab90:	f1c3 0320 	rsble	r3, r3, #32
 800ab94:	ea49 0003 	orrgt.w	r0, r9, r3
 800ab98:	fa06 f003 	lslle.w	r0, r6, r3
 800ab9c:	f7f5 fd42 	bl	8000624 <__aeabi_ui2d>
 800aba0:	2201      	movs	r2, #1
 800aba2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aba6:	3c01      	subs	r4, #1
 800aba8:	9213      	str	r2, [sp, #76]	; 0x4c
 800abaa:	e76f      	b.n	800aa8c <_dtoa_r+0x114>
 800abac:	2301      	movs	r3, #1
 800abae:	e7b3      	b.n	800ab18 <_dtoa_r+0x1a0>
 800abb0:	900f      	str	r0, [sp, #60]	; 0x3c
 800abb2:	e7b2      	b.n	800ab1a <_dtoa_r+0x1a2>
 800abb4:	f1cb 0300 	rsb	r3, fp, #0
 800abb8:	930a      	str	r3, [sp, #40]	; 0x28
 800abba:	2300      	movs	r3, #0
 800abbc:	eba9 090b 	sub.w	r9, r9, fp
 800abc0:	930e      	str	r3, [sp, #56]	; 0x38
 800abc2:	e7c0      	b.n	800ab46 <_dtoa_r+0x1ce>
 800abc4:	2300      	movs	r3, #0
 800abc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800abc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800abca:	2b00      	cmp	r3, #0
 800abcc:	dc55      	bgt.n	800ac7a <_dtoa_r+0x302>
 800abce:	2301      	movs	r3, #1
 800abd0:	461a      	mov	r2, r3
 800abd2:	9306      	str	r3, [sp, #24]
 800abd4:	9308      	str	r3, [sp, #32]
 800abd6:	9223      	str	r2, [sp, #140]	; 0x8c
 800abd8:	e00b      	b.n	800abf2 <_dtoa_r+0x27a>
 800abda:	2301      	movs	r3, #1
 800abdc:	e7f3      	b.n	800abc6 <_dtoa_r+0x24e>
 800abde:	2300      	movs	r3, #0
 800abe0:	930b      	str	r3, [sp, #44]	; 0x2c
 800abe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800abe4:	445b      	add	r3, fp
 800abe6:	9306      	str	r3, [sp, #24]
 800abe8:	3301      	adds	r3, #1
 800abea:	2b01      	cmp	r3, #1
 800abec:	9308      	str	r3, [sp, #32]
 800abee:	bfb8      	it	lt
 800abf0:	2301      	movlt	r3, #1
 800abf2:	2100      	movs	r1, #0
 800abf4:	2204      	movs	r2, #4
 800abf6:	69e8      	ldr	r0, [r5, #28]
 800abf8:	f102 0614 	add.w	r6, r2, #20
 800abfc:	429e      	cmp	r6, r3
 800abfe:	d940      	bls.n	800ac82 <_dtoa_r+0x30a>
 800ac00:	6041      	str	r1, [r0, #4]
 800ac02:	4628      	mov	r0, r5
 800ac04:	f000 fd98 	bl	800b738 <_Balloc>
 800ac08:	9003      	str	r0, [sp, #12]
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	d13c      	bne.n	800ac88 <_dtoa_r+0x310>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	f240 11af 	movw	r1, #431	; 0x1af
 800ac14:	4b16      	ldr	r3, [pc, #88]	; (800ac70 <_dtoa_r+0x2f8>)
 800ac16:	e6c3      	b.n	800a9a0 <_dtoa_r+0x28>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e7e1      	b.n	800abe0 <_dtoa_r+0x268>
 800ac1c:	2401      	movs	r4, #1
 800ac1e:	2300      	movs	r3, #0
 800ac20:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac22:	9322      	str	r3, [sp, #136]	; 0x88
 800ac24:	f04f 33ff 	mov.w	r3, #4294967295
 800ac28:	2200      	movs	r2, #0
 800ac2a:	9306      	str	r3, [sp, #24]
 800ac2c:	9308      	str	r3, [sp, #32]
 800ac2e:	2312      	movs	r3, #18
 800ac30:	e7d1      	b.n	800abd6 <_dtoa_r+0x25e>
 800ac32:	bf00      	nop
 800ac34:	f3af 8000 	nop.w
 800ac38:	636f4361 	.word	0x636f4361
 800ac3c:	3fd287a7 	.word	0x3fd287a7
 800ac40:	8b60c8b3 	.word	0x8b60c8b3
 800ac44:	3fc68a28 	.word	0x3fc68a28
 800ac48:	509f79fb 	.word	0x509f79fb
 800ac4c:	3fd34413 	.word	0x3fd34413
 800ac50:	0800f47a 	.word	0x0800f47a
 800ac54:	0800f491 	.word	0x0800f491
 800ac58:	7ff00000 	.word	0x7ff00000
 800ac5c:	0800f476 	.word	0x0800f476
 800ac60:	0800f46d 	.word	0x0800f46d
 800ac64:	0800f7d1 	.word	0x0800f7d1
 800ac68:	3ff80000 	.word	0x3ff80000
 800ac6c:	0800f580 	.word	0x0800f580
 800ac70:	0800f4e9 	.word	0x0800f4e9
 800ac74:	2301      	movs	r3, #1
 800ac76:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac78:	e7d4      	b.n	800ac24 <_dtoa_r+0x2ac>
 800ac7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac7c:	9306      	str	r3, [sp, #24]
 800ac7e:	9308      	str	r3, [sp, #32]
 800ac80:	e7b7      	b.n	800abf2 <_dtoa_r+0x27a>
 800ac82:	3101      	adds	r1, #1
 800ac84:	0052      	lsls	r2, r2, #1
 800ac86:	e7b7      	b.n	800abf8 <_dtoa_r+0x280>
 800ac88:	69eb      	ldr	r3, [r5, #28]
 800ac8a:	9a03      	ldr	r2, [sp, #12]
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	9b08      	ldr	r3, [sp, #32]
 800ac90:	2b0e      	cmp	r3, #14
 800ac92:	f200 80a8 	bhi.w	800ade6 <_dtoa_r+0x46e>
 800ac96:	2c00      	cmp	r4, #0
 800ac98:	f000 80a5 	beq.w	800ade6 <_dtoa_r+0x46e>
 800ac9c:	f1bb 0f00 	cmp.w	fp, #0
 800aca0:	dd34      	ble.n	800ad0c <_dtoa_r+0x394>
 800aca2:	4b9a      	ldr	r3, [pc, #616]	; (800af0c <_dtoa_r+0x594>)
 800aca4:	f00b 020f 	and.w	r2, fp, #15
 800aca8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800acb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acb4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800acb8:	ea4f 142b 	mov.w	r4, fp, asr #4
 800acbc:	d016      	beq.n	800acec <_dtoa_r+0x374>
 800acbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acc2:	4b93      	ldr	r3, [pc, #588]	; (800af10 <_dtoa_r+0x598>)
 800acc4:	2703      	movs	r7, #3
 800acc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acca:	f7f5 fe4f 	bl	800096c <__aeabi_ddiv>
 800acce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acd2:	f004 040f 	and.w	r4, r4, #15
 800acd6:	4e8e      	ldr	r6, [pc, #568]	; (800af10 <_dtoa_r+0x598>)
 800acd8:	b954      	cbnz	r4, 800acf0 <_dtoa_r+0x378>
 800acda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ace2:	f7f5 fe43 	bl	800096c <__aeabi_ddiv>
 800ace6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acea:	e029      	b.n	800ad40 <_dtoa_r+0x3c8>
 800acec:	2702      	movs	r7, #2
 800acee:	e7f2      	b.n	800acd6 <_dtoa_r+0x35e>
 800acf0:	07e1      	lsls	r1, r4, #31
 800acf2:	d508      	bpl.n	800ad06 <_dtoa_r+0x38e>
 800acf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acf8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acfc:	f7f5 fd0c 	bl	8000718 <__aeabi_dmul>
 800ad00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad04:	3701      	adds	r7, #1
 800ad06:	1064      	asrs	r4, r4, #1
 800ad08:	3608      	adds	r6, #8
 800ad0a:	e7e5      	b.n	800acd8 <_dtoa_r+0x360>
 800ad0c:	f000 80a5 	beq.w	800ae5a <_dtoa_r+0x4e2>
 800ad10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad14:	f1cb 0400 	rsb	r4, fp, #0
 800ad18:	4b7c      	ldr	r3, [pc, #496]	; (800af0c <_dtoa_r+0x594>)
 800ad1a:	f004 020f 	and.w	r2, r4, #15
 800ad1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	f7f5 fcf7 	bl	8000718 <__aeabi_dmul>
 800ad2a:	2702      	movs	r7, #2
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad32:	4e77      	ldr	r6, [pc, #476]	; (800af10 <_dtoa_r+0x598>)
 800ad34:	1124      	asrs	r4, r4, #4
 800ad36:	2c00      	cmp	r4, #0
 800ad38:	f040 8084 	bne.w	800ae44 <_dtoa_r+0x4cc>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1d2      	bne.n	800ace6 <_dtoa_r+0x36e>
 800ad40:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ad44:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ad48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 8087 	beq.w	800ae5e <_dtoa_r+0x4e6>
 800ad50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad54:	2200      	movs	r2, #0
 800ad56:	4b6f      	ldr	r3, [pc, #444]	; (800af14 <_dtoa_r+0x59c>)
 800ad58:	f7f5 ff50 	bl	8000bfc <__aeabi_dcmplt>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d07e      	beq.n	800ae5e <_dtoa_r+0x4e6>
 800ad60:	9b08      	ldr	r3, [sp, #32]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d07b      	beq.n	800ae5e <_dtoa_r+0x4e6>
 800ad66:	9b06      	ldr	r3, [sp, #24]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dd38      	ble.n	800adde <_dtoa_r+0x466>
 800ad6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad70:	2200      	movs	r2, #0
 800ad72:	4b69      	ldr	r3, [pc, #420]	; (800af18 <_dtoa_r+0x5a0>)
 800ad74:	f7f5 fcd0 	bl	8000718 <__aeabi_dmul>
 800ad78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad7c:	9c06      	ldr	r4, [sp, #24]
 800ad7e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800ad82:	3701      	adds	r7, #1
 800ad84:	4638      	mov	r0, r7
 800ad86:	f7f5 fc5d 	bl	8000644 <__aeabi_i2d>
 800ad8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad8e:	f7f5 fcc3 	bl	8000718 <__aeabi_dmul>
 800ad92:	2200      	movs	r2, #0
 800ad94:	4b61      	ldr	r3, [pc, #388]	; (800af1c <_dtoa_r+0x5a4>)
 800ad96:	f7f5 fb09 	bl	80003ac <__adddf3>
 800ad9a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ad9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ada2:	9611      	str	r6, [sp, #68]	; 0x44
 800ada4:	2c00      	cmp	r4, #0
 800ada6:	d15d      	bne.n	800ae64 <_dtoa_r+0x4ec>
 800ada8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adac:	2200      	movs	r2, #0
 800adae:	4b5c      	ldr	r3, [pc, #368]	; (800af20 <_dtoa_r+0x5a8>)
 800adb0:	f7f5 fafa 	bl	80003a8 <__aeabi_dsub>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800adbc:	4633      	mov	r3, r6
 800adbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800adc0:	f7f5 ff3a 	bl	8000c38 <__aeabi_dcmpgt>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	f040 8295 	bne.w	800b2f4 <_dtoa_r+0x97c>
 800adca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800add0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800add4:	f7f5 ff12 	bl	8000bfc <__aeabi_dcmplt>
 800add8:	2800      	cmp	r0, #0
 800adda:	f040 8289 	bne.w	800b2f0 <_dtoa_r+0x978>
 800adde:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ade2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ade6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f2c0 8151 	blt.w	800b090 <_dtoa_r+0x718>
 800adee:	f1bb 0f0e 	cmp.w	fp, #14
 800adf2:	f300 814d 	bgt.w	800b090 <_dtoa_r+0x718>
 800adf6:	4b45      	ldr	r3, [pc, #276]	; (800af0c <_dtoa_r+0x594>)
 800adf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800adfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae00:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ae04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f280 80da 	bge.w	800afc0 <_dtoa_r+0x648>
 800ae0c:	9b08      	ldr	r3, [sp, #32]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f300 80d6 	bgt.w	800afc0 <_dtoa_r+0x648>
 800ae14:	f040 826b 	bne.w	800b2ee <_dtoa_r+0x976>
 800ae18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	4b40      	ldr	r3, [pc, #256]	; (800af20 <_dtoa_r+0x5a8>)
 800ae20:	f7f5 fc7a 	bl	8000718 <__aeabi_dmul>
 800ae24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae28:	f7f5 fefc 	bl	8000c24 <__aeabi_dcmpge>
 800ae2c:	9c08      	ldr	r4, [sp, #32]
 800ae2e:	4626      	mov	r6, r4
 800ae30:	2800      	cmp	r0, #0
 800ae32:	f040 8241 	bne.w	800b2b8 <_dtoa_r+0x940>
 800ae36:	2331      	movs	r3, #49	; 0x31
 800ae38:	9f03      	ldr	r7, [sp, #12]
 800ae3a:	f10b 0b01 	add.w	fp, fp, #1
 800ae3e:	f807 3b01 	strb.w	r3, [r7], #1
 800ae42:	e23d      	b.n	800b2c0 <_dtoa_r+0x948>
 800ae44:	07e2      	lsls	r2, r4, #31
 800ae46:	d505      	bpl.n	800ae54 <_dtoa_r+0x4dc>
 800ae48:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae4c:	f7f5 fc64 	bl	8000718 <__aeabi_dmul>
 800ae50:	2301      	movs	r3, #1
 800ae52:	3701      	adds	r7, #1
 800ae54:	1064      	asrs	r4, r4, #1
 800ae56:	3608      	adds	r6, #8
 800ae58:	e76d      	b.n	800ad36 <_dtoa_r+0x3be>
 800ae5a:	2702      	movs	r7, #2
 800ae5c:	e770      	b.n	800ad40 <_dtoa_r+0x3c8>
 800ae5e:	46d8      	mov	r8, fp
 800ae60:	9c08      	ldr	r4, [sp, #32]
 800ae62:	e78f      	b.n	800ad84 <_dtoa_r+0x40c>
 800ae64:	9903      	ldr	r1, [sp, #12]
 800ae66:	4b29      	ldr	r3, [pc, #164]	; (800af0c <_dtoa_r+0x594>)
 800ae68:	4421      	add	r1, r4
 800ae6a:	9112      	str	r1, [sp, #72]	; 0x48
 800ae6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae72:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ae76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae7a:	2900      	cmp	r1, #0
 800ae7c:	d054      	beq.n	800af28 <_dtoa_r+0x5b0>
 800ae7e:	2000      	movs	r0, #0
 800ae80:	4928      	ldr	r1, [pc, #160]	; (800af24 <_dtoa_r+0x5ac>)
 800ae82:	f7f5 fd73 	bl	800096c <__aeabi_ddiv>
 800ae86:	463b      	mov	r3, r7
 800ae88:	4632      	mov	r2, r6
 800ae8a:	f7f5 fa8d 	bl	80003a8 <__aeabi_dsub>
 800ae8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae92:	9f03      	ldr	r7, [sp, #12]
 800ae94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae98:	f7f5 feee 	bl	8000c78 <__aeabi_d2iz>
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	f7f5 fbd1 	bl	8000644 <__aeabi_i2d>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aeaa:	f7f5 fa7d 	bl	80003a8 <__aeabi_dsub>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	3430      	adds	r4, #48	; 0x30
 800aeb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aeb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aebc:	f807 4b01 	strb.w	r4, [r7], #1
 800aec0:	f7f5 fe9c 	bl	8000bfc <__aeabi_dcmplt>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d173      	bne.n	800afb0 <_dtoa_r+0x638>
 800aec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aecc:	2000      	movs	r0, #0
 800aece:	4911      	ldr	r1, [pc, #68]	; (800af14 <_dtoa_r+0x59c>)
 800aed0:	f7f5 fa6a 	bl	80003a8 <__aeabi_dsub>
 800aed4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aed8:	f7f5 fe90 	bl	8000bfc <__aeabi_dcmplt>
 800aedc:	2800      	cmp	r0, #0
 800aede:	f040 80b6 	bne.w	800b04e <_dtoa_r+0x6d6>
 800aee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aee4:	429f      	cmp	r7, r3
 800aee6:	f43f af7a 	beq.w	800adde <_dtoa_r+0x466>
 800aeea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aeee:	2200      	movs	r2, #0
 800aef0:	4b09      	ldr	r3, [pc, #36]	; (800af18 <_dtoa_r+0x5a0>)
 800aef2:	f7f5 fc11 	bl	8000718 <__aeabi_dmul>
 800aef6:	2200      	movs	r2, #0
 800aef8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aefc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af00:	4b05      	ldr	r3, [pc, #20]	; (800af18 <_dtoa_r+0x5a0>)
 800af02:	f7f5 fc09 	bl	8000718 <__aeabi_dmul>
 800af06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af0a:	e7c3      	b.n	800ae94 <_dtoa_r+0x51c>
 800af0c:	0800f580 	.word	0x0800f580
 800af10:	0800f558 	.word	0x0800f558
 800af14:	3ff00000 	.word	0x3ff00000
 800af18:	40240000 	.word	0x40240000
 800af1c:	401c0000 	.word	0x401c0000
 800af20:	40140000 	.word	0x40140000
 800af24:	3fe00000 	.word	0x3fe00000
 800af28:	4630      	mov	r0, r6
 800af2a:	4639      	mov	r1, r7
 800af2c:	f7f5 fbf4 	bl	8000718 <__aeabi_dmul>
 800af30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af36:	9c03      	ldr	r4, [sp, #12]
 800af38:	9314      	str	r3, [sp, #80]	; 0x50
 800af3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af3e:	f7f5 fe9b 	bl	8000c78 <__aeabi_d2iz>
 800af42:	9015      	str	r0, [sp, #84]	; 0x54
 800af44:	f7f5 fb7e 	bl	8000644 <__aeabi_i2d>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af50:	f7f5 fa2a 	bl	80003a8 <__aeabi_dsub>
 800af54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af56:	4606      	mov	r6, r0
 800af58:	3330      	adds	r3, #48	; 0x30
 800af5a:	f804 3b01 	strb.w	r3, [r4], #1
 800af5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af60:	460f      	mov	r7, r1
 800af62:	429c      	cmp	r4, r3
 800af64:	f04f 0200 	mov.w	r2, #0
 800af68:	d124      	bne.n	800afb4 <_dtoa_r+0x63c>
 800af6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af6e:	4baf      	ldr	r3, [pc, #700]	; (800b22c <_dtoa_r+0x8b4>)
 800af70:	f7f5 fa1c 	bl	80003ac <__adddf3>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4630      	mov	r0, r6
 800af7a:	4639      	mov	r1, r7
 800af7c:	f7f5 fe5c 	bl	8000c38 <__aeabi_dcmpgt>
 800af80:	2800      	cmp	r0, #0
 800af82:	d163      	bne.n	800b04c <_dtoa_r+0x6d4>
 800af84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af88:	2000      	movs	r0, #0
 800af8a:	49a8      	ldr	r1, [pc, #672]	; (800b22c <_dtoa_r+0x8b4>)
 800af8c:	f7f5 fa0c 	bl	80003a8 <__aeabi_dsub>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	4630      	mov	r0, r6
 800af96:	4639      	mov	r1, r7
 800af98:	f7f5 fe30 	bl	8000bfc <__aeabi_dcmplt>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f43f af1e 	beq.w	800adde <_dtoa_r+0x466>
 800afa2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800afa4:	1e7b      	subs	r3, r7, #1
 800afa6:	9314      	str	r3, [sp, #80]	; 0x50
 800afa8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800afac:	2b30      	cmp	r3, #48	; 0x30
 800afae:	d0f8      	beq.n	800afa2 <_dtoa_r+0x62a>
 800afb0:	46c3      	mov	fp, r8
 800afb2:	e03b      	b.n	800b02c <_dtoa_r+0x6b4>
 800afb4:	4b9e      	ldr	r3, [pc, #632]	; (800b230 <_dtoa_r+0x8b8>)
 800afb6:	f7f5 fbaf 	bl	8000718 <__aeabi_dmul>
 800afba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afbe:	e7bc      	b.n	800af3a <_dtoa_r+0x5c2>
 800afc0:	9f03      	ldr	r7, [sp, #12]
 800afc2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800afc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afca:	4640      	mov	r0, r8
 800afcc:	4649      	mov	r1, r9
 800afce:	f7f5 fccd 	bl	800096c <__aeabi_ddiv>
 800afd2:	f7f5 fe51 	bl	8000c78 <__aeabi_d2iz>
 800afd6:	4604      	mov	r4, r0
 800afd8:	f7f5 fb34 	bl	8000644 <__aeabi_i2d>
 800afdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afe0:	f7f5 fb9a 	bl	8000718 <__aeabi_dmul>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4640      	mov	r0, r8
 800afea:	4649      	mov	r1, r9
 800afec:	f7f5 f9dc 	bl	80003a8 <__aeabi_dsub>
 800aff0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aff4:	f807 6b01 	strb.w	r6, [r7], #1
 800aff8:	9e03      	ldr	r6, [sp, #12]
 800affa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800affe:	1bbe      	subs	r6, r7, r6
 800b000:	45b4      	cmp	ip, r6
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	d136      	bne.n	800b076 <_dtoa_r+0x6fe>
 800b008:	f7f5 f9d0 	bl	80003ac <__adddf3>
 800b00c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b010:	4680      	mov	r8, r0
 800b012:	4689      	mov	r9, r1
 800b014:	f7f5 fe10 	bl	8000c38 <__aeabi_dcmpgt>
 800b018:	bb58      	cbnz	r0, 800b072 <_dtoa_r+0x6fa>
 800b01a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b01e:	4640      	mov	r0, r8
 800b020:	4649      	mov	r1, r9
 800b022:	f7f5 fde1 	bl	8000be8 <__aeabi_dcmpeq>
 800b026:	b108      	cbz	r0, 800b02c <_dtoa_r+0x6b4>
 800b028:	07e3      	lsls	r3, r4, #31
 800b02a:	d422      	bmi.n	800b072 <_dtoa_r+0x6fa>
 800b02c:	4651      	mov	r1, sl
 800b02e:	4628      	mov	r0, r5
 800b030:	f000 fbc2 	bl	800b7b8 <_Bfree>
 800b034:	2300      	movs	r3, #0
 800b036:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b038:	703b      	strb	r3, [r7, #0]
 800b03a:	f10b 0301 	add.w	r3, fp, #1
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b042:	2b00      	cmp	r3, #0
 800b044:	f43f ace6 	beq.w	800aa14 <_dtoa_r+0x9c>
 800b048:	601f      	str	r7, [r3, #0]
 800b04a:	e4e3      	b.n	800aa14 <_dtoa_r+0x9c>
 800b04c:	4627      	mov	r7, r4
 800b04e:	463b      	mov	r3, r7
 800b050:	461f      	mov	r7, r3
 800b052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b056:	2a39      	cmp	r2, #57	; 0x39
 800b058:	d107      	bne.n	800b06a <_dtoa_r+0x6f2>
 800b05a:	9a03      	ldr	r2, [sp, #12]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d1f7      	bne.n	800b050 <_dtoa_r+0x6d8>
 800b060:	2230      	movs	r2, #48	; 0x30
 800b062:	9903      	ldr	r1, [sp, #12]
 800b064:	f108 0801 	add.w	r8, r8, #1
 800b068:	700a      	strb	r2, [r1, #0]
 800b06a:	781a      	ldrb	r2, [r3, #0]
 800b06c:	3201      	adds	r2, #1
 800b06e:	701a      	strb	r2, [r3, #0]
 800b070:	e79e      	b.n	800afb0 <_dtoa_r+0x638>
 800b072:	46d8      	mov	r8, fp
 800b074:	e7eb      	b.n	800b04e <_dtoa_r+0x6d6>
 800b076:	2200      	movs	r2, #0
 800b078:	4b6d      	ldr	r3, [pc, #436]	; (800b230 <_dtoa_r+0x8b8>)
 800b07a:	f7f5 fb4d 	bl	8000718 <__aeabi_dmul>
 800b07e:	2200      	movs	r2, #0
 800b080:	2300      	movs	r3, #0
 800b082:	4680      	mov	r8, r0
 800b084:	4689      	mov	r9, r1
 800b086:	f7f5 fdaf 	bl	8000be8 <__aeabi_dcmpeq>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d09b      	beq.n	800afc6 <_dtoa_r+0x64e>
 800b08e:	e7cd      	b.n	800b02c <_dtoa_r+0x6b4>
 800b090:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b092:	2a00      	cmp	r2, #0
 800b094:	f000 80c4 	beq.w	800b220 <_dtoa_r+0x8a8>
 800b098:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b09a:	2a01      	cmp	r2, #1
 800b09c:	f300 80a8 	bgt.w	800b1f0 <_dtoa_r+0x878>
 800b0a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b0a2:	2a00      	cmp	r2, #0
 800b0a4:	f000 80a0 	beq.w	800b1e8 <_dtoa_r+0x870>
 800b0a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0ac:	464f      	mov	r7, r9
 800b0ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b0b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	441a      	add	r2, r3
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	4499      	add	r9, r3
 800b0ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b0bc:	f000 fc7c 	bl	800b9b8 <__i2b>
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	b15f      	cbz	r7, 800b0dc <_dtoa_r+0x764>
 800b0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	dd08      	ble.n	800b0dc <_dtoa_r+0x764>
 800b0ca:	42bb      	cmp	r3, r7
 800b0cc:	bfa8      	it	ge
 800b0ce:	463b      	movge	r3, r7
 800b0d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0d2:	eba9 0903 	sub.w	r9, r9, r3
 800b0d6:	1aff      	subs	r7, r7, r3
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	9309      	str	r3, [sp, #36]	; 0x24
 800b0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0de:	b1f3      	cbz	r3, 800b11e <_dtoa_r+0x7a6>
 800b0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 80a0 	beq.w	800b228 <_dtoa_r+0x8b0>
 800b0e8:	2c00      	cmp	r4, #0
 800b0ea:	dd10      	ble.n	800b10e <_dtoa_r+0x796>
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4622      	mov	r2, r4
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	f000 fd1f 	bl	800bb34 <__pow5mult>
 800b0f6:	4652      	mov	r2, sl
 800b0f8:	4601      	mov	r1, r0
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	f000 fc71 	bl	800b9e4 <__multiply>
 800b102:	4680      	mov	r8, r0
 800b104:	4651      	mov	r1, sl
 800b106:	4628      	mov	r0, r5
 800b108:	f000 fb56 	bl	800b7b8 <_Bfree>
 800b10c:	46c2      	mov	sl, r8
 800b10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b110:	1b1a      	subs	r2, r3, r4
 800b112:	d004      	beq.n	800b11e <_dtoa_r+0x7a6>
 800b114:	4651      	mov	r1, sl
 800b116:	4628      	mov	r0, r5
 800b118:	f000 fd0c 	bl	800bb34 <__pow5mult>
 800b11c:	4682      	mov	sl, r0
 800b11e:	2101      	movs	r1, #1
 800b120:	4628      	mov	r0, r5
 800b122:	f000 fc49 	bl	800b9b8 <__i2b>
 800b126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b128:	4604      	mov	r4, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f340 8082 	ble.w	800b234 <_dtoa_r+0x8bc>
 800b130:	461a      	mov	r2, r3
 800b132:	4601      	mov	r1, r0
 800b134:	4628      	mov	r0, r5
 800b136:	f000 fcfd 	bl	800bb34 <__pow5mult>
 800b13a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b13c:	4604      	mov	r4, r0
 800b13e:	2b01      	cmp	r3, #1
 800b140:	dd7b      	ble.n	800b23a <_dtoa_r+0x8c2>
 800b142:	f04f 0800 	mov.w	r8, #0
 800b146:	6923      	ldr	r3, [r4, #16]
 800b148:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b14c:	6918      	ldr	r0, [r3, #16]
 800b14e:	f000 fbe5 	bl	800b91c <__hi0bits>
 800b152:	f1c0 0020 	rsb	r0, r0, #32
 800b156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b158:	4418      	add	r0, r3
 800b15a:	f010 001f 	ands.w	r0, r0, #31
 800b15e:	f000 8092 	beq.w	800b286 <_dtoa_r+0x90e>
 800b162:	f1c0 0320 	rsb	r3, r0, #32
 800b166:	2b04      	cmp	r3, #4
 800b168:	f340 8085 	ble.w	800b276 <_dtoa_r+0x8fe>
 800b16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b16e:	f1c0 001c 	rsb	r0, r0, #28
 800b172:	4403      	add	r3, r0
 800b174:	4481      	add	r9, r0
 800b176:	4407      	add	r7, r0
 800b178:	9309      	str	r3, [sp, #36]	; 0x24
 800b17a:	f1b9 0f00 	cmp.w	r9, #0
 800b17e:	dd05      	ble.n	800b18c <_dtoa_r+0x814>
 800b180:	4651      	mov	r1, sl
 800b182:	464a      	mov	r2, r9
 800b184:	4628      	mov	r0, r5
 800b186:	f000 fd2f 	bl	800bbe8 <__lshift>
 800b18a:	4682      	mov	sl, r0
 800b18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b18e:	2b00      	cmp	r3, #0
 800b190:	dd05      	ble.n	800b19e <_dtoa_r+0x826>
 800b192:	4621      	mov	r1, r4
 800b194:	461a      	mov	r2, r3
 800b196:	4628      	mov	r0, r5
 800b198:	f000 fd26 	bl	800bbe8 <__lshift>
 800b19c:	4604      	mov	r4, r0
 800b19e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d072      	beq.n	800b28a <_dtoa_r+0x912>
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4650      	mov	r0, sl
 800b1a8:	f000 fd8a 	bl	800bcc0 <__mcmp>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	da6c      	bge.n	800b28a <_dtoa_r+0x912>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	4651      	mov	r1, sl
 800b1b4:	220a      	movs	r2, #10
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f000 fb20 	bl	800b7fc <__multadd>
 800b1bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1be:	4682      	mov	sl, r0
 800b1c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 81ac 	beq.w	800b522 <_dtoa_r+0xbaa>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	4631      	mov	r1, r6
 800b1ce:	220a      	movs	r2, #10
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f000 fb13 	bl	800b7fc <__multadd>
 800b1d6:	9b06      	ldr	r3, [sp, #24]
 800b1d8:	4606      	mov	r6, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f300 8093 	bgt.w	800b306 <_dtoa_r+0x98e>
 800b1e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	dc59      	bgt.n	800b29a <_dtoa_r+0x922>
 800b1e6:	e08e      	b.n	800b306 <_dtoa_r+0x98e>
 800b1e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b1ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1ee:	e75d      	b.n	800b0ac <_dtoa_r+0x734>
 800b1f0:	9b08      	ldr	r3, [sp, #32]
 800b1f2:	1e5c      	subs	r4, r3, #1
 800b1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f6:	42a3      	cmp	r3, r4
 800b1f8:	bfbf      	itttt	lt
 800b1fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b1fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b1fe:	1ae3      	sublt	r3, r4, r3
 800b200:	18d2      	addlt	r2, r2, r3
 800b202:	bfa8      	it	ge
 800b204:	1b1c      	subge	r4, r3, r4
 800b206:	9b08      	ldr	r3, [sp, #32]
 800b208:	bfbe      	ittt	lt
 800b20a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b20c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b20e:	2400      	movlt	r4, #0
 800b210:	2b00      	cmp	r3, #0
 800b212:	bfb5      	itete	lt
 800b214:	eba9 0703 	sublt.w	r7, r9, r3
 800b218:	464f      	movge	r7, r9
 800b21a:	2300      	movlt	r3, #0
 800b21c:	9b08      	ldrge	r3, [sp, #32]
 800b21e:	e747      	b.n	800b0b0 <_dtoa_r+0x738>
 800b220:	464f      	mov	r7, r9
 800b222:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b224:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b226:	e74c      	b.n	800b0c2 <_dtoa_r+0x74a>
 800b228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b22a:	e773      	b.n	800b114 <_dtoa_r+0x79c>
 800b22c:	3fe00000 	.word	0x3fe00000
 800b230:	40240000 	.word	0x40240000
 800b234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b236:	2b01      	cmp	r3, #1
 800b238:	dc18      	bgt.n	800b26c <_dtoa_r+0x8f4>
 800b23a:	9b04      	ldr	r3, [sp, #16]
 800b23c:	b9b3      	cbnz	r3, 800b26c <_dtoa_r+0x8f4>
 800b23e:	9b05      	ldr	r3, [sp, #20]
 800b240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b244:	b993      	cbnz	r3, 800b26c <_dtoa_r+0x8f4>
 800b246:	9b05      	ldr	r3, [sp, #20]
 800b248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b24c:	0d1b      	lsrs	r3, r3, #20
 800b24e:	051b      	lsls	r3, r3, #20
 800b250:	b17b      	cbz	r3, 800b272 <_dtoa_r+0x8fa>
 800b252:	f04f 0801 	mov.w	r8, #1
 800b256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b258:	f109 0901 	add.w	r9, r9, #1
 800b25c:	3301      	adds	r3, #1
 800b25e:	9309      	str	r3, [sp, #36]	; 0x24
 800b260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b262:	2b00      	cmp	r3, #0
 800b264:	f47f af6f 	bne.w	800b146 <_dtoa_r+0x7ce>
 800b268:	2001      	movs	r0, #1
 800b26a:	e774      	b.n	800b156 <_dtoa_r+0x7de>
 800b26c:	f04f 0800 	mov.w	r8, #0
 800b270:	e7f6      	b.n	800b260 <_dtoa_r+0x8e8>
 800b272:	4698      	mov	r8, r3
 800b274:	e7f4      	b.n	800b260 <_dtoa_r+0x8e8>
 800b276:	d080      	beq.n	800b17a <_dtoa_r+0x802>
 800b278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b27a:	331c      	adds	r3, #28
 800b27c:	441a      	add	r2, r3
 800b27e:	4499      	add	r9, r3
 800b280:	441f      	add	r7, r3
 800b282:	9209      	str	r2, [sp, #36]	; 0x24
 800b284:	e779      	b.n	800b17a <_dtoa_r+0x802>
 800b286:	4603      	mov	r3, r0
 800b288:	e7f6      	b.n	800b278 <_dtoa_r+0x900>
 800b28a:	9b08      	ldr	r3, [sp, #32]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dc34      	bgt.n	800b2fa <_dtoa_r+0x982>
 800b290:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b292:	2b02      	cmp	r3, #2
 800b294:	dd31      	ble.n	800b2fa <_dtoa_r+0x982>
 800b296:	9b08      	ldr	r3, [sp, #32]
 800b298:	9306      	str	r3, [sp, #24]
 800b29a:	9b06      	ldr	r3, [sp, #24]
 800b29c:	b963      	cbnz	r3, 800b2b8 <_dtoa_r+0x940>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	2205      	movs	r2, #5
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f000 faaa 	bl	800b7fc <__multadd>
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	4650      	mov	r0, sl
 800b2ae:	f000 fd07 	bl	800bcc0 <__mcmp>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	f73f adbf 	bgt.w	800ae36 <_dtoa_r+0x4be>
 800b2b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b2ba:	9f03      	ldr	r7, [sp, #12]
 800b2bc:	ea6f 0b03 	mvn.w	fp, r3
 800b2c0:	f04f 0800 	mov.w	r8, #0
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f000 fa76 	bl	800b7b8 <_Bfree>
 800b2cc:	2e00      	cmp	r6, #0
 800b2ce:	f43f aead 	beq.w	800b02c <_dtoa_r+0x6b4>
 800b2d2:	f1b8 0f00 	cmp.w	r8, #0
 800b2d6:	d005      	beq.n	800b2e4 <_dtoa_r+0x96c>
 800b2d8:	45b0      	cmp	r8, r6
 800b2da:	d003      	beq.n	800b2e4 <_dtoa_r+0x96c>
 800b2dc:	4641      	mov	r1, r8
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f000 fa6a 	bl	800b7b8 <_Bfree>
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f000 fa66 	bl	800b7b8 <_Bfree>
 800b2ec:	e69e      	b.n	800b02c <_dtoa_r+0x6b4>
 800b2ee:	2400      	movs	r4, #0
 800b2f0:	4626      	mov	r6, r4
 800b2f2:	e7e1      	b.n	800b2b8 <_dtoa_r+0x940>
 800b2f4:	46c3      	mov	fp, r8
 800b2f6:	4626      	mov	r6, r4
 800b2f8:	e59d      	b.n	800ae36 <_dtoa_r+0x4be>
 800b2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 80c8 	beq.w	800b492 <_dtoa_r+0xb1a>
 800b302:	9b08      	ldr	r3, [sp, #32]
 800b304:	9306      	str	r3, [sp, #24]
 800b306:	2f00      	cmp	r7, #0
 800b308:	dd05      	ble.n	800b316 <_dtoa_r+0x99e>
 800b30a:	4631      	mov	r1, r6
 800b30c:	463a      	mov	r2, r7
 800b30e:	4628      	mov	r0, r5
 800b310:	f000 fc6a 	bl	800bbe8 <__lshift>
 800b314:	4606      	mov	r6, r0
 800b316:	f1b8 0f00 	cmp.w	r8, #0
 800b31a:	d05b      	beq.n	800b3d4 <_dtoa_r+0xa5c>
 800b31c:	4628      	mov	r0, r5
 800b31e:	6871      	ldr	r1, [r6, #4]
 800b320:	f000 fa0a 	bl	800b738 <_Balloc>
 800b324:	4607      	mov	r7, r0
 800b326:	b928      	cbnz	r0, 800b334 <_dtoa_r+0x9bc>
 800b328:	4602      	mov	r2, r0
 800b32a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b32e:	4b81      	ldr	r3, [pc, #516]	; (800b534 <_dtoa_r+0xbbc>)
 800b330:	f7ff bb36 	b.w	800a9a0 <_dtoa_r+0x28>
 800b334:	6932      	ldr	r2, [r6, #16]
 800b336:	f106 010c 	add.w	r1, r6, #12
 800b33a:	3202      	adds	r2, #2
 800b33c:	0092      	lsls	r2, r2, #2
 800b33e:	300c      	adds	r0, #12
 800b340:	f7ff fa5d 	bl	800a7fe <memcpy>
 800b344:	2201      	movs	r2, #1
 800b346:	4639      	mov	r1, r7
 800b348:	4628      	mov	r0, r5
 800b34a:	f000 fc4d 	bl	800bbe8 <__lshift>
 800b34e:	46b0      	mov	r8, r6
 800b350:	4606      	mov	r6, r0
 800b352:	9b03      	ldr	r3, [sp, #12]
 800b354:	9a03      	ldr	r2, [sp, #12]
 800b356:	3301      	adds	r3, #1
 800b358:	9308      	str	r3, [sp, #32]
 800b35a:	9b06      	ldr	r3, [sp, #24]
 800b35c:	4413      	add	r3, r2
 800b35e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b360:	9b04      	ldr	r3, [sp, #16]
 800b362:	f003 0301 	and.w	r3, r3, #1
 800b366:	930a      	str	r3, [sp, #40]	; 0x28
 800b368:	9b08      	ldr	r3, [sp, #32]
 800b36a:	4621      	mov	r1, r4
 800b36c:	3b01      	subs	r3, #1
 800b36e:	4650      	mov	r0, sl
 800b370:	9304      	str	r3, [sp, #16]
 800b372:	f7ff fa75 	bl	800a860 <quorem>
 800b376:	4641      	mov	r1, r8
 800b378:	9006      	str	r0, [sp, #24]
 800b37a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b37e:	4650      	mov	r0, sl
 800b380:	f000 fc9e 	bl	800bcc0 <__mcmp>
 800b384:	4632      	mov	r2, r6
 800b386:	9009      	str	r0, [sp, #36]	; 0x24
 800b388:	4621      	mov	r1, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	f000 fcb4 	bl	800bcf8 <__mdiff>
 800b390:	68c2      	ldr	r2, [r0, #12]
 800b392:	4607      	mov	r7, r0
 800b394:	bb02      	cbnz	r2, 800b3d8 <_dtoa_r+0xa60>
 800b396:	4601      	mov	r1, r0
 800b398:	4650      	mov	r0, sl
 800b39a:	f000 fc91 	bl	800bcc0 <__mcmp>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	920c      	str	r2, [sp, #48]	; 0x30
 800b3a6:	f000 fa07 	bl	800b7b8 <_Bfree>
 800b3aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3ae:	9f08      	ldr	r7, [sp, #32]
 800b3b0:	ea43 0102 	orr.w	r1, r3, r2
 800b3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b6:	4319      	orrs	r1, r3
 800b3b8:	d110      	bne.n	800b3dc <_dtoa_r+0xa64>
 800b3ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3be:	d029      	beq.n	800b414 <_dtoa_r+0xa9c>
 800b3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dd02      	ble.n	800b3cc <_dtoa_r+0xa54>
 800b3c6:	9b06      	ldr	r3, [sp, #24]
 800b3c8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	f883 9000 	strb.w	r9, [r3]
 800b3d2:	e777      	b.n	800b2c4 <_dtoa_r+0x94c>
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	e7ba      	b.n	800b34e <_dtoa_r+0x9d6>
 800b3d8:	2201      	movs	r2, #1
 800b3da:	e7e1      	b.n	800b3a0 <_dtoa_r+0xa28>
 800b3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	db04      	blt.n	800b3ec <_dtoa_r+0xa74>
 800b3e2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3e8:	430b      	orrs	r3, r1
 800b3ea:	d120      	bne.n	800b42e <_dtoa_r+0xab6>
 800b3ec:	2a00      	cmp	r2, #0
 800b3ee:	dded      	ble.n	800b3cc <_dtoa_r+0xa54>
 800b3f0:	4651      	mov	r1, sl
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f000 fbf7 	bl	800bbe8 <__lshift>
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4682      	mov	sl, r0
 800b3fe:	f000 fc5f 	bl	800bcc0 <__mcmp>
 800b402:	2800      	cmp	r0, #0
 800b404:	dc03      	bgt.n	800b40e <_dtoa_r+0xa96>
 800b406:	d1e1      	bne.n	800b3cc <_dtoa_r+0xa54>
 800b408:	f019 0f01 	tst.w	r9, #1
 800b40c:	d0de      	beq.n	800b3cc <_dtoa_r+0xa54>
 800b40e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b412:	d1d8      	bne.n	800b3c6 <_dtoa_r+0xa4e>
 800b414:	2339      	movs	r3, #57	; 0x39
 800b416:	9a04      	ldr	r2, [sp, #16]
 800b418:	7013      	strb	r3, [r2, #0]
 800b41a:	463b      	mov	r3, r7
 800b41c:	461f      	mov	r7, r3
 800b41e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b422:	3b01      	subs	r3, #1
 800b424:	2a39      	cmp	r2, #57	; 0x39
 800b426:	d06b      	beq.n	800b500 <_dtoa_r+0xb88>
 800b428:	3201      	adds	r2, #1
 800b42a:	701a      	strb	r2, [r3, #0]
 800b42c:	e74a      	b.n	800b2c4 <_dtoa_r+0x94c>
 800b42e:	2a00      	cmp	r2, #0
 800b430:	dd07      	ble.n	800b442 <_dtoa_r+0xaca>
 800b432:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b436:	d0ed      	beq.n	800b414 <_dtoa_r+0xa9c>
 800b438:	9a04      	ldr	r2, [sp, #16]
 800b43a:	f109 0301 	add.w	r3, r9, #1
 800b43e:	7013      	strb	r3, [r2, #0]
 800b440:	e740      	b.n	800b2c4 <_dtoa_r+0x94c>
 800b442:	9b08      	ldr	r3, [sp, #32]
 800b444:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b446:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d042      	beq.n	800b4d4 <_dtoa_r+0xb5c>
 800b44e:	4651      	mov	r1, sl
 800b450:	2300      	movs	r3, #0
 800b452:	220a      	movs	r2, #10
 800b454:	4628      	mov	r0, r5
 800b456:	f000 f9d1 	bl	800b7fc <__multadd>
 800b45a:	45b0      	cmp	r8, r6
 800b45c:	4682      	mov	sl, r0
 800b45e:	f04f 0300 	mov.w	r3, #0
 800b462:	f04f 020a 	mov.w	r2, #10
 800b466:	4641      	mov	r1, r8
 800b468:	4628      	mov	r0, r5
 800b46a:	d107      	bne.n	800b47c <_dtoa_r+0xb04>
 800b46c:	f000 f9c6 	bl	800b7fc <__multadd>
 800b470:	4680      	mov	r8, r0
 800b472:	4606      	mov	r6, r0
 800b474:	9b08      	ldr	r3, [sp, #32]
 800b476:	3301      	adds	r3, #1
 800b478:	9308      	str	r3, [sp, #32]
 800b47a:	e775      	b.n	800b368 <_dtoa_r+0x9f0>
 800b47c:	f000 f9be 	bl	800b7fc <__multadd>
 800b480:	4631      	mov	r1, r6
 800b482:	4680      	mov	r8, r0
 800b484:	2300      	movs	r3, #0
 800b486:	220a      	movs	r2, #10
 800b488:	4628      	mov	r0, r5
 800b48a:	f000 f9b7 	bl	800b7fc <__multadd>
 800b48e:	4606      	mov	r6, r0
 800b490:	e7f0      	b.n	800b474 <_dtoa_r+0xafc>
 800b492:	9b08      	ldr	r3, [sp, #32]
 800b494:	9306      	str	r3, [sp, #24]
 800b496:	9f03      	ldr	r7, [sp, #12]
 800b498:	4621      	mov	r1, r4
 800b49a:	4650      	mov	r0, sl
 800b49c:	f7ff f9e0 	bl	800a860 <quorem>
 800b4a0:	9b03      	ldr	r3, [sp, #12]
 800b4a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b4a6:	f807 9b01 	strb.w	r9, [r7], #1
 800b4aa:	1afa      	subs	r2, r7, r3
 800b4ac:	9b06      	ldr	r3, [sp, #24]
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	dd07      	ble.n	800b4c2 <_dtoa_r+0xb4a>
 800b4b2:	4651      	mov	r1, sl
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	220a      	movs	r2, #10
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f000 f99f 	bl	800b7fc <__multadd>
 800b4be:	4682      	mov	sl, r0
 800b4c0:	e7ea      	b.n	800b498 <_dtoa_r+0xb20>
 800b4c2:	9b06      	ldr	r3, [sp, #24]
 800b4c4:	f04f 0800 	mov.w	r8, #0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	bfcc      	ite	gt
 800b4cc:	461f      	movgt	r7, r3
 800b4ce:	2701      	movle	r7, #1
 800b4d0:	9b03      	ldr	r3, [sp, #12]
 800b4d2:	441f      	add	r7, r3
 800b4d4:	4651      	mov	r1, sl
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f000 fb85 	bl	800bbe8 <__lshift>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4682      	mov	sl, r0
 800b4e2:	f000 fbed 	bl	800bcc0 <__mcmp>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	dc97      	bgt.n	800b41a <_dtoa_r+0xaa2>
 800b4ea:	d102      	bne.n	800b4f2 <_dtoa_r+0xb7a>
 800b4ec:	f019 0f01 	tst.w	r9, #1
 800b4f0:	d193      	bne.n	800b41a <_dtoa_r+0xaa2>
 800b4f2:	463b      	mov	r3, r7
 800b4f4:	461f      	mov	r7, r3
 800b4f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4fa:	2a30      	cmp	r2, #48	; 0x30
 800b4fc:	d0fa      	beq.n	800b4f4 <_dtoa_r+0xb7c>
 800b4fe:	e6e1      	b.n	800b2c4 <_dtoa_r+0x94c>
 800b500:	9a03      	ldr	r2, [sp, #12]
 800b502:	429a      	cmp	r2, r3
 800b504:	d18a      	bne.n	800b41c <_dtoa_r+0xaa4>
 800b506:	2331      	movs	r3, #49	; 0x31
 800b508:	f10b 0b01 	add.w	fp, fp, #1
 800b50c:	e797      	b.n	800b43e <_dtoa_r+0xac6>
 800b50e:	4b0a      	ldr	r3, [pc, #40]	; (800b538 <_dtoa_r+0xbc0>)
 800b510:	f7ff ba9f 	b.w	800aa52 <_dtoa_r+0xda>
 800b514:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b516:	2b00      	cmp	r3, #0
 800b518:	f47f aa77 	bne.w	800aa0a <_dtoa_r+0x92>
 800b51c:	4b07      	ldr	r3, [pc, #28]	; (800b53c <_dtoa_r+0xbc4>)
 800b51e:	f7ff ba98 	b.w	800aa52 <_dtoa_r+0xda>
 800b522:	9b06      	ldr	r3, [sp, #24]
 800b524:	2b00      	cmp	r3, #0
 800b526:	dcb6      	bgt.n	800b496 <_dtoa_r+0xb1e>
 800b528:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	f73f aeb5 	bgt.w	800b29a <_dtoa_r+0x922>
 800b530:	e7b1      	b.n	800b496 <_dtoa_r+0xb1e>
 800b532:	bf00      	nop
 800b534:	0800f4e9 	.word	0x0800f4e9
 800b538:	0800f7d0 	.word	0x0800f7d0
 800b53c:	0800f46d 	.word	0x0800f46d

0800b540 <_free_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4605      	mov	r5, r0
 800b544:	2900      	cmp	r1, #0
 800b546:	d040      	beq.n	800b5ca <_free_r+0x8a>
 800b548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b54c:	1f0c      	subs	r4, r1, #4
 800b54e:	2b00      	cmp	r3, #0
 800b550:	bfb8      	it	lt
 800b552:	18e4      	addlt	r4, r4, r3
 800b554:	f000 f8e4 	bl	800b720 <__malloc_lock>
 800b558:	4a1c      	ldr	r2, [pc, #112]	; (800b5cc <_free_r+0x8c>)
 800b55a:	6813      	ldr	r3, [r2, #0]
 800b55c:	b933      	cbnz	r3, 800b56c <_free_r+0x2c>
 800b55e:	6063      	str	r3, [r4, #4]
 800b560:	6014      	str	r4, [r2, #0]
 800b562:	4628      	mov	r0, r5
 800b564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b568:	f000 b8e0 	b.w	800b72c <__malloc_unlock>
 800b56c:	42a3      	cmp	r3, r4
 800b56e:	d908      	bls.n	800b582 <_free_r+0x42>
 800b570:	6820      	ldr	r0, [r4, #0]
 800b572:	1821      	adds	r1, r4, r0
 800b574:	428b      	cmp	r3, r1
 800b576:	bf01      	itttt	eq
 800b578:	6819      	ldreq	r1, [r3, #0]
 800b57a:	685b      	ldreq	r3, [r3, #4]
 800b57c:	1809      	addeq	r1, r1, r0
 800b57e:	6021      	streq	r1, [r4, #0]
 800b580:	e7ed      	b.n	800b55e <_free_r+0x1e>
 800b582:	461a      	mov	r2, r3
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	b10b      	cbz	r3, 800b58c <_free_r+0x4c>
 800b588:	42a3      	cmp	r3, r4
 800b58a:	d9fa      	bls.n	800b582 <_free_r+0x42>
 800b58c:	6811      	ldr	r1, [r2, #0]
 800b58e:	1850      	adds	r0, r2, r1
 800b590:	42a0      	cmp	r0, r4
 800b592:	d10b      	bne.n	800b5ac <_free_r+0x6c>
 800b594:	6820      	ldr	r0, [r4, #0]
 800b596:	4401      	add	r1, r0
 800b598:	1850      	adds	r0, r2, r1
 800b59a:	4283      	cmp	r3, r0
 800b59c:	6011      	str	r1, [r2, #0]
 800b59e:	d1e0      	bne.n	800b562 <_free_r+0x22>
 800b5a0:	6818      	ldr	r0, [r3, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	4408      	add	r0, r1
 800b5a6:	6010      	str	r0, [r2, #0]
 800b5a8:	6053      	str	r3, [r2, #4]
 800b5aa:	e7da      	b.n	800b562 <_free_r+0x22>
 800b5ac:	d902      	bls.n	800b5b4 <_free_r+0x74>
 800b5ae:	230c      	movs	r3, #12
 800b5b0:	602b      	str	r3, [r5, #0]
 800b5b2:	e7d6      	b.n	800b562 <_free_r+0x22>
 800b5b4:	6820      	ldr	r0, [r4, #0]
 800b5b6:	1821      	adds	r1, r4, r0
 800b5b8:	428b      	cmp	r3, r1
 800b5ba:	bf01      	itttt	eq
 800b5bc:	6819      	ldreq	r1, [r3, #0]
 800b5be:	685b      	ldreq	r3, [r3, #4]
 800b5c0:	1809      	addeq	r1, r1, r0
 800b5c2:	6021      	streq	r1, [r4, #0]
 800b5c4:	6063      	str	r3, [r4, #4]
 800b5c6:	6054      	str	r4, [r2, #4]
 800b5c8:	e7cb      	b.n	800b562 <_free_r+0x22>
 800b5ca:	bd38      	pop	{r3, r4, r5, pc}
 800b5cc:	200014c0 	.word	0x200014c0

0800b5d0 <malloc>:
 800b5d0:	4b02      	ldr	r3, [pc, #8]	; (800b5dc <malloc+0xc>)
 800b5d2:	4601      	mov	r1, r0
 800b5d4:	6818      	ldr	r0, [r3, #0]
 800b5d6:	f000 b823 	b.w	800b620 <_malloc_r>
 800b5da:	bf00      	nop
 800b5dc:	20000310 	.word	0x20000310

0800b5e0 <sbrk_aligned>:
 800b5e0:	b570      	push	{r4, r5, r6, lr}
 800b5e2:	4e0e      	ldr	r6, [pc, #56]	; (800b61c <sbrk_aligned+0x3c>)
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	6831      	ldr	r1, [r6, #0]
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	b911      	cbnz	r1, 800b5f2 <sbrk_aligned+0x12>
 800b5ec:	f002 fba6 	bl	800dd3c <_sbrk_r>
 800b5f0:	6030      	str	r0, [r6, #0]
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	f002 fba1 	bl	800dd3c <_sbrk_r>
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	d00a      	beq.n	800b614 <sbrk_aligned+0x34>
 800b5fe:	1cc4      	adds	r4, r0, #3
 800b600:	f024 0403 	bic.w	r4, r4, #3
 800b604:	42a0      	cmp	r0, r4
 800b606:	d007      	beq.n	800b618 <sbrk_aligned+0x38>
 800b608:	1a21      	subs	r1, r4, r0
 800b60a:	4628      	mov	r0, r5
 800b60c:	f002 fb96 	bl	800dd3c <_sbrk_r>
 800b610:	3001      	adds	r0, #1
 800b612:	d101      	bne.n	800b618 <sbrk_aligned+0x38>
 800b614:	f04f 34ff 	mov.w	r4, #4294967295
 800b618:	4620      	mov	r0, r4
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	200014c4 	.word	0x200014c4

0800b620 <_malloc_r>:
 800b620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b624:	1ccd      	adds	r5, r1, #3
 800b626:	f025 0503 	bic.w	r5, r5, #3
 800b62a:	3508      	adds	r5, #8
 800b62c:	2d0c      	cmp	r5, #12
 800b62e:	bf38      	it	cc
 800b630:	250c      	movcc	r5, #12
 800b632:	2d00      	cmp	r5, #0
 800b634:	4607      	mov	r7, r0
 800b636:	db01      	blt.n	800b63c <_malloc_r+0x1c>
 800b638:	42a9      	cmp	r1, r5
 800b63a:	d905      	bls.n	800b648 <_malloc_r+0x28>
 800b63c:	230c      	movs	r3, #12
 800b63e:	2600      	movs	r6, #0
 800b640:	603b      	str	r3, [r7, #0]
 800b642:	4630      	mov	r0, r6
 800b644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b648:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b71c <_malloc_r+0xfc>
 800b64c:	f000 f868 	bl	800b720 <__malloc_lock>
 800b650:	f8d8 3000 	ldr.w	r3, [r8]
 800b654:	461c      	mov	r4, r3
 800b656:	bb5c      	cbnz	r4, 800b6b0 <_malloc_r+0x90>
 800b658:	4629      	mov	r1, r5
 800b65a:	4638      	mov	r0, r7
 800b65c:	f7ff ffc0 	bl	800b5e0 <sbrk_aligned>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	4604      	mov	r4, r0
 800b664:	d155      	bne.n	800b712 <_malloc_r+0xf2>
 800b666:	f8d8 4000 	ldr.w	r4, [r8]
 800b66a:	4626      	mov	r6, r4
 800b66c:	2e00      	cmp	r6, #0
 800b66e:	d145      	bne.n	800b6fc <_malloc_r+0xdc>
 800b670:	2c00      	cmp	r4, #0
 800b672:	d048      	beq.n	800b706 <_malloc_r+0xe6>
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	4631      	mov	r1, r6
 800b678:	4638      	mov	r0, r7
 800b67a:	eb04 0903 	add.w	r9, r4, r3
 800b67e:	f002 fb5d 	bl	800dd3c <_sbrk_r>
 800b682:	4581      	cmp	r9, r0
 800b684:	d13f      	bne.n	800b706 <_malloc_r+0xe6>
 800b686:	6821      	ldr	r1, [r4, #0]
 800b688:	4638      	mov	r0, r7
 800b68a:	1a6d      	subs	r5, r5, r1
 800b68c:	4629      	mov	r1, r5
 800b68e:	f7ff ffa7 	bl	800b5e0 <sbrk_aligned>
 800b692:	3001      	adds	r0, #1
 800b694:	d037      	beq.n	800b706 <_malloc_r+0xe6>
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	442b      	add	r3, r5
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	f8d8 3000 	ldr.w	r3, [r8]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d038      	beq.n	800b716 <_malloc_r+0xf6>
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	42a2      	cmp	r2, r4
 800b6a8:	d12b      	bne.n	800b702 <_malloc_r+0xe2>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	605a      	str	r2, [r3, #4]
 800b6ae:	e00f      	b.n	800b6d0 <_malloc_r+0xb0>
 800b6b0:	6822      	ldr	r2, [r4, #0]
 800b6b2:	1b52      	subs	r2, r2, r5
 800b6b4:	d41f      	bmi.n	800b6f6 <_malloc_r+0xd6>
 800b6b6:	2a0b      	cmp	r2, #11
 800b6b8:	d917      	bls.n	800b6ea <_malloc_r+0xca>
 800b6ba:	1961      	adds	r1, r4, r5
 800b6bc:	42a3      	cmp	r3, r4
 800b6be:	6025      	str	r5, [r4, #0]
 800b6c0:	bf18      	it	ne
 800b6c2:	6059      	strne	r1, [r3, #4]
 800b6c4:	6863      	ldr	r3, [r4, #4]
 800b6c6:	bf08      	it	eq
 800b6c8:	f8c8 1000 	streq.w	r1, [r8]
 800b6cc:	5162      	str	r2, [r4, r5]
 800b6ce:	604b      	str	r3, [r1, #4]
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	f104 060b 	add.w	r6, r4, #11
 800b6d6:	f000 f829 	bl	800b72c <__malloc_unlock>
 800b6da:	f026 0607 	bic.w	r6, r6, #7
 800b6de:	1d23      	adds	r3, r4, #4
 800b6e0:	1af2      	subs	r2, r6, r3
 800b6e2:	d0ae      	beq.n	800b642 <_malloc_r+0x22>
 800b6e4:	1b9b      	subs	r3, r3, r6
 800b6e6:	50a3      	str	r3, [r4, r2]
 800b6e8:	e7ab      	b.n	800b642 <_malloc_r+0x22>
 800b6ea:	42a3      	cmp	r3, r4
 800b6ec:	6862      	ldr	r2, [r4, #4]
 800b6ee:	d1dd      	bne.n	800b6ac <_malloc_r+0x8c>
 800b6f0:	f8c8 2000 	str.w	r2, [r8]
 800b6f4:	e7ec      	b.n	800b6d0 <_malloc_r+0xb0>
 800b6f6:	4623      	mov	r3, r4
 800b6f8:	6864      	ldr	r4, [r4, #4]
 800b6fa:	e7ac      	b.n	800b656 <_malloc_r+0x36>
 800b6fc:	4634      	mov	r4, r6
 800b6fe:	6876      	ldr	r6, [r6, #4]
 800b700:	e7b4      	b.n	800b66c <_malloc_r+0x4c>
 800b702:	4613      	mov	r3, r2
 800b704:	e7cc      	b.n	800b6a0 <_malloc_r+0x80>
 800b706:	230c      	movs	r3, #12
 800b708:	4638      	mov	r0, r7
 800b70a:	603b      	str	r3, [r7, #0]
 800b70c:	f000 f80e 	bl	800b72c <__malloc_unlock>
 800b710:	e797      	b.n	800b642 <_malloc_r+0x22>
 800b712:	6025      	str	r5, [r4, #0]
 800b714:	e7dc      	b.n	800b6d0 <_malloc_r+0xb0>
 800b716:	605b      	str	r3, [r3, #4]
 800b718:	deff      	udf	#255	; 0xff
 800b71a:	bf00      	nop
 800b71c:	200014c0 	.word	0x200014c0

0800b720 <__malloc_lock>:
 800b720:	4801      	ldr	r0, [pc, #4]	; (800b728 <__malloc_lock+0x8>)
 800b722:	f7ff b85c 	b.w	800a7de <__retarget_lock_acquire_recursive>
 800b726:	bf00      	nop
 800b728:	200014bc 	.word	0x200014bc

0800b72c <__malloc_unlock>:
 800b72c:	4801      	ldr	r0, [pc, #4]	; (800b734 <__malloc_unlock+0x8>)
 800b72e:	f7ff b857 	b.w	800a7e0 <__retarget_lock_release_recursive>
 800b732:	bf00      	nop
 800b734:	200014bc 	.word	0x200014bc

0800b738 <_Balloc>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	69c6      	ldr	r6, [r0, #28]
 800b73c:	4604      	mov	r4, r0
 800b73e:	460d      	mov	r5, r1
 800b740:	b976      	cbnz	r6, 800b760 <_Balloc+0x28>
 800b742:	2010      	movs	r0, #16
 800b744:	f7ff ff44 	bl	800b5d0 <malloc>
 800b748:	4602      	mov	r2, r0
 800b74a:	61e0      	str	r0, [r4, #28]
 800b74c:	b920      	cbnz	r0, 800b758 <_Balloc+0x20>
 800b74e:	216b      	movs	r1, #107	; 0x6b
 800b750:	4b17      	ldr	r3, [pc, #92]	; (800b7b0 <_Balloc+0x78>)
 800b752:	4818      	ldr	r0, [pc, #96]	; (800b7b4 <_Balloc+0x7c>)
 800b754:	f7ff f866 	bl	800a824 <__assert_func>
 800b758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b75c:	6006      	str	r6, [r0, #0]
 800b75e:	60c6      	str	r6, [r0, #12]
 800b760:	69e6      	ldr	r6, [r4, #28]
 800b762:	68f3      	ldr	r3, [r6, #12]
 800b764:	b183      	cbz	r3, 800b788 <_Balloc+0x50>
 800b766:	69e3      	ldr	r3, [r4, #28]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b76e:	b9b8      	cbnz	r0, 800b7a0 <_Balloc+0x68>
 800b770:	2101      	movs	r1, #1
 800b772:	fa01 f605 	lsl.w	r6, r1, r5
 800b776:	1d72      	adds	r2, r6, #5
 800b778:	4620      	mov	r0, r4
 800b77a:	0092      	lsls	r2, r2, #2
 800b77c:	f002 fafb 	bl	800dd76 <_calloc_r>
 800b780:	b160      	cbz	r0, 800b79c <_Balloc+0x64>
 800b782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b786:	e00e      	b.n	800b7a6 <_Balloc+0x6e>
 800b788:	2221      	movs	r2, #33	; 0x21
 800b78a:	2104      	movs	r1, #4
 800b78c:	4620      	mov	r0, r4
 800b78e:	f002 faf2 	bl	800dd76 <_calloc_r>
 800b792:	69e3      	ldr	r3, [r4, #28]
 800b794:	60f0      	str	r0, [r6, #12]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1e4      	bne.n	800b766 <_Balloc+0x2e>
 800b79c:	2000      	movs	r0, #0
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	6802      	ldr	r2, [r0, #0]
 800b7a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7ac:	e7f7      	b.n	800b79e <_Balloc+0x66>
 800b7ae:	bf00      	nop
 800b7b0:	0800f47a 	.word	0x0800f47a
 800b7b4:	0800f4fa 	.word	0x0800f4fa

0800b7b8 <_Bfree>:
 800b7b8:	b570      	push	{r4, r5, r6, lr}
 800b7ba:	69c6      	ldr	r6, [r0, #28]
 800b7bc:	4605      	mov	r5, r0
 800b7be:	460c      	mov	r4, r1
 800b7c0:	b976      	cbnz	r6, 800b7e0 <_Bfree+0x28>
 800b7c2:	2010      	movs	r0, #16
 800b7c4:	f7ff ff04 	bl	800b5d0 <malloc>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	61e8      	str	r0, [r5, #28]
 800b7cc:	b920      	cbnz	r0, 800b7d8 <_Bfree+0x20>
 800b7ce:	218f      	movs	r1, #143	; 0x8f
 800b7d0:	4b08      	ldr	r3, [pc, #32]	; (800b7f4 <_Bfree+0x3c>)
 800b7d2:	4809      	ldr	r0, [pc, #36]	; (800b7f8 <_Bfree+0x40>)
 800b7d4:	f7ff f826 	bl	800a824 <__assert_func>
 800b7d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7dc:	6006      	str	r6, [r0, #0]
 800b7de:	60c6      	str	r6, [r0, #12]
 800b7e0:	b13c      	cbz	r4, 800b7f2 <_Bfree+0x3a>
 800b7e2:	69eb      	ldr	r3, [r5, #28]
 800b7e4:	6862      	ldr	r2, [r4, #4]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7ec:	6021      	str	r1, [r4, #0]
 800b7ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}
 800b7f4:	0800f47a 	.word	0x0800f47a
 800b7f8:	0800f4fa 	.word	0x0800f4fa

0800b7fc <__multadd>:
 800b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b800:	4607      	mov	r7, r0
 800b802:	460c      	mov	r4, r1
 800b804:	461e      	mov	r6, r3
 800b806:	2000      	movs	r0, #0
 800b808:	690d      	ldr	r5, [r1, #16]
 800b80a:	f101 0c14 	add.w	ip, r1, #20
 800b80e:	f8dc 3000 	ldr.w	r3, [ip]
 800b812:	3001      	adds	r0, #1
 800b814:	b299      	uxth	r1, r3
 800b816:	fb02 6101 	mla	r1, r2, r1, r6
 800b81a:	0c1e      	lsrs	r6, r3, #16
 800b81c:	0c0b      	lsrs	r3, r1, #16
 800b81e:	fb02 3306 	mla	r3, r2, r6, r3
 800b822:	b289      	uxth	r1, r1
 800b824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b828:	4285      	cmp	r5, r0
 800b82a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b82e:	f84c 1b04 	str.w	r1, [ip], #4
 800b832:	dcec      	bgt.n	800b80e <__multadd+0x12>
 800b834:	b30e      	cbz	r6, 800b87a <__multadd+0x7e>
 800b836:	68a3      	ldr	r3, [r4, #8]
 800b838:	42ab      	cmp	r3, r5
 800b83a:	dc19      	bgt.n	800b870 <__multadd+0x74>
 800b83c:	6861      	ldr	r1, [r4, #4]
 800b83e:	4638      	mov	r0, r7
 800b840:	3101      	adds	r1, #1
 800b842:	f7ff ff79 	bl	800b738 <_Balloc>
 800b846:	4680      	mov	r8, r0
 800b848:	b928      	cbnz	r0, 800b856 <__multadd+0x5a>
 800b84a:	4602      	mov	r2, r0
 800b84c:	21ba      	movs	r1, #186	; 0xba
 800b84e:	4b0c      	ldr	r3, [pc, #48]	; (800b880 <__multadd+0x84>)
 800b850:	480c      	ldr	r0, [pc, #48]	; (800b884 <__multadd+0x88>)
 800b852:	f7fe ffe7 	bl	800a824 <__assert_func>
 800b856:	6922      	ldr	r2, [r4, #16]
 800b858:	f104 010c 	add.w	r1, r4, #12
 800b85c:	3202      	adds	r2, #2
 800b85e:	0092      	lsls	r2, r2, #2
 800b860:	300c      	adds	r0, #12
 800b862:	f7fe ffcc 	bl	800a7fe <memcpy>
 800b866:	4621      	mov	r1, r4
 800b868:	4638      	mov	r0, r7
 800b86a:	f7ff ffa5 	bl	800b7b8 <_Bfree>
 800b86e:	4644      	mov	r4, r8
 800b870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b874:	3501      	adds	r5, #1
 800b876:	615e      	str	r6, [r3, #20]
 800b878:	6125      	str	r5, [r4, #16]
 800b87a:	4620      	mov	r0, r4
 800b87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b880:	0800f4e9 	.word	0x0800f4e9
 800b884:	0800f4fa 	.word	0x0800f4fa

0800b888 <__s2b>:
 800b888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b88c:	4615      	mov	r5, r2
 800b88e:	2209      	movs	r2, #9
 800b890:	461f      	mov	r7, r3
 800b892:	3308      	adds	r3, #8
 800b894:	460c      	mov	r4, r1
 800b896:	fb93 f3f2 	sdiv	r3, r3, r2
 800b89a:	4606      	mov	r6, r0
 800b89c:	2201      	movs	r2, #1
 800b89e:	2100      	movs	r1, #0
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	db09      	blt.n	800b8b8 <__s2b+0x30>
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f7ff ff47 	bl	800b738 <_Balloc>
 800b8aa:	b940      	cbnz	r0, 800b8be <__s2b+0x36>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	21d3      	movs	r1, #211	; 0xd3
 800b8b0:	4b18      	ldr	r3, [pc, #96]	; (800b914 <__s2b+0x8c>)
 800b8b2:	4819      	ldr	r0, [pc, #100]	; (800b918 <__s2b+0x90>)
 800b8b4:	f7fe ffb6 	bl	800a824 <__assert_func>
 800b8b8:	0052      	lsls	r2, r2, #1
 800b8ba:	3101      	adds	r1, #1
 800b8bc:	e7f0      	b.n	800b8a0 <__s2b+0x18>
 800b8be:	9b08      	ldr	r3, [sp, #32]
 800b8c0:	2d09      	cmp	r5, #9
 800b8c2:	6143      	str	r3, [r0, #20]
 800b8c4:	f04f 0301 	mov.w	r3, #1
 800b8c8:	6103      	str	r3, [r0, #16]
 800b8ca:	dd16      	ble.n	800b8fa <__s2b+0x72>
 800b8cc:	f104 0909 	add.w	r9, r4, #9
 800b8d0:	46c8      	mov	r8, r9
 800b8d2:	442c      	add	r4, r5
 800b8d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8d8:	4601      	mov	r1, r0
 800b8da:	220a      	movs	r2, #10
 800b8dc:	4630      	mov	r0, r6
 800b8de:	3b30      	subs	r3, #48	; 0x30
 800b8e0:	f7ff ff8c 	bl	800b7fc <__multadd>
 800b8e4:	45a0      	cmp	r8, r4
 800b8e6:	d1f5      	bne.n	800b8d4 <__s2b+0x4c>
 800b8e8:	f1a5 0408 	sub.w	r4, r5, #8
 800b8ec:	444c      	add	r4, r9
 800b8ee:	1b2d      	subs	r5, r5, r4
 800b8f0:	1963      	adds	r3, r4, r5
 800b8f2:	42bb      	cmp	r3, r7
 800b8f4:	db04      	blt.n	800b900 <__s2b+0x78>
 800b8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8fa:	2509      	movs	r5, #9
 800b8fc:	340a      	adds	r4, #10
 800b8fe:	e7f6      	b.n	800b8ee <__s2b+0x66>
 800b900:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b904:	4601      	mov	r1, r0
 800b906:	220a      	movs	r2, #10
 800b908:	4630      	mov	r0, r6
 800b90a:	3b30      	subs	r3, #48	; 0x30
 800b90c:	f7ff ff76 	bl	800b7fc <__multadd>
 800b910:	e7ee      	b.n	800b8f0 <__s2b+0x68>
 800b912:	bf00      	nop
 800b914:	0800f4e9 	.word	0x0800f4e9
 800b918:	0800f4fa 	.word	0x0800f4fa

0800b91c <__hi0bits>:
 800b91c:	0c02      	lsrs	r2, r0, #16
 800b91e:	0412      	lsls	r2, r2, #16
 800b920:	4603      	mov	r3, r0
 800b922:	b9ca      	cbnz	r2, 800b958 <__hi0bits+0x3c>
 800b924:	0403      	lsls	r3, r0, #16
 800b926:	2010      	movs	r0, #16
 800b928:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b92c:	bf04      	itt	eq
 800b92e:	021b      	lsleq	r3, r3, #8
 800b930:	3008      	addeq	r0, #8
 800b932:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b936:	bf04      	itt	eq
 800b938:	011b      	lsleq	r3, r3, #4
 800b93a:	3004      	addeq	r0, #4
 800b93c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b940:	bf04      	itt	eq
 800b942:	009b      	lsleq	r3, r3, #2
 800b944:	3002      	addeq	r0, #2
 800b946:	2b00      	cmp	r3, #0
 800b948:	db05      	blt.n	800b956 <__hi0bits+0x3a>
 800b94a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b94e:	f100 0001 	add.w	r0, r0, #1
 800b952:	bf08      	it	eq
 800b954:	2020      	moveq	r0, #32
 800b956:	4770      	bx	lr
 800b958:	2000      	movs	r0, #0
 800b95a:	e7e5      	b.n	800b928 <__hi0bits+0xc>

0800b95c <__lo0bits>:
 800b95c:	6803      	ldr	r3, [r0, #0]
 800b95e:	4602      	mov	r2, r0
 800b960:	f013 0007 	ands.w	r0, r3, #7
 800b964:	d00b      	beq.n	800b97e <__lo0bits+0x22>
 800b966:	07d9      	lsls	r1, r3, #31
 800b968:	d421      	bmi.n	800b9ae <__lo0bits+0x52>
 800b96a:	0798      	lsls	r0, r3, #30
 800b96c:	bf49      	itett	mi
 800b96e:	085b      	lsrmi	r3, r3, #1
 800b970:	089b      	lsrpl	r3, r3, #2
 800b972:	2001      	movmi	r0, #1
 800b974:	6013      	strmi	r3, [r2, #0]
 800b976:	bf5c      	itt	pl
 800b978:	2002      	movpl	r0, #2
 800b97a:	6013      	strpl	r3, [r2, #0]
 800b97c:	4770      	bx	lr
 800b97e:	b299      	uxth	r1, r3
 800b980:	b909      	cbnz	r1, 800b986 <__lo0bits+0x2a>
 800b982:	2010      	movs	r0, #16
 800b984:	0c1b      	lsrs	r3, r3, #16
 800b986:	b2d9      	uxtb	r1, r3
 800b988:	b909      	cbnz	r1, 800b98e <__lo0bits+0x32>
 800b98a:	3008      	adds	r0, #8
 800b98c:	0a1b      	lsrs	r3, r3, #8
 800b98e:	0719      	lsls	r1, r3, #28
 800b990:	bf04      	itt	eq
 800b992:	091b      	lsreq	r3, r3, #4
 800b994:	3004      	addeq	r0, #4
 800b996:	0799      	lsls	r1, r3, #30
 800b998:	bf04      	itt	eq
 800b99a:	089b      	lsreq	r3, r3, #2
 800b99c:	3002      	addeq	r0, #2
 800b99e:	07d9      	lsls	r1, r3, #31
 800b9a0:	d403      	bmi.n	800b9aa <__lo0bits+0x4e>
 800b9a2:	085b      	lsrs	r3, r3, #1
 800b9a4:	f100 0001 	add.w	r0, r0, #1
 800b9a8:	d003      	beq.n	800b9b2 <__lo0bits+0x56>
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	4770      	bx	lr
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	4770      	bx	lr
 800b9b2:	2020      	movs	r0, #32
 800b9b4:	4770      	bx	lr
	...

0800b9b8 <__i2b>:
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	2101      	movs	r1, #1
 800b9be:	f7ff febb 	bl	800b738 <_Balloc>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	b928      	cbnz	r0, 800b9d2 <__i2b+0x1a>
 800b9c6:	f240 1145 	movw	r1, #325	; 0x145
 800b9ca:	4b04      	ldr	r3, [pc, #16]	; (800b9dc <__i2b+0x24>)
 800b9cc:	4804      	ldr	r0, [pc, #16]	; (800b9e0 <__i2b+0x28>)
 800b9ce:	f7fe ff29 	bl	800a824 <__assert_func>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	6144      	str	r4, [r0, #20]
 800b9d6:	6103      	str	r3, [r0, #16]
 800b9d8:	bd10      	pop	{r4, pc}
 800b9da:	bf00      	nop
 800b9dc:	0800f4e9 	.word	0x0800f4e9
 800b9e0:	0800f4fa 	.word	0x0800f4fa

0800b9e4 <__multiply>:
 800b9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e8:	4691      	mov	r9, r2
 800b9ea:	690a      	ldr	r2, [r1, #16]
 800b9ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	bfbe      	ittt	lt
 800b9f6:	460b      	movlt	r3, r1
 800b9f8:	464c      	movlt	r4, r9
 800b9fa:	4699      	movlt	r9, r3
 800b9fc:	6927      	ldr	r7, [r4, #16]
 800b9fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba02:	68a3      	ldr	r3, [r4, #8]
 800ba04:	6861      	ldr	r1, [r4, #4]
 800ba06:	eb07 060a 	add.w	r6, r7, sl
 800ba0a:	42b3      	cmp	r3, r6
 800ba0c:	b085      	sub	sp, #20
 800ba0e:	bfb8      	it	lt
 800ba10:	3101      	addlt	r1, #1
 800ba12:	f7ff fe91 	bl	800b738 <_Balloc>
 800ba16:	b930      	cbnz	r0, 800ba26 <__multiply+0x42>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ba1e:	4b43      	ldr	r3, [pc, #268]	; (800bb2c <__multiply+0x148>)
 800ba20:	4843      	ldr	r0, [pc, #268]	; (800bb30 <__multiply+0x14c>)
 800ba22:	f7fe feff 	bl	800a824 <__assert_func>
 800ba26:	f100 0514 	add.w	r5, r0, #20
 800ba2a:	462b      	mov	r3, r5
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba32:	4543      	cmp	r3, r8
 800ba34:	d321      	bcc.n	800ba7a <__multiply+0x96>
 800ba36:	f104 0314 	add.w	r3, r4, #20
 800ba3a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba3e:	f109 0314 	add.w	r3, r9, #20
 800ba42:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba46:	9202      	str	r2, [sp, #8]
 800ba48:	1b3a      	subs	r2, r7, r4
 800ba4a:	3a15      	subs	r2, #21
 800ba4c:	f022 0203 	bic.w	r2, r2, #3
 800ba50:	3204      	adds	r2, #4
 800ba52:	f104 0115 	add.w	r1, r4, #21
 800ba56:	428f      	cmp	r7, r1
 800ba58:	bf38      	it	cc
 800ba5a:	2204      	movcc	r2, #4
 800ba5c:	9201      	str	r2, [sp, #4]
 800ba5e:	9a02      	ldr	r2, [sp, #8]
 800ba60:	9303      	str	r3, [sp, #12]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d80c      	bhi.n	800ba80 <__multiply+0x9c>
 800ba66:	2e00      	cmp	r6, #0
 800ba68:	dd03      	ble.n	800ba72 <__multiply+0x8e>
 800ba6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d05a      	beq.n	800bb28 <__multiply+0x144>
 800ba72:	6106      	str	r6, [r0, #16]
 800ba74:	b005      	add	sp, #20
 800ba76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7a:	f843 2b04 	str.w	r2, [r3], #4
 800ba7e:	e7d8      	b.n	800ba32 <__multiply+0x4e>
 800ba80:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba84:	f1ba 0f00 	cmp.w	sl, #0
 800ba88:	d023      	beq.n	800bad2 <__multiply+0xee>
 800ba8a:	46a9      	mov	r9, r5
 800ba8c:	f04f 0c00 	mov.w	ip, #0
 800ba90:	f104 0e14 	add.w	lr, r4, #20
 800ba94:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba98:	f8d9 1000 	ldr.w	r1, [r9]
 800ba9c:	fa1f fb82 	uxth.w	fp, r2
 800baa0:	b289      	uxth	r1, r1
 800baa2:	fb0a 110b 	mla	r1, sl, fp, r1
 800baa6:	4461      	add	r1, ip
 800baa8:	f8d9 c000 	ldr.w	ip, [r9]
 800baac:	0c12      	lsrs	r2, r2, #16
 800baae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bab2:	fb0a c202 	mla	r2, sl, r2, ip
 800bab6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800baba:	b289      	uxth	r1, r1
 800babc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bac0:	4577      	cmp	r7, lr
 800bac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bac6:	f849 1b04 	str.w	r1, [r9], #4
 800baca:	d8e3      	bhi.n	800ba94 <__multiply+0xb0>
 800bacc:	9a01      	ldr	r2, [sp, #4]
 800bace:	f845 c002 	str.w	ip, [r5, r2]
 800bad2:	9a03      	ldr	r2, [sp, #12]
 800bad4:	3304      	adds	r3, #4
 800bad6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bada:	f1b9 0f00 	cmp.w	r9, #0
 800bade:	d021      	beq.n	800bb24 <__multiply+0x140>
 800bae0:	46ae      	mov	lr, r5
 800bae2:	f04f 0a00 	mov.w	sl, #0
 800bae6:	6829      	ldr	r1, [r5, #0]
 800bae8:	f104 0c14 	add.w	ip, r4, #20
 800baec:	f8bc b000 	ldrh.w	fp, [ip]
 800baf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800baf4:	b289      	uxth	r1, r1
 800baf6:	fb09 220b 	mla	r2, r9, fp, r2
 800bafa:	4452      	add	r2, sl
 800bafc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb00:	f84e 1b04 	str.w	r1, [lr], #4
 800bb04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bb08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb0c:	f8be 1000 	ldrh.w	r1, [lr]
 800bb10:	4567      	cmp	r7, ip
 800bb12:	fb09 110a 	mla	r1, r9, sl, r1
 800bb16:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bb1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb1e:	d8e5      	bhi.n	800baec <__multiply+0x108>
 800bb20:	9a01      	ldr	r2, [sp, #4]
 800bb22:	50a9      	str	r1, [r5, r2]
 800bb24:	3504      	adds	r5, #4
 800bb26:	e79a      	b.n	800ba5e <__multiply+0x7a>
 800bb28:	3e01      	subs	r6, #1
 800bb2a:	e79c      	b.n	800ba66 <__multiply+0x82>
 800bb2c:	0800f4e9 	.word	0x0800f4e9
 800bb30:	0800f4fa 	.word	0x0800f4fa

0800bb34 <__pow5mult>:
 800bb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb38:	4615      	mov	r5, r2
 800bb3a:	f012 0203 	ands.w	r2, r2, #3
 800bb3e:	4606      	mov	r6, r0
 800bb40:	460f      	mov	r7, r1
 800bb42:	d007      	beq.n	800bb54 <__pow5mult+0x20>
 800bb44:	4c25      	ldr	r4, [pc, #148]	; (800bbdc <__pow5mult+0xa8>)
 800bb46:	3a01      	subs	r2, #1
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb4e:	f7ff fe55 	bl	800b7fc <__multadd>
 800bb52:	4607      	mov	r7, r0
 800bb54:	10ad      	asrs	r5, r5, #2
 800bb56:	d03d      	beq.n	800bbd4 <__pow5mult+0xa0>
 800bb58:	69f4      	ldr	r4, [r6, #28]
 800bb5a:	b97c      	cbnz	r4, 800bb7c <__pow5mult+0x48>
 800bb5c:	2010      	movs	r0, #16
 800bb5e:	f7ff fd37 	bl	800b5d0 <malloc>
 800bb62:	4602      	mov	r2, r0
 800bb64:	61f0      	str	r0, [r6, #28]
 800bb66:	b928      	cbnz	r0, 800bb74 <__pow5mult+0x40>
 800bb68:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bb6c:	4b1c      	ldr	r3, [pc, #112]	; (800bbe0 <__pow5mult+0xac>)
 800bb6e:	481d      	ldr	r0, [pc, #116]	; (800bbe4 <__pow5mult+0xb0>)
 800bb70:	f7fe fe58 	bl	800a824 <__assert_func>
 800bb74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb78:	6004      	str	r4, [r0, #0]
 800bb7a:	60c4      	str	r4, [r0, #12]
 800bb7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bb80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb84:	b94c      	cbnz	r4, 800bb9a <__pow5mult+0x66>
 800bb86:	f240 2171 	movw	r1, #625	; 0x271
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	f7ff ff14 	bl	800b9b8 <__i2b>
 800bb90:	2300      	movs	r3, #0
 800bb92:	4604      	mov	r4, r0
 800bb94:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb98:	6003      	str	r3, [r0, #0]
 800bb9a:	f04f 0900 	mov.w	r9, #0
 800bb9e:	07eb      	lsls	r3, r5, #31
 800bba0:	d50a      	bpl.n	800bbb8 <__pow5mult+0x84>
 800bba2:	4639      	mov	r1, r7
 800bba4:	4622      	mov	r2, r4
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7ff ff1c 	bl	800b9e4 <__multiply>
 800bbac:	4680      	mov	r8, r0
 800bbae:	4639      	mov	r1, r7
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7ff fe01 	bl	800b7b8 <_Bfree>
 800bbb6:	4647      	mov	r7, r8
 800bbb8:	106d      	asrs	r5, r5, #1
 800bbba:	d00b      	beq.n	800bbd4 <__pow5mult+0xa0>
 800bbbc:	6820      	ldr	r0, [r4, #0]
 800bbbe:	b938      	cbnz	r0, 800bbd0 <__pow5mult+0x9c>
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	4621      	mov	r1, r4
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	f7ff ff0d 	bl	800b9e4 <__multiply>
 800bbca:	6020      	str	r0, [r4, #0]
 800bbcc:	f8c0 9000 	str.w	r9, [r0]
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	e7e4      	b.n	800bb9e <__pow5mult+0x6a>
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbda:	bf00      	nop
 800bbdc:	0800f648 	.word	0x0800f648
 800bbe0:	0800f47a 	.word	0x0800f47a
 800bbe4:	0800f4fa 	.word	0x0800f4fa

0800bbe8 <__lshift>:
 800bbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbec:	460c      	mov	r4, r1
 800bbee:	4607      	mov	r7, r0
 800bbf0:	4691      	mov	r9, r2
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	6849      	ldr	r1, [r1, #4]
 800bbf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbfa:	68a3      	ldr	r3, [r4, #8]
 800bbfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc00:	f108 0601 	add.w	r6, r8, #1
 800bc04:	42b3      	cmp	r3, r6
 800bc06:	db0b      	blt.n	800bc20 <__lshift+0x38>
 800bc08:	4638      	mov	r0, r7
 800bc0a:	f7ff fd95 	bl	800b738 <_Balloc>
 800bc0e:	4605      	mov	r5, r0
 800bc10:	b948      	cbnz	r0, 800bc26 <__lshift+0x3e>
 800bc12:	4602      	mov	r2, r0
 800bc14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bc18:	4b27      	ldr	r3, [pc, #156]	; (800bcb8 <__lshift+0xd0>)
 800bc1a:	4828      	ldr	r0, [pc, #160]	; (800bcbc <__lshift+0xd4>)
 800bc1c:	f7fe fe02 	bl	800a824 <__assert_func>
 800bc20:	3101      	adds	r1, #1
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	e7ee      	b.n	800bc04 <__lshift+0x1c>
 800bc26:	2300      	movs	r3, #0
 800bc28:	f100 0114 	add.w	r1, r0, #20
 800bc2c:	f100 0210 	add.w	r2, r0, #16
 800bc30:	4618      	mov	r0, r3
 800bc32:	4553      	cmp	r3, sl
 800bc34:	db33      	blt.n	800bc9e <__lshift+0xb6>
 800bc36:	6920      	ldr	r0, [r4, #16]
 800bc38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc3c:	f104 0314 	add.w	r3, r4, #20
 800bc40:	f019 091f 	ands.w	r9, r9, #31
 800bc44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc4c:	d02b      	beq.n	800bca6 <__lshift+0xbe>
 800bc4e:	468a      	mov	sl, r1
 800bc50:	2200      	movs	r2, #0
 800bc52:	f1c9 0e20 	rsb	lr, r9, #32
 800bc56:	6818      	ldr	r0, [r3, #0]
 800bc58:	fa00 f009 	lsl.w	r0, r0, r9
 800bc5c:	4310      	orrs	r0, r2
 800bc5e:	f84a 0b04 	str.w	r0, [sl], #4
 800bc62:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc66:	459c      	cmp	ip, r3
 800bc68:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc6c:	d8f3      	bhi.n	800bc56 <__lshift+0x6e>
 800bc6e:	ebac 0304 	sub.w	r3, ip, r4
 800bc72:	3b15      	subs	r3, #21
 800bc74:	f023 0303 	bic.w	r3, r3, #3
 800bc78:	3304      	adds	r3, #4
 800bc7a:	f104 0015 	add.w	r0, r4, #21
 800bc7e:	4584      	cmp	ip, r0
 800bc80:	bf38      	it	cc
 800bc82:	2304      	movcc	r3, #4
 800bc84:	50ca      	str	r2, [r1, r3]
 800bc86:	b10a      	cbz	r2, 800bc8c <__lshift+0xa4>
 800bc88:	f108 0602 	add.w	r6, r8, #2
 800bc8c:	3e01      	subs	r6, #1
 800bc8e:	4638      	mov	r0, r7
 800bc90:	4621      	mov	r1, r4
 800bc92:	612e      	str	r6, [r5, #16]
 800bc94:	f7ff fd90 	bl	800b7b8 <_Bfree>
 800bc98:	4628      	mov	r0, r5
 800bc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bca2:	3301      	adds	r3, #1
 800bca4:	e7c5      	b.n	800bc32 <__lshift+0x4a>
 800bca6:	3904      	subs	r1, #4
 800bca8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcac:	459c      	cmp	ip, r3
 800bcae:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcb2:	d8f9      	bhi.n	800bca8 <__lshift+0xc0>
 800bcb4:	e7ea      	b.n	800bc8c <__lshift+0xa4>
 800bcb6:	bf00      	nop
 800bcb8:	0800f4e9 	.word	0x0800f4e9
 800bcbc:	0800f4fa 	.word	0x0800f4fa

0800bcc0 <__mcmp>:
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	690a      	ldr	r2, [r1, #16]
 800bcc4:	6900      	ldr	r0, [r0, #16]
 800bcc6:	b530      	push	{r4, r5, lr}
 800bcc8:	1a80      	subs	r0, r0, r2
 800bcca:	d10d      	bne.n	800bce8 <__mcmp+0x28>
 800bccc:	3314      	adds	r3, #20
 800bcce:	3114      	adds	r1, #20
 800bcd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bcd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bcd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bce0:	4295      	cmp	r5, r2
 800bce2:	d002      	beq.n	800bcea <__mcmp+0x2a>
 800bce4:	d304      	bcc.n	800bcf0 <__mcmp+0x30>
 800bce6:	2001      	movs	r0, #1
 800bce8:	bd30      	pop	{r4, r5, pc}
 800bcea:	42a3      	cmp	r3, r4
 800bcec:	d3f4      	bcc.n	800bcd8 <__mcmp+0x18>
 800bcee:	e7fb      	b.n	800bce8 <__mcmp+0x28>
 800bcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf4:	e7f8      	b.n	800bce8 <__mcmp+0x28>
	...

0800bcf8 <__mdiff>:
 800bcf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	460d      	mov	r5, r1
 800bcfe:	4607      	mov	r7, r0
 800bd00:	4611      	mov	r1, r2
 800bd02:	4628      	mov	r0, r5
 800bd04:	4614      	mov	r4, r2
 800bd06:	f7ff ffdb 	bl	800bcc0 <__mcmp>
 800bd0a:	1e06      	subs	r6, r0, #0
 800bd0c:	d111      	bne.n	800bd32 <__mdiff+0x3a>
 800bd0e:	4631      	mov	r1, r6
 800bd10:	4638      	mov	r0, r7
 800bd12:	f7ff fd11 	bl	800b738 <_Balloc>
 800bd16:	4602      	mov	r2, r0
 800bd18:	b928      	cbnz	r0, 800bd26 <__mdiff+0x2e>
 800bd1a:	f240 2137 	movw	r1, #567	; 0x237
 800bd1e:	4b3a      	ldr	r3, [pc, #232]	; (800be08 <__mdiff+0x110>)
 800bd20:	483a      	ldr	r0, [pc, #232]	; (800be0c <__mdiff+0x114>)
 800bd22:	f7fe fd7f 	bl	800a824 <__assert_func>
 800bd26:	2301      	movs	r3, #1
 800bd28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd32:	bfa4      	itt	ge
 800bd34:	4623      	movge	r3, r4
 800bd36:	462c      	movge	r4, r5
 800bd38:	4638      	mov	r0, r7
 800bd3a:	6861      	ldr	r1, [r4, #4]
 800bd3c:	bfa6      	itte	ge
 800bd3e:	461d      	movge	r5, r3
 800bd40:	2600      	movge	r6, #0
 800bd42:	2601      	movlt	r6, #1
 800bd44:	f7ff fcf8 	bl	800b738 <_Balloc>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	b918      	cbnz	r0, 800bd54 <__mdiff+0x5c>
 800bd4c:	f240 2145 	movw	r1, #581	; 0x245
 800bd50:	4b2d      	ldr	r3, [pc, #180]	; (800be08 <__mdiff+0x110>)
 800bd52:	e7e5      	b.n	800bd20 <__mdiff+0x28>
 800bd54:	f102 0814 	add.w	r8, r2, #20
 800bd58:	46c2      	mov	sl, r8
 800bd5a:	f04f 0c00 	mov.w	ip, #0
 800bd5e:	6927      	ldr	r7, [r4, #16]
 800bd60:	60c6      	str	r6, [r0, #12]
 800bd62:	692e      	ldr	r6, [r5, #16]
 800bd64:	f104 0014 	add.w	r0, r4, #20
 800bd68:	f105 0914 	add.w	r9, r5, #20
 800bd6c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800bd70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd74:	3410      	adds	r4, #16
 800bd76:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800bd7a:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd7e:	fa1f f18b 	uxth.w	r1, fp
 800bd82:	4461      	add	r1, ip
 800bd84:	fa1f fc83 	uxth.w	ip, r3
 800bd88:	0c1b      	lsrs	r3, r3, #16
 800bd8a:	eba1 010c 	sub.w	r1, r1, ip
 800bd8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bd96:	b289      	uxth	r1, r1
 800bd98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bd9c:	454e      	cmp	r6, r9
 800bd9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bda2:	f84a 1b04 	str.w	r1, [sl], #4
 800bda6:	d8e6      	bhi.n	800bd76 <__mdiff+0x7e>
 800bda8:	1b73      	subs	r3, r6, r5
 800bdaa:	3b15      	subs	r3, #21
 800bdac:	f023 0303 	bic.w	r3, r3, #3
 800bdb0:	3515      	adds	r5, #21
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	42ae      	cmp	r6, r5
 800bdb6:	bf38      	it	cc
 800bdb8:	2304      	movcc	r3, #4
 800bdba:	4418      	add	r0, r3
 800bdbc:	4443      	add	r3, r8
 800bdbe:	461e      	mov	r6, r3
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	4575      	cmp	r5, lr
 800bdc4:	d30e      	bcc.n	800bde4 <__mdiff+0xec>
 800bdc6:	f10e 0103 	add.w	r1, lr, #3
 800bdca:	1a09      	subs	r1, r1, r0
 800bdcc:	f021 0103 	bic.w	r1, r1, #3
 800bdd0:	3803      	subs	r0, #3
 800bdd2:	4586      	cmp	lr, r0
 800bdd4:	bf38      	it	cc
 800bdd6:	2100      	movcc	r1, #0
 800bdd8:	440b      	add	r3, r1
 800bdda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdde:	b189      	cbz	r1, 800be04 <__mdiff+0x10c>
 800bde0:	6117      	str	r7, [r2, #16]
 800bde2:	e7a3      	b.n	800bd2c <__mdiff+0x34>
 800bde4:	f855 8b04 	ldr.w	r8, [r5], #4
 800bde8:	fa1f f188 	uxth.w	r1, r8
 800bdec:	4461      	add	r1, ip
 800bdee:	140c      	asrs	r4, r1, #16
 800bdf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bdf4:	b289      	uxth	r1, r1
 800bdf6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bdfa:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800bdfe:	f846 1b04 	str.w	r1, [r6], #4
 800be02:	e7de      	b.n	800bdc2 <__mdiff+0xca>
 800be04:	3f01      	subs	r7, #1
 800be06:	e7e8      	b.n	800bdda <__mdiff+0xe2>
 800be08:	0800f4e9 	.word	0x0800f4e9
 800be0c:	0800f4fa 	.word	0x0800f4fa

0800be10 <__ulp>:
 800be10:	4b0e      	ldr	r3, [pc, #56]	; (800be4c <__ulp+0x3c>)
 800be12:	400b      	ands	r3, r1
 800be14:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dc08      	bgt.n	800be2e <__ulp+0x1e>
 800be1c:	425b      	negs	r3, r3
 800be1e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800be22:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be26:	da04      	bge.n	800be32 <__ulp+0x22>
 800be28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be2c:	4113      	asrs	r3, r2
 800be2e:	2200      	movs	r2, #0
 800be30:	e008      	b.n	800be44 <__ulp+0x34>
 800be32:	f1a2 0314 	sub.w	r3, r2, #20
 800be36:	2b1e      	cmp	r3, #30
 800be38:	bfd6      	itet	le
 800be3a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800be3e:	2201      	movgt	r2, #1
 800be40:	40da      	lsrle	r2, r3
 800be42:	2300      	movs	r3, #0
 800be44:	4619      	mov	r1, r3
 800be46:	4610      	mov	r0, r2
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	7ff00000 	.word	0x7ff00000

0800be50 <__b2d>:
 800be50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be52:	6905      	ldr	r5, [r0, #16]
 800be54:	f100 0714 	add.w	r7, r0, #20
 800be58:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800be5c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800be60:	1f2e      	subs	r6, r5, #4
 800be62:	4620      	mov	r0, r4
 800be64:	f7ff fd5a 	bl	800b91c <__hi0bits>
 800be68:	f1c0 0220 	rsb	r2, r0, #32
 800be6c:	280a      	cmp	r0, #10
 800be6e:	4603      	mov	r3, r0
 800be70:	f8df c068 	ldr.w	ip, [pc, #104]	; 800bedc <__b2d+0x8c>
 800be74:	600a      	str	r2, [r1, #0]
 800be76:	dc12      	bgt.n	800be9e <__b2d+0x4e>
 800be78:	f1c0 0e0b 	rsb	lr, r0, #11
 800be7c:	fa24 f20e 	lsr.w	r2, r4, lr
 800be80:	42b7      	cmp	r7, r6
 800be82:	ea42 010c 	orr.w	r1, r2, ip
 800be86:	bf2c      	ite	cs
 800be88:	2200      	movcs	r2, #0
 800be8a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800be8e:	3315      	adds	r3, #21
 800be90:	fa04 f303 	lsl.w	r3, r4, r3
 800be94:	fa22 f20e 	lsr.w	r2, r2, lr
 800be98:	431a      	orrs	r2, r3
 800be9a:	4610      	mov	r0, r2
 800be9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be9e:	42b7      	cmp	r7, r6
 800bea0:	bf2e      	itee	cs
 800bea2:	2200      	movcs	r2, #0
 800bea4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800bea8:	f1a5 0608 	subcc.w	r6, r5, #8
 800beac:	3b0b      	subs	r3, #11
 800beae:	d012      	beq.n	800bed6 <__b2d+0x86>
 800beb0:	f1c3 0520 	rsb	r5, r3, #32
 800beb4:	fa22 f105 	lsr.w	r1, r2, r5
 800beb8:	409c      	lsls	r4, r3
 800beba:	430c      	orrs	r4, r1
 800bebc:	42be      	cmp	r6, r7
 800bebe:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800bec2:	bf94      	ite	ls
 800bec4:	2400      	movls	r4, #0
 800bec6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800beca:	409a      	lsls	r2, r3
 800becc:	40ec      	lsrs	r4, r5
 800bece:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bed2:	4322      	orrs	r2, r4
 800bed4:	e7e1      	b.n	800be9a <__b2d+0x4a>
 800bed6:	ea44 010c 	orr.w	r1, r4, ip
 800beda:	e7de      	b.n	800be9a <__b2d+0x4a>
 800bedc:	3ff00000 	.word	0x3ff00000

0800bee0 <__d2b>:
 800bee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bee2:	2101      	movs	r1, #1
 800bee4:	4617      	mov	r7, r2
 800bee6:	461c      	mov	r4, r3
 800bee8:	9e08      	ldr	r6, [sp, #32]
 800beea:	f7ff fc25 	bl	800b738 <_Balloc>
 800beee:	4605      	mov	r5, r0
 800bef0:	b930      	cbnz	r0, 800bf00 <__d2b+0x20>
 800bef2:	4602      	mov	r2, r0
 800bef4:	f240 310f 	movw	r1, #783	; 0x30f
 800bef8:	4b22      	ldr	r3, [pc, #136]	; (800bf84 <__d2b+0xa4>)
 800befa:	4823      	ldr	r0, [pc, #140]	; (800bf88 <__d2b+0xa8>)
 800befc:	f7fe fc92 	bl	800a824 <__assert_func>
 800bf00:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bf04:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bf08:	bb24      	cbnz	r4, 800bf54 <__d2b+0x74>
 800bf0a:	2f00      	cmp	r7, #0
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	d026      	beq.n	800bf5e <__d2b+0x7e>
 800bf10:	4668      	mov	r0, sp
 800bf12:	9700      	str	r7, [sp, #0]
 800bf14:	f7ff fd22 	bl	800b95c <__lo0bits>
 800bf18:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf1c:	b1e8      	cbz	r0, 800bf5a <__d2b+0x7a>
 800bf1e:	f1c0 0320 	rsb	r3, r0, #32
 800bf22:	fa02 f303 	lsl.w	r3, r2, r3
 800bf26:	430b      	orrs	r3, r1
 800bf28:	40c2      	lsrs	r2, r0
 800bf2a:	616b      	str	r3, [r5, #20]
 800bf2c:	9201      	str	r2, [sp, #4]
 800bf2e:	9b01      	ldr	r3, [sp, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	bf14      	ite	ne
 800bf34:	2102      	movne	r1, #2
 800bf36:	2101      	moveq	r1, #1
 800bf38:	61ab      	str	r3, [r5, #24]
 800bf3a:	6129      	str	r1, [r5, #16]
 800bf3c:	b1bc      	cbz	r4, 800bf6e <__d2b+0x8e>
 800bf3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bf42:	4404      	add	r4, r0
 800bf44:	6034      	str	r4, [r6, #0]
 800bf46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf4c:	6018      	str	r0, [r3, #0]
 800bf4e:	4628      	mov	r0, r5
 800bf50:	b003      	add	sp, #12
 800bf52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf58:	e7d7      	b.n	800bf0a <__d2b+0x2a>
 800bf5a:	6169      	str	r1, [r5, #20]
 800bf5c:	e7e7      	b.n	800bf2e <__d2b+0x4e>
 800bf5e:	a801      	add	r0, sp, #4
 800bf60:	f7ff fcfc 	bl	800b95c <__lo0bits>
 800bf64:	9b01      	ldr	r3, [sp, #4]
 800bf66:	2101      	movs	r1, #1
 800bf68:	616b      	str	r3, [r5, #20]
 800bf6a:	3020      	adds	r0, #32
 800bf6c:	e7e5      	b.n	800bf3a <__d2b+0x5a>
 800bf6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf72:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800bf76:	6030      	str	r0, [r6, #0]
 800bf78:	6918      	ldr	r0, [r3, #16]
 800bf7a:	f7ff fccf 	bl	800b91c <__hi0bits>
 800bf7e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bf82:	e7e2      	b.n	800bf4a <__d2b+0x6a>
 800bf84:	0800f4e9 	.word	0x0800f4e9
 800bf88:	0800f4fa 	.word	0x0800f4fa

0800bf8c <__ratio>:
 800bf8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf90:	4688      	mov	r8, r1
 800bf92:	4669      	mov	r1, sp
 800bf94:	4681      	mov	r9, r0
 800bf96:	f7ff ff5b 	bl	800be50 <__b2d>
 800bf9a:	460f      	mov	r7, r1
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	460d      	mov	r5, r1
 800bfa0:	4640      	mov	r0, r8
 800bfa2:	a901      	add	r1, sp, #4
 800bfa4:	f7ff ff54 	bl	800be50 <__b2d>
 800bfa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bfb0:	468b      	mov	fp, r1
 800bfb2:	eba3 0c02 	sub.w	ip, r3, r2
 800bfb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bfba:	1a9b      	subs	r3, r3, r2
 800bfbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	bfd5      	itete	le
 800bfc4:	460a      	movle	r2, r1
 800bfc6:	462a      	movgt	r2, r5
 800bfc8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfcc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bfd0:	bfd8      	it	le
 800bfd2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bfd6:	465b      	mov	r3, fp
 800bfd8:	4602      	mov	r2, r0
 800bfda:	4639      	mov	r1, r7
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f7f4 fcc5 	bl	800096c <__aeabi_ddiv>
 800bfe2:	b003      	add	sp, #12
 800bfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfe8 <__copybits>:
 800bfe8:	3901      	subs	r1, #1
 800bfea:	b570      	push	{r4, r5, r6, lr}
 800bfec:	1149      	asrs	r1, r1, #5
 800bfee:	6914      	ldr	r4, [r2, #16]
 800bff0:	3101      	adds	r1, #1
 800bff2:	f102 0314 	add.w	r3, r2, #20
 800bff6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bffa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bffe:	1f05      	subs	r5, r0, #4
 800c000:	42a3      	cmp	r3, r4
 800c002:	d30c      	bcc.n	800c01e <__copybits+0x36>
 800c004:	1aa3      	subs	r3, r4, r2
 800c006:	3b11      	subs	r3, #17
 800c008:	f023 0303 	bic.w	r3, r3, #3
 800c00c:	3211      	adds	r2, #17
 800c00e:	42a2      	cmp	r2, r4
 800c010:	bf88      	it	hi
 800c012:	2300      	movhi	r3, #0
 800c014:	4418      	add	r0, r3
 800c016:	2300      	movs	r3, #0
 800c018:	4288      	cmp	r0, r1
 800c01a:	d305      	bcc.n	800c028 <__copybits+0x40>
 800c01c:	bd70      	pop	{r4, r5, r6, pc}
 800c01e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c022:	f845 6f04 	str.w	r6, [r5, #4]!
 800c026:	e7eb      	b.n	800c000 <__copybits+0x18>
 800c028:	f840 3b04 	str.w	r3, [r0], #4
 800c02c:	e7f4      	b.n	800c018 <__copybits+0x30>

0800c02e <__any_on>:
 800c02e:	f100 0214 	add.w	r2, r0, #20
 800c032:	6900      	ldr	r0, [r0, #16]
 800c034:	114b      	asrs	r3, r1, #5
 800c036:	4298      	cmp	r0, r3
 800c038:	b510      	push	{r4, lr}
 800c03a:	db11      	blt.n	800c060 <__any_on+0x32>
 800c03c:	dd0a      	ble.n	800c054 <__any_on+0x26>
 800c03e:	f011 011f 	ands.w	r1, r1, #31
 800c042:	d007      	beq.n	800c054 <__any_on+0x26>
 800c044:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c048:	fa24 f001 	lsr.w	r0, r4, r1
 800c04c:	fa00 f101 	lsl.w	r1, r0, r1
 800c050:	428c      	cmp	r4, r1
 800c052:	d10b      	bne.n	800c06c <__any_on+0x3e>
 800c054:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c058:	4293      	cmp	r3, r2
 800c05a:	d803      	bhi.n	800c064 <__any_on+0x36>
 800c05c:	2000      	movs	r0, #0
 800c05e:	bd10      	pop	{r4, pc}
 800c060:	4603      	mov	r3, r0
 800c062:	e7f7      	b.n	800c054 <__any_on+0x26>
 800c064:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c068:	2900      	cmp	r1, #0
 800c06a:	d0f5      	beq.n	800c058 <__any_on+0x2a>
 800c06c:	2001      	movs	r0, #1
 800c06e:	e7f6      	b.n	800c05e <__any_on+0x30>

0800c070 <sulp>:
 800c070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c074:	460f      	mov	r7, r1
 800c076:	4690      	mov	r8, r2
 800c078:	f7ff feca 	bl	800be10 <__ulp>
 800c07c:	4604      	mov	r4, r0
 800c07e:	460d      	mov	r5, r1
 800c080:	f1b8 0f00 	cmp.w	r8, #0
 800c084:	d011      	beq.n	800c0aa <sulp+0x3a>
 800c086:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c08a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c08e:	2b00      	cmp	r3, #0
 800c090:	dd0b      	ble.n	800c0aa <sulp+0x3a>
 800c092:	2400      	movs	r4, #0
 800c094:	051b      	lsls	r3, r3, #20
 800c096:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c09a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c09e:	4622      	mov	r2, r4
 800c0a0:	462b      	mov	r3, r5
 800c0a2:	f7f4 fb39 	bl	8000718 <__aeabi_dmul>
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b2:	0000      	movs	r0, r0
 800c0b4:	0000      	movs	r0, r0
	...

0800c0b8 <_strtod_l>:
 800c0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0bc:	b09f      	sub	sp, #124	; 0x7c
 800c0be:	9217      	str	r2, [sp, #92]	; 0x5c
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	921a      	str	r2, [sp, #104]	; 0x68
 800c0c6:	460d      	mov	r5, r1
 800c0c8:	f04f 0800 	mov.w	r8, #0
 800c0cc:	f04f 0900 	mov.w	r9, #0
 800c0d0:	460a      	mov	r2, r1
 800c0d2:	9219      	str	r2, [sp, #100]	; 0x64
 800c0d4:	7811      	ldrb	r1, [r2, #0]
 800c0d6:	292b      	cmp	r1, #43	; 0x2b
 800c0d8:	d04a      	beq.n	800c170 <_strtod_l+0xb8>
 800c0da:	d838      	bhi.n	800c14e <_strtod_l+0x96>
 800c0dc:	290d      	cmp	r1, #13
 800c0de:	d832      	bhi.n	800c146 <_strtod_l+0x8e>
 800c0e0:	2908      	cmp	r1, #8
 800c0e2:	d832      	bhi.n	800c14a <_strtod_l+0x92>
 800c0e4:	2900      	cmp	r1, #0
 800c0e6:	d03b      	beq.n	800c160 <_strtod_l+0xa8>
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	920e      	str	r2, [sp, #56]	; 0x38
 800c0ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c0ee:	7832      	ldrb	r2, [r6, #0]
 800c0f0:	2a30      	cmp	r2, #48	; 0x30
 800c0f2:	f040 80b2 	bne.w	800c25a <_strtod_l+0x1a2>
 800c0f6:	7872      	ldrb	r2, [r6, #1]
 800c0f8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c0fc:	2a58      	cmp	r2, #88	; 0x58
 800c0fe:	d16e      	bne.n	800c1de <_strtod_l+0x126>
 800c100:	9302      	str	r3, [sp, #8]
 800c102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c104:	4620      	mov	r0, r4
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	ab1a      	add	r3, sp, #104	; 0x68
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	4a8c      	ldr	r2, [pc, #560]	; (800c340 <_strtod_l+0x288>)
 800c10e:	ab1b      	add	r3, sp, #108	; 0x6c
 800c110:	a919      	add	r1, sp, #100	; 0x64
 800c112:	f001 fead 	bl	800de70 <__gethex>
 800c116:	f010 070f 	ands.w	r7, r0, #15
 800c11a:	4605      	mov	r5, r0
 800c11c:	d005      	beq.n	800c12a <_strtod_l+0x72>
 800c11e:	2f06      	cmp	r7, #6
 800c120:	d128      	bne.n	800c174 <_strtod_l+0xbc>
 800c122:	2300      	movs	r3, #0
 800c124:	3601      	adds	r6, #1
 800c126:	9619      	str	r6, [sp, #100]	; 0x64
 800c128:	930e      	str	r3, [sp, #56]	; 0x38
 800c12a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f040 85a0 	bne.w	800cc72 <_strtod_l+0xbba>
 800c132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c134:	b1cb      	cbz	r3, 800c16a <_strtod_l+0xb2>
 800c136:	4642      	mov	r2, r8
 800c138:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c13c:	4610      	mov	r0, r2
 800c13e:	4619      	mov	r1, r3
 800c140:	b01f      	add	sp, #124	; 0x7c
 800c142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c146:	2920      	cmp	r1, #32
 800c148:	d1ce      	bne.n	800c0e8 <_strtod_l+0x30>
 800c14a:	3201      	adds	r2, #1
 800c14c:	e7c1      	b.n	800c0d2 <_strtod_l+0x1a>
 800c14e:	292d      	cmp	r1, #45	; 0x2d
 800c150:	d1ca      	bne.n	800c0e8 <_strtod_l+0x30>
 800c152:	2101      	movs	r1, #1
 800c154:	910e      	str	r1, [sp, #56]	; 0x38
 800c156:	1c51      	adds	r1, r2, #1
 800c158:	9119      	str	r1, [sp, #100]	; 0x64
 800c15a:	7852      	ldrb	r2, [r2, #1]
 800c15c:	2a00      	cmp	r2, #0
 800c15e:	d1c5      	bne.n	800c0ec <_strtod_l+0x34>
 800c160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c162:	9519      	str	r5, [sp, #100]	; 0x64
 800c164:	2b00      	cmp	r3, #0
 800c166:	f040 8582 	bne.w	800cc6e <_strtod_l+0xbb6>
 800c16a:	4642      	mov	r2, r8
 800c16c:	464b      	mov	r3, r9
 800c16e:	e7e5      	b.n	800c13c <_strtod_l+0x84>
 800c170:	2100      	movs	r1, #0
 800c172:	e7ef      	b.n	800c154 <_strtod_l+0x9c>
 800c174:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c176:	b13a      	cbz	r2, 800c188 <_strtod_l+0xd0>
 800c178:	2135      	movs	r1, #53	; 0x35
 800c17a:	a81c      	add	r0, sp, #112	; 0x70
 800c17c:	f7ff ff34 	bl	800bfe8 <__copybits>
 800c180:	4620      	mov	r0, r4
 800c182:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c184:	f7ff fb18 	bl	800b7b8 <_Bfree>
 800c188:	3f01      	subs	r7, #1
 800c18a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c18c:	2f04      	cmp	r7, #4
 800c18e:	d806      	bhi.n	800c19e <_strtod_l+0xe6>
 800c190:	e8df f007 	tbb	[pc, r7]
 800c194:	201d0314 	.word	0x201d0314
 800c198:	14          	.byte	0x14
 800c199:	00          	.byte	0x00
 800c19a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800c19e:	05e9      	lsls	r1, r5, #23
 800c1a0:	bf48      	it	mi
 800c1a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c1a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c1aa:	0d1b      	lsrs	r3, r3, #20
 800c1ac:	051b      	lsls	r3, r3, #20
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1bb      	bne.n	800c12a <_strtod_l+0x72>
 800c1b2:	f7fe fae9 	bl	800a788 <__errno>
 800c1b6:	2322      	movs	r3, #34	; 0x22
 800c1b8:	6003      	str	r3, [r0, #0]
 800c1ba:	e7b6      	b.n	800c12a <_strtod_l+0x72>
 800c1bc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c1c0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800c1c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c1c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c1cc:	e7e7      	b.n	800c19e <_strtod_l+0xe6>
 800c1ce:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c344 <_strtod_l+0x28c>
 800c1d2:	e7e4      	b.n	800c19e <_strtod_l+0xe6>
 800c1d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c1d8:	f04f 38ff 	mov.w	r8, #4294967295
 800c1dc:	e7df      	b.n	800c19e <_strtod_l+0xe6>
 800c1de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c1e0:	1c5a      	adds	r2, r3, #1
 800c1e2:	9219      	str	r2, [sp, #100]	; 0x64
 800c1e4:	785b      	ldrb	r3, [r3, #1]
 800c1e6:	2b30      	cmp	r3, #48	; 0x30
 800c1e8:	d0f9      	beq.n	800c1de <_strtod_l+0x126>
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d09d      	beq.n	800c12a <_strtod_l+0x72>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	f04f 0a00 	mov.w	sl, #0
 800c1f4:	220a      	movs	r2, #10
 800c1f6:	46d3      	mov	fp, sl
 800c1f8:	9305      	str	r3, [sp, #20]
 800c1fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c1fc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800c200:	930b      	str	r3, [sp, #44]	; 0x2c
 800c202:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c204:	7806      	ldrb	r6, [r0, #0]
 800c206:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c20a:	b2d9      	uxtb	r1, r3
 800c20c:	2909      	cmp	r1, #9
 800c20e:	d926      	bls.n	800c25e <_strtod_l+0x1a6>
 800c210:	2201      	movs	r2, #1
 800c212:	494d      	ldr	r1, [pc, #308]	; (800c348 <_strtod_l+0x290>)
 800c214:	f001 fd5e 	bl	800dcd4 <strncmp>
 800c218:	2800      	cmp	r0, #0
 800c21a:	d030      	beq.n	800c27e <_strtod_l+0x1c6>
 800c21c:	2000      	movs	r0, #0
 800c21e:	4632      	mov	r2, r6
 800c220:	4603      	mov	r3, r0
 800c222:	465e      	mov	r6, fp
 800c224:	9008      	str	r0, [sp, #32]
 800c226:	2a65      	cmp	r2, #101	; 0x65
 800c228:	d001      	beq.n	800c22e <_strtod_l+0x176>
 800c22a:	2a45      	cmp	r2, #69	; 0x45
 800c22c:	d113      	bne.n	800c256 <_strtod_l+0x19e>
 800c22e:	b91e      	cbnz	r6, 800c238 <_strtod_l+0x180>
 800c230:	9a05      	ldr	r2, [sp, #20]
 800c232:	4302      	orrs	r2, r0
 800c234:	d094      	beq.n	800c160 <_strtod_l+0xa8>
 800c236:	2600      	movs	r6, #0
 800c238:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c23a:	1c6a      	adds	r2, r5, #1
 800c23c:	9219      	str	r2, [sp, #100]	; 0x64
 800c23e:	786a      	ldrb	r2, [r5, #1]
 800c240:	2a2b      	cmp	r2, #43	; 0x2b
 800c242:	d074      	beq.n	800c32e <_strtod_l+0x276>
 800c244:	2a2d      	cmp	r2, #45	; 0x2d
 800c246:	d078      	beq.n	800c33a <_strtod_l+0x282>
 800c248:	f04f 0c00 	mov.w	ip, #0
 800c24c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c250:	2909      	cmp	r1, #9
 800c252:	d97f      	bls.n	800c354 <_strtod_l+0x29c>
 800c254:	9519      	str	r5, [sp, #100]	; 0x64
 800c256:	2700      	movs	r7, #0
 800c258:	e09e      	b.n	800c398 <_strtod_l+0x2e0>
 800c25a:	2300      	movs	r3, #0
 800c25c:	e7c8      	b.n	800c1f0 <_strtod_l+0x138>
 800c25e:	f1bb 0f08 	cmp.w	fp, #8
 800c262:	bfd8      	it	le
 800c264:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800c266:	f100 0001 	add.w	r0, r0, #1
 800c26a:	bfd6      	itet	le
 800c26c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c270:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c274:	930a      	strle	r3, [sp, #40]	; 0x28
 800c276:	f10b 0b01 	add.w	fp, fp, #1
 800c27a:	9019      	str	r0, [sp, #100]	; 0x64
 800c27c:	e7c1      	b.n	800c202 <_strtod_l+0x14a>
 800c27e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c280:	1c5a      	adds	r2, r3, #1
 800c282:	9219      	str	r2, [sp, #100]	; 0x64
 800c284:	785a      	ldrb	r2, [r3, #1]
 800c286:	f1bb 0f00 	cmp.w	fp, #0
 800c28a:	d037      	beq.n	800c2fc <_strtod_l+0x244>
 800c28c:	465e      	mov	r6, fp
 800c28e:	9008      	str	r0, [sp, #32]
 800c290:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c294:	2b09      	cmp	r3, #9
 800c296:	d912      	bls.n	800c2be <_strtod_l+0x206>
 800c298:	2301      	movs	r3, #1
 800c29a:	e7c4      	b.n	800c226 <_strtod_l+0x16e>
 800c29c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c29e:	3001      	adds	r0, #1
 800c2a0:	1c5a      	adds	r2, r3, #1
 800c2a2:	9219      	str	r2, [sp, #100]	; 0x64
 800c2a4:	785a      	ldrb	r2, [r3, #1]
 800c2a6:	2a30      	cmp	r2, #48	; 0x30
 800c2a8:	d0f8      	beq.n	800c29c <_strtod_l+0x1e4>
 800c2aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c2ae:	2b08      	cmp	r3, #8
 800c2b0:	f200 84e4 	bhi.w	800cc7c <_strtod_l+0xbc4>
 800c2b4:	9008      	str	r0, [sp, #32]
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2be:	3a30      	subs	r2, #48	; 0x30
 800c2c0:	f100 0301 	add.w	r3, r0, #1
 800c2c4:	d014      	beq.n	800c2f0 <_strtod_l+0x238>
 800c2c6:	9908      	ldr	r1, [sp, #32]
 800c2c8:	eb00 0c06 	add.w	ip, r0, r6
 800c2cc:	4419      	add	r1, r3
 800c2ce:	9108      	str	r1, [sp, #32]
 800c2d0:	4633      	mov	r3, r6
 800c2d2:	210a      	movs	r1, #10
 800c2d4:	4563      	cmp	r3, ip
 800c2d6:	d113      	bne.n	800c300 <_strtod_l+0x248>
 800c2d8:	1833      	adds	r3, r6, r0
 800c2da:	2b08      	cmp	r3, #8
 800c2dc:	f106 0601 	add.w	r6, r6, #1
 800c2e0:	4406      	add	r6, r0
 800c2e2:	dc1a      	bgt.n	800c31a <_strtod_l+0x262>
 800c2e4:	230a      	movs	r3, #10
 800c2e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c2e8:	fb03 2301 	mla	r3, r3, r1, r2
 800c2ec:	930a      	str	r3, [sp, #40]	; 0x28
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	1c51      	adds	r1, r2, #1
 800c2f6:	9119      	str	r1, [sp, #100]	; 0x64
 800c2f8:	7852      	ldrb	r2, [r2, #1]
 800c2fa:	e7c9      	b.n	800c290 <_strtod_l+0x1d8>
 800c2fc:	4658      	mov	r0, fp
 800c2fe:	e7d2      	b.n	800c2a6 <_strtod_l+0x1ee>
 800c300:	2b08      	cmp	r3, #8
 800c302:	f103 0301 	add.w	r3, r3, #1
 800c306:	dc03      	bgt.n	800c310 <_strtod_l+0x258>
 800c308:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c30a:	434f      	muls	r7, r1
 800c30c:	970a      	str	r7, [sp, #40]	; 0x28
 800c30e:	e7e1      	b.n	800c2d4 <_strtod_l+0x21c>
 800c310:	2b10      	cmp	r3, #16
 800c312:	bfd8      	it	le
 800c314:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c318:	e7dc      	b.n	800c2d4 <_strtod_l+0x21c>
 800c31a:	2e10      	cmp	r6, #16
 800c31c:	bfdc      	itt	le
 800c31e:	230a      	movle	r3, #10
 800c320:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c324:	e7e3      	b.n	800c2ee <_strtod_l+0x236>
 800c326:	2300      	movs	r3, #0
 800c328:	9308      	str	r3, [sp, #32]
 800c32a:	2301      	movs	r3, #1
 800c32c:	e780      	b.n	800c230 <_strtod_l+0x178>
 800c32e:	f04f 0c00 	mov.w	ip, #0
 800c332:	1caa      	adds	r2, r5, #2
 800c334:	9219      	str	r2, [sp, #100]	; 0x64
 800c336:	78aa      	ldrb	r2, [r5, #2]
 800c338:	e788      	b.n	800c24c <_strtod_l+0x194>
 800c33a:	f04f 0c01 	mov.w	ip, #1
 800c33e:	e7f8      	b.n	800c332 <_strtod_l+0x27a>
 800c340:	0800f658 	.word	0x0800f658
 800c344:	7ff00000 	.word	0x7ff00000
 800c348:	0800f654 	.word	0x0800f654
 800c34c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c34e:	1c51      	adds	r1, r2, #1
 800c350:	9119      	str	r1, [sp, #100]	; 0x64
 800c352:	7852      	ldrb	r2, [r2, #1]
 800c354:	2a30      	cmp	r2, #48	; 0x30
 800c356:	d0f9      	beq.n	800c34c <_strtod_l+0x294>
 800c358:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c35c:	2908      	cmp	r1, #8
 800c35e:	f63f af7a 	bhi.w	800c256 <_strtod_l+0x19e>
 800c362:	3a30      	subs	r2, #48	; 0x30
 800c364:	9209      	str	r2, [sp, #36]	; 0x24
 800c366:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c368:	920c      	str	r2, [sp, #48]	; 0x30
 800c36a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c36c:	1c57      	adds	r7, r2, #1
 800c36e:	9719      	str	r7, [sp, #100]	; 0x64
 800c370:	7852      	ldrb	r2, [r2, #1]
 800c372:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c376:	f1be 0f09 	cmp.w	lr, #9
 800c37a:	d938      	bls.n	800c3ee <_strtod_l+0x336>
 800c37c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c37e:	1a7f      	subs	r7, r7, r1
 800c380:	2f08      	cmp	r7, #8
 800c382:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c386:	dc03      	bgt.n	800c390 <_strtod_l+0x2d8>
 800c388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c38a:	428f      	cmp	r7, r1
 800c38c:	bfa8      	it	ge
 800c38e:	460f      	movge	r7, r1
 800c390:	f1bc 0f00 	cmp.w	ip, #0
 800c394:	d000      	beq.n	800c398 <_strtod_l+0x2e0>
 800c396:	427f      	negs	r7, r7
 800c398:	2e00      	cmp	r6, #0
 800c39a:	d14f      	bne.n	800c43c <_strtod_l+0x384>
 800c39c:	9905      	ldr	r1, [sp, #20]
 800c39e:	4301      	orrs	r1, r0
 800c3a0:	f47f aec3 	bne.w	800c12a <_strtod_l+0x72>
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f47f aedb 	bne.w	800c160 <_strtod_l+0xa8>
 800c3aa:	2a69      	cmp	r2, #105	; 0x69
 800c3ac:	d029      	beq.n	800c402 <_strtod_l+0x34a>
 800c3ae:	dc26      	bgt.n	800c3fe <_strtod_l+0x346>
 800c3b0:	2a49      	cmp	r2, #73	; 0x49
 800c3b2:	d026      	beq.n	800c402 <_strtod_l+0x34a>
 800c3b4:	2a4e      	cmp	r2, #78	; 0x4e
 800c3b6:	f47f aed3 	bne.w	800c160 <_strtod_l+0xa8>
 800c3ba:	499a      	ldr	r1, [pc, #616]	; (800c624 <_strtod_l+0x56c>)
 800c3bc:	a819      	add	r0, sp, #100	; 0x64
 800c3be:	f001 ff99 	bl	800e2f4 <__match>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	f43f aecc 	beq.w	800c160 <_strtod_l+0xa8>
 800c3c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b28      	cmp	r3, #40	; 0x28
 800c3ce:	d12f      	bne.n	800c430 <_strtod_l+0x378>
 800c3d0:	4995      	ldr	r1, [pc, #596]	; (800c628 <_strtod_l+0x570>)
 800c3d2:	aa1c      	add	r2, sp, #112	; 0x70
 800c3d4:	a819      	add	r0, sp, #100	; 0x64
 800c3d6:	f001 ffa1 	bl	800e31c <__hexnan>
 800c3da:	2805      	cmp	r0, #5
 800c3dc:	d128      	bne.n	800c430 <_strtod_l+0x378>
 800c3de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c3e0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800c3e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c3e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c3ec:	e69d      	b.n	800c12a <_strtod_l+0x72>
 800c3ee:	210a      	movs	r1, #10
 800c3f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c3f2:	fb01 2107 	mla	r1, r1, r7, r2
 800c3f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c3fa:	9209      	str	r2, [sp, #36]	; 0x24
 800c3fc:	e7b5      	b.n	800c36a <_strtod_l+0x2b2>
 800c3fe:	2a6e      	cmp	r2, #110	; 0x6e
 800c400:	e7d9      	b.n	800c3b6 <_strtod_l+0x2fe>
 800c402:	498a      	ldr	r1, [pc, #552]	; (800c62c <_strtod_l+0x574>)
 800c404:	a819      	add	r0, sp, #100	; 0x64
 800c406:	f001 ff75 	bl	800e2f4 <__match>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	f43f aea8 	beq.w	800c160 <_strtod_l+0xa8>
 800c410:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c412:	4987      	ldr	r1, [pc, #540]	; (800c630 <_strtod_l+0x578>)
 800c414:	3b01      	subs	r3, #1
 800c416:	a819      	add	r0, sp, #100	; 0x64
 800c418:	9319      	str	r3, [sp, #100]	; 0x64
 800c41a:	f001 ff6b 	bl	800e2f4 <__match>
 800c41e:	b910      	cbnz	r0, 800c426 <_strtod_l+0x36e>
 800c420:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c422:	3301      	adds	r3, #1
 800c424:	9319      	str	r3, [sp, #100]	; 0x64
 800c426:	f04f 0800 	mov.w	r8, #0
 800c42a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800c634 <_strtod_l+0x57c>
 800c42e:	e67c      	b.n	800c12a <_strtod_l+0x72>
 800c430:	4881      	ldr	r0, [pc, #516]	; (800c638 <_strtod_l+0x580>)
 800c432:	f001 fc93 	bl	800dd5c <nan>
 800c436:	4680      	mov	r8, r0
 800c438:	4689      	mov	r9, r1
 800c43a:	e676      	b.n	800c12a <_strtod_l+0x72>
 800c43c:	9b08      	ldr	r3, [sp, #32]
 800c43e:	f1bb 0f00 	cmp.w	fp, #0
 800c442:	bf08      	it	eq
 800c444:	46b3      	moveq	fp, r6
 800c446:	1afb      	subs	r3, r7, r3
 800c448:	2e10      	cmp	r6, #16
 800c44a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c44c:	4635      	mov	r5, r6
 800c44e:	9309      	str	r3, [sp, #36]	; 0x24
 800c450:	bfa8      	it	ge
 800c452:	2510      	movge	r5, #16
 800c454:	f7f4 f8e6 	bl	8000624 <__aeabi_ui2d>
 800c458:	2e09      	cmp	r6, #9
 800c45a:	4680      	mov	r8, r0
 800c45c:	4689      	mov	r9, r1
 800c45e:	dd13      	ble.n	800c488 <_strtod_l+0x3d0>
 800c460:	4b76      	ldr	r3, [pc, #472]	; (800c63c <_strtod_l+0x584>)
 800c462:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c466:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c46a:	f7f4 f955 	bl	8000718 <__aeabi_dmul>
 800c46e:	4680      	mov	r8, r0
 800c470:	4650      	mov	r0, sl
 800c472:	4689      	mov	r9, r1
 800c474:	f7f4 f8d6 	bl	8000624 <__aeabi_ui2d>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	4640      	mov	r0, r8
 800c47e:	4649      	mov	r1, r9
 800c480:	f7f3 ff94 	bl	80003ac <__adddf3>
 800c484:	4680      	mov	r8, r0
 800c486:	4689      	mov	r9, r1
 800c488:	2e0f      	cmp	r6, #15
 800c48a:	dc36      	bgt.n	800c4fa <_strtod_l+0x442>
 800c48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f43f ae4b 	beq.w	800c12a <_strtod_l+0x72>
 800c494:	dd22      	ble.n	800c4dc <_strtod_l+0x424>
 800c496:	2b16      	cmp	r3, #22
 800c498:	dc09      	bgt.n	800c4ae <_strtod_l+0x3f6>
 800c49a:	4968      	ldr	r1, [pc, #416]	; (800c63c <_strtod_l+0x584>)
 800c49c:	4642      	mov	r2, r8
 800c49e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4a2:	464b      	mov	r3, r9
 800c4a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a8:	f7f4 f936 	bl	8000718 <__aeabi_dmul>
 800c4ac:	e7c3      	b.n	800c436 <_strtod_l+0x37e>
 800c4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4b0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	db20      	blt.n	800c4fa <_strtod_l+0x442>
 800c4b8:	4c60      	ldr	r4, [pc, #384]	; (800c63c <_strtod_l+0x584>)
 800c4ba:	f1c6 060f 	rsb	r6, r6, #15
 800c4be:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c4c2:	4642      	mov	r2, r8
 800c4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4c8:	464b      	mov	r3, r9
 800c4ca:	f7f4 f925 	bl	8000718 <__aeabi_dmul>
 800c4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d0:	1b9e      	subs	r6, r3, r6
 800c4d2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c4d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c4da:	e7e5      	b.n	800c4a8 <_strtod_l+0x3f0>
 800c4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4de:	3316      	adds	r3, #22
 800c4e0:	db0b      	blt.n	800c4fa <_strtod_l+0x442>
 800c4e2:	9b08      	ldr	r3, [sp, #32]
 800c4e4:	4640      	mov	r0, r8
 800c4e6:	1bdf      	subs	r7, r3, r7
 800c4e8:	4b54      	ldr	r3, [pc, #336]	; (800c63c <_strtod_l+0x584>)
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c4f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4f4:	f7f4 fa3a 	bl	800096c <__aeabi_ddiv>
 800c4f8:	e79d      	b.n	800c436 <_strtod_l+0x37e>
 800c4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4fc:	1b75      	subs	r5, r6, r5
 800c4fe:	441d      	add	r5, r3
 800c500:	2d00      	cmp	r5, #0
 800c502:	dd70      	ble.n	800c5e6 <_strtod_l+0x52e>
 800c504:	f015 030f 	ands.w	r3, r5, #15
 800c508:	d00a      	beq.n	800c520 <_strtod_l+0x468>
 800c50a:	494c      	ldr	r1, [pc, #304]	; (800c63c <_strtod_l+0x584>)
 800c50c:	4642      	mov	r2, r8
 800c50e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c512:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c516:	464b      	mov	r3, r9
 800c518:	f7f4 f8fe 	bl	8000718 <__aeabi_dmul>
 800c51c:	4680      	mov	r8, r0
 800c51e:	4689      	mov	r9, r1
 800c520:	f035 050f 	bics.w	r5, r5, #15
 800c524:	d04d      	beq.n	800c5c2 <_strtod_l+0x50a>
 800c526:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c52a:	dd22      	ble.n	800c572 <_strtod_l+0x4ba>
 800c52c:	2600      	movs	r6, #0
 800c52e:	46b3      	mov	fp, r6
 800c530:	960b      	str	r6, [sp, #44]	; 0x2c
 800c532:	9608      	str	r6, [sp, #32]
 800c534:	2322      	movs	r3, #34	; 0x22
 800c536:	f04f 0800 	mov.w	r8, #0
 800c53a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800c634 <_strtod_l+0x57c>
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c542:	2b00      	cmp	r3, #0
 800c544:	f43f adf1 	beq.w	800c12a <_strtod_l+0x72>
 800c548:	4620      	mov	r0, r4
 800c54a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c54c:	f7ff f934 	bl	800b7b8 <_Bfree>
 800c550:	4620      	mov	r0, r4
 800c552:	9908      	ldr	r1, [sp, #32]
 800c554:	f7ff f930 	bl	800b7b8 <_Bfree>
 800c558:	4659      	mov	r1, fp
 800c55a:	4620      	mov	r0, r4
 800c55c:	f7ff f92c 	bl	800b7b8 <_Bfree>
 800c560:	4620      	mov	r0, r4
 800c562:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c564:	f7ff f928 	bl	800b7b8 <_Bfree>
 800c568:	4631      	mov	r1, r6
 800c56a:	4620      	mov	r0, r4
 800c56c:	f7ff f924 	bl	800b7b8 <_Bfree>
 800c570:	e5db      	b.n	800c12a <_strtod_l+0x72>
 800c572:	4b33      	ldr	r3, [pc, #204]	; (800c640 <_strtod_l+0x588>)
 800c574:	4640      	mov	r0, r8
 800c576:	9305      	str	r3, [sp, #20]
 800c578:	2300      	movs	r3, #0
 800c57a:	4649      	mov	r1, r9
 800c57c:	469a      	mov	sl, r3
 800c57e:	112d      	asrs	r5, r5, #4
 800c580:	2d01      	cmp	r5, #1
 800c582:	dc21      	bgt.n	800c5c8 <_strtod_l+0x510>
 800c584:	b10b      	cbz	r3, 800c58a <_strtod_l+0x4d2>
 800c586:	4680      	mov	r8, r0
 800c588:	4689      	mov	r9, r1
 800c58a:	492d      	ldr	r1, [pc, #180]	; (800c640 <_strtod_l+0x588>)
 800c58c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c590:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c594:	4642      	mov	r2, r8
 800c596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c59a:	464b      	mov	r3, r9
 800c59c:	f7f4 f8bc 	bl	8000718 <__aeabi_dmul>
 800c5a0:	4b24      	ldr	r3, [pc, #144]	; (800c634 <_strtod_l+0x57c>)
 800c5a2:	460a      	mov	r2, r1
 800c5a4:	400b      	ands	r3, r1
 800c5a6:	4927      	ldr	r1, [pc, #156]	; (800c644 <_strtod_l+0x58c>)
 800c5a8:	4680      	mov	r8, r0
 800c5aa:	428b      	cmp	r3, r1
 800c5ac:	d8be      	bhi.n	800c52c <_strtod_l+0x474>
 800c5ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c5b2:	428b      	cmp	r3, r1
 800c5b4:	bf86      	itte	hi
 800c5b6:	f04f 38ff 	movhi.w	r8, #4294967295
 800c5ba:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800c648 <_strtod_l+0x590>
 800c5be:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	9305      	str	r3, [sp, #20]
 800c5c6:	e07b      	b.n	800c6c0 <_strtod_l+0x608>
 800c5c8:	07ea      	lsls	r2, r5, #31
 800c5ca:	d505      	bpl.n	800c5d8 <_strtod_l+0x520>
 800c5cc:	9b05      	ldr	r3, [sp, #20]
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	f7f4 f8a1 	bl	8000718 <__aeabi_dmul>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	9a05      	ldr	r2, [sp, #20]
 800c5da:	f10a 0a01 	add.w	sl, sl, #1
 800c5de:	3208      	adds	r2, #8
 800c5e0:	106d      	asrs	r5, r5, #1
 800c5e2:	9205      	str	r2, [sp, #20]
 800c5e4:	e7cc      	b.n	800c580 <_strtod_l+0x4c8>
 800c5e6:	d0ec      	beq.n	800c5c2 <_strtod_l+0x50a>
 800c5e8:	426d      	negs	r5, r5
 800c5ea:	f015 020f 	ands.w	r2, r5, #15
 800c5ee:	d00a      	beq.n	800c606 <_strtod_l+0x54e>
 800c5f0:	4b12      	ldr	r3, [pc, #72]	; (800c63c <_strtod_l+0x584>)
 800c5f2:	4640      	mov	r0, r8
 800c5f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5f8:	4649      	mov	r1, r9
 800c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fe:	f7f4 f9b5 	bl	800096c <__aeabi_ddiv>
 800c602:	4680      	mov	r8, r0
 800c604:	4689      	mov	r9, r1
 800c606:	112d      	asrs	r5, r5, #4
 800c608:	d0db      	beq.n	800c5c2 <_strtod_l+0x50a>
 800c60a:	2d1f      	cmp	r5, #31
 800c60c:	dd1e      	ble.n	800c64c <_strtod_l+0x594>
 800c60e:	2600      	movs	r6, #0
 800c610:	46b3      	mov	fp, r6
 800c612:	960b      	str	r6, [sp, #44]	; 0x2c
 800c614:	9608      	str	r6, [sp, #32]
 800c616:	2322      	movs	r3, #34	; 0x22
 800c618:	f04f 0800 	mov.w	r8, #0
 800c61c:	f04f 0900 	mov.w	r9, #0
 800c620:	6023      	str	r3, [r4, #0]
 800c622:	e78d      	b.n	800c540 <_strtod_l+0x488>
 800c624:	0800f407 	.word	0x0800f407
 800c628:	0800f66c 	.word	0x0800f66c
 800c62c:	0800f3ff 	.word	0x0800f3ff
 800c630:	0800f470 	.word	0x0800f470
 800c634:	7ff00000 	.word	0x7ff00000
 800c638:	0800f46c 	.word	0x0800f46c
 800c63c:	0800f580 	.word	0x0800f580
 800c640:	0800f558 	.word	0x0800f558
 800c644:	7ca00000 	.word	0x7ca00000
 800c648:	7fefffff 	.word	0x7fefffff
 800c64c:	f015 0310 	ands.w	r3, r5, #16
 800c650:	bf18      	it	ne
 800c652:	236a      	movne	r3, #106	; 0x6a
 800c654:	4640      	mov	r0, r8
 800c656:	9305      	str	r3, [sp, #20]
 800c658:	4649      	mov	r1, r9
 800c65a:	2300      	movs	r3, #0
 800c65c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800c928 <_strtod_l+0x870>
 800c660:	07ea      	lsls	r2, r5, #31
 800c662:	d504      	bpl.n	800c66e <_strtod_l+0x5b6>
 800c664:	e9da 2300 	ldrd	r2, r3, [sl]
 800c668:	f7f4 f856 	bl	8000718 <__aeabi_dmul>
 800c66c:	2301      	movs	r3, #1
 800c66e:	106d      	asrs	r5, r5, #1
 800c670:	f10a 0a08 	add.w	sl, sl, #8
 800c674:	d1f4      	bne.n	800c660 <_strtod_l+0x5a8>
 800c676:	b10b      	cbz	r3, 800c67c <_strtod_l+0x5c4>
 800c678:	4680      	mov	r8, r0
 800c67a:	4689      	mov	r9, r1
 800c67c:	9b05      	ldr	r3, [sp, #20]
 800c67e:	b1bb      	cbz	r3, 800c6b0 <_strtod_l+0x5f8>
 800c680:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c684:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c688:	2b00      	cmp	r3, #0
 800c68a:	4649      	mov	r1, r9
 800c68c:	dd10      	ble.n	800c6b0 <_strtod_l+0x5f8>
 800c68e:	2b1f      	cmp	r3, #31
 800c690:	f340 8128 	ble.w	800c8e4 <_strtod_l+0x82c>
 800c694:	2b34      	cmp	r3, #52	; 0x34
 800c696:	bfd8      	it	le
 800c698:	f04f 33ff 	movle.w	r3, #4294967295
 800c69c:	f04f 0800 	mov.w	r8, #0
 800c6a0:	bfcf      	iteee	gt
 800c6a2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c6a6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c6aa:	4093      	lslle	r3, r2
 800c6ac:	ea03 0901 	andle.w	r9, r3, r1
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	4640      	mov	r0, r8
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	f7f4 fa96 	bl	8000be8 <__aeabi_dcmpeq>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d1a6      	bne.n	800c60e <_strtod_l+0x556>
 800c6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c2:	465a      	mov	r2, fp
 800c6c4:	9300      	str	r3, [sp, #0]
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	4633      	mov	r3, r6
 800c6ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6cc:	f7ff f8dc 	bl	800b888 <__s2b>
 800c6d0:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	f43f af2a 	beq.w	800c52c <_strtod_l+0x474>
 800c6d8:	2600      	movs	r6, #0
 800c6da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6dc:	9b08      	ldr	r3, [sp, #32]
 800c6de:	2a00      	cmp	r2, #0
 800c6e0:	eba3 0307 	sub.w	r3, r3, r7
 800c6e4:	bfa8      	it	ge
 800c6e6:	2300      	movge	r3, #0
 800c6e8:	46b3      	mov	fp, r6
 800c6ea:	9312      	str	r3, [sp, #72]	; 0x48
 800c6ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c6f0:	9316      	str	r3, [sp, #88]	; 0x58
 800c6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	6859      	ldr	r1, [r3, #4]
 800c6f8:	f7ff f81e 	bl	800b738 <_Balloc>
 800c6fc:	9008      	str	r0, [sp, #32]
 800c6fe:	2800      	cmp	r0, #0
 800c700:	f43f af18 	beq.w	800c534 <_strtod_l+0x47c>
 800c704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c706:	300c      	adds	r0, #12
 800c708:	691a      	ldr	r2, [r3, #16]
 800c70a:	f103 010c 	add.w	r1, r3, #12
 800c70e:	3202      	adds	r2, #2
 800c710:	0092      	lsls	r2, r2, #2
 800c712:	f7fe f874 	bl	800a7fe <memcpy>
 800c716:	ab1c      	add	r3, sp, #112	; 0x70
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	ab1b      	add	r3, sp, #108	; 0x6c
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	4642      	mov	r2, r8
 800c720:	464b      	mov	r3, r9
 800c722:	4620      	mov	r0, r4
 800c724:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800c728:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800c72c:	f7ff fbd8 	bl	800bee0 <__d2b>
 800c730:	901a      	str	r0, [sp, #104]	; 0x68
 800c732:	2800      	cmp	r0, #0
 800c734:	f43f aefe 	beq.w	800c534 <_strtod_l+0x47c>
 800c738:	2101      	movs	r1, #1
 800c73a:	4620      	mov	r0, r4
 800c73c:	f7ff f93c 	bl	800b9b8 <__i2b>
 800c740:	4683      	mov	fp, r0
 800c742:	2800      	cmp	r0, #0
 800c744:	f43f aef6 	beq.w	800c534 <_strtod_l+0x47c>
 800c748:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c74a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c74c:	2f00      	cmp	r7, #0
 800c74e:	bfab      	itete	ge
 800c750:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800c752:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c754:	eb07 0a03 	addge.w	sl, r7, r3
 800c758:	1bdd      	sublt	r5, r3, r7
 800c75a:	9b05      	ldr	r3, [sp, #20]
 800c75c:	bfa8      	it	ge
 800c75e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c760:	eba7 0703 	sub.w	r7, r7, r3
 800c764:	4417      	add	r7, r2
 800c766:	4b71      	ldr	r3, [pc, #452]	; (800c92c <_strtod_l+0x874>)
 800c768:	f107 37ff 	add.w	r7, r7, #4294967295
 800c76c:	bfb8      	it	lt
 800c76e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800c772:	429f      	cmp	r7, r3
 800c774:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c778:	f280 80c7 	bge.w	800c90a <_strtod_l+0x852>
 800c77c:	1bdb      	subs	r3, r3, r7
 800c77e:	2b1f      	cmp	r3, #31
 800c780:	f04f 0101 	mov.w	r1, #1
 800c784:	eba2 0203 	sub.w	r2, r2, r3
 800c788:	f300 80b3 	bgt.w	800c8f2 <_strtod_l+0x83a>
 800c78c:	fa01 f303 	lsl.w	r3, r1, r3
 800c790:	9313      	str	r3, [sp, #76]	; 0x4c
 800c792:	2300      	movs	r3, #0
 800c794:	9310      	str	r3, [sp, #64]	; 0x40
 800c796:	eb0a 0702 	add.w	r7, sl, r2
 800c79a:	9b05      	ldr	r3, [sp, #20]
 800c79c:	45ba      	cmp	sl, r7
 800c79e:	4415      	add	r5, r2
 800c7a0:	441d      	add	r5, r3
 800c7a2:	4653      	mov	r3, sl
 800c7a4:	bfa8      	it	ge
 800c7a6:	463b      	movge	r3, r7
 800c7a8:	42ab      	cmp	r3, r5
 800c7aa:	bfa8      	it	ge
 800c7ac:	462b      	movge	r3, r5
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	bfc2      	ittt	gt
 800c7b2:	1aff      	subgt	r7, r7, r3
 800c7b4:	1aed      	subgt	r5, r5, r3
 800c7b6:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c7ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dd17      	ble.n	800c7f0 <_strtod_l+0x738>
 800c7c0:	4659      	mov	r1, fp
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f7ff f9b5 	bl	800bb34 <__pow5mult>
 800c7ca:	4683      	mov	fp, r0
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	f43f aeb1 	beq.w	800c534 <_strtod_l+0x47c>
 800c7d2:	4601      	mov	r1, r0
 800c7d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f7ff f904 	bl	800b9e4 <__multiply>
 800c7dc:	900a      	str	r0, [sp, #40]	; 0x28
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	f43f aea8 	beq.w	800c534 <_strtod_l+0x47c>
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c7e8:	f7fe ffe6 	bl	800b7b8 <_Bfree>
 800c7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7ee:	931a      	str	r3, [sp, #104]	; 0x68
 800c7f0:	2f00      	cmp	r7, #0
 800c7f2:	f300 808f 	bgt.w	800c914 <_strtod_l+0x85c>
 800c7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dd08      	ble.n	800c80e <_strtod_l+0x756>
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c800:	9908      	ldr	r1, [sp, #32]
 800c802:	f7ff f997 	bl	800bb34 <__pow5mult>
 800c806:	9008      	str	r0, [sp, #32]
 800c808:	2800      	cmp	r0, #0
 800c80a:	f43f ae93 	beq.w	800c534 <_strtod_l+0x47c>
 800c80e:	2d00      	cmp	r5, #0
 800c810:	dd08      	ble.n	800c824 <_strtod_l+0x76c>
 800c812:	462a      	mov	r2, r5
 800c814:	4620      	mov	r0, r4
 800c816:	9908      	ldr	r1, [sp, #32]
 800c818:	f7ff f9e6 	bl	800bbe8 <__lshift>
 800c81c:	9008      	str	r0, [sp, #32]
 800c81e:	2800      	cmp	r0, #0
 800c820:	f43f ae88 	beq.w	800c534 <_strtod_l+0x47c>
 800c824:	f1ba 0f00 	cmp.w	sl, #0
 800c828:	dd08      	ble.n	800c83c <_strtod_l+0x784>
 800c82a:	4659      	mov	r1, fp
 800c82c:	4652      	mov	r2, sl
 800c82e:	4620      	mov	r0, r4
 800c830:	f7ff f9da 	bl	800bbe8 <__lshift>
 800c834:	4683      	mov	fp, r0
 800c836:	2800      	cmp	r0, #0
 800c838:	f43f ae7c 	beq.w	800c534 <_strtod_l+0x47c>
 800c83c:	4620      	mov	r0, r4
 800c83e:	9a08      	ldr	r2, [sp, #32]
 800c840:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c842:	f7ff fa59 	bl	800bcf8 <__mdiff>
 800c846:	4606      	mov	r6, r0
 800c848:	2800      	cmp	r0, #0
 800c84a:	f43f ae73 	beq.w	800c534 <_strtod_l+0x47c>
 800c84e:	2500      	movs	r5, #0
 800c850:	68c3      	ldr	r3, [r0, #12]
 800c852:	4659      	mov	r1, fp
 800c854:	60c5      	str	r5, [r0, #12]
 800c856:	930a      	str	r3, [sp, #40]	; 0x28
 800c858:	f7ff fa32 	bl	800bcc0 <__mcmp>
 800c85c:	42a8      	cmp	r0, r5
 800c85e:	da6b      	bge.n	800c938 <_strtod_l+0x880>
 800c860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c862:	ea53 0308 	orrs.w	r3, r3, r8
 800c866:	f040 808f 	bne.w	800c988 <_strtod_l+0x8d0>
 800c86a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f040 808a 	bne.w	800c988 <_strtod_l+0x8d0>
 800c874:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c878:	0d1b      	lsrs	r3, r3, #20
 800c87a:	051b      	lsls	r3, r3, #20
 800c87c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c880:	f240 8082 	bls.w	800c988 <_strtod_l+0x8d0>
 800c884:	6973      	ldr	r3, [r6, #20]
 800c886:	b913      	cbnz	r3, 800c88e <_strtod_l+0x7d6>
 800c888:	6933      	ldr	r3, [r6, #16]
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	dd7c      	ble.n	800c988 <_strtod_l+0x8d0>
 800c88e:	4631      	mov	r1, r6
 800c890:	2201      	movs	r2, #1
 800c892:	4620      	mov	r0, r4
 800c894:	f7ff f9a8 	bl	800bbe8 <__lshift>
 800c898:	4659      	mov	r1, fp
 800c89a:	4606      	mov	r6, r0
 800c89c:	f7ff fa10 	bl	800bcc0 <__mcmp>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	dd71      	ble.n	800c988 <_strtod_l+0x8d0>
 800c8a4:	9905      	ldr	r1, [sp, #20]
 800c8a6:	464b      	mov	r3, r9
 800c8a8:	4a21      	ldr	r2, [pc, #132]	; (800c930 <_strtod_l+0x878>)
 800c8aa:	2900      	cmp	r1, #0
 800c8ac:	f000 808d 	beq.w	800c9ca <_strtod_l+0x912>
 800c8b0:	ea02 0109 	and.w	r1, r2, r9
 800c8b4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c8b8:	f300 8087 	bgt.w	800c9ca <_strtod_l+0x912>
 800c8bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c8c0:	f77f aea9 	ble.w	800c616 <_strtod_l+0x55e>
 800c8c4:	4640      	mov	r0, r8
 800c8c6:	4649      	mov	r1, r9
 800c8c8:	4b1a      	ldr	r3, [pc, #104]	; (800c934 <_strtod_l+0x87c>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f7f3 ff24 	bl	8000718 <__aeabi_dmul>
 800c8d0:	4b17      	ldr	r3, [pc, #92]	; (800c930 <_strtod_l+0x878>)
 800c8d2:	4680      	mov	r8, r0
 800c8d4:	400b      	ands	r3, r1
 800c8d6:	4689      	mov	r9, r1
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f47f ae35 	bne.w	800c548 <_strtod_l+0x490>
 800c8de:	2322      	movs	r3, #34	; 0x22
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	e631      	b.n	800c548 <_strtod_l+0x490>
 800c8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ec:	ea03 0808 	and.w	r8, r3, r8
 800c8f0:	e6de      	b.n	800c6b0 <_strtod_l+0x5f8>
 800c8f2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800c8f6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800c8fa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800c8fe:	37e2      	adds	r7, #226	; 0xe2
 800c900:	fa01 f307 	lsl.w	r3, r1, r7
 800c904:	9310      	str	r3, [sp, #64]	; 0x40
 800c906:	9113      	str	r1, [sp, #76]	; 0x4c
 800c908:	e745      	b.n	800c796 <_strtod_l+0x6de>
 800c90a:	2300      	movs	r3, #0
 800c90c:	9310      	str	r3, [sp, #64]	; 0x40
 800c90e:	2301      	movs	r3, #1
 800c910:	9313      	str	r3, [sp, #76]	; 0x4c
 800c912:	e740      	b.n	800c796 <_strtod_l+0x6de>
 800c914:	463a      	mov	r2, r7
 800c916:	4620      	mov	r0, r4
 800c918:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c91a:	f7ff f965 	bl	800bbe8 <__lshift>
 800c91e:	901a      	str	r0, [sp, #104]	; 0x68
 800c920:	2800      	cmp	r0, #0
 800c922:	f47f af68 	bne.w	800c7f6 <_strtod_l+0x73e>
 800c926:	e605      	b.n	800c534 <_strtod_l+0x47c>
 800c928:	0800f680 	.word	0x0800f680
 800c92c:	fffffc02 	.word	0xfffffc02
 800c930:	7ff00000 	.word	0x7ff00000
 800c934:	39500000 	.word	0x39500000
 800c938:	46ca      	mov	sl, r9
 800c93a:	d165      	bne.n	800ca08 <_strtod_l+0x950>
 800c93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c93e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c942:	b352      	cbz	r2, 800c99a <_strtod_l+0x8e2>
 800c944:	4a9e      	ldr	r2, [pc, #632]	; (800cbc0 <_strtod_l+0xb08>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d12a      	bne.n	800c9a0 <_strtod_l+0x8e8>
 800c94a:	9b05      	ldr	r3, [sp, #20]
 800c94c:	4641      	mov	r1, r8
 800c94e:	b1fb      	cbz	r3, 800c990 <_strtod_l+0x8d8>
 800c950:	4b9c      	ldr	r3, [pc, #624]	; (800cbc4 <_strtod_l+0xb0c>)
 800c952:	f04f 32ff 	mov.w	r2, #4294967295
 800c956:	ea09 0303 	and.w	r3, r9, r3
 800c95a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c95e:	d81a      	bhi.n	800c996 <_strtod_l+0x8de>
 800c960:	0d1b      	lsrs	r3, r3, #20
 800c962:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c966:	fa02 f303 	lsl.w	r3, r2, r3
 800c96a:	4299      	cmp	r1, r3
 800c96c:	d118      	bne.n	800c9a0 <_strtod_l+0x8e8>
 800c96e:	4b96      	ldr	r3, [pc, #600]	; (800cbc8 <_strtod_l+0xb10>)
 800c970:	459a      	cmp	sl, r3
 800c972:	d102      	bne.n	800c97a <_strtod_l+0x8c2>
 800c974:	3101      	adds	r1, #1
 800c976:	f43f addd 	beq.w	800c534 <_strtod_l+0x47c>
 800c97a:	f04f 0800 	mov.w	r8, #0
 800c97e:	4b91      	ldr	r3, [pc, #580]	; (800cbc4 <_strtod_l+0xb0c>)
 800c980:	ea0a 0303 	and.w	r3, sl, r3
 800c984:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c988:	9b05      	ldr	r3, [sp, #20]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d19a      	bne.n	800c8c4 <_strtod_l+0x80c>
 800c98e:	e5db      	b.n	800c548 <_strtod_l+0x490>
 800c990:	f04f 33ff 	mov.w	r3, #4294967295
 800c994:	e7e9      	b.n	800c96a <_strtod_l+0x8b2>
 800c996:	4613      	mov	r3, r2
 800c998:	e7e7      	b.n	800c96a <_strtod_l+0x8b2>
 800c99a:	ea53 0308 	orrs.w	r3, r3, r8
 800c99e:	d081      	beq.n	800c8a4 <_strtod_l+0x7ec>
 800c9a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9a2:	b1e3      	cbz	r3, 800c9de <_strtod_l+0x926>
 800c9a4:	ea13 0f0a 	tst.w	r3, sl
 800c9a8:	d0ee      	beq.n	800c988 <_strtod_l+0x8d0>
 800c9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ac:	4640      	mov	r0, r8
 800c9ae:	4649      	mov	r1, r9
 800c9b0:	9a05      	ldr	r2, [sp, #20]
 800c9b2:	b1c3      	cbz	r3, 800c9e6 <_strtod_l+0x92e>
 800c9b4:	f7ff fb5c 	bl	800c070 <sulp>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c9c0:	f7f3 fcf4 	bl	80003ac <__adddf3>
 800c9c4:	4680      	mov	r8, r0
 800c9c6:	4689      	mov	r9, r1
 800c9c8:	e7de      	b.n	800c988 <_strtod_l+0x8d0>
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c9d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c9d4:	f04f 38ff 	mov.w	r8, #4294967295
 800c9d8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c9dc:	e7d4      	b.n	800c988 <_strtod_l+0x8d0>
 800c9de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9e0:	ea13 0f08 	tst.w	r3, r8
 800c9e4:	e7e0      	b.n	800c9a8 <_strtod_l+0x8f0>
 800c9e6:	f7ff fb43 	bl	800c070 <sulp>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c9f2:	f7f3 fcd9 	bl	80003a8 <__aeabi_dsub>
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	4680      	mov	r8, r0
 800c9fc:	4689      	mov	r9, r1
 800c9fe:	f7f4 f8f3 	bl	8000be8 <__aeabi_dcmpeq>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d0c0      	beq.n	800c988 <_strtod_l+0x8d0>
 800ca06:	e606      	b.n	800c616 <_strtod_l+0x55e>
 800ca08:	4659      	mov	r1, fp
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f7ff fabe 	bl	800bf8c <__ratio>
 800ca10:	4602      	mov	r2, r0
 800ca12:	460b      	mov	r3, r1
 800ca14:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca1e:	f7f4 f8f7 	bl	8000c10 <__aeabi_dcmple>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d06f      	beq.n	800cb06 <_strtod_l+0xa4e>
 800ca26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d17c      	bne.n	800cb26 <_strtod_l+0xa6e>
 800ca2c:	f1b8 0f00 	cmp.w	r8, #0
 800ca30:	d159      	bne.n	800cae6 <_strtod_l+0xa2e>
 800ca32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d17b      	bne.n	800cb32 <_strtod_l+0xa7a>
 800ca3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca3e:	2200      	movs	r2, #0
 800ca40:	4b62      	ldr	r3, [pc, #392]	; (800cbcc <_strtod_l+0xb14>)
 800ca42:	f7f4 f8db 	bl	8000bfc <__aeabi_dcmplt>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d15a      	bne.n	800cb00 <_strtod_l+0xa48>
 800ca4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca4e:	2200      	movs	r2, #0
 800ca50:	4b5f      	ldr	r3, [pc, #380]	; (800cbd0 <_strtod_l+0xb18>)
 800ca52:	f7f3 fe61 	bl	8000718 <__aeabi_dmul>
 800ca56:	4605      	mov	r5, r0
 800ca58:	460f      	mov	r7, r1
 800ca5a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ca5e:	9506      	str	r5, [sp, #24]
 800ca60:	9307      	str	r3, [sp, #28]
 800ca62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca66:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ca6a:	4b56      	ldr	r3, [pc, #344]	; (800cbc4 <_strtod_l+0xb0c>)
 800ca6c:	4a55      	ldr	r2, [pc, #340]	; (800cbc4 <_strtod_l+0xb0c>)
 800ca6e:	ea0a 0303 	and.w	r3, sl, r3
 800ca72:	9313      	str	r3, [sp, #76]	; 0x4c
 800ca74:	4b57      	ldr	r3, [pc, #348]	; (800cbd4 <_strtod_l+0xb1c>)
 800ca76:	ea0a 0202 	and.w	r2, sl, r2
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	f040 80b0 	bne.w	800cbe0 <_strtod_l+0xb28>
 800ca80:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ca84:	4640      	mov	r0, r8
 800ca86:	4649      	mov	r1, r9
 800ca88:	f7ff f9c2 	bl	800be10 <__ulp>
 800ca8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca90:	f7f3 fe42 	bl	8000718 <__aeabi_dmul>
 800ca94:	4642      	mov	r2, r8
 800ca96:	464b      	mov	r3, r9
 800ca98:	f7f3 fc88 	bl	80003ac <__adddf3>
 800ca9c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800cbc4 <_strtod_l+0xb0c>
 800caa0:	4a4d      	ldr	r2, [pc, #308]	; (800cbd8 <_strtod_l+0xb20>)
 800caa2:	ea01 0a0a 	and.w	sl, r1, sl
 800caa6:	4592      	cmp	sl, r2
 800caa8:	4680      	mov	r8, r0
 800caaa:	d948      	bls.n	800cb3e <_strtod_l+0xa86>
 800caac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800caae:	4b46      	ldr	r3, [pc, #280]	; (800cbc8 <_strtod_l+0xb10>)
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d103      	bne.n	800cabc <_strtod_l+0xa04>
 800cab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cab6:	3301      	adds	r3, #1
 800cab8:	f43f ad3c 	beq.w	800c534 <_strtod_l+0x47c>
 800cabc:	f04f 38ff 	mov.w	r8, #4294967295
 800cac0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800cbc8 <_strtod_l+0xb10>
 800cac4:	4620      	mov	r0, r4
 800cac6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cac8:	f7fe fe76 	bl	800b7b8 <_Bfree>
 800cacc:	4620      	mov	r0, r4
 800cace:	9908      	ldr	r1, [sp, #32]
 800cad0:	f7fe fe72 	bl	800b7b8 <_Bfree>
 800cad4:	4659      	mov	r1, fp
 800cad6:	4620      	mov	r0, r4
 800cad8:	f7fe fe6e 	bl	800b7b8 <_Bfree>
 800cadc:	4631      	mov	r1, r6
 800cade:	4620      	mov	r0, r4
 800cae0:	f7fe fe6a 	bl	800b7b8 <_Bfree>
 800cae4:	e605      	b.n	800c6f2 <_strtod_l+0x63a>
 800cae6:	f1b8 0f01 	cmp.w	r8, #1
 800caea:	d103      	bne.n	800caf4 <_strtod_l+0xa3c>
 800caec:	f1b9 0f00 	cmp.w	r9, #0
 800caf0:	f43f ad91 	beq.w	800c616 <_strtod_l+0x55e>
 800caf4:	2200      	movs	r2, #0
 800caf6:	4b39      	ldr	r3, [pc, #228]	; (800cbdc <_strtod_l+0xb24>)
 800caf8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cafa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cafe:	e016      	b.n	800cb2e <_strtod_l+0xa76>
 800cb00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cb02:	4f33      	ldr	r7, [pc, #204]	; (800cbd0 <_strtod_l+0xb18>)
 800cb04:	e7a9      	b.n	800ca5a <_strtod_l+0x9a2>
 800cb06:	4b32      	ldr	r3, [pc, #200]	; (800cbd0 <_strtod_l+0xb18>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb0e:	f7f3 fe03 	bl	8000718 <__aeabi_dmul>
 800cb12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb14:	4605      	mov	r5, r0
 800cb16:	460f      	mov	r7, r1
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d09e      	beq.n	800ca5a <_strtod_l+0x9a2>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb24:	e79d      	b.n	800ca62 <_strtod_l+0x9aa>
 800cb26:	2200      	movs	r2, #0
 800cb28:	4b28      	ldr	r3, [pc, #160]	; (800cbcc <_strtod_l+0xb14>)
 800cb2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb2e:	4f27      	ldr	r7, [pc, #156]	; (800cbcc <_strtod_l+0xb14>)
 800cb30:	e797      	b.n	800ca62 <_strtod_l+0x9aa>
 800cb32:	2200      	movs	r2, #0
 800cb34:	4b29      	ldr	r3, [pc, #164]	; (800cbdc <_strtod_l+0xb24>)
 800cb36:	4645      	mov	r5, r8
 800cb38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb3c:	e7f7      	b.n	800cb2e <_strtod_l+0xa76>
 800cb3e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800cb42:	9b05      	ldr	r3, [sp, #20]
 800cb44:	46ca      	mov	sl, r9
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1bc      	bne.n	800cac4 <_strtod_l+0xa0c>
 800cb4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cb50:	0d1b      	lsrs	r3, r3, #20
 800cb52:	051b      	lsls	r3, r3, #20
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d1b5      	bne.n	800cac4 <_strtod_l+0xa0c>
 800cb58:	4628      	mov	r0, r5
 800cb5a:	4639      	mov	r1, r7
 800cb5c:	f7f4 faee 	bl	800113c <__aeabi_d2lz>
 800cb60:	f7f3 fdac 	bl	80006bc <__aeabi_l2d>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4628      	mov	r0, r5
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	f7f3 fc1c 	bl	80003a8 <__aeabi_dsub>
 800cb70:	460b      	mov	r3, r1
 800cb72:	4602      	mov	r2, r0
 800cb74:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800cb78:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800cb7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb7e:	ea4a 0a08 	orr.w	sl, sl, r8
 800cb82:	ea5a 0a03 	orrs.w	sl, sl, r3
 800cb86:	d06c      	beq.n	800cc62 <_strtod_l+0xbaa>
 800cb88:	a309      	add	r3, pc, #36	; (adr r3, 800cbb0 <_strtod_l+0xaf8>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	f7f4 f835 	bl	8000bfc <__aeabi_dcmplt>
 800cb92:	2800      	cmp	r0, #0
 800cb94:	f47f acd8 	bne.w	800c548 <_strtod_l+0x490>
 800cb98:	a307      	add	r3, pc, #28	; (adr r3, 800cbb8 <_strtod_l+0xb00>)
 800cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cba2:	f7f4 f849 	bl	8000c38 <__aeabi_dcmpgt>
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d08c      	beq.n	800cac4 <_strtod_l+0xa0c>
 800cbaa:	e4cd      	b.n	800c548 <_strtod_l+0x490>
 800cbac:	f3af 8000 	nop.w
 800cbb0:	94a03595 	.word	0x94a03595
 800cbb4:	3fdfffff 	.word	0x3fdfffff
 800cbb8:	35afe535 	.word	0x35afe535
 800cbbc:	3fe00000 	.word	0x3fe00000
 800cbc0:	000fffff 	.word	0x000fffff
 800cbc4:	7ff00000 	.word	0x7ff00000
 800cbc8:	7fefffff 	.word	0x7fefffff
 800cbcc:	3ff00000 	.word	0x3ff00000
 800cbd0:	3fe00000 	.word	0x3fe00000
 800cbd4:	7fe00000 	.word	0x7fe00000
 800cbd8:	7c9fffff 	.word	0x7c9fffff
 800cbdc:	bff00000 	.word	0xbff00000
 800cbe0:	9b05      	ldr	r3, [sp, #20]
 800cbe2:	b333      	cbz	r3, 800cc32 <_strtod_l+0xb7a>
 800cbe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cbe6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cbea:	d822      	bhi.n	800cc32 <_strtod_l+0xb7a>
 800cbec:	a328      	add	r3, pc, #160	; (adr r3, 800cc90 <_strtod_l+0xbd8>)
 800cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	4639      	mov	r1, r7
 800cbf6:	f7f4 f80b 	bl	8000c10 <__aeabi_dcmple>
 800cbfa:	b1a0      	cbz	r0, 800cc26 <_strtod_l+0xb6e>
 800cbfc:	4639      	mov	r1, r7
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f7f4 f862 	bl	8000cc8 <__aeabi_d2uiz>
 800cc04:	2801      	cmp	r0, #1
 800cc06:	bf38      	it	cc
 800cc08:	2001      	movcc	r0, #1
 800cc0a:	f7f3 fd0b 	bl	8000624 <__aeabi_ui2d>
 800cc0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc10:	4605      	mov	r5, r0
 800cc12:	460f      	mov	r7, r1
 800cc14:	bb03      	cbnz	r3, 800cc58 <_strtod_l+0xba0>
 800cc16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc1a:	9014      	str	r0, [sp, #80]	; 0x50
 800cc1c:	9315      	str	r3, [sp, #84]	; 0x54
 800cc1e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cc22:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800cc26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cc2a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cc2e:	1a9b      	subs	r3, r3, r2
 800cc30:	9311      	str	r3, [sp, #68]	; 0x44
 800cc32:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cc36:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800cc3a:	f7ff f8e9 	bl	800be10 <__ulp>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	4640      	mov	r0, r8
 800cc44:	4649      	mov	r1, r9
 800cc46:	f7f3 fd67 	bl	8000718 <__aeabi_dmul>
 800cc4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc4e:	f7f3 fbad 	bl	80003ac <__adddf3>
 800cc52:	4680      	mov	r8, r0
 800cc54:	4689      	mov	r9, r1
 800cc56:	e774      	b.n	800cb42 <_strtod_l+0xa8a>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800cc60:	e7dd      	b.n	800cc1e <_strtod_l+0xb66>
 800cc62:	a30d      	add	r3, pc, #52	; (adr r3, 800cc98 <_strtod_l+0xbe0>)
 800cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc68:	f7f3 ffc8 	bl	8000bfc <__aeabi_dcmplt>
 800cc6c:	e79b      	b.n	800cba6 <_strtod_l+0xaee>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	930e      	str	r3, [sp, #56]	; 0x38
 800cc72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cc76:	6013      	str	r3, [r2, #0]
 800cc78:	f7ff ba5b 	b.w	800c132 <_strtod_l+0x7a>
 800cc7c:	2a65      	cmp	r2, #101	; 0x65
 800cc7e:	f43f ab52 	beq.w	800c326 <_strtod_l+0x26e>
 800cc82:	2a45      	cmp	r2, #69	; 0x45
 800cc84:	f43f ab4f 	beq.w	800c326 <_strtod_l+0x26e>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	f7ff bb87 	b.w	800c39c <_strtod_l+0x2e4>
 800cc8e:	bf00      	nop
 800cc90:	ffc00000 	.word	0xffc00000
 800cc94:	41dfffff 	.word	0x41dfffff
 800cc98:	94a03595 	.word	0x94a03595
 800cc9c:	3fcfffff 	.word	0x3fcfffff

0800cca0 <_strtod_r>:
 800cca0:	4b01      	ldr	r3, [pc, #4]	; (800cca8 <_strtod_r+0x8>)
 800cca2:	f7ff ba09 	b.w	800c0b8 <_strtod_l>
 800cca6:	bf00      	nop
 800cca8:	20000314 	.word	0x20000314

0800ccac <_strtol_l.constprop.0>:
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb2:	4686      	mov	lr, r0
 800ccb4:	4690      	mov	r8, r2
 800ccb6:	d001      	beq.n	800ccbc <_strtol_l.constprop.0+0x10>
 800ccb8:	2b24      	cmp	r3, #36	; 0x24
 800ccba:	d906      	bls.n	800ccca <_strtol_l.constprop.0+0x1e>
 800ccbc:	f7fd fd64 	bl	800a788 <__errno>
 800ccc0:	2316      	movs	r3, #22
 800ccc2:	6003      	str	r3, [r0, #0]
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccca:	460d      	mov	r5, r1
 800cccc:	4835      	ldr	r0, [pc, #212]	; (800cda4 <_strtol_l.constprop.0+0xf8>)
 800ccce:	462a      	mov	r2, r5
 800ccd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ccd4:	5d06      	ldrb	r6, [r0, r4]
 800ccd6:	f016 0608 	ands.w	r6, r6, #8
 800ccda:	d1f8      	bne.n	800ccce <_strtol_l.constprop.0+0x22>
 800ccdc:	2c2d      	cmp	r4, #45	; 0x2d
 800ccde:	d12e      	bne.n	800cd3e <_strtol_l.constprop.0+0x92>
 800cce0:	2601      	movs	r6, #1
 800cce2:	782c      	ldrb	r4, [r5, #0]
 800cce4:	1c95      	adds	r5, r2, #2
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d057      	beq.n	800cd9a <_strtol_l.constprop.0+0xee>
 800ccea:	2b10      	cmp	r3, #16
 800ccec:	d109      	bne.n	800cd02 <_strtol_l.constprop.0+0x56>
 800ccee:	2c30      	cmp	r4, #48	; 0x30
 800ccf0:	d107      	bne.n	800cd02 <_strtol_l.constprop.0+0x56>
 800ccf2:	782a      	ldrb	r2, [r5, #0]
 800ccf4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ccf8:	2a58      	cmp	r2, #88	; 0x58
 800ccfa:	d149      	bne.n	800cd90 <_strtol_l.constprop.0+0xe4>
 800ccfc:	2310      	movs	r3, #16
 800ccfe:	786c      	ldrb	r4, [r5, #1]
 800cd00:	3502      	adds	r5, #2
 800cd02:	2200      	movs	r2, #0
 800cd04:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800cd08:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cd0c:	fbbc f9f3 	udiv	r9, ip, r3
 800cd10:	4610      	mov	r0, r2
 800cd12:	fb03 ca19 	mls	sl, r3, r9, ip
 800cd16:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800cd1a:	2f09      	cmp	r7, #9
 800cd1c:	d814      	bhi.n	800cd48 <_strtol_l.constprop.0+0x9c>
 800cd1e:	463c      	mov	r4, r7
 800cd20:	42a3      	cmp	r3, r4
 800cd22:	dd20      	ble.n	800cd66 <_strtol_l.constprop.0+0xba>
 800cd24:	1c57      	adds	r7, r2, #1
 800cd26:	d007      	beq.n	800cd38 <_strtol_l.constprop.0+0x8c>
 800cd28:	4581      	cmp	r9, r0
 800cd2a:	d319      	bcc.n	800cd60 <_strtol_l.constprop.0+0xb4>
 800cd2c:	d101      	bne.n	800cd32 <_strtol_l.constprop.0+0x86>
 800cd2e:	45a2      	cmp	sl, r4
 800cd30:	db16      	blt.n	800cd60 <_strtol_l.constprop.0+0xb4>
 800cd32:	2201      	movs	r2, #1
 800cd34:	fb00 4003 	mla	r0, r0, r3, r4
 800cd38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd3c:	e7eb      	b.n	800cd16 <_strtol_l.constprop.0+0x6a>
 800cd3e:	2c2b      	cmp	r4, #43	; 0x2b
 800cd40:	bf04      	itt	eq
 800cd42:	782c      	ldrbeq	r4, [r5, #0]
 800cd44:	1c95      	addeq	r5, r2, #2
 800cd46:	e7ce      	b.n	800cce6 <_strtol_l.constprop.0+0x3a>
 800cd48:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800cd4c:	2f19      	cmp	r7, #25
 800cd4e:	d801      	bhi.n	800cd54 <_strtol_l.constprop.0+0xa8>
 800cd50:	3c37      	subs	r4, #55	; 0x37
 800cd52:	e7e5      	b.n	800cd20 <_strtol_l.constprop.0+0x74>
 800cd54:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800cd58:	2f19      	cmp	r7, #25
 800cd5a:	d804      	bhi.n	800cd66 <_strtol_l.constprop.0+0xba>
 800cd5c:	3c57      	subs	r4, #87	; 0x57
 800cd5e:	e7df      	b.n	800cd20 <_strtol_l.constprop.0+0x74>
 800cd60:	f04f 32ff 	mov.w	r2, #4294967295
 800cd64:	e7e8      	b.n	800cd38 <_strtol_l.constprop.0+0x8c>
 800cd66:	1c53      	adds	r3, r2, #1
 800cd68:	d108      	bne.n	800cd7c <_strtol_l.constprop.0+0xd0>
 800cd6a:	2322      	movs	r3, #34	; 0x22
 800cd6c:	4660      	mov	r0, ip
 800cd6e:	f8ce 3000 	str.w	r3, [lr]
 800cd72:	f1b8 0f00 	cmp.w	r8, #0
 800cd76:	d0a6      	beq.n	800ccc6 <_strtol_l.constprop.0+0x1a>
 800cd78:	1e69      	subs	r1, r5, #1
 800cd7a:	e006      	b.n	800cd8a <_strtol_l.constprop.0+0xde>
 800cd7c:	b106      	cbz	r6, 800cd80 <_strtol_l.constprop.0+0xd4>
 800cd7e:	4240      	negs	r0, r0
 800cd80:	f1b8 0f00 	cmp.w	r8, #0
 800cd84:	d09f      	beq.n	800ccc6 <_strtol_l.constprop.0+0x1a>
 800cd86:	2a00      	cmp	r2, #0
 800cd88:	d1f6      	bne.n	800cd78 <_strtol_l.constprop.0+0xcc>
 800cd8a:	f8c8 1000 	str.w	r1, [r8]
 800cd8e:	e79a      	b.n	800ccc6 <_strtol_l.constprop.0+0x1a>
 800cd90:	2430      	movs	r4, #48	; 0x30
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1b5      	bne.n	800cd02 <_strtol_l.constprop.0+0x56>
 800cd96:	2308      	movs	r3, #8
 800cd98:	e7b3      	b.n	800cd02 <_strtol_l.constprop.0+0x56>
 800cd9a:	2c30      	cmp	r4, #48	; 0x30
 800cd9c:	d0a9      	beq.n	800ccf2 <_strtol_l.constprop.0+0x46>
 800cd9e:	230a      	movs	r3, #10
 800cda0:	e7af      	b.n	800cd02 <_strtol_l.constprop.0+0x56>
 800cda2:	bf00      	nop
 800cda4:	0800f6a9 	.word	0x0800f6a9

0800cda8 <_strtol_r>:
 800cda8:	f7ff bf80 	b.w	800ccac <_strtol_l.constprop.0>

0800cdac <__ssputs_r>:
 800cdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdb0:	461f      	mov	r7, r3
 800cdb2:	688e      	ldr	r6, [r1, #8]
 800cdb4:	4682      	mov	sl, r0
 800cdb6:	42be      	cmp	r6, r7
 800cdb8:	460c      	mov	r4, r1
 800cdba:	4690      	mov	r8, r2
 800cdbc:	680b      	ldr	r3, [r1, #0]
 800cdbe:	d82c      	bhi.n	800ce1a <__ssputs_r+0x6e>
 800cdc0:	898a      	ldrh	r2, [r1, #12]
 800cdc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdc6:	d026      	beq.n	800ce16 <__ssputs_r+0x6a>
 800cdc8:	6965      	ldr	r5, [r4, #20]
 800cdca:	6909      	ldr	r1, [r1, #16]
 800cdcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdd0:	eba3 0901 	sub.w	r9, r3, r1
 800cdd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdd8:	1c7b      	adds	r3, r7, #1
 800cdda:	444b      	add	r3, r9
 800cddc:	106d      	asrs	r5, r5, #1
 800cdde:	429d      	cmp	r5, r3
 800cde0:	bf38      	it	cc
 800cde2:	461d      	movcc	r5, r3
 800cde4:	0553      	lsls	r3, r2, #21
 800cde6:	d527      	bpl.n	800ce38 <__ssputs_r+0x8c>
 800cde8:	4629      	mov	r1, r5
 800cdea:	f7fe fc19 	bl	800b620 <_malloc_r>
 800cdee:	4606      	mov	r6, r0
 800cdf0:	b360      	cbz	r0, 800ce4c <__ssputs_r+0xa0>
 800cdf2:	464a      	mov	r2, r9
 800cdf4:	6921      	ldr	r1, [r4, #16]
 800cdf6:	f7fd fd02 	bl	800a7fe <memcpy>
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce04:	81a3      	strh	r3, [r4, #12]
 800ce06:	6126      	str	r6, [r4, #16]
 800ce08:	444e      	add	r6, r9
 800ce0a:	6026      	str	r6, [r4, #0]
 800ce0c:	463e      	mov	r6, r7
 800ce0e:	6165      	str	r5, [r4, #20]
 800ce10:	eba5 0509 	sub.w	r5, r5, r9
 800ce14:	60a5      	str	r5, [r4, #8]
 800ce16:	42be      	cmp	r6, r7
 800ce18:	d900      	bls.n	800ce1c <__ssputs_r+0x70>
 800ce1a:	463e      	mov	r6, r7
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	4641      	mov	r1, r8
 800ce20:	6820      	ldr	r0, [r4, #0]
 800ce22:	f000 ff3d 	bl	800dca0 <memmove>
 800ce26:	2000      	movs	r0, #0
 800ce28:	68a3      	ldr	r3, [r4, #8]
 800ce2a:	1b9b      	subs	r3, r3, r6
 800ce2c:	60a3      	str	r3, [r4, #8]
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	4433      	add	r3, r6
 800ce32:	6023      	str	r3, [r4, #0]
 800ce34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce38:	462a      	mov	r2, r5
 800ce3a:	f001 fb1c 	bl	800e476 <_realloc_r>
 800ce3e:	4606      	mov	r6, r0
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d1e0      	bne.n	800ce06 <__ssputs_r+0x5a>
 800ce44:	4650      	mov	r0, sl
 800ce46:	6921      	ldr	r1, [r4, #16]
 800ce48:	f7fe fb7a 	bl	800b540 <_free_r>
 800ce4c:	230c      	movs	r3, #12
 800ce4e:	f8ca 3000 	str.w	r3, [sl]
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	f04f 30ff 	mov.w	r0, #4294967295
 800ce58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce5c:	81a3      	strh	r3, [r4, #12]
 800ce5e:	e7e9      	b.n	800ce34 <__ssputs_r+0x88>

0800ce60 <_svfiprintf_r>:
 800ce60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	4698      	mov	r8, r3
 800ce66:	898b      	ldrh	r3, [r1, #12]
 800ce68:	4607      	mov	r7, r0
 800ce6a:	061b      	lsls	r3, r3, #24
 800ce6c:	460d      	mov	r5, r1
 800ce6e:	4614      	mov	r4, r2
 800ce70:	b09d      	sub	sp, #116	; 0x74
 800ce72:	d50e      	bpl.n	800ce92 <_svfiprintf_r+0x32>
 800ce74:	690b      	ldr	r3, [r1, #16]
 800ce76:	b963      	cbnz	r3, 800ce92 <_svfiprintf_r+0x32>
 800ce78:	2140      	movs	r1, #64	; 0x40
 800ce7a:	f7fe fbd1 	bl	800b620 <_malloc_r>
 800ce7e:	6028      	str	r0, [r5, #0]
 800ce80:	6128      	str	r0, [r5, #16]
 800ce82:	b920      	cbnz	r0, 800ce8e <_svfiprintf_r+0x2e>
 800ce84:	230c      	movs	r3, #12
 800ce86:	603b      	str	r3, [r7, #0]
 800ce88:	f04f 30ff 	mov.w	r0, #4294967295
 800ce8c:	e0d0      	b.n	800d030 <_svfiprintf_r+0x1d0>
 800ce8e:	2340      	movs	r3, #64	; 0x40
 800ce90:	616b      	str	r3, [r5, #20]
 800ce92:	2300      	movs	r3, #0
 800ce94:	9309      	str	r3, [sp, #36]	; 0x24
 800ce96:	2320      	movs	r3, #32
 800ce98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce9c:	2330      	movs	r3, #48	; 0x30
 800ce9e:	f04f 0901 	mov.w	r9, #1
 800cea2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cea6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d048 <_svfiprintf_r+0x1e8>
 800ceaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ceae:	4623      	mov	r3, r4
 800ceb0:	469a      	mov	sl, r3
 800ceb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceb6:	b10a      	cbz	r2, 800cebc <_svfiprintf_r+0x5c>
 800ceb8:	2a25      	cmp	r2, #37	; 0x25
 800ceba:	d1f9      	bne.n	800ceb0 <_svfiprintf_r+0x50>
 800cebc:	ebba 0b04 	subs.w	fp, sl, r4
 800cec0:	d00b      	beq.n	800ceda <_svfiprintf_r+0x7a>
 800cec2:	465b      	mov	r3, fp
 800cec4:	4622      	mov	r2, r4
 800cec6:	4629      	mov	r1, r5
 800cec8:	4638      	mov	r0, r7
 800ceca:	f7ff ff6f 	bl	800cdac <__ssputs_r>
 800cece:	3001      	adds	r0, #1
 800ced0:	f000 80a9 	beq.w	800d026 <_svfiprintf_r+0x1c6>
 800ced4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ced6:	445a      	add	r2, fp
 800ced8:	9209      	str	r2, [sp, #36]	; 0x24
 800ceda:	f89a 3000 	ldrb.w	r3, [sl]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 80a1 	beq.w	800d026 <_svfiprintf_r+0x1c6>
 800cee4:	2300      	movs	r3, #0
 800cee6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceee:	f10a 0a01 	add.w	sl, sl, #1
 800cef2:	9304      	str	r3, [sp, #16]
 800cef4:	9307      	str	r3, [sp, #28]
 800cef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cefa:	931a      	str	r3, [sp, #104]	; 0x68
 800cefc:	4654      	mov	r4, sl
 800cefe:	2205      	movs	r2, #5
 800cf00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf04:	4850      	ldr	r0, [pc, #320]	; (800d048 <_svfiprintf_r+0x1e8>)
 800cf06:	f7fd fc6c 	bl	800a7e2 <memchr>
 800cf0a:	9a04      	ldr	r2, [sp, #16]
 800cf0c:	b9d8      	cbnz	r0, 800cf46 <_svfiprintf_r+0xe6>
 800cf0e:	06d0      	lsls	r0, r2, #27
 800cf10:	bf44      	itt	mi
 800cf12:	2320      	movmi	r3, #32
 800cf14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf18:	0711      	lsls	r1, r2, #28
 800cf1a:	bf44      	itt	mi
 800cf1c:	232b      	movmi	r3, #43	; 0x2b
 800cf1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf22:	f89a 3000 	ldrb.w	r3, [sl]
 800cf26:	2b2a      	cmp	r3, #42	; 0x2a
 800cf28:	d015      	beq.n	800cf56 <_svfiprintf_r+0xf6>
 800cf2a:	4654      	mov	r4, sl
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	f04f 0c0a 	mov.w	ip, #10
 800cf32:	9a07      	ldr	r2, [sp, #28]
 800cf34:	4621      	mov	r1, r4
 800cf36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf3a:	3b30      	subs	r3, #48	; 0x30
 800cf3c:	2b09      	cmp	r3, #9
 800cf3e:	d94d      	bls.n	800cfdc <_svfiprintf_r+0x17c>
 800cf40:	b1b0      	cbz	r0, 800cf70 <_svfiprintf_r+0x110>
 800cf42:	9207      	str	r2, [sp, #28]
 800cf44:	e014      	b.n	800cf70 <_svfiprintf_r+0x110>
 800cf46:	eba0 0308 	sub.w	r3, r0, r8
 800cf4a:	fa09 f303 	lsl.w	r3, r9, r3
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	46a2      	mov	sl, r4
 800cf52:	9304      	str	r3, [sp, #16]
 800cf54:	e7d2      	b.n	800cefc <_svfiprintf_r+0x9c>
 800cf56:	9b03      	ldr	r3, [sp, #12]
 800cf58:	1d19      	adds	r1, r3, #4
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	9103      	str	r1, [sp, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	bfbb      	ittet	lt
 800cf62:	425b      	neglt	r3, r3
 800cf64:	f042 0202 	orrlt.w	r2, r2, #2
 800cf68:	9307      	strge	r3, [sp, #28]
 800cf6a:	9307      	strlt	r3, [sp, #28]
 800cf6c:	bfb8      	it	lt
 800cf6e:	9204      	strlt	r2, [sp, #16]
 800cf70:	7823      	ldrb	r3, [r4, #0]
 800cf72:	2b2e      	cmp	r3, #46	; 0x2e
 800cf74:	d10c      	bne.n	800cf90 <_svfiprintf_r+0x130>
 800cf76:	7863      	ldrb	r3, [r4, #1]
 800cf78:	2b2a      	cmp	r3, #42	; 0x2a
 800cf7a:	d134      	bne.n	800cfe6 <_svfiprintf_r+0x186>
 800cf7c:	9b03      	ldr	r3, [sp, #12]
 800cf7e:	3402      	adds	r4, #2
 800cf80:	1d1a      	adds	r2, r3, #4
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	9203      	str	r2, [sp, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	bfb8      	it	lt
 800cf8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf8e:	9305      	str	r3, [sp, #20]
 800cf90:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d04c <_svfiprintf_r+0x1ec>
 800cf94:	2203      	movs	r2, #3
 800cf96:	4650      	mov	r0, sl
 800cf98:	7821      	ldrb	r1, [r4, #0]
 800cf9a:	f7fd fc22 	bl	800a7e2 <memchr>
 800cf9e:	b138      	cbz	r0, 800cfb0 <_svfiprintf_r+0x150>
 800cfa0:	2240      	movs	r2, #64	; 0x40
 800cfa2:	9b04      	ldr	r3, [sp, #16]
 800cfa4:	eba0 000a 	sub.w	r0, r0, sl
 800cfa8:	4082      	lsls	r2, r0
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	3401      	adds	r4, #1
 800cfae:	9304      	str	r3, [sp, #16]
 800cfb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb4:	2206      	movs	r2, #6
 800cfb6:	4826      	ldr	r0, [pc, #152]	; (800d050 <_svfiprintf_r+0x1f0>)
 800cfb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfbc:	f7fd fc11 	bl	800a7e2 <memchr>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d038      	beq.n	800d036 <_svfiprintf_r+0x1d6>
 800cfc4:	4b23      	ldr	r3, [pc, #140]	; (800d054 <_svfiprintf_r+0x1f4>)
 800cfc6:	bb1b      	cbnz	r3, 800d010 <_svfiprintf_r+0x1b0>
 800cfc8:	9b03      	ldr	r3, [sp, #12]
 800cfca:	3307      	adds	r3, #7
 800cfcc:	f023 0307 	bic.w	r3, r3, #7
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	9303      	str	r3, [sp, #12]
 800cfd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd6:	4433      	add	r3, r6
 800cfd8:	9309      	str	r3, [sp, #36]	; 0x24
 800cfda:	e768      	b.n	800ceae <_svfiprintf_r+0x4e>
 800cfdc:	460c      	mov	r4, r1
 800cfde:	2001      	movs	r0, #1
 800cfe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfe4:	e7a6      	b.n	800cf34 <_svfiprintf_r+0xd4>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f04f 0c0a 	mov.w	ip, #10
 800cfec:	4619      	mov	r1, r3
 800cfee:	3401      	adds	r4, #1
 800cff0:	9305      	str	r3, [sp, #20]
 800cff2:	4620      	mov	r0, r4
 800cff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff8:	3a30      	subs	r2, #48	; 0x30
 800cffa:	2a09      	cmp	r2, #9
 800cffc:	d903      	bls.n	800d006 <_svfiprintf_r+0x1a6>
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d0c6      	beq.n	800cf90 <_svfiprintf_r+0x130>
 800d002:	9105      	str	r1, [sp, #20]
 800d004:	e7c4      	b.n	800cf90 <_svfiprintf_r+0x130>
 800d006:	4604      	mov	r4, r0
 800d008:	2301      	movs	r3, #1
 800d00a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d00e:	e7f0      	b.n	800cff2 <_svfiprintf_r+0x192>
 800d010:	ab03      	add	r3, sp, #12
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	462a      	mov	r2, r5
 800d016:	4638      	mov	r0, r7
 800d018:	4b0f      	ldr	r3, [pc, #60]	; (800d058 <_svfiprintf_r+0x1f8>)
 800d01a:	a904      	add	r1, sp, #16
 800d01c:	f7fc faf8 	bl	8009610 <_printf_float>
 800d020:	1c42      	adds	r2, r0, #1
 800d022:	4606      	mov	r6, r0
 800d024:	d1d6      	bne.n	800cfd4 <_svfiprintf_r+0x174>
 800d026:	89ab      	ldrh	r3, [r5, #12]
 800d028:	065b      	lsls	r3, r3, #25
 800d02a:	f53f af2d 	bmi.w	800ce88 <_svfiprintf_r+0x28>
 800d02e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d030:	b01d      	add	sp, #116	; 0x74
 800d032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d036:	ab03      	add	r3, sp, #12
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	462a      	mov	r2, r5
 800d03c:	4638      	mov	r0, r7
 800d03e:	4b06      	ldr	r3, [pc, #24]	; (800d058 <_svfiprintf_r+0x1f8>)
 800d040:	a904      	add	r1, sp, #16
 800d042:	f7fc fd85 	bl	8009b50 <_printf_i>
 800d046:	e7eb      	b.n	800d020 <_svfiprintf_r+0x1c0>
 800d048:	0800f7a9 	.word	0x0800f7a9
 800d04c:	0800f7af 	.word	0x0800f7af
 800d050:	0800f7b3 	.word	0x0800f7b3
 800d054:	08009611 	.word	0x08009611
 800d058:	0800cdad 	.word	0x0800cdad

0800d05c <_sungetc_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	1c4b      	adds	r3, r1, #1
 800d060:	4614      	mov	r4, r2
 800d062:	d103      	bne.n	800d06c <_sungetc_r+0x10>
 800d064:	f04f 35ff 	mov.w	r5, #4294967295
 800d068:	4628      	mov	r0, r5
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	8993      	ldrh	r3, [r2, #12]
 800d06e:	b2cd      	uxtb	r5, r1
 800d070:	f023 0320 	bic.w	r3, r3, #32
 800d074:	8193      	strh	r3, [r2, #12]
 800d076:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d078:	6852      	ldr	r2, [r2, #4]
 800d07a:	b18b      	cbz	r3, 800d0a0 <_sungetc_r+0x44>
 800d07c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d07e:	4293      	cmp	r3, r2
 800d080:	dd08      	ble.n	800d094 <_sungetc_r+0x38>
 800d082:	6823      	ldr	r3, [r4, #0]
 800d084:	1e5a      	subs	r2, r3, #1
 800d086:	6022      	str	r2, [r4, #0]
 800d088:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d08c:	6863      	ldr	r3, [r4, #4]
 800d08e:	3301      	adds	r3, #1
 800d090:	6063      	str	r3, [r4, #4]
 800d092:	e7e9      	b.n	800d068 <_sungetc_r+0xc>
 800d094:	4621      	mov	r1, r4
 800d096:	f000 fdcb 	bl	800dc30 <__submore>
 800d09a:	2800      	cmp	r0, #0
 800d09c:	d0f1      	beq.n	800d082 <_sungetc_r+0x26>
 800d09e:	e7e1      	b.n	800d064 <_sungetc_r+0x8>
 800d0a0:	6921      	ldr	r1, [r4, #16]
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	b151      	cbz	r1, 800d0bc <_sungetc_r+0x60>
 800d0a6:	4299      	cmp	r1, r3
 800d0a8:	d208      	bcs.n	800d0bc <_sungetc_r+0x60>
 800d0aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d0ae:	42a9      	cmp	r1, r5
 800d0b0:	d104      	bne.n	800d0bc <_sungetc_r+0x60>
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	3201      	adds	r2, #1
 800d0b6:	6023      	str	r3, [r4, #0]
 800d0b8:	6062      	str	r2, [r4, #4]
 800d0ba:	e7d5      	b.n	800d068 <_sungetc_r+0xc>
 800d0bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d0c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0c4:	6363      	str	r3, [r4, #52]	; 0x34
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800d0ca:	4623      	mov	r3, r4
 800d0cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d0d0:	6023      	str	r3, [r4, #0]
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e7dc      	b.n	800d090 <_sungetc_r+0x34>

0800d0d6 <__ssrefill_r>:
 800d0d6:	b510      	push	{r4, lr}
 800d0d8:	460c      	mov	r4, r1
 800d0da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d0dc:	b169      	cbz	r1, 800d0fa <__ssrefill_r+0x24>
 800d0de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0e2:	4299      	cmp	r1, r3
 800d0e4:	d001      	beq.n	800d0ea <__ssrefill_r+0x14>
 800d0e6:	f7fe fa2b 	bl	800b540 <_free_r>
 800d0ea:	2000      	movs	r0, #0
 800d0ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0ee:	6360      	str	r0, [r4, #52]	; 0x34
 800d0f0:	6063      	str	r3, [r4, #4]
 800d0f2:	b113      	cbz	r3, 800d0fa <__ssrefill_r+0x24>
 800d0f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d0f6:	6023      	str	r3, [r4, #0]
 800d0f8:	bd10      	pop	{r4, pc}
 800d0fa:	6923      	ldr	r3, [r4, #16]
 800d0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	2300      	movs	r3, #0
 800d104:	6063      	str	r3, [r4, #4]
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	f043 0320 	orr.w	r3, r3, #32
 800d10c:	81a3      	strh	r3, [r4, #12]
 800d10e:	e7f3      	b.n	800d0f8 <__ssrefill_r+0x22>

0800d110 <__ssvfiscanf_r>:
 800d110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d114:	460c      	mov	r4, r1
 800d116:	2100      	movs	r1, #0
 800d118:	4606      	mov	r6, r0
 800d11a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d11e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d122:	49a6      	ldr	r1, [pc, #664]	; (800d3bc <__ssvfiscanf_r+0x2ac>)
 800d124:	f10d 0804 	add.w	r8, sp, #4
 800d128:	91a0      	str	r1, [sp, #640]	; 0x280
 800d12a:	49a5      	ldr	r1, [pc, #660]	; (800d3c0 <__ssvfiscanf_r+0x2b0>)
 800d12c:	4fa5      	ldr	r7, [pc, #660]	; (800d3c4 <__ssvfiscanf_r+0x2b4>)
 800d12e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d3c8 <__ssvfiscanf_r+0x2b8>
 800d132:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d136:	91a1      	str	r1, [sp, #644]	; 0x284
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	7813      	ldrb	r3, [r2, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f000 815a 	beq.w	800d3f6 <__ssvfiscanf_r+0x2e6>
 800d142:	5cf9      	ldrb	r1, [r7, r3]
 800d144:	1c55      	adds	r5, r2, #1
 800d146:	f011 0108 	ands.w	r1, r1, #8
 800d14a:	d019      	beq.n	800d180 <__ssvfiscanf_r+0x70>
 800d14c:	6863      	ldr	r3, [r4, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	dd0f      	ble.n	800d172 <__ssvfiscanf_r+0x62>
 800d152:	6823      	ldr	r3, [r4, #0]
 800d154:	781a      	ldrb	r2, [r3, #0]
 800d156:	5cba      	ldrb	r2, [r7, r2]
 800d158:	0712      	lsls	r2, r2, #28
 800d15a:	d401      	bmi.n	800d160 <__ssvfiscanf_r+0x50>
 800d15c:	462a      	mov	r2, r5
 800d15e:	e7ec      	b.n	800d13a <__ssvfiscanf_r+0x2a>
 800d160:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d162:	3301      	adds	r3, #1
 800d164:	3201      	adds	r2, #1
 800d166:	9245      	str	r2, [sp, #276]	; 0x114
 800d168:	6862      	ldr	r2, [r4, #4]
 800d16a:	6023      	str	r3, [r4, #0]
 800d16c:	3a01      	subs	r2, #1
 800d16e:	6062      	str	r2, [r4, #4]
 800d170:	e7ec      	b.n	800d14c <__ssvfiscanf_r+0x3c>
 800d172:	4621      	mov	r1, r4
 800d174:	4630      	mov	r0, r6
 800d176:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d178:	4798      	blx	r3
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d0e9      	beq.n	800d152 <__ssvfiscanf_r+0x42>
 800d17e:	e7ed      	b.n	800d15c <__ssvfiscanf_r+0x4c>
 800d180:	2b25      	cmp	r3, #37	; 0x25
 800d182:	d012      	beq.n	800d1aa <__ssvfiscanf_r+0x9a>
 800d184:	469a      	mov	sl, r3
 800d186:	6863      	ldr	r3, [r4, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f340 8092 	ble.w	800d2b2 <__ssvfiscanf_r+0x1a2>
 800d18e:	6822      	ldr	r2, [r4, #0]
 800d190:	7813      	ldrb	r3, [r2, #0]
 800d192:	4553      	cmp	r3, sl
 800d194:	f040 812f 	bne.w	800d3f6 <__ssvfiscanf_r+0x2e6>
 800d198:	6863      	ldr	r3, [r4, #4]
 800d19a:	3201      	adds	r2, #1
 800d19c:	3b01      	subs	r3, #1
 800d19e:	6063      	str	r3, [r4, #4]
 800d1a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d1a2:	6022      	str	r2, [r4, #0]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	9345      	str	r3, [sp, #276]	; 0x114
 800d1a8:	e7d8      	b.n	800d15c <__ssvfiscanf_r+0x4c>
 800d1aa:	9141      	str	r1, [sp, #260]	; 0x104
 800d1ac:	9143      	str	r1, [sp, #268]	; 0x10c
 800d1ae:	7853      	ldrb	r3, [r2, #1]
 800d1b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d1b2:	bf04      	itt	eq
 800d1b4:	2310      	moveq	r3, #16
 800d1b6:	1c95      	addeq	r5, r2, #2
 800d1b8:	f04f 020a 	mov.w	r2, #10
 800d1bc:	bf08      	it	eq
 800d1be:	9341      	streq	r3, [sp, #260]	; 0x104
 800d1c0:	46aa      	mov	sl, r5
 800d1c2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d1c6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d1ca:	2b09      	cmp	r3, #9
 800d1cc:	d91c      	bls.n	800d208 <__ssvfiscanf_r+0xf8>
 800d1ce:	2203      	movs	r2, #3
 800d1d0:	487d      	ldr	r0, [pc, #500]	; (800d3c8 <__ssvfiscanf_r+0x2b8>)
 800d1d2:	f7fd fb06 	bl	800a7e2 <memchr>
 800d1d6:	b138      	cbz	r0, 800d1e8 <__ssvfiscanf_r+0xd8>
 800d1d8:	2301      	movs	r3, #1
 800d1da:	4655      	mov	r5, sl
 800d1dc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d1de:	eba0 0009 	sub.w	r0, r0, r9
 800d1e2:	4083      	lsls	r3, r0
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	9341      	str	r3, [sp, #260]	; 0x104
 800d1e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d1ec:	2b78      	cmp	r3, #120	; 0x78
 800d1ee:	d806      	bhi.n	800d1fe <__ssvfiscanf_r+0xee>
 800d1f0:	2b57      	cmp	r3, #87	; 0x57
 800d1f2:	d810      	bhi.n	800d216 <__ssvfiscanf_r+0x106>
 800d1f4:	2b25      	cmp	r3, #37	; 0x25
 800d1f6:	d0c5      	beq.n	800d184 <__ssvfiscanf_r+0x74>
 800d1f8:	d856      	bhi.n	800d2a8 <__ssvfiscanf_r+0x198>
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d064      	beq.n	800d2c8 <__ssvfiscanf_r+0x1b8>
 800d1fe:	2303      	movs	r3, #3
 800d200:	9347      	str	r3, [sp, #284]	; 0x11c
 800d202:	230a      	movs	r3, #10
 800d204:	9342      	str	r3, [sp, #264]	; 0x108
 800d206:	e075      	b.n	800d2f4 <__ssvfiscanf_r+0x1e4>
 800d208:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d20a:	4655      	mov	r5, sl
 800d20c:	fb02 1103 	mla	r1, r2, r3, r1
 800d210:	3930      	subs	r1, #48	; 0x30
 800d212:	9143      	str	r1, [sp, #268]	; 0x10c
 800d214:	e7d4      	b.n	800d1c0 <__ssvfiscanf_r+0xb0>
 800d216:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d21a:	2a20      	cmp	r2, #32
 800d21c:	d8ef      	bhi.n	800d1fe <__ssvfiscanf_r+0xee>
 800d21e:	a101      	add	r1, pc, #4	; (adr r1, 800d224 <__ssvfiscanf_r+0x114>)
 800d220:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d224:	0800d2d7 	.word	0x0800d2d7
 800d228:	0800d1ff 	.word	0x0800d1ff
 800d22c:	0800d1ff 	.word	0x0800d1ff
 800d230:	0800d335 	.word	0x0800d335
 800d234:	0800d1ff 	.word	0x0800d1ff
 800d238:	0800d1ff 	.word	0x0800d1ff
 800d23c:	0800d1ff 	.word	0x0800d1ff
 800d240:	0800d1ff 	.word	0x0800d1ff
 800d244:	0800d1ff 	.word	0x0800d1ff
 800d248:	0800d1ff 	.word	0x0800d1ff
 800d24c:	0800d1ff 	.word	0x0800d1ff
 800d250:	0800d34b 	.word	0x0800d34b
 800d254:	0800d331 	.word	0x0800d331
 800d258:	0800d2af 	.word	0x0800d2af
 800d25c:	0800d2af 	.word	0x0800d2af
 800d260:	0800d2af 	.word	0x0800d2af
 800d264:	0800d1ff 	.word	0x0800d1ff
 800d268:	0800d2ed 	.word	0x0800d2ed
 800d26c:	0800d1ff 	.word	0x0800d1ff
 800d270:	0800d1ff 	.word	0x0800d1ff
 800d274:	0800d1ff 	.word	0x0800d1ff
 800d278:	0800d1ff 	.word	0x0800d1ff
 800d27c:	0800d35b 	.word	0x0800d35b
 800d280:	0800d329 	.word	0x0800d329
 800d284:	0800d2cf 	.word	0x0800d2cf
 800d288:	0800d1ff 	.word	0x0800d1ff
 800d28c:	0800d1ff 	.word	0x0800d1ff
 800d290:	0800d357 	.word	0x0800d357
 800d294:	0800d1ff 	.word	0x0800d1ff
 800d298:	0800d331 	.word	0x0800d331
 800d29c:	0800d1ff 	.word	0x0800d1ff
 800d2a0:	0800d1ff 	.word	0x0800d1ff
 800d2a4:	0800d2d7 	.word	0x0800d2d7
 800d2a8:	3b45      	subs	r3, #69	; 0x45
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d8a7      	bhi.n	800d1fe <__ssvfiscanf_r+0xee>
 800d2ae:	2305      	movs	r3, #5
 800d2b0:	e01f      	b.n	800d2f2 <__ssvfiscanf_r+0x1e2>
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	4630      	mov	r0, r6
 800d2b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d2b8:	4798      	blx	r3
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	f43f af67 	beq.w	800d18e <__ssvfiscanf_r+0x7e>
 800d2c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	f040 808d 	bne.w	800d3e2 <__ssvfiscanf_r+0x2d2>
 800d2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2cc:	e08f      	b.n	800d3ee <__ssvfiscanf_r+0x2de>
 800d2ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d2d0:	f042 0220 	orr.w	r2, r2, #32
 800d2d4:	9241      	str	r2, [sp, #260]	; 0x104
 800d2d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d2d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2dc:	9241      	str	r2, [sp, #260]	; 0x104
 800d2de:	2210      	movs	r2, #16
 800d2e0:	2b6f      	cmp	r3, #111	; 0x6f
 800d2e2:	bf34      	ite	cc
 800d2e4:	2303      	movcc	r3, #3
 800d2e6:	2304      	movcs	r3, #4
 800d2e8:	9242      	str	r2, [sp, #264]	; 0x108
 800d2ea:	e002      	b.n	800d2f2 <__ssvfiscanf_r+0x1e2>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9342      	str	r3, [sp, #264]	; 0x108
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	9347      	str	r3, [sp, #284]	; 0x11c
 800d2f4:	6863      	ldr	r3, [r4, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	dd3d      	ble.n	800d376 <__ssvfiscanf_r+0x266>
 800d2fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d2fc:	0659      	lsls	r1, r3, #25
 800d2fe:	d404      	bmi.n	800d30a <__ssvfiscanf_r+0x1fa>
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	781a      	ldrb	r2, [r3, #0]
 800d304:	5cba      	ldrb	r2, [r7, r2]
 800d306:	0712      	lsls	r2, r2, #28
 800d308:	d43c      	bmi.n	800d384 <__ssvfiscanf_r+0x274>
 800d30a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d30c:	2b02      	cmp	r3, #2
 800d30e:	dc4b      	bgt.n	800d3a8 <__ssvfiscanf_r+0x298>
 800d310:	466b      	mov	r3, sp
 800d312:	4622      	mov	r2, r4
 800d314:	4630      	mov	r0, r6
 800d316:	a941      	add	r1, sp, #260	; 0x104
 800d318:	f000 f9b4 	bl	800d684 <_scanf_chars>
 800d31c:	2801      	cmp	r0, #1
 800d31e:	d06a      	beq.n	800d3f6 <__ssvfiscanf_r+0x2e6>
 800d320:	2802      	cmp	r0, #2
 800d322:	f47f af1b 	bne.w	800d15c <__ssvfiscanf_r+0x4c>
 800d326:	e7cb      	b.n	800d2c0 <__ssvfiscanf_r+0x1b0>
 800d328:	2308      	movs	r3, #8
 800d32a:	9342      	str	r3, [sp, #264]	; 0x108
 800d32c:	2304      	movs	r3, #4
 800d32e:	e7e0      	b.n	800d2f2 <__ssvfiscanf_r+0x1e2>
 800d330:	220a      	movs	r2, #10
 800d332:	e7d5      	b.n	800d2e0 <__ssvfiscanf_r+0x1d0>
 800d334:	4629      	mov	r1, r5
 800d336:	4640      	mov	r0, r8
 800d338:	f000 fc41 	bl	800dbbe <__sccl>
 800d33c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d33e:	4605      	mov	r5, r0
 800d340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d344:	9341      	str	r3, [sp, #260]	; 0x104
 800d346:	2301      	movs	r3, #1
 800d348:	e7d3      	b.n	800d2f2 <__ssvfiscanf_r+0x1e2>
 800d34a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d350:	9341      	str	r3, [sp, #260]	; 0x104
 800d352:	2300      	movs	r3, #0
 800d354:	e7cd      	b.n	800d2f2 <__ssvfiscanf_r+0x1e2>
 800d356:	2302      	movs	r3, #2
 800d358:	e7cb      	b.n	800d2f2 <__ssvfiscanf_r+0x1e2>
 800d35a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d35c:	06c3      	lsls	r3, r0, #27
 800d35e:	f53f aefd 	bmi.w	800d15c <__ssvfiscanf_r+0x4c>
 800d362:	9b00      	ldr	r3, [sp, #0]
 800d364:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d366:	1d19      	adds	r1, r3, #4
 800d368:	9100      	str	r1, [sp, #0]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	07c0      	lsls	r0, r0, #31
 800d36e:	bf4c      	ite	mi
 800d370:	801a      	strhmi	r2, [r3, #0]
 800d372:	601a      	strpl	r2, [r3, #0]
 800d374:	e6f2      	b.n	800d15c <__ssvfiscanf_r+0x4c>
 800d376:	4621      	mov	r1, r4
 800d378:	4630      	mov	r0, r6
 800d37a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d37c:	4798      	blx	r3
 800d37e:	2800      	cmp	r0, #0
 800d380:	d0bb      	beq.n	800d2fa <__ssvfiscanf_r+0x1ea>
 800d382:	e79d      	b.n	800d2c0 <__ssvfiscanf_r+0x1b0>
 800d384:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d386:	3201      	adds	r2, #1
 800d388:	9245      	str	r2, [sp, #276]	; 0x114
 800d38a:	6862      	ldr	r2, [r4, #4]
 800d38c:	3a01      	subs	r2, #1
 800d38e:	2a00      	cmp	r2, #0
 800d390:	6062      	str	r2, [r4, #4]
 800d392:	dd02      	ble.n	800d39a <__ssvfiscanf_r+0x28a>
 800d394:	3301      	adds	r3, #1
 800d396:	6023      	str	r3, [r4, #0]
 800d398:	e7b2      	b.n	800d300 <__ssvfiscanf_r+0x1f0>
 800d39a:	4621      	mov	r1, r4
 800d39c:	4630      	mov	r0, r6
 800d39e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d3a0:	4798      	blx	r3
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d0ac      	beq.n	800d300 <__ssvfiscanf_r+0x1f0>
 800d3a6:	e78b      	b.n	800d2c0 <__ssvfiscanf_r+0x1b0>
 800d3a8:	2b04      	cmp	r3, #4
 800d3aa:	dc0f      	bgt.n	800d3cc <__ssvfiscanf_r+0x2bc>
 800d3ac:	466b      	mov	r3, sp
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	a941      	add	r1, sp, #260	; 0x104
 800d3b4:	f000 f9c0 	bl	800d738 <_scanf_i>
 800d3b8:	e7b0      	b.n	800d31c <__ssvfiscanf_r+0x20c>
 800d3ba:	bf00      	nop
 800d3bc:	0800d05d 	.word	0x0800d05d
 800d3c0:	0800d0d7 	.word	0x0800d0d7
 800d3c4:	0800f6a9 	.word	0x0800f6a9
 800d3c8:	0800f7af 	.word	0x0800f7af
 800d3cc:	4b0b      	ldr	r3, [pc, #44]	; (800d3fc <__ssvfiscanf_r+0x2ec>)
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f43f aec4 	beq.w	800d15c <__ssvfiscanf_r+0x4c>
 800d3d4:	466b      	mov	r3, sp
 800d3d6:	4622      	mov	r2, r4
 800d3d8:	4630      	mov	r0, r6
 800d3da:	a941      	add	r1, sp, #260	; 0x104
 800d3dc:	f7fc fcda 	bl	8009d94 <_scanf_float>
 800d3e0:	e79c      	b.n	800d31c <__ssvfiscanf_r+0x20c>
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d3e8:	bf18      	it	ne
 800d3ea:	f04f 30ff 	movne.w	r0, #4294967295
 800d3ee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d3f8:	e7f9      	b.n	800d3ee <__ssvfiscanf_r+0x2de>
 800d3fa:	bf00      	nop
 800d3fc:	08009d95 	.word	0x08009d95

0800d400 <__sfputc_r>:
 800d400:	6893      	ldr	r3, [r2, #8]
 800d402:	b410      	push	{r4}
 800d404:	3b01      	subs	r3, #1
 800d406:	2b00      	cmp	r3, #0
 800d408:	6093      	str	r3, [r2, #8]
 800d40a:	da07      	bge.n	800d41c <__sfputc_r+0x1c>
 800d40c:	6994      	ldr	r4, [r2, #24]
 800d40e:	42a3      	cmp	r3, r4
 800d410:	db01      	blt.n	800d416 <__sfputc_r+0x16>
 800d412:	290a      	cmp	r1, #10
 800d414:	d102      	bne.n	800d41c <__sfputc_r+0x1c>
 800d416:	bc10      	pop	{r4}
 800d418:	f7fd b8ca 	b.w	800a5b0 <__swbuf_r>
 800d41c:	6813      	ldr	r3, [r2, #0]
 800d41e:	1c58      	adds	r0, r3, #1
 800d420:	6010      	str	r0, [r2, #0]
 800d422:	7019      	strb	r1, [r3, #0]
 800d424:	4608      	mov	r0, r1
 800d426:	bc10      	pop	{r4}
 800d428:	4770      	bx	lr

0800d42a <__sfputs_r>:
 800d42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42c:	4606      	mov	r6, r0
 800d42e:	460f      	mov	r7, r1
 800d430:	4614      	mov	r4, r2
 800d432:	18d5      	adds	r5, r2, r3
 800d434:	42ac      	cmp	r4, r5
 800d436:	d101      	bne.n	800d43c <__sfputs_r+0x12>
 800d438:	2000      	movs	r0, #0
 800d43a:	e007      	b.n	800d44c <__sfputs_r+0x22>
 800d43c:	463a      	mov	r2, r7
 800d43e:	4630      	mov	r0, r6
 800d440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d444:	f7ff ffdc 	bl	800d400 <__sfputc_r>
 800d448:	1c43      	adds	r3, r0, #1
 800d44a:	d1f3      	bne.n	800d434 <__sfputs_r+0xa>
 800d44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d450 <_vfiprintf_r>:
 800d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d454:	460d      	mov	r5, r1
 800d456:	4614      	mov	r4, r2
 800d458:	4698      	mov	r8, r3
 800d45a:	4606      	mov	r6, r0
 800d45c:	b09d      	sub	sp, #116	; 0x74
 800d45e:	b118      	cbz	r0, 800d468 <_vfiprintf_r+0x18>
 800d460:	6a03      	ldr	r3, [r0, #32]
 800d462:	b90b      	cbnz	r3, 800d468 <_vfiprintf_r+0x18>
 800d464:	f7fc ff30 	bl	800a2c8 <__sinit>
 800d468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d46a:	07d9      	lsls	r1, r3, #31
 800d46c:	d405      	bmi.n	800d47a <_vfiprintf_r+0x2a>
 800d46e:	89ab      	ldrh	r3, [r5, #12]
 800d470:	059a      	lsls	r2, r3, #22
 800d472:	d402      	bmi.n	800d47a <_vfiprintf_r+0x2a>
 800d474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d476:	f7fd f9b2 	bl	800a7de <__retarget_lock_acquire_recursive>
 800d47a:	89ab      	ldrh	r3, [r5, #12]
 800d47c:	071b      	lsls	r3, r3, #28
 800d47e:	d501      	bpl.n	800d484 <_vfiprintf_r+0x34>
 800d480:	692b      	ldr	r3, [r5, #16]
 800d482:	b99b      	cbnz	r3, 800d4ac <_vfiprintf_r+0x5c>
 800d484:	4629      	mov	r1, r5
 800d486:	4630      	mov	r0, r6
 800d488:	f7fd f8d0 	bl	800a62c <__swsetup_r>
 800d48c:	b170      	cbz	r0, 800d4ac <_vfiprintf_r+0x5c>
 800d48e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d490:	07dc      	lsls	r4, r3, #31
 800d492:	d504      	bpl.n	800d49e <_vfiprintf_r+0x4e>
 800d494:	f04f 30ff 	mov.w	r0, #4294967295
 800d498:	b01d      	add	sp, #116	; 0x74
 800d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49e:	89ab      	ldrh	r3, [r5, #12]
 800d4a0:	0598      	lsls	r0, r3, #22
 800d4a2:	d4f7      	bmi.n	800d494 <_vfiprintf_r+0x44>
 800d4a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4a6:	f7fd f99b 	bl	800a7e0 <__retarget_lock_release_recursive>
 800d4aa:	e7f3      	b.n	800d494 <_vfiprintf_r+0x44>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d4b0:	2320      	movs	r3, #32
 800d4b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4b6:	2330      	movs	r3, #48	; 0x30
 800d4b8:	f04f 0901 	mov.w	r9, #1
 800d4bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d670 <_vfiprintf_r+0x220>
 800d4c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4c8:	4623      	mov	r3, r4
 800d4ca:	469a      	mov	sl, r3
 800d4cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4d0:	b10a      	cbz	r2, 800d4d6 <_vfiprintf_r+0x86>
 800d4d2:	2a25      	cmp	r2, #37	; 0x25
 800d4d4:	d1f9      	bne.n	800d4ca <_vfiprintf_r+0x7a>
 800d4d6:	ebba 0b04 	subs.w	fp, sl, r4
 800d4da:	d00b      	beq.n	800d4f4 <_vfiprintf_r+0xa4>
 800d4dc:	465b      	mov	r3, fp
 800d4de:	4622      	mov	r2, r4
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	4630      	mov	r0, r6
 800d4e4:	f7ff ffa1 	bl	800d42a <__sfputs_r>
 800d4e8:	3001      	adds	r0, #1
 800d4ea:	f000 80a9 	beq.w	800d640 <_vfiprintf_r+0x1f0>
 800d4ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4f0:	445a      	add	r2, fp
 800d4f2:	9209      	str	r2, [sp, #36]	; 0x24
 800d4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f000 80a1 	beq.w	800d640 <_vfiprintf_r+0x1f0>
 800d4fe:	2300      	movs	r3, #0
 800d500:	f04f 32ff 	mov.w	r2, #4294967295
 800d504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d508:	f10a 0a01 	add.w	sl, sl, #1
 800d50c:	9304      	str	r3, [sp, #16]
 800d50e:	9307      	str	r3, [sp, #28]
 800d510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d514:	931a      	str	r3, [sp, #104]	; 0x68
 800d516:	4654      	mov	r4, sl
 800d518:	2205      	movs	r2, #5
 800d51a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d51e:	4854      	ldr	r0, [pc, #336]	; (800d670 <_vfiprintf_r+0x220>)
 800d520:	f7fd f95f 	bl	800a7e2 <memchr>
 800d524:	9a04      	ldr	r2, [sp, #16]
 800d526:	b9d8      	cbnz	r0, 800d560 <_vfiprintf_r+0x110>
 800d528:	06d1      	lsls	r1, r2, #27
 800d52a:	bf44      	itt	mi
 800d52c:	2320      	movmi	r3, #32
 800d52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d532:	0713      	lsls	r3, r2, #28
 800d534:	bf44      	itt	mi
 800d536:	232b      	movmi	r3, #43	; 0x2b
 800d538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d53c:	f89a 3000 	ldrb.w	r3, [sl]
 800d540:	2b2a      	cmp	r3, #42	; 0x2a
 800d542:	d015      	beq.n	800d570 <_vfiprintf_r+0x120>
 800d544:	4654      	mov	r4, sl
 800d546:	2000      	movs	r0, #0
 800d548:	f04f 0c0a 	mov.w	ip, #10
 800d54c:	9a07      	ldr	r2, [sp, #28]
 800d54e:	4621      	mov	r1, r4
 800d550:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d554:	3b30      	subs	r3, #48	; 0x30
 800d556:	2b09      	cmp	r3, #9
 800d558:	d94d      	bls.n	800d5f6 <_vfiprintf_r+0x1a6>
 800d55a:	b1b0      	cbz	r0, 800d58a <_vfiprintf_r+0x13a>
 800d55c:	9207      	str	r2, [sp, #28]
 800d55e:	e014      	b.n	800d58a <_vfiprintf_r+0x13a>
 800d560:	eba0 0308 	sub.w	r3, r0, r8
 800d564:	fa09 f303 	lsl.w	r3, r9, r3
 800d568:	4313      	orrs	r3, r2
 800d56a:	46a2      	mov	sl, r4
 800d56c:	9304      	str	r3, [sp, #16]
 800d56e:	e7d2      	b.n	800d516 <_vfiprintf_r+0xc6>
 800d570:	9b03      	ldr	r3, [sp, #12]
 800d572:	1d19      	adds	r1, r3, #4
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	9103      	str	r1, [sp, #12]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	bfbb      	ittet	lt
 800d57c:	425b      	neglt	r3, r3
 800d57e:	f042 0202 	orrlt.w	r2, r2, #2
 800d582:	9307      	strge	r3, [sp, #28]
 800d584:	9307      	strlt	r3, [sp, #28]
 800d586:	bfb8      	it	lt
 800d588:	9204      	strlt	r2, [sp, #16]
 800d58a:	7823      	ldrb	r3, [r4, #0]
 800d58c:	2b2e      	cmp	r3, #46	; 0x2e
 800d58e:	d10c      	bne.n	800d5aa <_vfiprintf_r+0x15a>
 800d590:	7863      	ldrb	r3, [r4, #1]
 800d592:	2b2a      	cmp	r3, #42	; 0x2a
 800d594:	d134      	bne.n	800d600 <_vfiprintf_r+0x1b0>
 800d596:	9b03      	ldr	r3, [sp, #12]
 800d598:	3402      	adds	r4, #2
 800d59a:	1d1a      	adds	r2, r3, #4
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	9203      	str	r2, [sp, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	bfb8      	it	lt
 800d5a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5a8:	9305      	str	r3, [sp, #20]
 800d5aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d674 <_vfiprintf_r+0x224>
 800d5ae:	2203      	movs	r2, #3
 800d5b0:	4650      	mov	r0, sl
 800d5b2:	7821      	ldrb	r1, [r4, #0]
 800d5b4:	f7fd f915 	bl	800a7e2 <memchr>
 800d5b8:	b138      	cbz	r0, 800d5ca <_vfiprintf_r+0x17a>
 800d5ba:	2240      	movs	r2, #64	; 0x40
 800d5bc:	9b04      	ldr	r3, [sp, #16]
 800d5be:	eba0 000a 	sub.w	r0, r0, sl
 800d5c2:	4082      	lsls	r2, r0
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	3401      	adds	r4, #1
 800d5c8:	9304      	str	r3, [sp, #16]
 800d5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ce:	2206      	movs	r2, #6
 800d5d0:	4829      	ldr	r0, [pc, #164]	; (800d678 <_vfiprintf_r+0x228>)
 800d5d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5d6:	f7fd f904 	bl	800a7e2 <memchr>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d03f      	beq.n	800d65e <_vfiprintf_r+0x20e>
 800d5de:	4b27      	ldr	r3, [pc, #156]	; (800d67c <_vfiprintf_r+0x22c>)
 800d5e0:	bb1b      	cbnz	r3, 800d62a <_vfiprintf_r+0x1da>
 800d5e2:	9b03      	ldr	r3, [sp, #12]
 800d5e4:	3307      	adds	r3, #7
 800d5e6:	f023 0307 	bic.w	r3, r3, #7
 800d5ea:	3308      	adds	r3, #8
 800d5ec:	9303      	str	r3, [sp, #12]
 800d5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5f0:	443b      	add	r3, r7
 800d5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5f4:	e768      	b.n	800d4c8 <_vfiprintf_r+0x78>
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	2001      	movs	r0, #1
 800d5fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5fe:	e7a6      	b.n	800d54e <_vfiprintf_r+0xfe>
 800d600:	2300      	movs	r3, #0
 800d602:	f04f 0c0a 	mov.w	ip, #10
 800d606:	4619      	mov	r1, r3
 800d608:	3401      	adds	r4, #1
 800d60a:	9305      	str	r3, [sp, #20]
 800d60c:	4620      	mov	r0, r4
 800d60e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d612:	3a30      	subs	r2, #48	; 0x30
 800d614:	2a09      	cmp	r2, #9
 800d616:	d903      	bls.n	800d620 <_vfiprintf_r+0x1d0>
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d0c6      	beq.n	800d5aa <_vfiprintf_r+0x15a>
 800d61c:	9105      	str	r1, [sp, #20]
 800d61e:	e7c4      	b.n	800d5aa <_vfiprintf_r+0x15a>
 800d620:	4604      	mov	r4, r0
 800d622:	2301      	movs	r3, #1
 800d624:	fb0c 2101 	mla	r1, ip, r1, r2
 800d628:	e7f0      	b.n	800d60c <_vfiprintf_r+0x1bc>
 800d62a:	ab03      	add	r3, sp, #12
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	462a      	mov	r2, r5
 800d630:	4630      	mov	r0, r6
 800d632:	4b13      	ldr	r3, [pc, #76]	; (800d680 <_vfiprintf_r+0x230>)
 800d634:	a904      	add	r1, sp, #16
 800d636:	f7fb ffeb 	bl	8009610 <_printf_float>
 800d63a:	4607      	mov	r7, r0
 800d63c:	1c78      	adds	r0, r7, #1
 800d63e:	d1d6      	bne.n	800d5ee <_vfiprintf_r+0x19e>
 800d640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d642:	07d9      	lsls	r1, r3, #31
 800d644:	d405      	bmi.n	800d652 <_vfiprintf_r+0x202>
 800d646:	89ab      	ldrh	r3, [r5, #12]
 800d648:	059a      	lsls	r2, r3, #22
 800d64a:	d402      	bmi.n	800d652 <_vfiprintf_r+0x202>
 800d64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d64e:	f7fd f8c7 	bl	800a7e0 <__retarget_lock_release_recursive>
 800d652:	89ab      	ldrh	r3, [r5, #12]
 800d654:	065b      	lsls	r3, r3, #25
 800d656:	f53f af1d 	bmi.w	800d494 <_vfiprintf_r+0x44>
 800d65a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d65c:	e71c      	b.n	800d498 <_vfiprintf_r+0x48>
 800d65e:	ab03      	add	r3, sp, #12
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	462a      	mov	r2, r5
 800d664:	4630      	mov	r0, r6
 800d666:	4b06      	ldr	r3, [pc, #24]	; (800d680 <_vfiprintf_r+0x230>)
 800d668:	a904      	add	r1, sp, #16
 800d66a:	f7fc fa71 	bl	8009b50 <_printf_i>
 800d66e:	e7e4      	b.n	800d63a <_vfiprintf_r+0x1ea>
 800d670:	0800f7a9 	.word	0x0800f7a9
 800d674:	0800f7af 	.word	0x0800f7af
 800d678:	0800f7b3 	.word	0x0800f7b3
 800d67c:	08009611 	.word	0x08009611
 800d680:	0800d42b 	.word	0x0800d42b

0800d684 <_scanf_chars>:
 800d684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d688:	4615      	mov	r5, r2
 800d68a:	688a      	ldr	r2, [r1, #8]
 800d68c:	4680      	mov	r8, r0
 800d68e:	460c      	mov	r4, r1
 800d690:	b932      	cbnz	r2, 800d6a0 <_scanf_chars+0x1c>
 800d692:	698a      	ldr	r2, [r1, #24]
 800d694:	2a00      	cmp	r2, #0
 800d696:	bf0c      	ite	eq
 800d698:	2201      	moveq	r2, #1
 800d69a:	f04f 32ff 	movne.w	r2, #4294967295
 800d69e:	608a      	str	r2, [r1, #8]
 800d6a0:	2700      	movs	r7, #0
 800d6a2:	6822      	ldr	r2, [r4, #0]
 800d6a4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d734 <_scanf_chars+0xb0>
 800d6a8:	06d1      	lsls	r1, r2, #27
 800d6aa:	bf5f      	itttt	pl
 800d6ac:	681a      	ldrpl	r2, [r3, #0]
 800d6ae:	1d11      	addpl	r1, r2, #4
 800d6b0:	6019      	strpl	r1, [r3, #0]
 800d6b2:	6816      	ldrpl	r6, [r2, #0]
 800d6b4:	69a0      	ldr	r0, [r4, #24]
 800d6b6:	b188      	cbz	r0, 800d6dc <_scanf_chars+0x58>
 800d6b8:	2801      	cmp	r0, #1
 800d6ba:	d107      	bne.n	800d6cc <_scanf_chars+0x48>
 800d6bc:	682b      	ldr	r3, [r5, #0]
 800d6be:	781a      	ldrb	r2, [r3, #0]
 800d6c0:	6963      	ldr	r3, [r4, #20]
 800d6c2:	5c9b      	ldrb	r3, [r3, r2]
 800d6c4:	b953      	cbnz	r3, 800d6dc <_scanf_chars+0x58>
 800d6c6:	2f00      	cmp	r7, #0
 800d6c8:	d031      	beq.n	800d72e <_scanf_chars+0xaa>
 800d6ca:	e022      	b.n	800d712 <_scanf_chars+0x8e>
 800d6cc:	2802      	cmp	r0, #2
 800d6ce:	d120      	bne.n	800d712 <_scanf_chars+0x8e>
 800d6d0:	682b      	ldr	r3, [r5, #0]
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d6d8:	071b      	lsls	r3, r3, #28
 800d6da:	d41a      	bmi.n	800d712 <_scanf_chars+0x8e>
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	3701      	adds	r7, #1
 800d6e0:	06da      	lsls	r2, r3, #27
 800d6e2:	bf5e      	ittt	pl
 800d6e4:	682b      	ldrpl	r3, [r5, #0]
 800d6e6:	781b      	ldrbpl	r3, [r3, #0]
 800d6e8:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d6ec:	682a      	ldr	r2, [r5, #0]
 800d6ee:	686b      	ldr	r3, [r5, #4]
 800d6f0:	3201      	adds	r2, #1
 800d6f2:	602a      	str	r2, [r5, #0]
 800d6f4:	68a2      	ldr	r2, [r4, #8]
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	3a01      	subs	r2, #1
 800d6fa:	606b      	str	r3, [r5, #4]
 800d6fc:	60a2      	str	r2, [r4, #8]
 800d6fe:	b142      	cbz	r2, 800d712 <_scanf_chars+0x8e>
 800d700:	2b00      	cmp	r3, #0
 800d702:	dcd7      	bgt.n	800d6b4 <_scanf_chars+0x30>
 800d704:	4629      	mov	r1, r5
 800d706:	4640      	mov	r0, r8
 800d708:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d70c:	4798      	blx	r3
 800d70e:	2800      	cmp	r0, #0
 800d710:	d0d0      	beq.n	800d6b4 <_scanf_chars+0x30>
 800d712:	6823      	ldr	r3, [r4, #0]
 800d714:	f013 0310 	ands.w	r3, r3, #16
 800d718:	d105      	bne.n	800d726 <_scanf_chars+0xa2>
 800d71a:	68e2      	ldr	r2, [r4, #12]
 800d71c:	3201      	adds	r2, #1
 800d71e:	60e2      	str	r2, [r4, #12]
 800d720:	69a2      	ldr	r2, [r4, #24]
 800d722:	b102      	cbz	r2, 800d726 <_scanf_chars+0xa2>
 800d724:	7033      	strb	r3, [r6, #0]
 800d726:	2000      	movs	r0, #0
 800d728:	6923      	ldr	r3, [r4, #16]
 800d72a:	443b      	add	r3, r7
 800d72c:	6123      	str	r3, [r4, #16]
 800d72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d732:	bf00      	nop
 800d734:	0800f6a9 	.word	0x0800f6a9

0800d738 <_scanf_i>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	460c      	mov	r4, r1
 800d73e:	4698      	mov	r8, r3
 800d740:	4b72      	ldr	r3, [pc, #456]	; (800d90c <_scanf_i+0x1d4>)
 800d742:	b087      	sub	sp, #28
 800d744:	4682      	mov	sl, r0
 800d746:	4616      	mov	r6, r2
 800d748:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d74c:	ab03      	add	r3, sp, #12
 800d74e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d752:	4b6f      	ldr	r3, [pc, #444]	; (800d910 <_scanf_i+0x1d8>)
 800d754:	69a1      	ldr	r1, [r4, #24]
 800d756:	4a6f      	ldr	r2, [pc, #444]	; (800d914 <_scanf_i+0x1dc>)
 800d758:	4627      	mov	r7, r4
 800d75a:	2903      	cmp	r1, #3
 800d75c:	bf18      	it	ne
 800d75e:	461a      	movne	r2, r3
 800d760:	68a3      	ldr	r3, [r4, #8]
 800d762:	9201      	str	r2, [sp, #4]
 800d764:	1e5a      	subs	r2, r3, #1
 800d766:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d76a:	bf81      	itttt	hi
 800d76c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d770:	eb03 0905 	addhi.w	r9, r3, r5
 800d774:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d778:	60a3      	strhi	r3, [r4, #8]
 800d77a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d77e:	bf98      	it	ls
 800d780:	f04f 0900 	movls.w	r9, #0
 800d784:	463d      	mov	r5, r7
 800d786:	f04f 0b00 	mov.w	fp, #0
 800d78a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	6831      	ldr	r1, [r6, #0]
 800d792:	ab03      	add	r3, sp, #12
 800d794:	2202      	movs	r2, #2
 800d796:	7809      	ldrb	r1, [r1, #0]
 800d798:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d79c:	f7fd f821 	bl	800a7e2 <memchr>
 800d7a0:	b328      	cbz	r0, 800d7ee <_scanf_i+0xb6>
 800d7a2:	f1bb 0f01 	cmp.w	fp, #1
 800d7a6:	d159      	bne.n	800d85c <_scanf_i+0x124>
 800d7a8:	6862      	ldr	r2, [r4, #4]
 800d7aa:	b92a      	cbnz	r2, 800d7b8 <_scanf_i+0x80>
 800d7ac:	2308      	movs	r3, #8
 800d7ae:	6822      	ldr	r2, [r4, #0]
 800d7b0:	6063      	str	r3, [r4, #4]
 800d7b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7b6:	6022      	str	r2, [r4, #0]
 800d7b8:	6822      	ldr	r2, [r4, #0]
 800d7ba:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d7be:	6022      	str	r2, [r4, #0]
 800d7c0:	68a2      	ldr	r2, [r4, #8]
 800d7c2:	1e51      	subs	r1, r2, #1
 800d7c4:	60a1      	str	r1, [r4, #8]
 800d7c6:	b192      	cbz	r2, 800d7ee <_scanf_i+0xb6>
 800d7c8:	6832      	ldr	r2, [r6, #0]
 800d7ca:	1c51      	adds	r1, r2, #1
 800d7cc:	6031      	str	r1, [r6, #0]
 800d7ce:	7812      	ldrb	r2, [r2, #0]
 800d7d0:	f805 2b01 	strb.w	r2, [r5], #1
 800d7d4:	6872      	ldr	r2, [r6, #4]
 800d7d6:	3a01      	subs	r2, #1
 800d7d8:	2a00      	cmp	r2, #0
 800d7da:	6072      	str	r2, [r6, #4]
 800d7dc:	dc07      	bgt.n	800d7ee <_scanf_i+0xb6>
 800d7de:	4631      	mov	r1, r6
 800d7e0:	4650      	mov	r0, sl
 800d7e2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d7e6:	4790      	blx	r2
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	f040 8085 	bne.w	800d8f8 <_scanf_i+0x1c0>
 800d7ee:	f10b 0b01 	add.w	fp, fp, #1
 800d7f2:	f1bb 0f03 	cmp.w	fp, #3
 800d7f6:	d1cb      	bne.n	800d790 <_scanf_i+0x58>
 800d7f8:	6863      	ldr	r3, [r4, #4]
 800d7fa:	b90b      	cbnz	r3, 800d800 <_scanf_i+0xc8>
 800d7fc:	230a      	movs	r3, #10
 800d7fe:	6063      	str	r3, [r4, #4]
 800d800:	6863      	ldr	r3, [r4, #4]
 800d802:	4945      	ldr	r1, [pc, #276]	; (800d918 <_scanf_i+0x1e0>)
 800d804:	6960      	ldr	r0, [r4, #20]
 800d806:	1ac9      	subs	r1, r1, r3
 800d808:	f000 f9d9 	bl	800dbbe <__sccl>
 800d80c:	f04f 0b00 	mov.w	fp, #0
 800d810:	68a3      	ldr	r3, [r4, #8]
 800d812:	6822      	ldr	r2, [r4, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d03d      	beq.n	800d894 <_scanf_i+0x15c>
 800d818:	6831      	ldr	r1, [r6, #0]
 800d81a:	6960      	ldr	r0, [r4, #20]
 800d81c:	f891 c000 	ldrb.w	ip, [r1]
 800d820:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d824:	2800      	cmp	r0, #0
 800d826:	d035      	beq.n	800d894 <_scanf_i+0x15c>
 800d828:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d82c:	d124      	bne.n	800d878 <_scanf_i+0x140>
 800d82e:	0510      	lsls	r0, r2, #20
 800d830:	d522      	bpl.n	800d878 <_scanf_i+0x140>
 800d832:	f10b 0b01 	add.w	fp, fp, #1
 800d836:	f1b9 0f00 	cmp.w	r9, #0
 800d83a:	d003      	beq.n	800d844 <_scanf_i+0x10c>
 800d83c:	3301      	adds	r3, #1
 800d83e:	f109 39ff 	add.w	r9, r9, #4294967295
 800d842:	60a3      	str	r3, [r4, #8]
 800d844:	6873      	ldr	r3, [r6, #4]
 800d846:	3b01      	subs	r3, #1
 800d848:	2b00      	cmp	r3, #0
 800d84a:	6073      	str	r3, [r6, #4]
 800d84c:	dd1b      	ble.n	800d886 <_scanf_i+0x14e>
 800d84e:	6833      	ldr	r3, [r6, #0]
 800d850:	3301      	adds	r3, #1
 800d852:	6033      	str	r3, [r6, #0]
 800d854:	68a3      	ldr	r3, [r4, #8]
 800d856:	3b01      	subs	r3, #1
 800d858:	60a3      	str	r3, [r4, #8]
 800d85a:	e7d9      	b.n	800d810 <_scanf_i+0xd8>
 800d85c:	f1bb 0f02 	cmp.w	fp, #2
 800d860:	d1ae      	bne.n	800d7c0 <_scanf_i+0x88>
 800d862:	6822      	ldr	r2, [r4, #0]
 800d864:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d868:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d86c:	d1bf      	bne.n	800d7ee <_scanf_i+0xb6>
 800d86e:	2310      	movs	r3, #16
 800d870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d874:	6063      	str	r3, [r4, #4]
 800d876:	e7a2      	b.n	800d7be <_scanf_i+0x86>
 800d878:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d87c:	6022      	str	r2, [r4, #0]
 800d87e:	780b      	ldrb	r3, [r1, #0]
 800d880:	f805 3b01 	strb.w	r3, [r5], #1
 800d884:	e7de      	b.n	800d844 <_scanf_i+0x10c>
 800d886:	4631      	mov	r1, r6
 800d888:	4650      	mov	r0, sl
 800d88a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d88e:	4798      	blx	r3
 800d890:	2800      	cmp	r0, #0
 800d892:	d0df      	beq.n	800d854 <_scanf_i+0x11c>
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	05d9      	lsls	r1, r3, #23
 800d898:	d50d      	bpl.n	800d8b6 <_scanf_i+0x17e>
 800d89a:	42bd      	cmp	r5, r7
 800d89c:	d909      	bls.n	800d8b2 <_scanf_i+0x17a>
 800d89e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d8a2:	4632      	mov	r2, r6
 800d8a4:	4650      	mov	r0, sl
 800d8a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d8aa:	f105 39ff 	add.w	r9, r5, #4294967295
 800d8ae:	4798      	blx	r3
 800d8b0:	464d      	mov	r5, r9
 800d8b2:	42bd      	cmp	r5, r7
 800d8b4:	d028      	beq.n	800d908 <_scanf_i+0x1d0>
 800d8b6:	6822      	ldr	r2, [r4, #0]
 800d8b8:	f012 0210 	ands.w	r2, r2, #16
 800d8bc:	d113      	bne.n	800d8e6 <_scanf_i+0x1ae>
 800d8be:	702a      	strb	r2, [r5, #0]
 800d8c0:	4639      	mov	r1, r7
 800d8c2:	6863      	ldr	r3, [r4, #4]
 800d8c4:	4650      	mov	r0, sl
 800d8c6:	9e01      	ldr	r6, [sp, #4]
 800d8c8:	47b0      	blx	r6
 800d8ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d8ce:	6821      	ldr	r1, [r4, #0]
 800d8d0:	1d1a      	adds	r2, r3, #4
 800d8d2:	f8c8 2000 	str.w	r2, [r8]
 800d8d6:	f011 0f20 	tst.w	r1, #32
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	d00f      	beq.n	800d8fe <_scanf_i+0x1c6>
 800d8de:	6018      	str	r0, [r3, #0]
 800d8e0:	68e3      	ldr	r3, [r4, #12]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	60e3      	str	r3, [r4, #12]
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	6923      	ldr	r3, [r4, #16]
 800d8ea:	1bed      	subs	r5, r5, r7
 800d8ec:	445d      	add	r5, fp
 800d8ee:	442b      	add	r3, r5
 800d8f0:	6123      	str	r3, [r4, #16]
 800d8f2:	b007      	add	sp, #28
 800d8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f8:	f04f 0b00 	mov.w	fp, #0
 800d8fc:	e7ca      	b.n	800d894 <_scanf_i+0x15c>
 800d8fe:	07ca      	lsls	r2, r1, #31
 800d900:	bf4c      	ite	mi
 800d902:	8018      	strhmi	r0, [r3, #0]
 800d904:	6018      	strpl	r0, [r3, #0]
 800d906:	e7eb      	b.n	800d8e0 <_scanf_i+0x1a8>
 800d908:	2001      	movs	r0, #1
 800d90a:	e7f2      	b.n	800d8f2 <_scanf_i+0x1ba>
 800d90c:	0800f3b0 	.word	0x0800f3b0
 800d910:	0800e5b9 	.word	0x0800e5b9
 800d914:	0800cda9 	.word	0x0800cda9
 800d918:	0800f7ca 	.word	0x0800f7ca

0800d91c <__sflush_r>:
 800d91c:	898a      	ldrh	r2, [r1, #12]
 800d91e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d920:	4605      	mov	r5, r0
 800d922:	0710      	lsls	r0, r2, #28
 800d924:	460c      	mov	r4, r1
 800d926:	d457      	bmi.n	800d9d8 <__sflush_r+0xbc>
 800d928:	684b      	ldr	r3, [r1, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	dc04      	bgt.n	800d938 <__sflush_r+0x1c>
 800d92e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d930:	2b00      	cmp	r3, #0
 800d932:	dc01      	bgt.n	800d938 <__sflush_r+0x1c>
 800d934:	2000      	movs	r0, #0
 800d936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d93a:	2e00      	cmp	r6, #0
 800d93c:	d0fa      	beq.n	800d934 <__sflush_r+0x18>
 800d93e:	2300      	movs	r3, #0
 800d940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d944:	682f      	ldr	r7, [r5, #0]
 800d946:	6a21      	ldr	r1, [r4, #32]
 800d948:	602b      	str	r3, [r5, #0]
 800d94a:	d032      	beq.n	800d9b2 <__sflush_r+0x96>
 800d94c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d94e:	89a3      	ldrh	r3, [r4, #12]
 800d950:	075a      	lsls	r2, r3, #29
 800d952:	d505      	bpl.n	800d960 <__sflush_r+0x44>
 800d954:	6863      	ldr	r3, [r4, #4]
 800d956:	1ac0      	subs	r0, r0, r3
 800d958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d95a:	b10b      	cbz	r3, 800d960 <__sflush_r+0x44>
 800d95c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d95e:	1ac0      	subs	r0, r0, r3
 800d960:	2300      	movs	r3, #0
 800d962:	4602      	mov	r2, r0
 800d964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d966:	4628      	mov	r0, r5
 800d968:	6a21      	ldr	r1, [r4, #32]
 800d96a:	47b0      	blx	r6
 800d96c:	1c43      	adds	r3, r0, #1
 800d96e:	89a3      	ldrh	r3, [r4, #12]
 800d970:	d106      	bne.n	800d980 <__sflush_r+0x64>
 800d972:	6829      	ldr	r1, [r5, #0]
 800d974:	291d      	cmp	r1, #29
 800d976:	d82b      	bhi.n	800d9d0 <__sflush_r+0xb4>
 800d978:	4a28      	ldr	r2, [pc, #160]	; (800da1c <__sflush_r+0x100>)
 800d97a:	410a      	asrs	r2, r1
 800d97c:	07d6      	lsls	r6, r2, #31
 800d97e:	d427      	bmi.n	800d9d0 <__sflush_r+0xb4>
 800d980:	2200      	movs	r2, #0
 800d982:	6062      	str	r2, [r4, #4]
 800d984:	6922      	ldr	r2, [r4, #16]
 800d986:	04d9      	lsls	r1, r3, #19
 800d988:	6022      	str	r2, [r4, #0]
 800d98a:	d504      	bpl.n	800d996 <__sflush_r+0x7a>
 800d98c:	1c42      	adds	r2, r0, #1
 800d98e:	d101      	bne.n	800d994 <__sflush_r+0x78>
 800d990:	682b      	ldr	r3, [r5, #0]
 800d992:	b903      	cbnz	r3, 800d996 <__sflush_r+0x7a>
 800d994:	6560      	str	r0, [r4, #84]	; 0x54
 800d996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d998:	602f      	str	r7, [r5, #0]
 800d99a:	2900      	cmp	r1, #0
 800d99c:	d0ca      	beq.n	800d934 <__sflush_r+0x18>
 800d99e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9a2:	4299      	cmp	r1, r3
 800d9a4:	d002      	beq.n	800d9ac <__sflush_r+0x90>
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	f7fd fdca 	bl	800b540 <_free_r>
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	6360      	str	r0, [r4, #52]	; 0x34
 800d9b0:	e7c1      	b.n	800d936 <__sflush_r+0x1a>
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	47b0      	blx	r6
 800d9b8:	1c41      	adds	r1, r0, #1
 800d9ba:	d1c8      	bne.n	800d94e <__sflush_r+0x32>
 800d9bc:	682b      	ldr	r3, [r5, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d0c5      	beq.n	800d94e <__sflush_r+0x32>
 800d9c2:	2b1d      	cmp	r3, #29
 800d9c4:	d001      	beq.n	800d9ca <__sflush_r+0xae>
 800d9c6:	2b16      	cmp	r3, #22
 800d9c8:	d101      	bne.n	800d9ce <__sflush_r+0xb2>
 800d9ca:	602f      	str	r7, [r5, #0]
 800d9cc:	e7b2      	b.n	800d934 <__sflush_r+0x18>
 800d9ce:	89a3      	ldrh	r3, [r4, #12]
 800d9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9d4:	81a3      	strh	r3, [r4, #12]
 800d9d6:	e7ae      	b.n	800d936 <__sflush_r+0x1a>
 800d9d8:	690f      	ldr	r7, [r1, #16]
 800d9da:	2f00      	cmp	r7, #0
 800d9dc:	d0aa      	beq.n	800d934 <__sflush_r+0x18>
 800d9de:	0793      	lsls	r3, r2, #30
 800d9e0:	bf18      	it	ne
 800d9e2:	2300      	movne	r3, #0
 800d9e4:	680e      	ldr	r6, [r1, #0]
 800d9e6:	bf08      	it	eq
 800d9e8:	694b      	ldreq	r3, [r1, #20]
 800d9ea:	1bf6      	subs	r6, r6, r7
 800d9ec:	600f      	str	r7, [r1, #0]
 800d9ee:	608b      	str	r3, [r1, #8]
 800d9f0:	2e00      	cmp	r6, #0
 800d9f2:	dd9f      	ble.n	800d934 <__sflush_r+0x18>
 800d9f4:	4633      	mov	r3, r6
 800d9f6:	463a      	mov	r2, r7
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	6a21      	ldr	r1, [r4, #32]
 800d9fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800da00:	47e0      	blx	ip
 800da02:	2800      	cmp	r0, #0
 800da04:	dc06      	bgt.n	800da14 <__sflush_r+0xf8>
 800da06:	89a3      	ldrh	r3, [r4, #12]
 800da08:	f04f 30ff 	mov.w	r0, #4294967295
 800da0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da10:	81a3      	strh	r3, [r4, #12]
 800da12:	e790      	b.n	800d936 <__sflush_r+0x1a>
 800da14:	4407      	add	r7, r0
 800da16:	1a36      	subs	r6, r6, r0
 800da18:	e7ea      	b.n	800d9f0 <__sflush_r+0xd4>
 800da1a:	bf00      	nop
 800da1c:	dfbffffe 	.word	0xdfbffffe

0800da20 <_fflush_r>:
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	690b      	ldr	r3, [r1, #16]
 800da24:	4605      	mov	r5, r0
 800da26:	460c      	mov	r4, r1
 800da28:	b913      	cbnz	r3, 800da30 <_fflush_r+0x10>
 800da2a:	2500      	movs	r5, #0
 800da2c:	4628      	mov	r0, r5
 800da2e:	bd38      	pop	{r3, r4, r5, pc}
 800da30:	b118      	cbz	r0, 800da3a <_fflush_r+0x1a>
 800da32:	6a03      	ldr	r3, [r0, #32]
 800da34:	b90b      	cbnz	r3, 800da3a <_fflush_r+0x1a>
 800da36:	f7fc fc47 	bl	800a2c8 <__sinit>
 800da3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d0f3      	beq.n	800da2a <_fflush_r+0xa>
 800da42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da44:	07d0      	lsls	r0, r2, #31
 800da46:	d404      	bmi.n	800da52 <_fflush_r+0x32>
 800da48:	0599      	lsls	r1, r3, #22
 800da4a:	d402      	bmi.n	800da52 <_fflush_r+0x32>
 800da4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da4e:	f7fc fec6 	bl	800a7de <__retarget_lock_acquire_recursive>
 800da52:	4628      	mov	r0, r5
 800da54:	4621      	mov	r1, r4
 800da56:	f7ff ff61 	bl	800d91c <__sflush_r>
 800da5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da5c:	4605      	mov	r5, r0
 800da5e:	07da      	lsls	r2, r3, #31
 800da60:	d4e4      	bmi.n	800da2c <_fflush_r+0xc>
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	059b      	lsls	r3, r3, #22
 800da66:	d4e1      	bmi.n	800da2c <_fflush_r+0xc>
 800da68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da6a:	f7fc feb9 	bl	800a7e0 <__retarget_lock_release_recursive>
 800da6e:	e7dd      	b.n	800da2c <_fflush_r+0xc>

0800da70 <fiprintf>:
 800da70:	b40e      	push	{r1, r2, r3}
 800da72:	b503      	push	{r0, r1, lr}
 800da74:	4601      	mov	r1, r0
 800da76:	ab03      	add	r3, sp, #12
 800da78:	4805      	ldr	r0, [pc, #20]	; (800da90 <fiprintf+0x20>)
 800da7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da7e:	6800      	ldr	r0, [r0, #0]
 800da80:	9301      	str	r3, [sp, #4]
 800da82:	f7ff fce5 	bl	800d450 <_vfiprintf_r>
 800da86:	b002      	add	sp, #8
 800da88:	f85d eb04 	ldr.w	lr, [sp], #4
 800da8c:	b003      	add	sp, #12
 800da8e:	4770      	bx	lr
 800da90:	20000310 	.word	0x20000310

0800da94 <__swhatbuf_r>:
 800da94:	b570      	push	{r4, r5, r6, lr}
 800da96:	460c      	mov	r4, r1
 800da98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da9c:	4615      	mov	r5, r2
 800da9e:	2900      	cmp	r1, #0
 800daa0:	461e      	mov	r6, r3
 800daa2:	b096      	sub	sp, #88	; 0x58
 800daa4:	da0c      	bge.n	800dac0 <__swhatbuf_r+0x2c>
 800daa6:	89a3      	ldrh	r3, [r4, #12]
 800daa8:	2100      	movs	r1, #0
 800daaa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800daae:	bf0c      	ite	eq
 800dab0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dab4:	2340      	movne	r3, #64	; 0x40
 800dab6:	2000      	movs	r0, #0
 800dab8:	6031      	str	r1, [r6, #0]
 800daba:	602b      	str	r3, [r5, #0]
 800dabc:	b016      	add	sp, #88	; 0x58
 800dabe:	bd70      	pop	{r4, r5, r6, pc}
 800dac0:	466a      	mov	r2, sp
 800dac2:	f000 f919 	bl	800dcf8 <_fstat_r>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	dbed      	blt.n	800daa6 <__swhatbuf_r+0x12>
 800daca:	9901      	ldr	r1, [sp, #4]
 800dacc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dad0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dad4:	4259      	negs	r1, r3
 800dad6:	4159      	adcs	r1, r3
 800dad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dadc:	e7eb      	b.n	800dab6 <__swhatbuf_r+0x22>

0800dade <__smakebuf_r>:
 800dade:	898b      	ldrh	r3, [r1, #12]
 800dae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dae2:	079d      	lsls	r5, r3, #30
 800dae4:	4606      	mov	r6, r0
 800dae6:	460c      	mov	r4, r1
 800dae8:	d507      	bpl.n	800dafa <__smakebuf_r+0x1c>
 800daea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800daee:	6023      	str	r3, [r4, #0]
 800daf0:	6123      	str	r3, [r4, #16]
 800daf2:	2301      	movs	r3, #1
 800daf4:	6163      	str	r3, [r4, #20]
 800daf6:	b002      	add	sp, #8
 800daf8:	bd70      	pop	{r4, r5, r6, pc}
 800dafa:	466a      	mov	r2, sp
 800dafc:	ab01      	add	r3, sp, #4
 800dafe:	f7ff ffc9 	bl	800da94 <__swhatbuf_r>
 800db02:	9900      	ldr	r1, [sp, #0]
 800db04:	4605      	mov	r5, r0
 800db06:	4630      	mov	r0, r6
 800db08:	f7fd fd8a 	bl	800b620 <_malloc_r>
 800db0c:	b948      	cbnz	r0, 800db22 <__smakebuf_r+0x44>
 800db0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db12:	059a      	lsls	r2, r3, #22
 800db14:	d4ef      	bmi.n	800daf6 <__smakebuf_r+0x18>
 800db16:	f023 0303 	bic.w	r3, r3, #3
 800db1a:	f043 0302 	orr.w	r3, r3, #2
 800db1e:	81a3      	strh	r3, [r4, #12]
 800db20:	e7e3      	b.n	800daea <__smakebuf_r+0xc>
 800db22:	89a3      	ldrh	r3, [r4, #12]
 800db24:	6020      	str	r0, [r4, #0]
 800db26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db2a:	81a3      	strh	r3, [r4, #12]
 800db2c:	9b00      	ldr	r3, [sp, #0]
 800db2e:	6120      	str	r0, [r4, #16]
 800db30:	6163      	str	r3, [r4, #20]
 800db32:	9b01      	ldr	r3, [sp, #4]
 800db34:	b15b      	cbz	r3, 800db4e <__smakebuf_r+0x70>
 800db36:	4630      	mov	r0, r6
 800db38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db3c:	f000 f8ee 	bl	800dd1c <_isatty_r>
 800db40:	b128      	cbz	r0, 800db4e <__smakebuf_r+0x70>
 800db42:	89a3      	ldrh	r3, [r4, #12]
 800db44:	f023 0303 	bic.w	r3, r3, #3
 800db48:	f043 0301 	orr.w	r3, r3, #1
 800db4c:	81a3      	strh	r3, [r4, #12]
 800db4e:	89a3      	ldrh	r3, [r4, #12]
 800db50:	431d      	orrs	r5, r3
 800db52:	81a5      	strh	r5, [r4, #12]
 800db54:	e7cf      	b.n	800daf6 <__smakebuf_r+0x18>

0800db56 <_putc_r>:
 800db56:	b570      	push	{r4, r5, r6, lr}
 800db58:	460d      	mov	r5, r1
 800db5a:	4614      	mov	r4, r2
 800db5c:	4606      	mov	r6, r0
 800db5e:	b118      	cbz	r0, 800db68 <_putc_r+0x12>
 800db60:	6a03      	ldr	r3, [r0, #32]
 800db62:	b90b      	cbnz	r3, 800db68 <_putc_r+0x12>
 800db64:	f7fc fbb0 	bl	800a2c8 <__sinit>
 800db68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db6a:	07d8      	lsls	r0, r3, #31
 800db6c:	d405      	bmi.n	800db7a <_putc_r+0x24>
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	0599      	lsls	r1, r3, #22
 800db72:	d402      	bmi.n	800db7a <_putc_r+0x24>
 800db74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db76:	f7fc fe32 	bl	800a7de <__retarget_lock_acquire_recursive>
 800db7a:	68a3      	ldr	r3, [r4, #8]
 800db7c:	3b01      	subs	r3, #1
 800db7e:	2b00      	cmp	r3, #0
 800db80:	60a3      	str	r3, [r4, #8]
 800db82:	da05      	bge.n	800db90 <_putc_r+0x3a>
 800db84:	69a2      	ldr	r2, [r4, #24]
 800db86:	4293      	cmp	r3, r2
 800db88:	db12      	blt.n	800dbb0 <_putc_r+0x5a>
 800db8a:	b2eb      	uxtb	r3, r5
 800db8c:	2b0a      	cmp	r3, #10
 800db8e:	d00f      	beq.n	800dbb0 <_putc_r+0x5a>
 800db90:	6823      	ldr	r3, [r4, #0]
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	6022      	str	r2, [r4, #0]
 800db96:	701d      	strb	r5, [r3, #0]
 800db98:	b2ed      	uxtb	r5, r5
 800db9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db9c:	07da      	lsls	r2, r3, #31
 800db9e:	d405      	bmi.n	800dbac <_putc_r+0x56>
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	059b      	lsls	r3, r3, #22
 800dba4:	d402      	bmi.n	800dbac <_putc_r+0x56>
 800dba6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dba8:	f7fc fe1a 	bl	800a7e0 <__retarget_lock_release_recursive>
 800dbac:	4628      	mov	r0, r5
 800dbae:	bd70      	pop	{r4, r5, r6, pc}
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	4622      	mov	r2, r4
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f7fc fcfb 	bl	800a5b0 <__swbuf_r>
 800dbba:	4605      	mov	r5, r0
 800dbbc:	e7ed      	b.n	800db9a <_putc_r+0x44>

0800dbbe <__sccl>:
 800dbbe:	b570      	push	{r4, r5, r6, lr}
 800dbc0:	780b      	ldrb	r3, [r1, #0]
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	2b5e      	cmp	r3, #94	; 0x5e
 800dbc6:	bf0b      	itete	eq
 800dbc8:	784b      	ldrbeq	r3, [r1, #1]
 800dbca:	1c4a      	addne	r2, r1, #1
 800dbcc:	1c8a      	addeq	r2, r1, #2
 800dbce:	2100      	movne	r1, #0
 800dbd0:	bf08      	it	eq
 800dbd2:	2101      	moveq	r1, #1
 800dbd4:	3801      	subs	r0, #1
 800dbd6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dbda:	f800 1f01 	strb.w	r1, [r0, #1]!
 800dbde:	42a8      	cmp	r0, r5
 800dbe0:	d1fb      	bne.n	800dbda <__sccl+0x1c>
 800dbe2:	b90b      	cbnz	r3, 800dbe8 <__sccl+0x2a>
 800dbe4:	1e50      	subs	r0, r2, #1
 800dbe6:	bd70      	pop	{r4, r5, r6, pc}
 800dbe8:	f081 0101 	eor.w	r1, r1, #1
 800dbec:	4610      	mov	r0, r2
 800dbee:	54e1      	strb	r1, [r4, r3]
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dbf6:	2d2d      	cmp	r5, #45	; 0x2d
 800dbf8:	d005      	beq.n	800dc06 <__sccl+0x48>
 800dbfa:	2d5d      	cmp	r5, #93	; 0x5d
 800dbfc:	d016      	beq.n	800dc2c <__sccl+0x6e>
 800dbfe:	2d00      	cmp	r5, #0
 800dc00:	d0f1      	beq.n	800dbe6 <__sccl+0x28>
 800dc02:	462b      	mov	r3, r5
 800dc04:	e7f2      	b.n	800dbec <__sccl+0x2e>
 800dc06:	7846      	ldrb	r6, [r0, #1]
 800dc08:	2e5d      	cmp	r6, #93	; 0x5d
 800dc0a:	d0fa      	beq.n	800dc02 <__sccl+0x44>
 800dc0c:	42b3      	cmp	r3, r6
 800dc0e:	dcf8      	bgt.n	800dc02 <__sccl+0x44>
 800dc10:	461a      	mov	r2, r3
 800dc12:	3002      	adds	r0, #2
 800dc14:	3201      	adds	r2, #1
 800dc16:	4296      	cmp	r6, r2
 800dc18:	54a1      	strb	r1, [r4, r2]
 800dc1a:	dcfb      	bgt.n	800dc14 <__sccl+0x56>
 800dc1c:	1af2      	subs	r2, r6, r3
 800dc1e:	3a01      	subs	r2, #1
 800dc20:	42b3      	cmp	r3, r6
 800dc22:	bfa8      	it	ge
 800dc24:	2200      	movge	r2, #0
 800dc26:	1c5d      	adds	r5, r3, #1
 800dc28:	18ab      	adds	r3, r5, r2
 800dc2a:	e7e1      	b.n	800dbf0 <__sccl+0x32>
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	e7da      	b.n	800dbe6 <__sccl+0x28>

0800dc30 <__submore>:
 800dc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc34:	460c      	mov	r4, r1
 800dc36:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dc38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc3c:	4299      	cmp	r1, r3
 800dc3e:	d11b      	bne.n	800dc78 <__submore+0x48>
 800dc40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dc44:	f7fd fcec 	bl	800b620 <_malloc_r>
 800dc48:	b918      	cbnz	r0, 800dc52 <__submore+0x22>
 800dc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc56:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc58:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc5c:	6360      	str	r0, [r4, #52]	; 0x34
 800dc5e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dc62:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dc66:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dc6a:	7043      	strb	r3, [r0, #1]
 800dc6c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc70:	7003      	strb	r3, [r0, #0]
 800dc72:	6020      	str	r0, [r4, #0]
 800dc74:	2000      	movs	r0, #0
 800dc76:	e7ea      	b.n	800dc4e <__submore+0x1e>
 800dc78:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dc7a:	0077      	lsls	r7, r6, #1
 800dc7c:	463a      	mov	r2, r7
 800dc7e:	f000 fbfa 	bl	800e476 <_realloc_r>
 800dc82:	4605      	mov	r5, r0
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d0e0      	beq.n	800dc4a <__submore+0x1a>
 800dc88:	eb00 0806 	add.w	r8, r0, r6
 800dc8c:	4601      	mov	r1, r0
 800dc8e:	4632      	mov	r2, r6
 800dc90:	4640      	mov	r0, r8
 800dc92:	f7fc fdb4 	bl	800a7fe <memcpy>
 800dc96:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dc9a:	f8c4 8000 	str.w	r8, [r4]
 800dc9e:	e7e9      	b.n	800dc74 <__submore+0x44>

0800dca0 <memmove>:
 800dca0:	4288      	cmp	r0, r1
 800dca2:	b510      	push	{r4, lr}
 800dca4:	eb01 0402 	add.w	r4, r1, r2
 800dca8:	d902      	bls.n	800dcb0 <memmove+0x10>
 800dcaa:	4284      	cmp	r4, r0
 800dcac:	4623      	mov	r3, r4
 800dcae:	d807      	bhi.n	800dcc0 <memmove+0x20>
 800dcb0:	1e43      	subs	r3, r0, #1
 800dcb2:	42a1      	cmp	r1, r4
 800dcb4:	d008      	beq.n	800dcc8 <memmove+0x28>
 800dcb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcbe:	e7f8      	b.n	800dcb2 <memmove+0x12>
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	4402      	add	r2, r0
 800dcc4:	428a      	cmp	r2, r1
 800dcc6:	d100      	bne.n	800dcca <memmove+0x2a>
 800dcc8:	bd10      	pop	{r4, pc}
 800dcca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcd2:	e7f7      	b.n	800dcc4 <memmove+0x24>

0800dcd4 <strncmp>:
 800dcd4:	b510      	push	{r4, lr}
 800dcd6:	b16a      	cbz	r2, 800dcf4 <strncmp+0x20>
 800dcd8:	3901      	subs	r1, #1
 800dcda:	1884      	adds	r4, r0, r2
 800dcdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dce0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d103      	bne.n	800dcf0 <strncmp+0x1c>
 800dce8:	42a0      	cmp	r0, r4
 800dcea:	d001      	beq.n	800dcf0 <strncmp+0x1c>
 800dcec:	2a00      	cmp	r2, #0
 800dcee:	d1f5      	bne.n	800dcdc <strncmp+0x8>
 800dcf0:	1ad0      	subs	r0, r2, r3
 800dcf2:	bd10      	pop	{r4, pc}
 800dcf4:	4610      	mov	r0, r2
 800dcf6:	e7fc      	b.n	800dcf2 <strncmp+0x1e>

0800dcf8 <_fstat_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	4d06      	ldr	r5, [pc, #24]	; (800dd18 <_fstat_r+0x20>)
 800dcfe:	4604      	mov	r4, r0
 800dd00:	4608      	mov	r0, r1
 800dd02:	4611      	mov	r1, r2
 800dd04:	602b      	str	r3, [r5, #0]
 800dd06:	f7f3 ff6c 	bl	8001be2 <_fstat>
 800dd0a:	1c43      	adds	r3, r0, #1
 800dd0c:	d102      	bne.n	800dd14 <_fstat_r+0x1c>
 800dd0e:	682b      	ldr	r3, [r5, #0]
 800dd10:	b103      	cbz	r3, 800dd14 <_fstat_r+0x1c>
 800dd12:	6023      	str	r3, [r4, #0]
 800dd14:	bd38      	pop	{r3, r4, r5, pc}
 800dd16:	bf00      	nop
 800dd18:	200014b8 	.word	0x200014b8

0800dd1c <_isatty_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	2300      	movs	r3, #0
 800dd20:	4d05      	ldr	r5, [pc, #20]	; (800dd38 <_isatty_r+0x1c>)
 800dd22:	4604      	mov	r4, r0
 800dd24:	4608      	mov	r0, r1
 800dd26:	602b      	str	r3, [r5, #0]
 800dd28:	f7f3 ff6a 	bl	8001c00 <_isatty>
 800dd2c:	1c43      	adds	r3, r0, #1
 800dd2e:	d102      	bne.n	800dd36 <_isatty_r+0x1a>
 800dd30:	682b      	ldr	r3, [r5, #0]
 800dd32:	b103      	cbz	r3, 800dd36 <_isatty_r+0x1a>
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	bd38      	pop	{r3, r4, r5, pc}
 800dd38:	200014b8 	.word	0x200014b8

0800dd3c <_sbrk_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	2300      	movs	r3, #0
 800dd40:	4d05      	ldr	r5, [pc, #20]	; (800dd58 <_sbrk_r+0x1c>)
 800dd42:	4604      	mov	r4, r0
 800dd44:	4608      	mov	r0, r1
 800dd46:	602b      	str	r3, [r5, #0]
 800dd48:	f7f3 ff70 	bl	8001c2c <_sbrk>
 800dd4c:	1c43      	adds	r3, r0, #1
 800dd4e:	d102      	bne.n	800dd56 <_sbrk_r+0x1a>
 800dd50:	682b      	ldr	r3, [r5, #0]
 800dd52:	b103      	cbz	r3, 800dd56 <_sbrk_r+0x1a>
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	bd38      	pop	{r3, r4, r5, pc}
 800dd58:	200014b8 	.word	0x200014b8

0800dd5c <nan>:
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	4901      	ldr	r1, [pc, #4]	; (800dd64 <nan+0x8>)
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	7ff80000 	.word	0x7ff80000

0800dd68 <abort>:
 800dd68:	2006      	movs	r0, #6
 800dd6a:	b508      	push	{r3, lr}
 800dd6c:	f000 fc5c 	bl	800e628 <raise>
 800dd70:	2001      	movs	r0, #1
 800dd72:	f7f3 ff04 	bl	8001b7e <_exit>

0800dd76 <_calloc_r>:
 800dd76:	b570      	push	{r4, r5, r6, lr}
 800dd78:	fba1 5402 	umull	r5, r4, r1, r2
 800dd7c:	b934      	cbnz	r4, 800dd8c <_calloc_r+0x16>
 800dd7e:	4629      	mov	r1, r5
 800dd80:	f7fd fc4e 	bl	800b620 <_malloc_r>
 800dd84:	4606      	mov	r6, r0
 800dd86:	b928      	cbnz	r0, 800dd94 <_calloc_r+0x1e>
 800dd88:	4630      	mov	r0, r6
 800dd8a:	bd70      	pop	{r4, r5, r6, pc}
 800dd8c:	220c      	movs	r2, #12
 800dd8e:	2600      	movs	r6, #0
 800dd90:	6002      	str	r2, [r0, #0]
 800dd92:	e7f9      	b.n	800dd88 <_calloc_r+0x12>
 800dd94:	462a      	mov	r2, r5
 800dd96:	4621      	mov	r1, r4
 800dd98:	f7fc fca0 	bl	800a6dc <memset>
 800dd9c:	e7f4      	b.n	800dd88 <_calloc_r+0x12>

0800dd9e <rshift>:
 800dd9e:	6903      	ldr	r3, [r0, #16]
 800dda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dda4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dda8:	f100 0414 	add.w	r4, r0, #20
 800ddac:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ddb0:	dd46      	ble.n	800de40 <rshift+0xa2>
 800ddb2:	f011 011f 	ands.w	r1, r1, #31
 800ddb6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ddba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ddbe:	d10c      	bne.n	800ddda <rshift+0x3c>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f100 0710 	add.w	r7, r0, #16
 800ddc6:	42b1      	cmp	r1, r6
 800ddc8:	d335      	bcc.n	800de36 <rshift+0x98>
 800ddca:	1a9b      	subs	r3, r3, r2
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	1eea      	subs	r2, r5, #3
 800ddd0:	4296      	cmp	r6, r2
 800ddd2:	bf38      	it	cc
 800ddd4:	2300      	movcc	r3, #0
 800ddd6:	4423      	add	r3, r4
 800ddd8:	e015      	b.n	800de06 <rshift+0x68>
 800ddda:	46a1      	mov	r9, r4
 800dddc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dde0:	f1c1 0820 	rsb	r8, r1, #32
 800dde4:	40cf      	lsrs	r7, r1
 800dde6:	f105 0e04 	add.w	lr, r5, #4
 800ddea:	4576      	cmp	r6, lr
 800ddec:	46f4      	mov	ip, lr
 800ddee:	d816      	bhi.n	800de1e <rshift+0x80>
 800ddf0:	1a9a      	subs	r2, r3, r2
 800ddf2:	0092      	lsls	r2, r2, #2
 800ddf4:	3a04      	subs	r2, #4
 800ddf6:	3501      	adds	r5, #1
 800ddf8:	42ae      	cmp	r6, r5
 800ddfa:	bf38      	it	cc
 800ddfc:	2200      	movcc	r2, #0
 800ddfe:	18a3      	adds	r3, r4, r2
 800de00:	50a7      	str	r7, [r4, r2]
 800de02:	b107      	cbz	r7, 800de06 <rshift+0x68>
 800de04:	3304      	adds	r3, #4
 800de06:	42a3      	cmp	r3, r4
 800de08:	eba3 0204 	sub.w	r2, r3, r4
 800de0c:	bf08      	it	eq
 800de0e:	2300      	moveq	r3, #0
 800de10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800de14:	6102      	str	r2, [r0, #16]
 800de16:	bf08      	it	eq
 800de18:	6143      	streq	r3, [r0, #20]
 800de1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de1e:	f8dc c000 	ldr.w	ip, [ip]
 800de22:	fa0c fc08 	lsl.w	ip, ip, r8
 800de26:	ea4c 0707 	orr.w	r7, ip, r7
 800de2a:	f849 7b04 	str.w	r7, [r9], #4
 800de2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de32:	40cf      	lsrs	r7, r1
 800de34:	e7d9      	b.n	800ddea <rshift+0x4c>
 800de36:	f851 cb04 	ldr.w	ip, [r1], #4
 800de3a:	f847 cf04 	str.w	ip, [r7, #4]!
 800de3e:	e7c2      	b.n	800ddc6 <rshift+0x28>
 800de40:	4623      	mov	r3, r4
 800de42:	e7e0      	b.n	800de06 <rshift+0x68>

0800de44 <__hexdig_fun>:
 800de44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800de48:	2b09      	cmp	r3, #9
 800de4a:	d802      	bhi.n	800de52 <__hexdig_fun+0xe>
 800de4c:	3820      	subs	r0, #32
 800de4e:	b2c0      	uxtb	r0, r0
 800de50:	4770      	bx	lr
 800de52:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800de56:	2b05      	cmp	r3, #5
 800de58:	d801      	bhi.n	800de5e <__hexdig_fun+0x1a>
 800de5a:	3847      	subs	r0, #71	; 0x47
 800de5c:	e7f7      	b.n	800de4e <__hexdig_fun+0xa>
 800de5e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800de62:	2b05      	cmp	r3, #5
 800de64:	d801      	bhi.n	800de6a <__hexdig_fun+0x26>
 800de66:	3827      	subs	r0, #39	; 0x27
 800de68:	e7f1      	b.n	800de4e <__hexdig_fun+0xa>
 800de6a:	2000      	movs	r0, #0
 800de6c:	4770      	bx	lr
	...

0800de70 <__gethex>:
 800de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de74:	4681      	mov	r9, r0
 800de76:	468a      	mov	sl, r1
 800de78:	4617      	mov	r7, r2
 800de7a:	680a      	ldr	r2, [r1, #0]
 800de7c:	b085      	sub	sp, #20
 800de7e:	f102 0b02 	add.w	fp, r2, #2
 800de82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de8a:	9302      	str	r3, [sp, #8]
 800de8c:	32fe      	adds	r2, #254	; 0xfe
 800de8e:	eb02 030b 	add.w	r3, r2, fp
 800de92:	46d8      	mov	r8, fp
 800de94:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	2830      	cmp	r0, #48	; 0x30
 800de9c:	d0f7      	beq.n	800de8e <__gethex+0x1e>
 800de9e:	f7ff ffd1 	bl	800de44 <__hexdig_fun>
 800dea2:	4604      	mov	r4, r0
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d138      	bne.n	800df1a <__gethex+0xaa>
 800dea8:	2201      	movs	r2, #1
 800deaa:	4640      	mov	r0, r8
 800deac:	49a7      	ldr	r1, [pc, #668]	; (800e14c <__gethex+0x2dc>)
 800deae:	f7ff ff11 	bl	800dcd4 <strncmp>
 800deb2:	4606      	mov	r6, r0
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d169      	bne.n	800df8c <__gethex+0x11c>
 800deb8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800debc:	465d      	mov	r5, fp
 800debe:	f7ff ffc1 	bl	800de44 <__hexdig_fun>
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d064      	beq.n	800df90 <__gethex+0x120>
 800dec6:	465a      	mov	r2, fp
 800dec8:	7810      	ldrb	r0, [r2, #0]
 800deca:	4690      	mov	r8, r2
 800decc:	2830      	cmp	r0, #48	; 0x30
 800dece:	f102 0201 	add.w	r2, r2, #1
 800ded2:	d0f9      	beq.n	800dec8 <__gethex+0x58>
 800ded4:	f7ff ffb6 	bl	800de44 <__hexdig_fun>
 800ded8:	2301      	movs	r3, #1
 800deda:	fab0 f480 	clz	r4, r0
 800dede:	465e      	mov	r6, fp
 800dee0:	0964      	lsrs	r4, r4, #5
 800dee2:	9301      	str	r3, [sp, #4]
 800dee4:	4642      	mov	r2, r8
 800dee6:	4615      	mov	r5, r2
 800dee8:	7828      	ldrb	r0, [r5, #0]
 800deea:	3201      	adds	r2, #1
 800deec:	f7ff ffaa 	bl	800de44 <__hexdig_fun>
 800def0:	2800      	cmp	r0, #0
 800def2:	d1f8      	bne.n	800dee6 <__gethex+0x76>
 800def4:	2201      	movs	r2, #1
 800def6:	4628      	mov	r0, r5
 800def8:	4994      	ldr	r1, [pc, #592]	; (800e14c <__gethex+0x2dc>)
 800defa:	f7ff feeb 	bl	800dcd4 <strncmp>
 800defe:	b978      	cbnz	r0, 800df20 <__gethex+0xb0>
 800df00:	b946      	cbnz	r6, 800df14 <__gethex+0xa4>
 800df02:	1c6e      	adds	r6, r5, #1
 800df04:	4632      	mov	r2, r6
 800df06:	4615      	mov	r5, r2
 800df08:	7828      	ldrb	r0, [r5, #0]
 800df0a:	3201      	adds	r2, #1
 800df0c:	f7ff ff9a 	bl	800de44 <__hexdig_fun>
 800df10:	2800      	cmp	r0, #0
 800df12:	d1f8      	bne.n	800df06 <__gethex+0x96>
 800df14:	1b73      	subs	r3, r6, r5
 800df16:	009e      	lsls	r6, r3, #2
 800df18:	e004      	b.n	800df24 <__gethex+0xb4>
 800df1a:	2400      	movs	r4, #0
 800df1c:	4626      	mov	r6, r4
 800df1e:	e7e1      	b.n	800dee4 <__gethex+0x74>
 800df20:	2e00      	cmp	r6, #0
 800df22:	d1f7      	bne.n	800df14 <__gethex+0xa4>
 800df24:	782b      	ldrb	r3, [r5, #0]
 800df26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df2a:	2b50      	cmp	r3, #80	; 0x50
 800df2c:	d13d      	bne.n	800dfaa <__gethex+0x13a>
 800df2e:	786b      	ldrb	r3, [r5, #1]
 800df30:	2b2b      	cmp	r3, #43	; 0x2b
 800df32:	d02f      	beq.n	800df94 <__gethex+0x124>
 800df34:	2b2d      	cmp	r3, #45	; 0x2d
 800df36:	d031      	beq.n	800df9c <__gethex+0x12c>
 800df38:	f04f 0b00 	mov.w	fp, #0
 800df3c:	1c69      	adds	r1, r5, #1
 800df3e:	7808      	ldrb	r0, [r1, #0]
 800df40:	f7ff ff80 	bl	800de44 <__hexdig_fun>
 800df44:	1e42      	subs	r2, r0, #1
 800df46:	b2d2      	uxtb	r2, r2
 800df48:	2a18      	cmp	r2, #24
 800df4a:	d82e      	bhi.n	800dfaa <__gethex+0x13a>
 800df4c:	f1a0 0210 	sub.w	r2, r0, #16
 800df50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df54:	f7ff ff76 	bl	800de44 <__hexdig_fun>
 800df58:	f100 3cff 	add.w	ip, r0, #4294967295
 800df5c:	fa5f fc8c 	uxtb.w	ip, ip
 800df60:	f1bc 0f18 	cmp.w	ip, #24
 800df64:	d91d      	bls.n	800dfa2 <__gethex+0x132>
 800df66:	f1bb 0f00 	cmp.w	fp, #0
 800df6a:	d000      	beq.n	800df6e <__gethex+0xfe>
 800df6c:	4252      	negs	r2, r2
 800df6e:	4416      	add	r6, r2
 800df70:	f8ca 1000 	str.w	r1, [sl]
 800df74:	b1dc      	cbz	r4, 800dfae <__gethex+0x13e>
 800df76:	9b01      	ldr	r3, [sp, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	bf14      	ite	ne
 800df7c:	f04f 0800 	movne.w	r8, #0
 800df80:	f04f 0806 	moveq.w	r8, #6
 800df84:	4640      	mov	r0, r8
 800df86:	b005      	add	sp, #20
 800df88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df8c:	4645      	mov	r5, r8
 800df8e:	4626      	mov	r6, r4
 800df90:	2401      	movs	r4, #1
 800df92:	e7c7      	b.n	800df24 <__gethex+0xb4>
 800df94:	f04f 0b00 	mov.w	fp, #0
 800df98:	1ca9      	adds	r1, r5, #2
 800df9a:	e7d0      	b.n	800df3e <__gethex+0xce>
 800df9c:	f04f 0b01 	mov.w	fp, #1
 800dfa0:	e7fa      	b.n	800df98 <__gethex+0x128>
 800dfa2:	230a      	movs	r3, #10
 800dfa4:	fb03 0002 	mla	r0, r3, r2, r0
 800dfa8:	e7d0      	b.n	800df4c <__gethex+0xdc>
 800dfaa:	4629      	mov	r1, r5
 800dfac:	e7e0      	b.n	800df70 <__gethex+0x100>
 800dfae:	4621      	mov	r1, r4
 800dfb0:	eba5 0308 	sub.w	r3, r5, r8
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	2b07      	cmp	r3, #7
 800dfb8:	dc0a      	bgt.n	800dfd0 <__gethex+0x160>
 800dfba:	4648      	mov	r0, r9
 800dfbc:	f7fd fbbc 	bl	800b738 <_Balloc>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	b940      	cbnz	r0, 800dfd6 <__gethex+0x166>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	21e4      	movs	r1, #228	; 0xe4
 800dfc8:	4b61      	ldr	r3, [pc, #388]	; (800e150 <__gethex+0x2e0>)
 800dfca:	4862      	ldr	r0, [pc, #392]	; (800e154 <__gethex+0x2e4>)
 800dfcc:	f7fc fc2a 	bl	800a824 <__assert_func>
 800dfd0:	3101      	adds	r1, #1
 800dfd2:	105b      	asrs	r3, r3, #1
 800dfd4:	e7ef      	b.n	800dfb6 <__gethex+0x146>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	469b      	mov	fp, r3
 800dfda:	f100 0a14 	add.w	sl, r0, #20
 800dfde:	f8cd a004 	str.w	sl, [sp, #4]
 800dfe2:	45a8      	cmp	r8, r5
 800dfe4:	d344      	bcc.n	800e070 <__gethex+0x200>
 800dfe6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dfea:	4658      	mov	r0, fp
 800dfec:	f848 bb04 	str.w	fp, [r8], #4
 800dff0:	eba8 080a 	sub.w	r8, r8, sl
 800dff4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800dff8:	6122      	str	r2, [r4, #16]
 800dffa:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800dffe:	f7fd fc8d 	bl	800b91c <__hi0bits>
 800e002:	683d      	ldr	r5, [r7, #0]
 800e004:	eba8 0800 	sub.w	r8, r8, r0
 800e008:	45a8      	cmp	r8, r5
 800e00a:	dd59      	ble.n	800e0c0 <__gethex+0x250>
 800e00c:	eba8 0805 	sub.w	r8, r8, r5
 800e010:	4641      	mov	r1, r8
 800e012:	4620      	mov	r0, r4
 800e014:	f7fe f80b 	bl	800c02e <__any_on>
 800e018:	4683      	mov	fp, r0
 800e01a:	b1b8      	cbz	r0, 800e04c <__gethex+0x1dc>
 800e01c:	f04f 0b01 	mov.w	fp, #1
 800e020:	f108 33ff 	add.w	r3, r8, #4294967295
 800e024:	1159      	asrs	r1, r3, #5
 800e026:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e02a:	f003 021f 	and.w	r2, r3, #31
 800e02e:	fa0b f202 	lsl.w	r2, fp, r2
 800e032:	420a      	tst	r2, r1
 800e034:	d00a      	beq.n	800e04c <__gethex+0x1dc>
 800e036:	455b      	cmp	r3, fp
 800e038:	dd06      	ble.n	800e048 <__gethex+0x1d8>
 800e03a:	4620      	mov	r0, r4
 800e03c:	f1a8 0102 	sub.w	r1, r8, #2
 800e040:	f7fd fff5 	bl	800c02e <__any_on>
 800e044:	2800      	cmp	r0, #0
 800e046:	d138      	bne.n	800e0ba <__gethex+0x24a>
 800e048:	f04f 0b02 	mov.w	fp, #2
 800e04c:	4641      	mov	r1, r8
 800e04e:	4620      	mov	r0, r4
 800e050:	f7ff fea5 	bl	800dd9e <rshift>
 800e054:	4446      	add	r6, r8
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	42b3      	cmp	r3, r6
 800e05a:	da41      	bge.n	800e0e0 <__gethex+0x270>
 800e05c:	4621      	mov	r1, r4
 800e05e:	4648      	mov	r0, r9
 800e060:	f7fd fbaa 	bl	800b7b8 <_Bfree>
 800e064:	2300      	movs	r3, #0
 800e066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e068:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e06c:	6013      	str	r3, [r2, #0]
 800e06e:	e789      	b.n	800df84 <__gethex+0x114>
 800e070:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e074:	2a2e      	cmp	r2, #46	; 0x2e
 800e076:	d014      	beq.n	800e0a2 <__gethex+0x232>
 800e078:	2b20      	cmp	r3, #32
 800e07a:	d106      	bne.n	800e08a <__gethex+0x21a>
 800e07c:	9b01      	ldr	r3, [sp, #4]
 800e07e:	f843 bb04 	str.w	fp, [r3], #4
 800e082:	f04f 0b00 	mov.w	fp, #0
 800e086:	9301      	str	r3, [sp, #4]
 800e088:	465b      	mov	r3, fp
 800e08a:	7828      	ldrb	r0, [r5, #0]
 800e08c:	9303      	str	r3, [sp, #12]
 800e08e:	f7ff fed9 	bl	800de44 <__hexdig_fun>
 800e092:	9b03      	ldr	r3, [sp, #12]
 800e094:	f000 000f 	and.w	r0, r0, #15
 800e098:	4098      	lsls	r0, r3
 800e09a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e09e:	3304      	adds	r3, #4
 800e0a0:	e79f      	b.n	800dfe2 <__gethex+0x172>
 800e0a2:	45a8      	cmp	r8, r5
 800e0a4:	d8e8      	bhi.n	800e078 <__gethex+0x208>
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	4928      	ldr	r1, [pc, #160]	; (800e14c <__gethex+0x2dc>)
 800e0ac:	9303      	str	r3, [sp, #12]
 800e0ae:	f7ff fe11 	bl	800dcd4 <strncmp>
 800e0b2:	9b03      	ldr	r3, [sp, #12]
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d1df      	bne.n	800e078 <__gethex+0x208>
 800e0b8:	e793      	b.n	800dfe2 <__gethex+0x172>
 800e0ba:	f04f 0b03 	mov.w	fp, #3
 800e0be:	e7c5      	b.n	800e04c <__gethex+0x1dc>
 800e0c0:	da0b      	bge.n	800e0da <__gethex+0x26a>
 800e0c2:	eba5 0808 	sub.w	r8, r5, r8
 800e0c6:	4621      	mov	r1, r4
 800e0c8:	4642      	mov	r2, r8
 800e0ca:	4648      	mov	r0, r9
 800e0cc:	f7fd fd8c 	bl	800bbe8 <__lshift>
 800e0d0:	4604      	mov	r4, r0
 800e0d2:	eba6 0608 	sub.w	r6, r6, r8
 800e0d6:	f100 0a14 	add.w	sl, r0, #20
 800e0da:	f04f 0b00 	mov.w	fp, #0
 800e0de:	e7ba      	b.n	800e056 <__gethex+0x1e6>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	42b3      	cmp	r3, r6
 800e0e4:	dd74      	ble.n	800e1d0 <__gethex+0x360>
 800e0e6:	1b9e      	subs	r6, r3, r6
 800e0e8:	42b5      	cmp	r5, r6
 800e0ea:	dc35      	bgt.n	800e158 <__gethex+0x2e8>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d023      	beq.n	800e13a <__gethex+0x2ca>
 800e0f2:	2b03      	cmp	r3, #3
 800e0f4:	d025      	beq.n	800e142 <__gethex+0x2d2>
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d115      	bne.n	800e126 <__gethex+0x2b6>
 800e0fa:	42b5      	cmp	r5, r6
 800e0fc:	d113      	bne.n	800e126 <__gethex+0x2b6>
 800e0fe:	2d01      	cmp	r5, #1
 800e100:	d10b      	bne.n	800e11a <__gethex+0x2aa>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	9a02      	ldr	r2, [sp, #8]
 800e106:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e10a:	6013      	str	r3, [r2, #0]
 800e10c:	2301      	movs	r3, #1
 800e10e:	6123      	str	r3, [r4, #16]
 800e110:	f8ca 3000 	str.w	r3, [sl]
 800e114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e116:	601c      	str	r4, [r3, #0]
 800e118:	e734      	b.n	800df84 <__gethex+0x114>
 800e11a:	4620      	mov	r0, r4
 800e11c:	1e69      	subs	r1, r5, #1
 800e11e:	f7fd ff86 	bl	800c02e <__any_on>
 800e122:	2800      	cmp	r0, #0
 800e124:	d1ed      	bne.n	800e102 <__gethex+0x292>
 800e126:	4621      	mov	r1, r4
 800e128:	4648      	mov	r0, r9
 800e12a:	f7fd fb45 	bl	800b7b8 <_Bfree>
 800e12e:	2300      	movs	r3, #0
 800e130:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e132:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e136:	6013      	str	r3, [r2, #0]
 800e138:	e724      	b.n	800df84 <__gethex+0x114>
 800e13a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1f2      	bne.n	800e126 <__gethex+0x2b6>
 800e140:	e7df      	b.n	800e102 <__gethex+0x292>
 800e142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e144:	2b00      	cmp	r3, #0
 800e146:	d1dc      	bne.n	800e102 <__gethex+0x292>
 800e148:	e7ed      	b.n	800e126 <__gethex+0x2b6>
 800e14a:	bf00      	nop
 800e14c:	0800f654 	.word	0x0800f654
 800e150:	0800f4e9 	.word	0x0800f4e9
 800e154:	0800f7dd 	.word	0x0800f7dd
 800e158:	f106 38ff 	add.w	r8, r6, #4294967295
 800e15c:	f1bb 0f00 	cmp.w	fp, #0
 800e160:	d133      	bne.n	800e1ca <__gethex+0x35a>
 800e162:	f1b8 0f00 	cmp.w	r8, #0
 800e166:	d004      	beq.n	800e172 <__gethex+0x302>
 800e168:	4641      	mov	r1, r8
 800e16a:	4620      	mov	r0, r4
 800e16c:	f7fd ff5f 	bl	800c02e <__any_on>
 800e170:	4683      	mov	fp, r0
 800e172:	2301      	movs	r3, #1
 800e174:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e178:	f008 081f 	and.w	r8, r8, #31
 800e17c:	fa03 f308 	lsl.w	r3, r3, r8
 800e180:	f04f 0802 	mov.w	r8, #2
 800e184:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e188:	4631      	mov	r1, r6
 800e18a:	4213      	tst	r3, r2
 800e18c:	4620      	mov	r0, r4
 800e18e:	bf18      	it	ne
 800e190:	f04b 0b02 	orrne.w	fp, fp, #2
 800e194:	1bad      	subs	r5, r5, r6
 800e196:	f7ff fe02 	bl	800dd9e <rshift>
 800e19a:	687e      	ldr	r6, [r7, #4]
 800e19c:	f1bb 0f00 	cmp.w	fp, #0
 800e1a0:	d04a      	beq.n	800e238 <__gethex+0x3c8>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d016      	beq.n	800e1d6 <__gethex+0x366>
 800e1a8:	2b03      	cmp	r3, #3
 800e1aa:	d018      	beq.n	800e1de <__gethex+0x36e>
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d109      	bne.n	800e1c4 <__gethex+0x354>
 800e1b0:	f01b 0f02 	tst.w	fp, #2
 800e1b4:	d006      	beq.n	800e1c4 <__gethex+0x354>
 800e1b6:	f8da 3000 	ldr.w	r3, [sl]
 800e1ba:	ea4b 0b03 	orr.w	fp, fp, r3
 800e1be:	f01b 0f01 	tst.w	fp, #1
 800e1c2:	d10f      	bne.n	800e1e4 <__gethex+0x374>
 800e1c4:	f048 0810 	orr.w	r8, r8, #16
 800e1c8:	e036      	b.n	800e238 <__gethex+0x3c8>
 800e1ca:	f04f 0b01 	mov.w	fp, #1
 800e1ce:	e7d0      	b.n	800e172 <__gethex+0x302>
 800e1d0:	f04f 0801 	mov.w	r8, #1
 800e1d4:	e7e2      	b.n	800e19c <__gethex+0x32c>
 800e1d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1d8:	f1c3 0301 	rsb	r3, r3, #1
 800e1dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d0ef      	beq.n	800e1c4 <__gethex+0x354>
 800e1e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e1e8:	f104 0214 	add.w	r2, r4, #20
 800e1ec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e1f0:	9301      	str	r3, [sp, #4]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e1f8:	4694      	mov	ip, r2
 800e1fa:	f852 1b04 	ldr.w	r1, [r2], #4
 800e1fe:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e202:	d01e      	beq.n	800e242 <__gethex+0x3d2>
 800e204:	3101      	adds	r1, #1
 800e206:	f8cc 1000 	str.w	r1, [ip]
 800e20a:	f1b8 0f02 	cmp.w	r8, #2
 800e20e:	f104 0214 	add.w	r2, r4, #20
 800e212:	d13d      	bne.n	800e290 <__gethex+0x420>
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	3b01      	subs	r3, #1
 800e218:	42ab      	cmp	r3, r5
 800e21a:	d10b      	bne.n	800e234 <__gethex+0x3c4>
 800e21c:	2301      	movs	r3, #1
 800e21e:	1169      	asrs	r1, r5, #5
 800e220:	f005 051f 	and.w	r5, r5, #31
 800e224:	fa03 f505 	lsl.w	r5, r3, r5
 800e228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e22c:	421d      	tst	r5, r3
 800e22e:	bf18      	it	ne
 800e230:	f04f 0801 	movne.w	r8, #1
 800e234:	f048 0820 	orr.w	r8, r8, #32
 800e238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e23a:	601c      	str	r4, [r3, #0]
 800e23c:	9b02      	ldr	r3, [sp, #8]
 800e23e:	601e      	str	r6, [r3, #0]
 800e240:	e6a0      	b.n	800df84 <__gethex+0x114>
 800e242:	4290      	cmp	r0, r2
 800e244:	f842 3c04 	str.w	r3, [r2, #-4]
 800e248:	d8d6      	bhi.n	800e1f8 <__gethex+0x388>
 800e24a:	68a2      	ldr	r2, [r4, #8]
 800e24c:	4593      	cmp	fp, r2
 800e24e:	db17      	blt.n	800e280 <__gethex+0x410>
 800e250:	6861      	ldr	r1, [r4, #4]
 800e252:	4648      	mov	r0, r9
 800e254:	3101      	adds	r1, #1
 800e256:	f7fd fa6f 	bl	800b738 <_Balloc>
 800e25a:	4682      	mov	sl, r0
 800e25c:	b918      	cbnz	r0, 800e266 <__gethex+0x3f6>
 800e25e:	4602      	mov	r2, r0
 800e260:	2184      	movs	r1, #132	; 0x84
 800e262:	4b1a      	ldr	r3, [pc, #104]	; (800e2cc <__gethex+0x45c>)
 800e264:	e6b1      	b.n	800dfca <__gethex+0x15a>
 800e266:	6922      	ldr	r2, [r4, #16]
 800e268:	f104 010c 	add.w	r1, r4, #12
 800e26c:	3202      	adds	r2, #2
 800e26e:	0092      	lsls	r2, r2, #2
 800e270:	300c      	adds	r0, #12
 800e272:	f7fc fac4 	bl	800a7fe <memcpy>
 800e276:	4621      	mov	r1, r4
 800e278:	4648      	mov	r0, r9
 800e27a:	f7fd fa9d 	bl	800b7b8 <_Bfree>
 800e27e:	4654      	mov	r4, sl
 800e280:	6922      	ldr	r2, [r4, #16]
 800e282:	1c51      	adds	r1, r2, #1
 800e284:	6121      	str	r1, [r4, #16]
 800e286:	2101      	movs	r1, #1
 800e288:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e28c:	6151      	str	r1, [r2, #20]
 800e28e:	e7bc      	b.n	800e20a <__gethex+0x39a>
 800e290:	6921      	ldr	r1, [r4, #16]
 800e292:	4559      	cmp	r1, fp
 800e294:	dd0b      	ble.n	800e2ae <__gethex+0x43e>
 800e296:	2101      	movs	r1, #1
 800e298:	4620      	mov	r0, r4
 800e29a:	f7ff fd80 	bl	800dd9e <rshift>
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	3601      	adds	r6, #1
 800e2a2:	42b3      	cmp	r3, r6
 800e2a4:	f6ff aeda 	blt.w	800e05c <__gethex+0x1ec>
 800e2a8:	f04f 0801 	mov.w	r8, #1
 800e2ac:	e7c2      	b.n	800e234 <__gethex+0x3c4>
 800e2ae:	f015 051f 	ands.w	r5, r5, #31
 800e2b2:	d0f9      	beq.n	800e2a8 <__gethex+0x438>
 800e2b4:	9b01      	ldr	r3, [sp, #4]
 800e2b6:	f1c5 0520 	rsb	r5, r5, #32
 800e2ba:	441a      	add	r2, r3
 800e2bc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e2c0:	f7fd fb2c 	bl	800b91c <__hi0bits>
 800e2c4:	42a8      	cmp	r0, r5
 800e2c6:	dbe6      	blt.n	800e296 <__gethex+0x426>
 800e2c8:	e7ee      	b.n	800e2a8 <__gethex+0x438>
 800e2ca:	bf00      	nop
 800e2cc:	0800f4e9 	.word	0x0800f4e9

0800e2d0 <L_shift>:
 800e2d0:	f1c2 0208 	rsb	r2, r2, #8
 800e2d4:	0092      	lsls	r2, r2, #2
 800e2d6:	b570      	push	{r4, r5, r6, lr}
 800e2d8:	f1c2 0620 	rsb	r6, r2, #32
 800e2dc:	6843      	ldr	r3, [r0, #4]
 800e2de:	6804      	ldr	r4, [r0, #0]
 800e2e0:	fa03 f506 	lsl.w	r5, r3, r6
 800e2e4:	432c      	orrs	r4, r5
 800e2e6:	40d3      	lsrs	r3, r2
 800e2e8:	6004      	str	r4, [r0, #0]
 800e2ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2ee:	4288      	cmp	r0, r1
 800e2f0:	d3f4      	bcc.n	800e2dc <L_shift+0xc>
 800e2f2:	bd70      	pop	{r4, r5, r6, pc}

0800e2f4 <__match>:
 800e2f4:	b530      	push	{r4, r5, lr}
 800e2f6:	6803      	ldr	r3, [r0, #0]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2fe:	b914      	cbnz	r4, 800e306 <__match+0x12>
 800e300:	6003      	str	r3, [r0, #0]
 800e302:	2001      	movs	r0, #1
 800e304:	bd30      	pop	{r4, r5, pc}
 800e306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e30a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e30e:	2d19      	cmp	r5, #25
 800e310:	bf98      	it	ls
 800e312:	3220      	addls	r2, #32
 800e314:	42a2      	cmp	r2, r4
 800e316:	d0f0      	beq.n	800e2fa <__match+0x6>
 800e318:	2000      	movs	r0, #0
 800e31a:	e7f3      	b.n	800e304 <__match+0x10>

0800e31c <__hexnan>:
 800e31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e320:	2500      	movs	r5, #0
 800e322:	680b      	ldr	r3, [r1, #0]
 800e324:	4682      	mov	sl, r0
 800e326:	115e      	asrs	r6, r3, #5
 800e328:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e32c:	f013 031f 	ands.w	r3, r3, #31
 800e330:	bf18      	it	ne
 800e332:	3604      	addne	r6, #4
 800e334:	1f37      	subs	r7, r6, #4
 800e336:	4690      	mov	r8, r2
 800e338:	46b9      	mov	r9, r7
 800e33a:	463c      	mov	r4, r7
 800e33c:	46ab      	mov	fp, r5
 800e33e:	b087      	sub	sp, #28
 800e340:	6801      	ldr	r1, [r0, #0]
 800e342:	9301      	str	r3, [sp, #4]
 800e344:	f846 5c04 	str.w	r5, [r6, #-4]
 800e348:	9502      	str	r5, [sp, #8]
 800e34a:	784a      	ldrb	r2, [r1, #1]
 800e34c:	1c4b      	adds	r3, r1, #1
 800e34e:	9303      	str	r3, [sp, #12]
 800e350:	b342      	cbz	r2, 800e3a4 <__hexnan+0x88>
 800e352:	4610      	mov	r0, r2
 800e354:	9105      	str	r1, [sp, #20]
 800e356:	9204      	str	r2, [sp, #16]
 800e358:	f7ff fd74 	bl	800de44 <__hexdig_fun>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d14f      	bne.n	800e400 <__hexnan+0xe4>
 800e360:	9a04      	ldr	r2, [sp, #16]
 800e362:	9905      	ldr	r1, [sp, #20]
 800e364:	2a20      	cmp	r2, #32
 800e366:	d818      	bhi.n	800e39a <__hexnan+0x7e>
 800e368:	9b02      	ldr	r3, [sp, #8]
 800e36a:	459b      	cmp	fp, r3
 800e36c:	dd13      	ble.n	800e396 <__hexnan+0x7a>
 800e36e:	454c      	cmp	r4, r9
 800e370:	d206      	bcs.n	800e380 <__hexnan+0x64>
 800e372:	2d07      	cmp	r5, #7
 800e374:	dc04      	bgt.n	800e380 <__hexnan+0x64>
 800e376:	462a      	mov	r2, r5
 800e378:	4649      	mov	r1, r9
 800e37a:	4620      	mov	r0, r4
 800e37c:	f7ff ffa8 	bl	800e2d0 <L_shift>
 800e380:	4544      	cmp	r4, r8
 800e382:	d950      	bls.n	800e426 <__hexnan+0x10a>
 800e384:	2300      	movs	r3, #0
 800e386:	f1a4 0904 	sub.w	r9, r4, #4
 800e38a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e38e:	461d      	mov	r5, r3
 800e390:	464c      	mov	r4, r9
 800e392:	f8cd b008 	str.w	fp, [sp, #8]
 800e396:	9903      	ldr	r1, [sp, #12]
 800e398:	e7d7      	b.n	800e34a <__hexnan+0x2e>
 800e39a:	2a29      	cmp	r2, #41	; 0x29
 800e39c:	d155      	bne.n	800e44a <__hexnan+0x12e>
 800e39e:	3102      	adds	r1, #2
 800e3a0:	f8ca 1000 	str.w	r1, [sl]
 800e3a4:	f1bb 0f00 	cmp.w	fp, #0
 800e3a8:	d04f      	beq.n	800e44a <__hexnan+0x12e>
 800e3aa:	454c      	cmp	r4, r9
 800e3ac:	d206      	bcs.n	800e3bc <__hexnan+0xa0>
 800e3ae:	2d07      	cmp	r5, #7
 800e3b0:	dc04      	bgt.n	800e3bc <__hexnan+0xa0>
 800e3b2:	462a      	mov	r2, r5
 800e3b4:	4649      	mov	r1, r9
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f7ff ff8a 	bl	800e2d0 <L_shift>
 800e3bc:	4544      	cmp	r4, r8
 800e3be:	d934      	bls.n	800e42a <__hexnan+0x10e>
 800e3c0:	4623      	mov	r3, r4
 800e3c2:	f1a8 0204 	sub.w	r2, r8, #4
 800e3c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800e3ca:	429f      	cmp	r7, r3
 800e3cc:	f842 1f04 	str.w	r1, [r2, #4]!
 800e3d0:	d2f9      	bcs.n	800e3c6 <__hexnan+0xaa>
 800e3d2:	1b3b      	subs	r3, r7, r4
 800e3d4:	f023 0303 	bic.w	r3, r3, #3
 800e3d8:	3304      	adds	r3, #4
 800e3da:	3e03      	subs	r6, #3
 800e3dc:	3401      	adds	r4, #1
 800e3de:	42a6      	cmp	r6, r4
 800e3e0:	bf38      	it	cc
 800e3e2:	2304      	movcc	r3, #4
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	4443      	add	r3, r8
 800e3e8:	f843 2b04 	str.w	r2, [r3], #4
 800e3ec:	429f      	cmp	r7, r3
 800e3ee:	d2fb      	bcs.n	800e3e8 <__hexnan+0xcc>
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	b91b      	cbnz	r3, 800e3fc <__hexnan+0xe0>
 800e3f4:	4547      	cmp	r7, r8
 800e3f6:	d126      	bne.n	800e446 <__hexnan+0x12a>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	603b      	str	r3, [r7, #0]
 800e3fc:	2005      	movs	r0, #5
 800e3fe:	e025      	b.n	800e44c <__hexnan+0x130>
 800e400:	3501      	adds	r5, #1
 800e402:	2d08      	cmp	r5, #8
 800e404:	f10b 0b01 	add.w	fp, fp, #1
 800e408:	dd06      	ble.n	800e418 <__hexnan+0xfc>
 800e40a:	4544      	cmp	r4, r8
 800e40c:	d9c3      	bls.n	800e396 <__hexnan+0x7a>
 800e40e:	2300      	movs	r3, #0
 800e410:	2501      	movs	r5, #1
 800e412:	f844 3c04 	str.w	r3, [r4, #-4]
 800e416:	3c04      	subs	r4, #4
 800e418:	6822      	ldr	r2, [r4, #0]
 800e41a:	f000 000f 	and.w	r0, r0, #15
 800e41e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e422:	6020      	str	r0, [r4, #0]
 800e424:	e7b7      	b.n	800e396 <__hexnan+0x7a>
 800e426:	2508      	movs	r5, #8
 800e428:	e7b5      	b.n	800e396 <__hexnan+0x7a>
 800e42a:	9b01      	ldr	r3, [sp, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d0df      	beq.n	800e3f0 <__hexnan+0xd4>
 800e430:	f04f 32ff 	mov.w	r2, #4294967295
 800e434:	f1c3 0320 	rsb	r3, r3, #32
 800e438:	40da      	lsrs	r2, r3
 800e43a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e43e:	4013      	ands	r3, r2
 800e440:	f846 3c04 	str.w	r3, [r6, #-4]
 800e444:	e7d4      	b.n	800e3f0 <__hexnan+0xd4>
 800e446:	3f04      	subs	r7, #4
 800e448:	e7d2      	b.n	800e3f0 <__hexnan+0xd4>
 800e44a:	2004      	movs	r0, #4
 800e44c:	b007      	add	sp, #28
 800e44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e452 <__ascii_mbtowc>:
 800e452:	b082      	sub	sp, #8
 800e454:	b901      	cbnz	r1, 800e458 <__ascii_mbtowc+0x6>
 800e456:	a901      	add	r1, sp, #4
 800e458:	b142      	cbz	r2, 800e46c <__ascii_mbtowc+0x1a>
 800e45a:	b14b      	cbz	r3, 800e470 <__ascii_mbtowc+0x1e>
 800e45c:	7813      	ldrb	r3, [r2, #0]
 800e45e:	600b      	str	r3, [r1, #0]
 800e460:	7812      	ldrb	r2, [r2, #0]
 800e462:	1e10      	subs	r0, r2, #0
 800e464:	bf18      	it	ne
 800e466:	2001      	movne	r0, #1
 800e468:	b002      	add	sp, #8
 800e46a:	4770      	bx	lr
 800e46c:	4610      	mov	r0, r2
 800e46e:	e7fb      	b.n	800e468 <__ascii_mbtowc+0x16>
 800e470:	f06f 0001 	mvn.w	r0, #1
 800e474:	e7f8      	b.n	800e468 <__ascii_mbtowc+0x16>

0800e476 <_realloc_r>:
 800e476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e47a:	4680      	mov	r8, r0
 800e47c:	4614      	mov	r4, r2
 800e47e:	460e      	mov	r6, r1
 800e480:	b921      	cbnz	r1, 800e48c <_realloc_r+0x16>
 800e482:	4611      	mov	r1, r2
 800e484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e488:	f7fd b8ca 	b.w	800b620 <_malloc_r>
 800e48c:	b92a      	cbnz	r2, 800e49a <_realloc_r+0x24>
 800e48e:	f7fd f857 	bl	800b540 <_free_r>
 800e492:	4625      	mov	r5, r4
 800e494:	4628      	mov	r0, r5
 800e496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e49a:	f000 f8e1 	bl	800e660 <_malloc_usable_size_r>
 800e49e:	4284      	cmp	r4, r0
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	d802      	bhi.n	800e4aa <_realloc_r+0x34>
 800e4a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4a8:	d812      	bhi.n	800e4d0 <_realloc_r+0x5a>
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4640      	mov	r0, r8
 800e4ae:	f7fd f8b7 	bl	800b620 <_malloc_r>
 800e4b2:	4605      	mov	r5, r0
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d0ed      	beq.n	800e494 <_realloc_r+0x1e>
 800e4b8:	42bc      	cmp	r4, r7
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	4631      	mov	r1, r6
 800e4be:	bf28      	it	cs
 800e4c0:	463a      	movcs	r2, r7
 800e4c2:	f7fc f99c 	bl	800a7fe <memcpy>
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	4640      	mov	r0, r8
 800e4ca:	f7fd f839 	bl	800b540 <_free_r>
 800e4ce:	e7e1      	b.n	800e494 <_realloc_r+0x1e>
 800e4d0:	4635      	mov	r5, r6
 800e4d2:	e7df      	b.n	800e494 <_realloc_r+0x1e>

0800e4d4 <_strtoul_l.constprop.0>:
 800e4d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4d8:	4686      	mov	lr, r0
 800e4da:	460d      	mov	r5, r1
 800e4dc:	4f35      	ldr	r7, [pc, #212]	; (800e5b4 <_strtoul_l.constprop.0+0xe0>)
 800e4de:	4628      	mov	r0, r5
 800e4e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4e4:	5d3e      	ldrb	r6, [r7, r4]
 800e4e6:	f016 0608 	ands.w	r6, r6, #8
 800e4ea:	d1f8      	bne.n	800e4de <_strtoul_l.constprop.0+0xa>
 800e4ec:	2c2d      	cmp	r4, #45	; 0x2d
 800e4ee:	d130      	bne.n	800e552 <_strtoul_l.constprop.0+0x7e>
 800e4f0:	2601      	movs	r6, #1
 800e4f2:	782c      	ldrb	r4, [r5, #0]
 800e4f4:	1c85      	adds	r5, r0, #2
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d057      	beq.n	800e5aa <_strtoul_l.constprop.0+0xd6>
 800e4fa:	2b10      	cmp	r3, #16
 800e4fc:	d109      	bne.n	800e512 <_strtoul_l.constprop.0+0x3e>
 800e4fe:	2c30      	cmp	r4, #48	; 0x30
 800e500:	d107      	bne.n	800e512 <_strtoul_l.constprop.0+0x3e>
 800e502:	7828      	ldrb	r0, [r5, #0]
 800e504:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e508:	2858      	cmp	r0, #88	; 0x58
 800e50a:	d149      	bne.n	800e5a0 <_strtoul_l.constprop.0+0xcc>
 800e50c:	2310      	movs	r3, #16
 800e50e:	786c      	ldrb	r4, [r5, #1]
 800e510:	3502      	adds	r5, #2
 800e512:	f04f 38ff 	mov.w	r8, #4294967295
 800e516:	fbb8 f8f3 	udiv	r8, r8, r3
 800e51a:	2700      	movs	r7, #0
 800e51c:	fb03 f908 	mul.w	r9, r3, r8
 800e520:	4638      	mov	r0, r7
 800e522:	ea6f 0909 	mvn.w	r9, r9
 800e526:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e52a:	f1bc 0f09 	cmp.w	ip, #9
 800e52e:	d815      	bhi.n	800e55c <_strtoul_l.constprop.0+0x88>
 800e530:	4664      	mov	r4, ip
 800e532:	42a3      	cmp	r3, r4
 800e534:	dd23      	ble.n	800e57e <_strtoul_l.constprop.0+0xaa>
 800e536:	f1b7 3fff 	cmp.w	r7, #4294967295
 800e53a:	d007      	beq.n	800e54c <_strtoul_l.constprop.0+0x78>
 800e53c:	4580      	cmp	r8, r0
 800e53e:	d31b      	bcc.n	800e578 <_strtoul_l.constprop.0+0xa4>
 800e540:	d101      	bne.n	800e546 <_strtoul_l.constprop.0+0x72>
 800e542:	45a1      	cmp	r9, r4
 800e544:	db18      	blt.n	800e578 <_strtoul_l.constprop.0+0xa4>
 800e546:	2701      	movs	r7, #1
 800e548:	fb00 4003 	mla	r0, r0, r3, r4
 800e54c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e550:	e7e9      	b.n	800e526 <_strtoul_l.constprop.0+0x52>
 800e552:	2c2b      	cmp	r4, #43	; 0x2b
 800e554:	bf04      	itt	eq
 800e556:	782c      	ldrbeq	r4, [r5, #0]
 800e558:	1c85      	addeq	r5, r0, #2
 800e55a:	e7cc      	b.n	800e4f6 <_strtoul_l.constprop.0+0x22>
 800e55c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e560:	f1bc 0f19 	cmp.w	ip, #25
 800e564:	d801      	bhi.n	800e56a <_strtoul_l.constprop.0+0x96>
 800e566:	3c37      	subs	r4, #55	; 0x37
 800e568:	e7e3      	b.n	800e532 <_strtoul_l.constprop.0+0x5e>
 800e56a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e56e:	f1bc 0f19 	cmp.w	ip, #25
 800e572:	d804      	bhi.n	800e57e <_strtoul_l.constprop.0+0xaa>
 800e574:	3c57      	subs	r4, #87	; 0x57
 800e576:	e7dc      	b.n	800e532 <_strtoul_l.constprop.0+0x5e>
 800e578:	f04f 37ff 	mov.w	r7, #4294967295
 800e57c:	e7e6      	b.n	800e54c <_strtoul_l.constprop.0+0x78>
 800e57e:	1c7b      	adds	r3, r7, #1
 800e580:	d106      	bne.n	800e590 <_strtoul_l.constprop.0+0xbc>
 800e582:	2322      	movs	r3, #34	; 0x22
 800e584:	4638      	mov	r0, r7
 800e586:	f8ce 3000 	str.w	r3, [lr]
 800e58a:	b932      	cbnz	r2, 800e59a <_strtoul_l.constprop.0+0xc6>
 800e58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e590:	b106      	cbz	r6, 800e594 <_strtoul_l.constprop.0+0xc0>
 800e592:	4240      	negs	r0, r0
 800e594:	2a00      	cmp	r2, #0
 800e596:	d0f9      	beq.n	800e58c <_strtoul_l.constprop.0+0xb8>
 800e598:	b107      	cbz	r7, 800e59c <_strtoul_l.constprop.0+0xc8>
 800e59a:	1e69      	subs	r1, r5, #1
 800e59c:	6011      	str	r1, [r2, #0]
 800e59e:	e7f5      	b.n	800e58c <_strtoul_l.constprop.0+0xb8>
 800e5a0:	2430      	movs	r4, #48	; 0x30
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1b5      	bne.n	800e512 <_strtoul_l.constprop.0+0x3e>
 800e5a6:	2308      	movs	r3, #8
 800e5a8:	e7b3      	b.n	800e512 <_strtoul_l.constprop.0+0x3e>
 800e5aa:	2c30      	cmp	r4, #48	; 0x30
 800e5ac:	d0a9      	beq.n	800e502 <_strtoul_l.constprop.0+0x2e>
 800e5ae:	230a      	movs	r3, #10
 800e5b0:	e7af      	b.n	800e512 <_strtoul_l.constprop.0+0x3e>
 800e5b2:	bf00      	nop
 800e5b4:	0800f6a9 	.word	0x0800f6a9

0800e5b8 <_strtoul_r>:
 800e5b8:	f7ff bf8c 	b.w	800e4d4 <_strtoul_l.constprop.0>

0800e5bc <__ascii_wctomb>:
 800e5bc:	4603      	mov	r3, r0
 800e5be:	4608      	mov	r0, r1
 800e5c0:	b141      	cbz	r1, 800e5d4 <__ascii_wctomb+0x18>
 800e5c2:	2aff      	cmp	r2, #255	; 0xff
 800e5c4:	d904      	bls.n	800e5d0 <__ascii_wctomb+0x14>
 800e5c6:	228a      	movs	r2, #138	; 0x8a
 800e5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5cc:	601a      	str	r2, [r3, #0]
 800e5ce:	4770      	bx	lr
 800e5d0:	2001      	movs	r0, #1
 800e5d2:	700a      	strb	r2, [r1, #0]
 800e5d4:	4770      	bx	lr

0800e5d6 <_raise_r>:
 800e5d6:	291f      	cmp	r1, #31
 800e5d8:	b538      	push	{r3, r4, r5, lr}
 800e5da:	4604      	mov	r4, r0
 800e5dc:	460d      	mov	r5, r1
 800e5de:	d904      	bls.n	800e5ea <_raise_r+0x14>
 800e5e0:	2316      	movs	r3, #22
 800e5e2:	6003      	str	r3, [r0, #0]
 800e5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e5ec:	b112      	cbz	r2, 800e5f4 <_raise_r+0x1e>
 800e5ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5f2:	b94b      	cbnz	r3, 800e608 <_raise_r+0x32>
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f000 f831 	bl	800e65c <_getpid_r>
 800e5fa:	462a      	mov	r2, r5
 800e5fc:	4601      	mov	r1, r0
 800e5fe:	4620      	mov	r0, r4
 800e600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e604:	f000 b818 	b.w	800e638 <_kill_r>
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d00a      	beq.n	800e622 <_raise_r+0x4c>
 800e60c:	1c59      	adds	r1, r3, #1
 800e60e:	d103      	bne.n	800e618 <_raise_r+0x42>
 800e610:	2316      	movs	r3, #22
 800e612:	6003      	str	r3, [r0, #0]
 800e614:	2001      	movs	r0, #1
 800e616:	e7e7      	b.n	800e5e8 <_raise_r+0x12>
 800e618:	2400      	movs	r4, #0
 800e61a:	4628      	mov	r0, r5
 800e61c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e620:	4798      	blx	r3
 800e622:	2000      	movs	r0, #0
 800e624:	e7e0      	b.n	800e5e8 <_raise_r+0x12>
	...

0800e628 <raise>:
 800e628:	4b02      	ldr	r3, [pc, #8]	; (800e634 <raise+0xc>)
 800e62a:	4601      	mov	r1, r0
 800e62c:	6818      	ldr	r0, [r3, #0]
 800e62e:	f7ff bfd2 	b.w	800e5d6 <_raise_r>
 800e632:	bf00      	nop
 800e634:	20000310 	.word	0x20000310

0800e638 <_kill_r>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	2300      	movs	r3, #0
 800e63c:	4d06      	ldr	r5, [pc, #24]	; (800e658 <_kill_r+0x20>)
 800e63e:	4604      	mov	r4, r0
 800e640:	4608      	mov	r0, r1
 800e642:	4611      	mov	r1, r2
 800e644:	602b      	str	r3, [r5, #0]
 800e646:	f7f3 fa8a 	bl	8001b5e <_kill>
 800e64a:	1c43      	adds	r3, r0, #1
 800e64c:	d102      	bne.n	800e654 <_kill_r+0x1c>
 800e64e:	682b      	ldr	r3, [r5, #0]
 800e650:	b103      	cbz	r3, 800e654 <_kill_r+0x1c>
 800e652:	6023      	str	r3, [r4, #0]
 800e654:	bd38      	pop	{r3, r4, r5, pc}
 800e656:	bf00      	nop
 800e658:	200014b8 	.word	0x200014b8

0800e65c <_getpid_r>:
 800e65c:	f7f3 ba78 	b.w	8001b50 <_getpid>

0800e660 <_malloc_usable_size_r>:
 800e660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e664:	1f18      	subs	r0, r3, #4
 800e666:	2b00      	cmp	r3, #0
 800e668:	bfbc      	itt	lt
 800e66a:	580b      	ldrlt	r3, [r1, r0]
 800e66c:	18c0      	addlt	r0, r0, r3
 800e66e:	4770      	bx	lr

0800e670 <_init>:
 800e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e672:	bf00      	nop
 800e674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e676:	bc08      	pop	{r3}
 800e678:	469e      	mov	lr, r3
 800e67a:	4770      	bx	lr

0800e67c <_fini>:
 800e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67e:	bf00      	nop
 800e680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e682:	bc08      	pop	{r3}
 800e684:	469e      	mov	lr, r3
 800e686:	4770      	bx	lr
